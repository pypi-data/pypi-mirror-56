"Main interface for medialive type defs"
from __future__ import annotations

from typing import Any, Dict, List
from typing_extensions import TypedDict


__all__ = (
    "ChannelCreatedWaitWaiterConfigTypeDef",
    "ChannelDeletedWaitWaiterConfigTypeDef",
    "ChannelRunningWaitWaiterConfigTypeDef",
    "ChannelStoppedWaitWaiterConfigTypeDef",
    "ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef",
    "ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef",
    "ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsScte35SpliceInsertSettingsTypeDef",
    "ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef",
    "ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef",
    "ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsStaticImageDeactivateSettingsTypeDef",
    "ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsTypeDef",
    "ClientBatchUpdateScheduleCreatesScheduleActionsTypeDef",
    "ClientBatchUpdateScheduleCreatesTypeDef",
    "ClientBatchUpdateScheduleDeletesTypeDef",
    "ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef",
    "ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef",
    "ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef",
    "ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef",
    "ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsTypeDef",
    "ClientBatchUpdateScheduleResponseCreatesScheduleActionsTypeDef",
    "ClientBatchUpdateScheduleResponseCreatesTypeDef",
    "ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef",
    "ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef",
    "ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef",
    "ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef",
    "ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsTypeDef",
    "ClientBatchUpdateScheduleResponseDeletesScheduleActionsTypeDef",
    "ClientBatchUpdateScheduleResponseDeletesTypeDef",
    "ClientBatchUpdateScheduleResponseTypeDef",
    "ClientCreateChannelDestinationsTypeDef",
    "ClientCreateChannelEncoderSettingsAvailBlankingTypeDef",
    "ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef",
    "ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef",
    "ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsTypeDef",
    "ClientCreateChannelEncoderSettingsAvailConfigurationTypeDef",
    "ClientCreateChannelEncoderSettingsBlackoutSlateTypeDef",
    "ClientCreateChannelEncoderSettingsGlobalConfigurationInputLossBehaviorTypeDef",
    "ClientCreateChannelEncoderSettingsGlobalConfigurationTypeDef",
    "ClientCreateChannelEncoderSettingsTypeDef",
    "ClientCreateChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    "ClientCreateChannelInputAttachmentsInputSettingsTypeDef",
    "ClientCreateChannelInputAttachmentsTypeDef",
    "ClientCreateChannelResponseChannelEgressEndpointsTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsAvailBlankingTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsBlackoutSlateTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsTypeDef",
    "ClientCreateChannelResponseChannelEncoderSettingsTypeDef",
    "ClientCreateChannelResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    "ClientCreateChannelResponseChannelInputAttachmentsInputSettingsTypeDef",
    "ClientCreateChannelResponseChannelInputAttachmentsTypeDef",
    "ClientCreateChannelResponseChannelInputSpecificationTypeDef",
    "ClientCreateChannelResponseChannelPipelineDetailsTypeDef",
    "ClientCreateChannelResponseChannelTypeDef",
    "ClientCreateChannelResponseTypeDef",
    "ClientCreateInputDestinationsTypeDef",
    "ClientCreateInputResponseInputDestinationsVpcTypeDef",
    "ClientCreateInputResponseInputDestinationsTypeDef",
    "ClientCreateInputResponseInputMediaConnectFlowsTypeDef",
    "ClientCreateInputResponseInputSourcesTypeDef",
    "ClientCreateInputResponseInputTypeDef",
    "ClientCreateInputResponseTypeDef",
    "ClientCreateInputSecurityGroupResponseSecurityGroupWhitelistRulesTypeDef",
    "ClientCreateInputSecurityGroupResponseSecurityGroupTypeDef",
    "ClientCreateInputSecurityGroupResponseTypeDef",
    "ClientCreateInputSecurityGroupWhitelistRulesTypeDef",
    "ClientDeleteChannelResponseEgressEndpointsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsAvailBlankingTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsAvailConfigurationTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsBlackoutSlateTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsTypeDef",
    "ClientDeleteChannelResponseEncoderSettingsTypeDef",
    "ClientDeleteChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    "ClientDeleteChannelResponseInputAttachmentsInputSettingsTypeDef",
    "ClientDeleteChannelResponseInputAttachmentsTypeDef",
    "ClientDeleteChannelResponseInputSpecificationTypeDef",
    "ClientDeleteChannelResponsePipelineDetailsTypeDef",
    "ClientDeleteChannelResponseTypeDef",
    "ClientDeleteReservationResponseResourceSpecificationTypeDef",
    "ClientDeleteReservationResponseTypeDef",
    "ClientDescribeChannelResponseEgressEndpointsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsAvailBlankingTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsAvailConfigurationTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsBlackoutSlateTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsTypeDef",
    "ClientDescribeChannelResponseEncoderSettingsTypeDef",
    "ClientDescribeChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    "ClientDescribeChannelResponseInputAttachmentsInputSettingsTypeDef",
    "ClientDescribeChannelResponseInputAttachmentsTypeDef",
    "ClientDescribeChannelResponseInputSpecificationTypeDef",
    "ClientDescribeChannelResponsePipelineDetailsTypeDef",
    "ClientDescribeChannelResponseTypeDef",
    "ClientDescribeInputResponseDestinationsVpcTypeDef",
    "ClientDescribeInputResponseDestinationsTypeDef",
    "ClientDescribeInputResponseMediaConnectFlowsTypeDef",
    "ClientDescribeInputResponseSourcesTypeDef",
    "ClientDescribeInputResponseTypeDef",
    "ClientDescribeInputSecurityGroupResponseWhitelistRulesTypeDef",
    "ClientDescribeInputSecurityGroupResponseTypeDef",
    "ClientDescribeOfferingResponseResourceSpecificationTypeDef",
    "ClientDescribeOfferingResponseTypeDef",
    "ClientDescribeReservationResponseResourceSpecificationTypeDef",
    "ClientDescribeReservationResponseTypeDef",
    "ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef",
    "ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef",
    "ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef",
    "ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef",
    "ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsTypeDef",
    "ClientDescribeScheduleResponseScheduleActionsTypeDef",
    "ClientDescribeScheduleResponseTypeDef",
    "ClientListChannelsResponseChannelsEgressEndpointsTypeDef",
    "ClientListChannelsResponseChannelsInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    "ClientListChannelsResponseChannelsInputAttachmentsInputSettingsTypeDef",
    "ClientListChannelsResponseChannelsInputAttachmentsTypeDef",
    "ClientListChannelsResponseChannelsInputSpecificationTypeDef",
    "ClientListChannelsResponseChannelsTypeDef",
    "ClientListChannelsResponseTypeDef",
    "ClientListInputSecurityGroupsResponseInputSecurityGroupsWhitelistRulesTypeDef",
    "ClientListInputSecurityGroupsResponseInputSecurityGroupsTypeDef",
    "ClientListInputSecurityGroupsResponseTypeDef",
    "ClientListInputsResponseInputsDestinationsVpcTypeDef",
    "ClientListInputsResponseInputsDestinationsTypeDef",
    "ClientListInputsResponseInputsMediaConnectFlowsTypeDef",
    "ClientListInputsResponseInputsSourcesTypeDef",
    "ClientListInputsResponseInputsTypeDef",
    "ClientListInputsResponseTypeDef",
    "ClientListOfferingsResponseOfferingsResourceSpecificationTypeDef",
    "ClientListOfferingsResponseOfferingsTypeDef",
    "ClientListOfferingsResponseTypeDef",
    "ClientListReservationsResponseReservationsResourceSpecificationTypeDef",
    "ClientListReservationsResponseReservationsTypeDef",
    "ClientListReservationsResponseTypeDef",
    "ClientListTagsForResourceResponseTypeDef",
    "ClientPurchaseOfferingResponseReservationResourceSpecificationTypeDef",
    "ClientPurchaseOfferingResponseReservationTypeDef",
    "ClientPurchaseOfferingResponseTypeDef",
    "ClientStartChannelResponseEgressEndpointsTypeDef",
    "ClientStartChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef",
    "ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef",
    "ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef",
    "ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef",
    "ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef",
    "ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef",
    "ClientStartChannelResponseEncoderSettingsAudioDescriptionsTypeDef",
    "ClientStartChannelResponseEncoderSettingsAvailBlankingTypeDef",
    "ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef",
    "ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef",
    "ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef",
    "ClientStartChannelResponseEncoderSettingsAvailConfigurationTypeDef",
    "ClientStartChannelResponseEncoderSettingsBlackoutSlateTypeDef",
    "ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef",
    "ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef",
    "ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef",
    "ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef",
    "ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef",
    "ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef",
    "ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef",
    "ClientStartChannelResponseEncoderSettingsVideoDescriptionsTypeDef",
    "ClientStartChannelResponseEncoderSettingsTypeDef",
    "ClientStartChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    "ClientStartChannelResponseInputAttachmentsInputSettingsTypeDef",
    "ClientStartChannelResponseInputAttachmentsTypeDef",
    "ClientStartChannelResponseInputSpecificationTypeDef",
    "ClientStartChannelResponsePipelineDetailsTypeDef",
    "ClientStartChannelResponseTypeDef",
    "ClientStopChannelResponseEgressEndpointsTypeDef",
    "ClientStopChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef",
    "ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef",
    "ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef",
    "ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef",
    "ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef",
    "ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef",
    "ClientStopChannelResponseEncoderSettingsAudioDescriptionsTypeDef",
    "ClientStopChannelResponseEncoderSettingsAvailBlankingTypeDef",
    "ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef",
    "ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef",
    "ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef",
    "ClientStopChannelResponseEncoderSettingsAvailConfigurationTypeDef",
    "ClientStopChannelResponseEncoderSettingsBlackoutSlateTypeDef",
    "ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef",
    "ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef",
    "ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef",
    "ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef",
    "ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef",
    "ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef",
    "ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef",
    "ClientStopChannelResponseEncoderSettingsVideoDescriptionsTypeDef",
    "ClientStopChannelResponseEncoderSettingsTypeDef",
    "ClientStopChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    "ClientStopChannelResponseInputAttachmentsInputSettingsTypeDef",
    "ClientStopChannelResponseInputAttachmentsTypeDef",
    "ClientStopChannelResponseInputSpecificationTypeDef",
    "ClientStopChannelResponsePipelineDetailsTypeDef",
    "ClientStopChannelResponseTypeDef",
    "ClientUpdateChannelClassDestinationsTypeDef",
    "ClientUpdateChannelClassResponseChannelEgressEndpointsTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsAvailBlankingTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsBlackoutSlateTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsTypeDef",
    "ClientUpdateChannelClassResponseChannelEncoderSettingsTypeDef",
    "ClientUpdateChannelClassResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    "ClientUpdateChannelClassResponseChannelInputAttachmentsInputSettingsTypeDef",
    "ClientUpdateChannelClassResponseChannelInputAttachmentsTypeDef",
    "ClientUpdateChannelClassResponseChannelInputSpecificationTypeDef",
    "ClientUpdateChannelClassResponseChannelPipelineDetailsTypeDef",
    "ClientUpdateChannelClassResponseChannelTypeDef",
    "ClientUpdateChannelClassResponseTypeDef",
    "ClientUpdateChannelDestinationsTypeDef",
    "ClientUpdateChannelEncoderSettingsAvailBlankingTypeDef",
    "ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef",
    "ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef",
    "ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsTypeDef",
    "ClientUpdateChannelEncoderSettingsAvailConfigurationTypeDef",
    "ClientUpdateChannelEncoderSettingsBlackoutSlateTypeDef",
    "ClientUpdateChannelEncoderSettingsGlobalConfigurationInputLossBehaviorTypeDef",
    "ClientUpdateChannelEncoderSettingsGlobalConfigurationTypeDef",
    "ClientUpdateChannelEncoderSettingsTypeDef",
    "ClientUpdateChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    "ClientUpdateChannelInputAttachmentsInputSettingsTypeDef",
    "ClientUpdateChannelInputAttachmentsTypeDef",
    "ClientUpdateChannelResponseChannelEgressEndpointsTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsAvailBlankingTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsBlackoutSlateTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsTypeDef",
    "ClientUpdateChannelResponseChannelEncoderSettingsTypeDef",
    "ClientUpdateChannelResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    "ClientUpdateChannelResponseChannelInputAttachmentsInputSettingsTypeDef",
    "ClientUpdateChannelResponseChannelInputAttachmentsTypeDef",
    "ClientUpdateChannelResponseChannelInputSpecificationTypeDef",
    "ClientUpdateChannelResponseChannelPipelineDetailsTypeDef",
    "ClientUpdateChannelResponseChannelTypeDef",
    "ClientUpdateChannelResponseTypeDef",
    "ClientUpdateInputDestinationsTypeDef",
    "ClientUpdateInputResponseInputDestinationsVpcTypeDef",
    "ClientUpdateInputResponseInputDestinationsTypeDef",
    "ClientUpdateInputResponseInputMediaConnectFlowsTypeDef",
    "ClientUpdateInputResponseInputSourcesTypeDef",
    "ClientUpdateInputResponseInputTypeDef",
    "ClientUpdateInputResponseTypeDef",
    "ClientUpdateInputSecurityGroupResponseSecurityGroupWhitelistRulesTypeDef",
    "ClientUpdateInputSecurityGroupResponseSecurityGroupTypeDef",
    "ClientUpdateInputSecurityGroupResponseTypeDef",
    "ClientUpdateInputSecurityGroupWhitelistRulesTypeDef",
    "ClientUpdateReservationResponseReservationResourceSpecificationTypeDef",
    "ClientUpdateReservationResponseReservationTypeDef",
    "ClientUpdateReservationResponseTypeDef",
    "DescribeSchedulePaginatePaginationConfigTypeDef",
    "DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef",
    "DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef",
    "DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef",
    "DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef",
    "DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsTypeDef",
    "DescribeSchedulePaginateResponseScheduleActionsTypeDef",
    "DescribeSchedulePaginateResponseTypeDef",
    "ListChannelsPaginatePaginationConfigTypeDef",
    "ListChannelsPaginateResponseChannelsEgressEndpointsTypeDef",
    "ListChannelsPaginateResponseChannelsInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    "ListChannelsPaginateResponseChannelsInputAttachmentsInputSettingsTypeDef",
    "ListChannelsPaginateResponseChannelsInputAttachmentsTypeDef",
    "ListChannelsPaginateResponseChannelsInputSpecificationTypeDef",
    "ListChannelsPaginateResponseChannelsTypeDef",
    "ListChannelsPaginateResponseTypeDef",
    "ListInputSecurityGroupsPaginatePaginationConfigTypeDef",
    "ListInputSecurityGroupsPaginateResponseInputSecurityGroupsWhitelistRulesTypeDef",
    "ListInputSecurityGroupsPaginateResponseInputSecurityGroupsTypeDef",
    "ListInputSecurityGroupsPaginateResponseTypeDef",
    "ListInputsPaginatePaginationConfigTypeDef",
    "ListInputsPaginateResponseInputsDestinationsVpcTypeDef",
    "ListInputsPaginateResponseInputsDestinationsTypeDef",
    "ListInputsPaginateResponseInputsMediaConnectFlowsTypeDef",
    "ListInputsPaginateResponseInputsSourcesTypeDef",
    "ListInputsPaginateResponseInputsTypeDef",
    "ListInputsPaginateResponseTypeDef",
    "ListOfferingsPaginatePaginationConfigTypeDef",
    "ListOfferingsPaginateResponseOfferingsResourceSpecificationTypeDef",
    "ListOfferingsPaginateResponseOfferingsTypeDef",
    "ListOfferingsPaginateResponseTypeDef",
    "ListReservationsPaginatePaginationConfigTypeDef",
    "ListReservationsPaginateResponseReservationsResourceSpecificationTypeDef",
    "ListReservationsPaginateResponseReservationsTypeDef",
    "ListReservationsPaginateResponseTypeDef",
)


_ChannelCreatedWaitWaiterConfigTypeDef = TypedDict(
    "_ChannelCreatedWaitWaiterConfigTypeDef",
    {"Delay": int, "MaxAttempts": int},
    total=False,
)


class ChannelCreatedWaitWaiterConfigTypeDef(_ChannelCreatedWaitWaiterConfigTypeDef):
    """
    Type definition for `ChannelCreatedWait` `WaiterConfig`

    A dictionary that provides parameters to control waiting behavior.

    - **Delay** *(integer) --*

      The amount of time in seconds to wait between attempts. Default: 3

    - **MaxAttempts** *(integer) --*

      The maximum number of attempts to be made. Default: 5
    """


_ChannelDeletedWaitWaiterConfigTypeDef = TypedDict(
    "_ChannelDeletedWaitWaiterConfigTypeDef",
    {"Delay": int, "MaxAttempts": int},
    total=False,
)


class ChannelDeletedWaitWaiterConfigTypeDef(_ChannelDeletedWaitWaiterConfigTypeDef):
    """
    Type definition for `ChannelDeletedWait` `WaiterConfig`

    A dictionary that provides parameters to control waiting behavior.

    - **Delay** *(integer) --*

      The amount of time in seconds to wait between attempts. Default: 5

    - **MaxAttempts** *(integer) --*

      The maximum number of attempts to be made. Default: 20
    """


_ChannelRunningWaitWaiterConfigTypeDef = TypedDict(
    "_ChannelRunningWaitWaiterConfigTypeDef",
    {"Delay": int, "MaxAttempts": int},
    total=False,
)


class ChannelRunningWaitWaiterConfigTypeDef(_ChannelRunningWaitWaiterConfigTypeDef):
    """
    Type definition for `ChannelRunningWait` `WaiterConfig`

    A dictionary that provides parameters to control waiting behavior.

    - **Delay** *(integer) --*

      The amount of time in seconds to wait between attempts. Default: 5

    - **MaxAttempts** *(integer) --*

      The maximum number of attempts to be made. Default: 120
    """


_ChannelStoppedWaitWaiterConfigTypeDef = TypedDict(
    "_ChannelStoppedWaitWaiterConfigTypeDef",
    {"Delay": int, "MaxAttempts": int},
    total=False,
)


class ChannelStoppedWaitWaiterConfigTypeDef(_ChannelStoppedWaitWaiterConfigTypeDef):
    """
    Type definition for `ChannelStoppedWait` `WaiterConfig`

    A dictionary that provides parameters to control waiting behavior.

    - **Delay** *(integer) --*

      The amount of time in seconds to wait between attempts. Default: 5

    - **MaxAttempts** *(integer) --*

      The maximum number of attempts to be made. Default: 28
    """


_ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef",
    {"Id3": str},
)


class ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef(
    _ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettings` `HlsTimedMetadataSettings`

    - **Id3** *(string) --* **[REQUIRED]** Base64 string formatted according to the ID3
    specification: http://id3.org/id3v2.4.0-structure
    """


_RequiredClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef = TypedDict(
    "_RequiredClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef",
    {"InputAttachmentNameReference": str},
)
_OptionalClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef = TypedDict(
    "_OptionalClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef",
    {"InputClippingSettings": Dict[str, Any], "UrlPath": List[Any]},
    total=False,
)


class ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef(
    _RequiredClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef,
    _OptionalClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef,
):
    """
    Type definition for `ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettings` `InputSwitchSettings`

    - **InputAttachmentNameReference** *(string) --* **[REQUIRED]** The name of the input
    attachment (not the name of the input!) to switch to. The name is specified in the
    channel configuration.

    - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
    input, in order to set up the input to ingest only a portion of the file.

      - **InputTimecodeSource** *(string) --* **[REQUIRED]** The source of the timecodes in
      the source being clipped.

      - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

        - **Timecode** *(string) --* The timecode for the frame where you want to start the
        clip. Optional; if not specified, the clip starts at first frame in the file. Enter
        the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

      - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

        - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
        input (in order to clip the file), you can specify if you want the clip to exclude
        (the default) or include the frame specified by the timecode.

        - **Timecode** *(string) --* The timecode for the frame where you want to stop the
        clip. Optional; if not specified, the clip continues to the end of the file. Enter
        the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

    - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic
    input, for this instance of the input. Each time you use the same dynamic input in an
    input switch action, you can provide a different value, in order to connect the input to
    a different content source.

      - *(string) --* Placeholder documentation for __string
    """


_RequiredClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsScte35SpliceInsertSettingsTypeDef = TypedDict(
    "_RequiredClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsScte35SpliceInsertSettingsTypeDef",
    {"SpliceEventId": int},
)
_OptionalClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsScte35SpliceInsertSettingsTypeDef = TypedDict(
    "_OptionalClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsScte35SpliceInsertSettingsTypeDef",
    {"Duration": int},
    total=False,
)


class ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsScte35SpliceInsertSettingsTypeDef(
    _RequiredClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsScte35SpliceInsertSettingsTypeDef,
    _OptionalClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsScte35SpliceInsertSettingsTypeDef,
):
    """
    Type definition for `ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettings` `Scte35SpliceInsertSettings`

    - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
    ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
    duration, there is an expectation that the downstream system can read the duration and
    cue in at that time. If you do not enter a duration, the splice_insert will continue
    indefinitely and there is an expectation that you will enter a return_to_network to end
    the splice_insert at the appropriate time.

    - **SpliceEventId** *(integer) --* **[REQUIRED]** The splice_event_id for the SCTE-35
    splice_insert, as defined in SCTE-35.
    """


_ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef",
    {"Scte35Descriptors": List[Any]},
)


class ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef(
    _ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettings` `Scte35TimeSignalSettings`

    - **Scte35Descriptors** *(list) --* **[REQUIRED]** The list of SCTE-35 descriptors
    accompanying the SCTE-35 time_signal.

      - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

        - **Scte35DescriptorSettings** *(dict) --* **[REQUIRED]** SCTE-35 Descriptor Settings.

          - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* **[REQUIRED]**
          SCTE-35 Segmentation Descriptor.

            - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
            restriction parameters.

              - **ArchiveAllowedFlag** *(string) --* **[REQUIRED]** Corresponds to SCTE-35
              archive_allowed_flag.

              - **DeviceRestrictions** *(string) --* **[REQUIRED]** Corresponds to SCTE-35
              device_restrictions parameter.

              - **NoRegionalBlackoutFlag** *(string) --* **[REQUIRED]** Corresponds to
              SCTE-35 no_regional_blackout_flag parameter.

              - **WebDeliveryAllowedFlag** *(string) --* **[REQUIRED]** Corresponds to
              SCTE-35 web_delivery_allowed_flag parameter.

            - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value that
            is valid for the specified segmentation_type_id.

            - **SegmentationCancelIndicator** *(string) --* **[REQUIRED]** Corresponds to
            SCTE-35 segmentation_event_cancel_indicator.

            - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
            segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
            ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time in
            90 KHz clock ticks. If you do not enter a duration, the time_signal will continue
            until you insert a cancellation message.

            - **SegmentationEventId** *(integer) --* **[REQUIRED]** Corresponds to SCTE-35
            segmentation_event_id.

            - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
            segmentation_type_id. One of the segmentation_type_id values listed in the
            SCTE-35 specification. On the console, enter the ID in decimal (for example,
            "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or
            decimal (for example, "52").

            - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid.
            Enter a string containing the hexadecimal representation of the characters that
            make up the SCTE-35 segmentation_upid value. Must contain an even number of hex
            characters. Do not include spaces between each hex pair. For example, the ASCII
            "ADS Information" becomes hex "41445320496e666f726d6174696f6e.

            - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
            segmentation_upid_type. On the console, enter one of the types listed in the
            SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the
            specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the
            types listed in the SCTE-35 specification, in either hex (for example, "0x0C" )
            or in decimal (for example, "12").

            - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected. A
            value that is valid for the specified segmentation_type_id.

            - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
            value that is valid for the specified segmentation_type_id.

            - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
            sub_segments_expected. A value that is valid for the specified
            segmentation_type_id.
    """


_RequiredClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef = TypedDict(
    "_RequiredClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef",
    {"Image": Dict[str, Any]},
)
_OptionalClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef = TypedDict(
    "_OptionalClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef",
    {
        "Duration": int,
        "FadeIn": int,
        "FadeOut": int,
        "Height": int,
        "ImageX": int,
        "ImageY": int,
        "Layer": int,
        "Opacity": int,
        "Width": int,
    },
    total=False,
)


class ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef(
    _RequiredClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef,
    _OptionalClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef,
):
    """
    Type definition for `ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettings` `StaticImageActivateSettings`

    - **Duration** *(integer) --* The duration in milliseconds for the image to remain on the
    video. If omitted or set to 0 the duration is unlimited and the image will remain until
    it is explicitly deactivated.

    - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
    fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

    - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
    milliseconds for the image to fade out. The fade-out starts when the duration time is
    hit, so it effectively extends the duration. Default is 0 (no fade-out).

    - **Height** *(integer) --* The height of the image when inserted into the video, in
    pixels. The overlay will be scaled up or down to the specified height. Leave blank to use
    the native height of the overlay.

    - **Image** *(dict) --* **[REQUIRED]** The location and filename of the image file to
    overlay on the video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be
    larger (in pixels) than the input video.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a
      path to a file accessible to the Live system (eg. a http:// URI) depending on the
      output type. For example, a RTMP destination should have a uri simliar to:
      "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
    left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame.
    If the placement causes the overlay to extend beyond the right edge of the underlying
    video, then the overlay is cropped on the right.

    - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the top
    edge of the video frame, in pixels. 0 (the default) is the top edge of the frame. If the
    placement causes the overlay to extend beyond the bottom edge of the underlying video,
    then the overlay is cropped on the bottom.

    - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can
    be overlaid on the video, each layer with a different image. The layers are in Z order,
    which means that overlays with higher values of layer are inserted on top of overlays
    with lower values of layer. Default is 0.

    - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
    opaque. Default is 100.

    - **Width** *(integer) --* The width of the image when inserted into the video, in
    pixels. The overlay will be scaled up or down to the specified width. Leave blank to use
    the native width of the overlay.
    """


_ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsStaticImageDeactivateSettingsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsStaticImageDeactivateSettingsTypeDef",
    {"FadeOut": int, "Layer": int},
    total=False,
)


class ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsStaticImageDeactivateSettingsTypeDef(
    _ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsStaticImageDeactivateSettingsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettings` `StaticImageDeactivateSettings`

    - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out. Default
    is 0 (no fade-out).

    - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is 0.
    """


_ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsTypeDef",
    {
        "HlsTimedMetadataSettings": ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef,
        "InputSwitchSettings": ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef,
        "PauseStateSettings": Dict[str, Any],
        "Scte35ReturnToNetworkSettings": Dict[str, Any],
        "Scte35SpliceInsertSettings": ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsScte35SpliceInsertSettingsTypeDef,
        "Scte35TimeSignalSettings": ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef,
        "StaticImageActivateSettings": ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef,
        "StaticImageDeactivateSettings": ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsStaticImageDeactivateSettingsTypeDef,
    },
    total=False,
)


class ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsTypeDef(
    _ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleCreatesScheduleActions` `ScheduleActionSettings`

    - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

      - **Id3** *(string) --* **[REQUIRED]** Base64 string formatted according to the ID3
      specification: http://id3.org/id3v2.4.0-structure

    - **InputSwitchSettings** *(dict) --* Action to switch the input

      - **InputAttachmentNameReference** *(string) --* **[REQUIRED]** The name of the input
      attachment (not the name of the input!) to switch to. The name is specified in the
      channel configuration.

      - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
      input, in order to set up the input to ingest only a portion of the file.

        - **InputTimecodeSource** *(string) --* **[REQUIRED]** The source of the timecodes in
        the source being clipped.

        - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

          - **Timecode** *(string) --* The timecode for the frame where you want to start the
          clip. Optional; if not specified, the clip starts at first frame in the file. Enter
          the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

        - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

          - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
          input (in order to clip the file), you can specify if you want the clip to exclude
          (the default) or include the frame specified by the timecode.

          - **Timecode** *(string) --* The timecode for the frame where you want to stop the
          clip. Optional; if not specified, the clip continues to the end of the file. Enter
          the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

      - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic
      input, for this instance of the input. Each time you use the same dynamic input in an
      input switch action, you can provide a different value, in order to connect the input to
      a different content source.

        - *(string) --* Placeholder documentation for __string

    - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
    pipelines

      - **Pipelines** *(list) --* Placeholder documentation for
      __listOfPipelinePauseStateSettings

        - *(dict) --* Settings for pausing a pipeline.

          - **PipelineId** *(string) --* **[REQUIRED]** Pipeline ID to pause ("PIPELINE_0" or
          "PIPELINE_1").

    - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35 return_to_network
    message

      - **SpliceEventId** *(integer) --* **[REQUIRED]** The splice_event_id for the SCTE-35
      splice_insert, as defined in SCTE-35.

    - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert message

      - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
      ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
      duration, there is an expectation that the downstream system can read the duration and
      cue in at that time. If you do not enter a duration, the splice_insert will continue
      indefinitely and there is an expectation that you will enter a return_to_network to end
      the splice_insert at the appropriate time.

      - **SpliceEventId** *(integer) --* **[REQUIRED]** The splice_event_id for the SCTE-35
      splice_insert, as defined in SCTE-35.

    - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

      - **Scte35Descriptors** *(list) --* **[REQUIRED]** The list of SCTE-35 descriptors
      accompanying the SCTE-35 time_signal.

        - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

          - **Scte35DescriptorSettings** *(dict) --* **[REQUIRED]** SCTE-35 Descriptor Settings.

            - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* **[REQUIRED]**
            SCTE-35 Segmentation Descriptor.

              - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
              restriction parameters.

                - **ArchiveAllowedFlag** *(string) --* **[REQUIRED]** Corresponds to SCTE-35
                archive_allowed_flag.

                - **DeviceRestrictions** *(string) --* **[REQUIRED]** Corresponds to SCTE-35
                device_restrictions parameter.

                - **NoRegionalBlackoutFlag** *(string) --* **[REQUIRED]** Corresponds to
                SCTE-35 no_regional_blackout_flag parameter.

                - **WebDeliveryAllowedFlag** *(string) --* **[REQUIRED]** Corresponds to
                SCTE-35 web_delivery_allowed_flag parameter.

              - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value that
              is valid for the specified segmentation_type_id.

              - **SegmentationCancelIndicator** *(string) --* **[REQUIRED]** Corresponds to
              SCTE-35 segmentation_event_cancel_indicator.

              - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
              segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
              ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time in
              90 KHz clock ticks. If you do not enter a duration, the time_signal will continue
              until you insert a cancellation message.

              - **SegmentationEventId** *(integer) --* **[REQUIRED]** Corresponds to SCTE-35
              segmentation_event_id.

              - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
              segmentation_type_id. One of the segmentation_type_id values listed in the
              SCTE-35 specification. On the console, enter the ID in decimal (for example,
              "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or
              decimal (for example, "52").

              - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid.
              Enter a string containing the hexadecimal representation of the characters that
              make up the SCTE-35 segmentation_upid value. Must contain an even number of hex
              characters. Do not include spaces between each hex pair. For example, the ASCII
              "ADS Information" becomes hex "41445320496e666f726d6174696f6e.

              - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
              segmentation_upid_type. On the console, enter one of the types listed in the
              SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the
              specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the
              types listed in the SCTE-35 specification, in either hex (for example, "0x0C" )
              or in decimal (for example, "12").

              - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected. A
              value that is valid for the specified segmentation_type_id.

              - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
              value that is valid for the specified segmentation_type_id.

              - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
              sub_segments_expected. A value that is valid for the specified
              segmentation_type_id.

    - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

      - **Duration** *(integer) --* The duration in milliseconds for the image to remain on the
      video. If omitted or set to 0 the duration is unlimited and the image will remain until
      it is explicitly deactivated.

      - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
      fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

      - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
      milliseconds for the image to fade out. The fade-out starts when the duration time is
      hit, so it effectively extends the duration. Default is 0 (no fade-out).

      - **Height** *(integer) --* The height of the image when inserted into the video, in
      pixels. The overlay will be scaled up or down to the specified height. Leave blank to use
      the native height of the overlay.

      - **Image** *(dict) --* **[REQUIRED]** The location and filename of the image file to
      overlay on the video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be
      larger (in pixels) than the input video.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a
        path to a file accessible to the Live system (eg. a http:// URI) depending on the
        output type. For example, a RTMP destination should have a uri simliar to:
        "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
      left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame.
      If the placement causes the overlay to extend beyond the right edge of the underlying
      video, then the overlay is cropped on the right.

      - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the top
      edge of the video frame, in pixels. 0 (the default) is the top edge of the frame. If the
      placement causes the overlay to extend beyond the bottom edge of the underlying video,
      then the overlay is cropped on the bottom.

      - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can
      be overlaid on the video, each layer with a different image. The layers are in Z order,
      which means that overlays with higher values of layer are inserted on top of overlays
      with lower values of layer. Default is 0.

      - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
      opaque. Default is 100.

      - **Width** *(integer) --* The width of the image when inserted into the video, in
      pixels. The overlay will be scaled up or down to the specified width. Leave blank to use
      the native width of the overlay.

    - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image overlay

      - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out. Default
      is 0 (no fade-out).

      - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is 0.
    """


_ClientBatchUpdateScheduleCreatesScheduleActionsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleCreatesScheduleActionsTypeDef",
    {
        "ActionName": str,
        "ScheduleActionSettings": ClientBatchUpdateScheduleCreatesScheduleActionsScheduleActionSettingsTypeDef,
        "ScheduleActionStartSettings": Dict[str, Any],
    },
)


class ClientBatchUpdateScheduleCreatesScheduleActionsTypeDef(
    _ClientBatchUpdateScheduleCreatesScheduleActionsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleCreates` `ScheduleActions`

    - **ActionName** *(string) --* **[REQUIRED]** The name of the action, must be unique within
    the schedule. This name provides the main reference to an action once it is added to the
    schedule. A name is unique if it is no longer in the schedule. The schedule is automatically
    cleaned up to remove actions with a start time of more than 1 hour ago (approximately) so at
    that point a name can be reused.

    - **ScheduleActionSettings** *(dict) --* **[REQUIRED]** Settings for this schedule action.

      - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

        - **Id3** *(string) --* **[REQUIRED]** Base64 string formatted according to the ID3
        specification: http://id3.org/id3v2.4.0-structure

      - **InputSwitchSettings** *(dict) --* Action to switch the input

        - **InputAttachmentNameReference** *(string) --* **[REQUIRED]** The name of the input
        attachment (not the name of the input!) to switch to. The name is specified in the
        channel configuration.

        - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
        input, in order to set up the input to ingest only a portion of the file.

          - **InputTimecodeSource** *(string) --* **[REQUIRED]** The source of the timecodes in
          the source being clipped.

          - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

            - **Timecode** *(string) --* The timecode for the frame where you want to start the
            clip. Optional; if not specified, the clip starts at first frame in the file. Enter
            the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

          - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

            - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
            input (in order to clip the file), you can specify if you want the clip to exclude
            (the default) or include the frame specified by the timecode.

            - **Timecode** *(string) --* The timecode for the frame where you want to stop the
            clip. Optional; if not specified, the clip continues to the end of the file. Enter
            the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

        - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic
        input, for this instance of the input. Each time you use the same dynamic input in an
        input switch action, you can provide a different value, in order to connect the input to
        a different content source.

          - *(string) --* Placeholder documentation for __string

      - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
      pipelines

        - **Pipelines** *(list) --* Placeholder documentation for
        __listOfPipelinePauseStateSettings

          - *(dict) --* Settings for pausing a pipeline.

            - **PipelineId** *(string) --* **[REQUIRED]** Pipeline ID to pause ("PIPELINE_0" or
            "PIPELINE_1").

      - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35 return_to_network
      message

        - **SpliceEventId** *(integer) --* **[REQUIRED]** The splice_event_id for the SCTE-35
        splice_insert, as defined in SCTE-35.

      - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert message

        - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
        ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
        duration, there is an expectation that the downstream system can read the duration and
        cue in at that time. If you do not enter a duration, the splice_insert will continue
        indefinitely and there is an expectation that you will enter a return_to_network to end
        the splice_insert at the appropriate time.

        - **SpliceEventId** *(integer) --* **[REQUIRED]** The splice_event_id for the SCTE-35
        splice_insert, as defined in SCTE-35.

      - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

        - **Scte35Descriptors** *(list) --* **[REQUIRED]** The list of SCTE-35 descriptors
        accompanying the SCTE-35 time_signal.

          - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

            - **Scte35DescriptorSettings** *(dict) --* **[REQUIRED]** SCTE-35 Descriptor Settings.

              - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* **[REQUIRED]**
              SCTE-35 Segmentation Descriptor.

                - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
                restriction parameters.

                  - **ArchiveAllowedFlag** *(string) --* **[REQUIRED]** Corresponds to SCTE-35
                  archive_allowed_flag.

                  - **DeviceRestrictions** *(string) --* **[REQUIRED]** Corresponds to SCTE-35
                  device_restrictions parameter.

                  - **NoRegionalBlackoutFlag** *(string) --* **[REQUIRED]** Corresponds to
                  SCTE-35 no_regional_blackout_flag parameter.

                  - **WebDeliveryAllowedFlag** *(string) --* **[REQUIRED]** Corresponds to
                  SCTE-35 web_delivery_allowed_flag parameter.

                - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value that
                is valid for the specified segmentation_type_id.

                - **SegmentationCancelIndicator** *(string) --* **[REQUIRED]** Corresponds to
                SCTE-35 segmentation_event_cancel_indicator.

                - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
                segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
                ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time in
                90 KHz clock ticks. If you do not enter a duration, the time_signal will continue
                until you insert a cancellation message.

                - **SegmentationEventId** *(integer) --* **[REQUIRED]** Corresponds to SCTE-35
                segmentation_event_id.

                - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
                segmentation_type_id. One of the segmentation_type_id values listed in the
                SCTE-35 specification. On the console, enter the ID in decimal (for example,
                "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or
                decimal (for example, "52").

                - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid.
                Enter a string containing the hexadecimal representation of the characters that
                make up the SCTE-35 segmentation_upid value. Must contain an even number of hex
                characters. Do not include spaces between each hex pair. For example, the ASCII
                "ADS Information" becomes hex "41445320496e666f726d6174696f6e.

                - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
                segmentation_upid_type. On the console, enter one of the types listed in the
                SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the
                specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the
                types listed in the SCTE-35 specification, in either hex (for example, "0x0C" )
                or in decimal (for example, "12").

                - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected. A
                value that is valid for the specified segmentation_type_id.

                - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
                value that is valid for the specified segmentation_type_id.

                - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
                sub_segments_expected. A value that is valid for the specified
                segmentation_type_id.

      - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

        - **Duration** *(integer) --* The duration in milliseconds for the image to remain on the
        video. If omitted or set to 0 the duration is unlimited and the image will remain until
        it is explicitly deactivated.

        - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
        fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

        - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
        milliseconds for the image to fade out. The fade-out starts when the duration time is
        hit, so it effectively extends the duration. Default is 0 (no fade-out).

        - **Height** *(integer) --* The height of the image when inserted into the video, in
        pixels. The overlay will be scaled up or down to the specified height. Leave blank to use
        the native height of the overlay.

        - **Image** *(dict) --* **[REQUIRED]** The location and filename of the image file to
        overlay on the video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be
        larger (in pixels) than the input video.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a
          path to a file accessible to the Live system (eg. a http:// URI) depending on the
          output type. For example, a RTMP destination should have a uri simliar to:
          "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
        left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame.
        If the placement causes the overlay to extend beyond the right edge of the underlying
        video, then the overlay is cropped on the right.

        - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the top
        edge of the video frame, in pixels. 0 (the default) is the top edge of the frame. If the
        placement causes the overlay to extend beyond the bottom edge of the underlying video,
        then the overlay is cropped on the bottom.

        - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can
        be overlaid on the video, each layer with a different image. The layers are in Z order,
        which means that overlays with higher values of layer are inserted on top of overlays
        with lower values of layer. Default is 0.

        - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
        opaque. Default is 100.

        - **Width** *(integer) --* The width of the image when inserted into the video, in
        pixels. The overlay will be scaled up or down to the specified width. Leave blank to use
        the native width of the overlay.

      - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image overlay

        - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out. Default
        is 0 (no fade-out).

        - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is 0.

    - **ScheduleActionStartSettings** *(dict) --* **[REQUIRED]** The time for the action to start
    in the channel.

      - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start time
      for an action.

        - **Time** *(string) --* **[REQUIRED]** Start time for the action to start in the
        channel. (Not the time for the action to be added to the schedule: actions are always
        added to the schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters
        are digits (for example, mm might be 01) except for the two constants "T" for time and
        "Z" for "UTC format".

      - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action as
      relative to another action.

        - **FollowPoint** *(string) --* **[REQUIRED]** Identifies whether this action starts
        relative to the start or relative to the end of the reference action.

        - **ReferenceActionName** *(string) --* **[REQUIRED]** The action name of another action
        that this one refers to.

      - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an action
      that should be applied immediately.
    """


_ClientBatchUpdateScheduleCreatesTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleCreatesTypeDef",
    {"ScheduleActions": List[ClientBatchUpdateScheduleCreatesScheduleActionsTypeDef]},
)


class ClientBatchUpdateScheduleCreatesTypeDef(_ClientBatchUpdateScheduleCreatesTypeDef):
    """
    Type definition for `ClientBatchUpdateSchedule` `Creates`

    - **ScheduleActions** *(list) --* **[REQUIRED]** A list of schedule actions to create.

      - *(dict) --* Contains information on a single schedule action.

        - **ActionName** *(string) --* **[REQUIRED]** The name of the action, must be unique within
        the schedule. This name provides the main reference to an action once it is added to the
        schedule. A name is unique if it is no longer in the schedule. The schedule is automatically
        cleaned up to remove actions with a start time of more than 1 hour ago (approximately) so at
        that point a name can be reused.

        - **ScheduleActionSettings** *(dict) --* **[REQUIRED]** Settings for this schedule action.

          - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

            - **Id3** *(string) --* **[REQUIRED]** Base64 string formatted according to the ID3
            specification: http://id3.org/id3v2.4.0-structure

          - **InputSwitchSettings** *(dict) --* Action to switch the input

            - **InputAttachmentNameReference** *(string) --* **[REQUIRED]** The name of the input
            attachment (not the name of the input!) to switch to. The name is specified in the
            channel configuration.

            - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
            input, in order to set up the input to ingest only a portion of the file.

              - **InputTimecodeSource** *(string) --* **[REQUIRED]** The source of the timecodes in
              the source being clipped.

              - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

                - **Timecode** *(string) --* The timecode for the frame where you want to start the
                clip. Optional; if not specified, the clip starts at first frame in the file. Enter
                the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

              - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

                - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
                input (in order to clip the file), you can specify if you want the clip to exclude
                (the default) or include the frame specified by the timecode.

                - **Timecode** *(string) --* The timecode for the frame where you want to stop the
                clip. Optional; if not specified, the clip continues to the end of the file. Enter
                the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

            - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic
            input, for this instance of the input. Each time you use the same dynamic input in an
            input switch action, you can provide a different value, in order to connect the input to
            a different content source.

              - *(string) --* Placeholder documentation for __string

          - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
          pipelines

            - **Pipelines** *(list) --* Placeholder documentation for
            __listOfPipelinePauseStateSettings

              - *(dict) --* Settings for pausing a pipeline.

                - **PipelineId** *(string) --* **[REQUIRED]** Pipeline ID to pause ("PIPELINE_0" or
                "PIPELINE_1").

          - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35 return_to_network
          message

            - **SpliceEventId** *(integer) --* **[REQUIRED]** The splice_event_id for the SCTE-35
            splice_insert, as defined in SCTE-35.

          - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert message

            - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
            ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
            duration, there is an expectation that the downstream system can read the duration and
            cue in at that time. If you do not enter a duration, the splice_insert will continue
            indefinitely and there is an expectation that you will enter a return_to_network to end
            the splice_insert at the appropriate time.

            - **SpliceEventId** *(integer) --* **[REQUIRED]** The splice_event_id for the SCTE-35
            splice_insert, as defined in SCTE-35.

          - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

            - **Scte35Descriptors** *(list) --* **[REQUIRED]** The list of SCTE-35 descriptors
            accompanying the SCTE-35 time_signal.

              - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

                - **Scte35DescriptorSettings** *(dict) --* **[REQUIRED]** SCTE-35 Descriptor Settings.

                  - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* **[REQUIRED]**
                  SCTE-35 Segmentation Descriptor.

                    - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
                    restriction parameters.

                      - **ArchiveAllowedFlag** *(string) --* **[REQUIRED]** Corresponds to SCTE-35
                      archive_allowed_flag.

                      - **DeviceRestrictions** *(string) --* **[REQUIRED]** Corresponds to SCTE-35
                      device_restrictions parameter.

                      - **NoRegionalBlackoutFlag** *(string) --* **[REQUIRED]** Corresponds to
                      SCTE-35 no_regional_blackout_flag parameter.

                      - **WebDeliveryAllowedFlag** *(string) --* **[REQUIRED]** Corresponds to
                      SCTE-35 web_delivery_allowed_flag parameter.

                    - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value that
                    is valid for the specified segmentation_type_id.

                    - **SegmentationCancelIndicator** *(string) --* **[REQUIRED]** Corresponds to
                    SCTE-35 segmentation_event_cancel_indicator.

                    - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
                    segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
                    ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time in
                    90 KHz clock ticks. If you do not enter a duration, the time_signal will continue
                    until you insert a cancellation message.

                    - **SegmentationEventId** *(integer) --* **[REQUIRED]** Corresponds to SCTE-35
                    segmentation_event_id.

                    - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
                    segmentation_type_id. One of the segmentation_type_id values listed in the
                    SCTE-35 specification. On the console, enter the ID in decimal (for example,
                    "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or
                    decimal (for example, "52").

                    - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid.
                    Enter a string containing the hexadecimal representation of the characters that
                    make up the SCTE-35 segmentation_upid value. Must contain an even number of hex
                    characters. Do not include spaces between each hex pair. For example, the ASCII
                    "ADS Information" becomes hex "41445320496e666f726d6174696f6e.

                    - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
                    segmentation_upid_type. On the console, enter one of the types listed in the
                    SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the
                    specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the
                    types listed in the SCTE-35 specification, in either hex (for example, "0x0C" )
                    or in decimal (for example, "12").

                    - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected. A
                    value that is valid for the specified segmentation_type_id.

                    - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
                    value that is valid for the specified segmentation_type_id.

                    - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
                    sub_segments_expected. A value that is valid for the specified
                    segmentation_type_id.

          - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

            - **Duration** *(integer) --* The duration in milliseconds for the image to remain on the
            video. If omitted or set to 0 the duration is unlimited and the image will remain until
            it is explicitly deactivated.

            - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
            fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

            - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
            milliseconds for the image to fade out. The fade-out starts when the duration time is
            hit, so it effectively extends the duration. Default is 0 (no fade-out).

            - **Height** *(integer) --* The height of the image when inserted into the video, in
            pixels. The overlay will be scaled up or down to the specified height. Leave blank to use
            the native height of the overlay.

            - **Image** *(dict) --* **[REQUIRED]** The location and filename of the image file to
            overlay on the video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be
            larger (in pixels) than the input video.

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
              store

              - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a
              path to a file accessible to the Live system (eg. a http:// URI) depending on the
              output type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
            left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame.
            If the placement causes the overlay to extend beyond the right edge of the underlying
            video, then the overlay is cropped on the right.

            - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the top
            edge of the video frame, in pixels. 0 (the default) is the top edge of the frame. If the
            placement causes the overlay to extend beyond the bottom edge of the underlying video,
            then the overlay is cropped on the bottom.

            - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can
            be overlaid on the video, each layer with a different image. The layers are in Z order,
            which means that overlays with higher values of layer are inserted on top of overlays
            with lower values of layer. Default is 0.

            - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
            opaque. Default is 100.

            - **Width** *(integer) --* The width of the image when inserted into the video, in
            pixels. The overlay will be scaled up or down to the specified width. Leave blank to use
            the native width of the overlay.

          - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image overlay

            - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out. Default
            is 0 (no fade-out).

            - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is 0.

        - **ScheduleActionStartSettings** *(dict) --* **[REQUIRED]** The time for the action to start
        in the channel.

          - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start time
          for an action.

            - **Time** *(string) --* **[REQUIRED]** Start time for the action to start in the
            channel. (Not the time for the action to be added to the schedule: actions are always
            added to the schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters
            are digits (for example, mm might be 01) except for the two constants "T" for time and
            "Z" for "UTC format".

          - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action as
          relative to another action.

            - **FollowPoint** *(string) --* **[REQUIRED]** Identifies whether this action starts
            relative to the start or relative to the end of the reference action.

            - **ReferenceActionName** *(string) --* **[REQUIRED]** The action name of another action
            that this one refers to.

          - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an action
          that should be applied immediately.
    """


_ClientBatchUpdateScheduleDeletesTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleDeletesTypeDef", {"ActionNames": List[str]}
)


class ClientBatchUpdateScheduleDeletesTypeDef(_ClientBatchUpdateScheduleDeletesTypeDef):
    """
    Type definition for `ClientBatchUpdateSchedule` `Deletes`

    - **ActionNames** *(list) --* **[REQUIRED]** A list of schedule actions to delete.

      - *(string) --* Placeholder documentation for __string
    """


_ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef",
    {"Id3": str},
    total=False,
)


class ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef(
    _ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettings` `HlsTimedMetadataSettings`

    - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
    http://id3.org/id3v2.4.0-structure
    """


_ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef",
    {
        "InputAttachmentNameReference": str,
        "InputClippingSettings": Dict[str, Any],
        "UrlPath": List[Any],
    },
    total=False,
)


class ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef(
    _ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettings` `InputSwitchSettings`

    - **InputAttachmentNameReference** *(string) --* The name of the input attachment
    (not the name of the input!) to switch to. The name is specified in the channel
    configuration.

    - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
    input, in order to set up the input to ingest only a portion of the file.

      - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
      being clipped.

      - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

        - **Timecode** *(string) --* The timecode for the frame where you want to start
        the clip. Optional; if not specified, the clip starts at first frame in the file.
        Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

      - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

        - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
        input (in order to clip the file), you can specify if you want the clip to
        exclude (the default) or include the frame specified by the timecode.

        - **Timecode** *(string) --* The timecode for the frame where you want to stop
        the clip. Optional; if not specified, the clip continues to the end of the file.
        Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

    - **UrlPath** *(list) --* The value for the variable portion of the URL for the
    dynamic input, for this instance of the input. Each time you use the same dynamic
    input in an input switch action, you can provide a different value, in order to
    connect the input to a different content source.

      - *(string) --* Placeholder documentation for __string
    """


_ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef",
    {"Scte35Descriptors": List[Any]},
    total=False,
)


class ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef(
    _ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettings` `Scte35TimeSignalSettings`

    - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
    SCTE-35 time_signal.

      - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

        - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

          - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
          Segmentation Descriptor.

            - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
            restriction parameters.

              - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
              archive_allowed_flag.

              - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
              device_restrictions parameter.

              - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
              no_regional_blackout_flag parameter.

              - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
              web_delivery_allowed_flag parameter.

            - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
            that is valid for the specified segmentation_type_id.

            - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
            segmentation_event_cancel_indicator.

            - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
            segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
            ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter
            time in 90 KHz clock ticks. If you do not enter a duration, the time_signal
            will continue until you insert a cancellation message.

            - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
            segmentation_event_id.

            - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
            segmentation_type_id. One of the segmentation_type_id values listed in the
            SCTE-35 specification. On the console, enter the ID in decimal (for example,
            "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34")
            or decimal (for example, "52").

            - **SegmentationUpid** *(string) --* Corresponds to SCTE-35
            segmentation_upid. Enter a string containing the hexadecimal representation
            of the characters that make up the SCTE-35 segmentation_upid value. Must
            contain an even number of hex characters. Do not include spaces between each
            hex pair. For example, the ASCII "ADS Information" becomes hex
            "41445320496e666f726d6174696f6e.

            - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
            segmentation_upid_type. On the console, enter one of the types listed in the
            SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from
            the specification is "12" in decimal. In the CLI, API, or an SDK, enter one
            of the types listed in the SCTE-35 specification, in either hex (for example,
            "0x0C" ) or in decimal (for example, "12").

            - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35
            segments_expected. A value that is valid for the specified
            segmentation_type_id.

            - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
            value that is valid for the specified segmentation_type_id.

            - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
            sub_segments_expected. A value that is valid for the specified
            segmentation_type_id.
    """


_ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef",
    {
        "Duration": int,
        "FadeIn": int,
        "FadeOut": int,
        "Height": int,
        "Image": Dict[str, Any],
        "ImageX": int,
        "ImageY": int,
        "Layer": int,
        "Opacity": int,
        "Width": int,
    },
    total=False,
)


class ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef(
    _ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettings` `StaticImageActivateSettings`

    - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
    the video. If omitted or set to 0 the duration is unlimited and the image will remain
    until it is explicitly deactivated.

    - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
    fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

    - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
    milliseconds for the image to fade out. The fade-out starts when the duration time is
    hit, so it effectively extends the duration. Default is 0 (no fade-out).

    - **Height** *(integer) --* The height of the image when inserted into the video, in
    pixels. The overlay will be scaled up or down to the specified height. Leave blank to
    use the native height of the overlay.

    - **Image** *(dict) --* The location and filename of the image file to overlay on the
    video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
    pixels) than the input video.

      - **PasswordParam** *(string) --* key used to extract the password from EC2
      Parameter store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
      file accessible to the Live system (eg. a http:// URI) depending on the output
      type. For example, a RTMP destination should have a uri simliar to:
      "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
    left edge of the video frame, in pixels. 0 (the default) is the left edge of the
    frame. If the placement causes the overlay to extend beyond the right edge of the
    underlying video, then the overlay is cropped on the right.

    - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
    top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
    If the placement causes the overlay to extend beyond the bottom edge of the
    underlying video, then the overlay is cropped on the bottom.

    - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that
    can be overlaid on the video, each layer with a different image. The layers are in Z
    order, which means that overlays with higher values of layer are inserted on top of
    overlays with lower values of layer. Default is 0.

    - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
    opaque. Default is 100.

    - **Width** *(integer) --* The width of the image when inserted into the video, in
    pixels. The overlay will be scaled up or down to the specified width. Leave blank to
    use the native width of the overlay.
    """


_ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsTypeDef",
    {
        "HlsTimedMetadataSettings": ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef,
        "InputSwitchSettings": ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef,
        "PauseStateSettings": Dict[str, Any],
        "Scte35ReturnToNetworkSettings": Dict[str, Any],
        "Scte35SpliceInsertSettings": Dict[str, Any],
        "Scte35TimeSignalSettings": ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef,
        "StaticImageActivateSettings": ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef,
        "StaticImageDeactivateSettings": Dict[str, Any],
    },
    total=False,
)


class ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsTypeDef(
    _ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleResponseCreatesScheduleActions` `ScheduleActionSettings`

    - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

      - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
      http://id3.org/id3v2.4.0-structure

    - **InputSwitchSettings** *(dict) --* Action to switch the input

      - **InputAttachmentNameReference** *(string) --* The name of the input attachment
      (not the name of the input!) to switch to. The name is specified in the channel
      configuration.

      - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
      input, in order to set up the input to ingest only a portion of the file.

        - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
        being clipped.

        - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

          - **Timecode** *(string) --* The timecode for the frame where you want to start
          the clip. Optional; if not specified, the clip starts at first frame in the file.
          Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

        - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

          - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
          input (in order to clip the file), you can specify if you want the clip to
          exclude (the default) or include the frame specified by the timecode.

          - **Timecode** *(string) --* The timecode for the frame where you want to stop
          the clip. Optional; if not specified, the clip continues to the end of the file.
          Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

      - **UrlPath** *(list) --* The value for the variable portion of the URL for the
      dynamic input, for this instance of the input. Each time you use the same dynamic
      input in an input switch action, you can provide a different value, in order to
      connect the input to a different content source.

        - *(string) --* Placeholder documentation for __string

    - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
    pipelines

      - **Pipelines** *(list) --* Placeholder documentation for
      __listOfPipelinePauseStateSettings

        - *(dict) --* Settings for pausing a pipeline.

          - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or
          "PIPELINE_1").

    - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35
    return_to_network message

      - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
      as defined in SCTE-35.

    - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert
    message

      - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
      ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
      duration, there is an expectation that the downstream system can read the duration
      and cue in at that time. If you do not enter a duration, the splice_insert will
      continue indefinitely and there is an expectation that you will enter a
      return_to_network to end the splice_insert at the appropriate time.

      - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
      as defined in SCTE-35.

    - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

      - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
      SCTE-35 time_signal.

        - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

          - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

            - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
            Segmentation Descriptor.

              - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
              restriction parameters.

                - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
                archive_allowed_flag.

                - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
                device_restrictions parameter.

                - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
                no_regional_blackout_flag parameter.

                - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
                web_delivery_allowed_flag parameter.

              - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
              that is valid for the specified segmentation_type_id.

              - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
              segmentation_event_cancel_indicator.

              - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
              segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
              ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter
              time in 90 KHz clock ticks. If you do not enter a duration, the time_signal
              will continue until you insert a cancellation message.

              - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
              segmentation_event_id.

              - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
              segmentation_type_id. One of the segmentation_type_id values listed in the
              SCTE-35 specification. On the console, enter the ID in decimal (for example,
              "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34")
              or decimal (for example, "52").

              - **SegmentationUpid** *(string) --* Corresponds to SCTE-35
              segmentation_upid. Enter a string containing the hexadecimal representation
              of the characters that make up the SCTE-35 segmentation_upid value. Must
              contain an even number of hex characters. Do not include spaces between each
              hex pair. For example, the ASCII "ADS Information" becomes hex
              "41445320496e666f726d6174696f6e.

              - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
              segmentation_upid_type. On the console, enter one of the types listed in the
              SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from
              the specification is "12" in decimal. In the CLI, API, or an SDK, enter one
              of the types listed in the SCTE-35 specification, in either hex (for example,
              "0x0C" ) or in decimal (for example, "12").

              - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35
              segments_expected. A value that is valid for the specified
              segmentation_type_id.

              - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
              value that is valid for the specified segmentation_type_id.

              - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
              sub_segments_expected. A value that is valid for the specified
              segmentation_type_id.

    - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

      - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
      the video. If omitted or set to 0 the duration is unlimited and the image will remain
      until it is explicitly deactivated.

      - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
      fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

      - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
      milliseconds for the image to fade out. The fade-out starts when the duration time is
      hit, so it effectively extends the duration. Default is 0 (no fade-out).

      - **Height** *(integer) --* The height of the image when inserted into the video, in
      pixels. The overlay will be scaled up or down to the specified height. Leave blank to
      use the native height of the overlay.

      - **Image** *(dict) --* The location and filename of the image file to overlay on the
      video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
      pixels) than the input video.

        - **PasswordParam** *(string) --* key used to extract the password from EC2
        Parameter store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
        file accessible to the Live system (eg. a http:// URI) depending on the output
        type. For example, a RTMP destination should have a uri simliar to:
        "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
      left edge of the video frame, in pixels. 0 (the default) is the left edge of the
      frame. If the placement causes the overlay to extend beyond the right edge of the
      underlying video, then the overlay is cropped on the right.

      - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
      top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
      If the placement causes the overlay to extend beyond the bottom edge of the
      underlying video, then the overlay is cropped on the bottom.

      - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that
      can be overlaid on the video, each layer with a different image. The layers are in Z
      order, which means that overlays with higher values of layer are inserted on top of
      overlays with lower values of layer. Default is 0.

      - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
      opaque. Default is 100.

      - **Width** *(integer) --* The width of the image when inserted into the video, in
      pixels. The overlay will be scaled up or down to the specified width. Leave blank to
      use the native width of the overlay.

    - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image
    overlay

      - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out.
      Default is 0 (no fade-out).

      - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is
      0.
    """


_ClientBatchUpdateScheduleResponseCreatesScheduleActionsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleResponseCreatesScheduleActionsTypeDef",
    {
        "ActionName": str,
        "ScheduleActionSettings": ClientBatchUpdateScheduleResponseCreatesScheduleActionsScheduleActionSettingsTypeDef,
        "ScheduleActionStartSettings": Dict[str, Any],
    },
    total=False,
)


class ClientBatchUpdateScheduleResponseCreatesScheduleActionsTypeDef(
    _ClientBatchUpdateScheduleResponseCreatesScheduleActionsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleResponseCreates` `ScheduleActions`

    - **ActionName** *(string) --* The name of the action, must be unique within the
    schedule. This name provides the main reference to an action once it is added to the
    schedule. A name is unique if it is no longer in the schedule. The schedule is
    automatically cleaned up to remove actions with a start time of more than 1 hour ago
    (approximately) so at that point a name can be reused.

    - **ScheduleActionSettings** *(dict) --* Settings for this schedule action.

      - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

        - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
        http://id3.org/id3v2.4.0-structure

      - **InputSwitchSettings** *(dict) --* Action to switch the input

        - **InputAttachmentNameReference** *(string) --* The name of the input attachment
        (not the name of the input!) to switch to. The name is specified in the channel
        configuration.

        - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
        input, in order to set up the input to ingest only a portion of the file.

          - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
          being clipped.

          - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

            - **Timecode** *(string) --* The timecode for the frame where you want to start
            the clip. Optional; if not specified, the clip starts at first frame in the file.
            Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

          - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

            - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
            input (in order to clip the file), you can specify if you want the clip to
            exclude (the default) or include the frame specified by the timecode.

            - **Timecode** *(string) --* The timecode for the frame where you want to stop
            the clip. Optional; if not specified, the clip continues to the end of the file.
            Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

        - **UrlPath** *(list) --* The value for the variable portion of the URL for the
        dynamic input, for this instance of the input. Each time you use the same dynamic
        input in an input switch action, you can provide a different value, in order to
        connect the input to a different content source.

          - *(string) --* Placeholder documentation for __string

      - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
      pipelines

        - **Pipelines** *(list) --* Placeholder documentation for
        __listOfPipelinePauseStateSettings

          - *(dict) --* Settings for pausing a pipeline.

            - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or
            "PIPELINE_1").

      - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35
      return_to_network message

        - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
        as defined in SCTE-35.

      - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert
      message

        - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
        ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
        duration, there is an expectation that the downstream system can read the duration
        and cue in at that time. If you do not enter a duration, the splice_insert will
        continue indefinitely and there is an expectation that you will enter a
        return_to_network to end the splice_insert at the appropriate time.

        - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
        as defined in SCTE-35.

      - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

        - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
        SCTE-35 time_signal.

          - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

            - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

              - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
              Segmentation Descriptor.

                - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
                restriction parameters.

                  - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
                  archive_allowed_flag.

                  - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
                  device_restrictions parameter.

                  - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
                  no_regional_blackout_flag parameter.

                  - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
                  web_delivery_allowed_flag parameter.

                - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
                that is valid for the specified segmentation_type_id.

                - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
                segmentation_event_cancel_indicator.

                - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
                segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
                ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter
                time in 90 KHz clock ticks. If you do not enter a duration, the time_signal
                will continue until you insert a cancellation message.

                - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
                segmentation_event_id.

                - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
                segmentation_type_id. One of the segmentation_type_id values listed in the
                SCTE-35 specification. On the console, enter the ID in decimal (for example,
                "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34")
                or decimal (for example, "52").

                - **SegmentationUpid** *(string) --* Corresponds to SCTE-35
                segmentation_upid. Enter a string containing the hexadecimal representation
                of the characters that make up the SCTE-35 segmentation_upid value. Must
                contain an even number of hex characters. Do not include spaces between each
                hex pair. For example, the ASCII "ADS Information" becomes hex
                "41445320496e666f726d6174696f6e.

                - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
                segmentation_upid_type. On the console, enter one of the types listed in the
                SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from
                the specification is "12" in decimal. In the CLI, API, or an SDK, enter one
                of the types listed in the SCTE-35 specification, in either hex (for example,
                "0x0C" ) or in decimal (for example, "12").

                - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35
                segments_expected. A value that is valid for the specified
                segmentation_type_id.

                - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
                value that is valid for the specified segmentation_type_id.

                - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
                sub_segments_expected. A value that is valid for the specified
                segmentation_type_id.

      - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

        - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
        the video. If omitted or set to 0 the duration is unlimited and the image will remain
        until it is explicitly deactivated.

        - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
        fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

        - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
        milliseconds for the image to fade out. The fade-out starts when the duration time is
        hit, so it effectively extends the duration. Default is 0 (no fade-out).

        - **Height** *(integer) --* The height of the image when inserted into the video, in
        pixels. The overlay will be scaled up or down to the specified height. Leave blank to
        use the native height of the overlay.

        - **Image** *(dict) --* The location and filename of the image file to overlay on the
        video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
        pixels) than the input video.

          - **PasswordParam** *(string) --* key used to extract the password from EC2
          Parameter store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
          file accessible to the Live system (eg. a http:// URI) depending on the output
          type. For example, a RTMP destination should have a uri simliar to:
          "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
        left edge of the video frame, in pixels. 0 (the default) is the left edge of the
        frame. If the placement causes the overlay to extend beyond the right edge of the
        underlying video, then the overlay is cropped on the right.

        - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
        top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
        If the placement causes the overlay to extend beyond the bottom edge of the
        underlying video, then the overlay is cropped on the bottom.

        - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that
        can be overlaid on the video, each layer with a different image. The layers are in Z
        order, which means that overlays with higher values of layer are inserted on top of
        overlays with lower values of layer. Default is 0.

        - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
        opaque. Default is 100.

        - **Width** *(integer) --* The width of the image when inserted into the video, in
        pixels. The overlay will be scaled up or down to the specified width. Leave blank to
        use the native width of the overlay.

      - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image
      overlay

        - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out.
        Default is 0 (no fade-out).

        - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is
        0.

    - **ScheduleActionStartSettings** *(dict) --* The time for the action to start in the
    channel.

      - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start
      time for an action.

        - **Time** *(string) --* Start time for the action to start in the channel. (Not the
        time for the action to be added to the schedule: actions are always added to the
        schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are
        digits (for example, mm might be 01) except for the two constants "T" for time and
        "Z" for "UTC format".

      - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action
      as relative to another action.

        - **FollowPoint** *(string) --* Identifies whether this action starts relative to the
        start or relative to the end of the reference action.

        - **ReferenceActionName** *(string) --* The action name of another action that this
        one refers to.

      - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an
      action that should be applied immediately.
    """


_ClientBatchUpdateScheduleResponseCreatesTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleResponseCreatesTypeDef",
    {
        "ScheduleActions": List[
            ClientBatchUpdateScheduleResponseCreatesScheduleActionsTypeDef
        ]
    },
    total=False,
)


class ClientBatchUpdateScheduleResponseCreatesTypeDef(
    _ClientBatchUpdateScheduleResponseCreatesTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleResponse` `Creates`

    - **ScheduleActions** *(list) --* List of actions that have been created in the schedule.

      - *(dict) --* Contains information on a single schedule action.

        - **ActionName** *(string) --* The name of the action, must be unique within the
        schedule. This name provides the main reference to an action once it is added to the
        schedule. A name is unique if it is no longer in the schedule. The schedule is
        automatically cleaned up to remove actions with a start time of more than 1 hour ago
        (approximately) so at that point a name can be reused.

        - **ScheduleActionSettings** *(dict) --* Settings for this schedule action.

          - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

            - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
            http://id3.org/id3v2.4.0-structure

          - **InputSwitchSettings** *(dict) --* Action to switch the input

            - **InputAttachmentNameReference** *(string) --* The name of the input attachment
            (not the name of the input!) to switch to. The name is specified in the channel
            configuration.

            - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
            input, in order to set up the input to ingest only a portion of the file.

              - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
              being clipped.

              - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

                - **Timecode** *(string) --* The timecode for the frame where you want to start
                the clip. Optional; if not specified, the clip starts at first frame in the file.
                Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

              - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

                - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
                input (in order to clip the file), you can specify if you want the clip to
                exclude (the default) or include the frame specified by the timecode.

                - **Timecode** *(string) --* The timecode for the frame where you want to stop
                the clip. Optional; if not specified, the clip continues to the end of the file.
                Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

            - **UrlPath** *(list) --* The value for the variable portion of the URL for the
            dynamic input, for this instance of the input. Each time you use the same dynamic
            input in an input switch action, you can provide a different value, in order to
            connect the input to a different content source.

              - *(string) --* Placeholder documentation for __string

          - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
          pipelines

            - **Pipelines** *(list) --* Placeholder documentation for
            __listOfPipelinePauseStateSettings

              - *(dict) --* Settings for pausing a pipeline.

                - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or
                "PIPELINE_1").

          - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35
          return_to_network message

            - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
            as defined in SCTE-35.

          - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert
          message

            - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
            ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
            duration, there is an expectation that the downstream system can read the duration
            and cue in at that time. If you do not enter a duration, the splice_insert will
            continue indefinitely and there is an expectation that you will enter a
            return_to_network to end the splice_insert at the appropriate time.

            - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
            as defined in SCTE-35.

          - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

            - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
            SCTE-35 time_signal.

              - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

                - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

                  - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
                  Segmentation Descriptor.

                    - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
                    restriction parameters.

                      - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
                      archive_allowed_flag.

                      - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
                      device_restrictions parameter.

                      - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
                      no_regional_blackout_flag parameter.

                      - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
                      web_delivery_allowed_flag parameter.

                    - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
                    that is valid for the specified segmentation_type_id.

                    - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
                    segmentation_event_cancel_indicator.

                    - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
                    segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
                    ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter
                    time in 90 KHz clock ticks. If you do not enter a duration, the time_signal
                    will continue until you insert a cancellation message.

                    - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
                    segmentation_event_id.

                    - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
                    segmentation_type_id. One of the segmentation_type_id values listed in the
                    SCTE-35 specification. On the console, enter the ID in decimal (for example,
                    "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34")
                    or decimal (for example, "52").

                    - **SegmentationUpid** *(string) --* Corresponds to SCTE-35
                    segmentation_upid. Enter a string containing the hexadecimal representation
                    of the characters that make up the SCTE-35 segmentation_upid value. Must
                    contain an even number of hex characters. Do not include spaces between each
                    hex pair. For example, the ASCII "ADS Information" becomes hex
                    "41445320496e666f726d6174696f6e.

                    - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
                    segmentation_upid_type. On the console, enter one of the types listed in the
                    SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from
                    the specification is "12" in decimal. In the CLI, API, or an SDK, enter one
                    of the types listed in the SCTE-35 specification, in either hex (for example,
                    "0x0C" ) or in decimal (for example, "12").

                    - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35
                    segments_expected. A value that is valid for the specified
                    segmentation_type_id.

                    - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
                    value that is valid for the specified segmentation_type_id.

                    - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
                    sub_segments_expected. A value that is valid for the specified
                    segmentation_type_id.

          - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

            - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
            the video. If omitted or set to 0 the duration is unlimited and the image will remain
            until it is explicitly deactivated.

            - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
            fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

            - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
            milliseconds for the image to fade out. The fade-out starts when the duration time is
            hit, so it effectively extends the duration. Default is 0 (no fade-out).

            - **Height** *(integer) --* The height of the image when inserted into the video, in
            pixels. The overlay will be scaled up or down to the specified height. Leave blank to
            use the native height of the overlay.

            - **Image** *(dict) --* The location and filename of the image file to overlay on the
            video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
            pixels) than the input video.

              - **PasswordParam** *(string) --* key used to extract the password from EC2
              Parameter store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
              file accessible to the Live system (eg. a http:// URI) depending on the output
              type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
            left edge of the video frame, in pixels. 0 (the default) is the left edge of the
            frame. If the placement causes the overlay to extend beyond the right edge of the
            underlying video, then the overlay is cropped on the right.

            - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
            top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
            If the placement causes the overlay to extend beyond the bottom edge of the
            underlying video, then the overlay is cropped on the bottom.

            - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that
            can be overlaid on the video, each layer with a different image. The layers are in Z
            order, which means that overlays with higher values of layer are inserted on top of
            overlays with lower values of layer. Default is 0.

            - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
            opaque. Default is 100.

            - **Width** *(integer) --* The width of the image when inserted into the video, in
            pixels. The overlay will be scaled up or down to the specified width. Leave blank to
            use the native width of the overlay.

          - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image
          overlay

            - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out.
            Default is 0 (no fade-out).

            - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is
            0.

        - **ScheduleActionStartSettings** *(dict) --* The time for the action to start in the
        channel.

          - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start
          time for an action.

            - **Time** *(string) --* Start time for the action to start in the channel. (Not the
            time for the action to be added to the schedule: actions are always added to the
            schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are
            digits (for example, mm might be 01) except for the two constants "T" for time and
            "Z" for "UTC format".

          - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action
          as relative to another action.

            - **FollowPoint** *(string) --* Identifies whether this action starts relative to the
            start or relative to the end of the reference action.

            - **ReferenceActionName** *(string) --* The action name of another action that this
            one refers to.

          - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an
          action that should be applied immediately.
    """


_ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef",
    {"Id3": str},
    total=False,
)


class ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef(
    _ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettings` `HlsTimedMetadataSettings`

    - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
    http://id3.org/id3v2.4.0-structure
    """


_ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef",
    {
        "InputAttachmentNameReference": str,
        "InputClippingSettings": Dict[str, Any],
        "UrlPath": List[Any],
    },
    total=False,
)


class ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef(
    _ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettings` `InputSwitchSettings`

    - **InputAttachmentNameReference** *(string) --* The name of the input attachment
    (not the name of the input!) to switch to. The name is specified in the channel
    configuration.

    - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
    input, in order to set up the input to ingest only a portion of the file.

      - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
      being clipped.

      - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

        - **Timecode** *(string) --* The timecode for the frame where you want to start
        the clip. Optional; if not specified, the clip starts at first frame in the file.
        Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

      - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

        - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
        input (in order to clip the file), you can specify if you want the clip to
        exclude (the default) or include the frame specified by the timecode.

        - **Timecode** *(string) --* The timecode for the frame where you want to stop
        the clip. Optional; if not specified, the clip continues to the end of the file.
        Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

    - **UrlPath** *(list) --* The value for the variable portion of the URL for the
    dynamic input, for this instance of the input. Each time you use the same dynamic
    input in an input switch action, you can provide a different value, in order to
    connect the input to a different content source.

      - *(string) --* Placeholder documentation for __string
    """


_ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef",
    {"Scte35Descriptors": List[Any]},
    total=False,
)


class ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef(
    _ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettings` `Scte35TimeSignalSettings`

    - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
    SCTE-35 time_signal.

      - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

        - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

          - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
          Segmentation Descriptor.

            - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
            restriction parameters.

              - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
              archive_allowed_flag.

              - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
              device_restrictions parameter.

              - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
              no_regional_blackout_flag parameter.

              - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
              web_delivery_allowed_flag parameter.

            - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
            that is valid for the specified segmentation_type_id.

            - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
            segmentation_event_cancel_indicator.

            - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
            segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
            ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter
            time in 90 KHz clock ticks. If you do not enter a duration, the time_signal
            will continue until you insert a cancellation message.

            - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
            segmentation_event_id.

            - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
            segmentation_type_id. One of the segmentation_type_id values listed in the
            SCTE-35 specification. On the console, enter the ID in decimal (for example,
            "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34")
            or decimal (for example, "52").

            - **SegmentationUpid** *(string) --* Corresponds to SCTE-35
            segmentation_upid. Enter a string containing the hexadecimal representation
            of the characters that make up the SCTE-35 segmentation_upid value. Must
            contain an even number of hex characters. Do not include spaces between each
            hex pair. For example, the ASCII "ADS Information" becomes hex
            "41445320496e666f726d6174696f6e.

            - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
            segmentation_upid_type. On the console, enter one of the types listed in the
            SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from
            the specification is "12" in decimal. In the CLI, API, or an SDK, enter one
            of the types listed in the SCTE-35 specification, in either hex (for example,
            "0x0C" ) or in decimal (for example, "12").

            - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35
            segments_expected. A value that is valid for the specified
            segmentation_type_id.

            - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
            value that is valid for the specified segmentation_type_id.

            - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
            sub_segments_expected. A value that is valid for the specified
            segmentation_type_id.
    """


_ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef",
    {
        "Duration": int,
        "FadeIn": int,
        "FadeOut": int,
        "Height": int,
        "Image": Dict[str, Any],
        "ImageX": int,
        "ImageY": int,
        "Layer": int,
        "Opacity": int,
        "Width": int,
    },
    total=False,
)


class ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef(
    _ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettings` `StaticImageActivateSettings`

    - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
    the video. If omitted or set to 0 the duration is unlimited and the image will remain
    until it is explicitly deactivated.

    - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
    fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

    - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
    milliseconds for the image to fade out. The fade-out starts when the duration time is
    hit, so it effectively extends the duration. Default is 0 (no fade-out).

    - **Height** *(integer) --* The height of the image when inserted into the video, in
    pixels. The overlay will be scaled up or down to the specified height. Leave blank to
    use the native height of the overlay.

    - **Image** *(dict) --* The location and filename of the image file to overlay on the
    video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
    pixels) than the input video.

      - **PasswordParam** *(string) --* key used to extract the password from EC2
      Parameter store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
      file accessible to the Live system (eg. a http:// URI) depending on the output
      type. For example, a RTMP destination should have a uri simliar to:
      "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
    left edge of the video frame, in pixels. 0 (the default) is the left edge of the
    frame. If the placement causes the overlay to extend beyond the right edge of the
    underlying video, then the overlay is cropped on the right.

    - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
    top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
    If the placement causes the overlay to extend beyond the bottom edge of the
    underlying video, then the overlay is cropped on the bottom.

    - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that
    can be overlaid on the video, each layer with a different image. The layers are in Z
    order, which means that overlays with higher values of layer are inserted on top of
    overlays with lower values of layer. Default is 0.

    - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
    opaque. Default is 100.

    - **Width** *(integer) --* The width of the image when inserted into the video, in
    pixels. The overlay will be scaled up or down to the specified width. Leave blank to
    use the native width of the overlay.
    """


_ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsTypeDef",
    {
        "HlsTimedMetadataSettings": ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef,
        "InputSwitchSettings": ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef,
        "PauseStateSettings": Dict[str, Any],
        "Scte35ReturnToNetworkSettings": Dict[str, Any],
        "Scte35SpliceInsertSettings": Dict[str, Any],
        "Scte35TimeSignalSettings": ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef,
        "StaticImageActivateSettings": ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef,
        "StaticImageDeactivateSettings": Dict[str, Any],
    },
    total=False,
)


class ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsTypeDef(
    _ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleResponseDeletesScheduleActions` `ScheduleActionSettings`

    - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

      - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
      http://id3.org/id3v2.4.0-structure

    - **InputSwitchSettings** *(dict) --* Action to switch the input

      - **InputAttachmentNameReference** *(string) --* The name of the input attachment
      (not the name of the input!) to switch to. The name is specified in the channel
      configuration.

      - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
      input, in order to set up the input to ingest only a portion of the file.

        - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
        being clipped.

        - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

          - **Timecode** *(string) --* The timecode for the frame where you want to start
          the clip. Optional; if not specified, the clip starts at first frame in the file.
          Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

        - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

          - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
          input (in order to clip the file), you can specify if you want the clip to
          exclude (the default) or include the frame specified by the timecode.

          - **Timecode** *(string) --* The timecode for the frame where you want to stop
          the clip. Optional; if not specified, the clip continues to the end of the file.
          Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

      - **UrlPath** *(list) --* The value for the variable portion of the URL for the
      dynamic input, for this instance of the input. Each time you use the same dynamic
      input in an input switch action, you can provide a different value, in order to
      connect the input to a different content source.

        - *(string) --* Placeholder documentation for __string

    - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
    pipelines

      - **Pipelines** *(list) --* Placeholder documentation for
      __listOfPipelinePauseStateSettings

        - *(dict) --* Settings for pausing a pipeline.

          - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or
          "PIPELINE_1").

    - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35
    return_to_network message

      - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
      as defined in SCTE-35.

    - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert
    message

      - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
      ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
      duration, there is an expectation that the downstream system can read the duration
      and cue in at that time. If you do not enter a duration, the splice_insert will
      continue indefinitely and there is an expectation that you will enter a
      return_to_network to end the splice_insert at the appropriate time.

      - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
      as defined in SCTE-35.

    - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

      - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
      SCTE-35 time_signal.

        - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

          - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

            - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
            Segmentation Descriptor.

              - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
              restriction parameters.

                - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
                archive_allowed_flag.

                - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
                device_restrictions parameter.

                - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
                no_regional_blackout_flag parameter.

                - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
                web_delivery_allowed_flag parameter.

              - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
              that is valid for the specified segmentation_type_id.

              - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
              segmentation_event_cancel_indicator.

              - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
              segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
              ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter
              time in 90 KHz clock ticks. If you do not enter a duration, the time_signal
              will continue until you insert a cancellation message.

              - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
              segmentation_event_id.

              - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
              segmentation_type_id. One of the segmentation_type_id values listed in the
              SCTE-35 specification. On the console, enter the ID in decimal (for example,
              "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34")
              or decimal (for example, "52").

              - **SegmentationUpid** *(string) --* Corresponds to SCTE-35
              segmentation_upid. Enter a string containing the hexadecimal representation
              of the characters that make up the SCTE-35 segmentation_upid value. Must
              contain an even number of hex characters. Do not include spaces between each
              hex pair. For example, the ASCII "ADS Information" becomes hex
              "41445320496e666f726d6174696f6e.

              - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
              segmentation_upid_type. On the console, enter one of the types listed in the
              SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from
              the specification is "12" in decimal. In the CLI, API, or an SDK, enter one
              of the types listed in the SCTE-35 specification, in either hex (for example,
              "0x0C" ) or in decimal (for example, "12").

              - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35
              segments_expected. A value that is valid for the specified
              segmentation_type_id.

              - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
              value that is valid for the specified segmentation_type_id.

              - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
              sub_segments_expected. A value that is valid for the specified
              segmentation_type_id.

    - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

      - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
      the video. If omitted or set to 0 the duration is unlimited and the image will remain
      until it is explicitly deactivated.

      - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
      fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

      - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
      milliseconds for the image to fade out. The fade-out starts when the duration time is
      hit, so it effectively extends the duration. Default is 0 (no fade-out).

      - **Height** *(integer) --* The height of the image when inserted into the video, in
      pixels. The overlay will be scaled up or down to the specified height. Leave blank to
      use the native height of the overlay.

      - **Image** *(dict) --* The location and filename of the image file to overlay on the
      video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
      pixels) than the input video.

        - **PasswordParam** *(string) --* key used to extract the password from EC2
        Parameter store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
        file accessible to the Live system (eg. a http:// URI) depending on the output
        type. For example, a RTMP destination should have a uri simliar to:
        "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
      left edge of the video frame, in pixels. 0 (the default) is the left edge of the
      frame. If the placement causes the overlay to extend beyond the right edge of the
      underlying video, then the overlay is cropped on the right.

      - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
      top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
      If the placement causes the overlay to extend beyond the bottom edge of the
      underlying video, then the overlay is cropped on the bottom.

      - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that
      can be overlaid on the video, each layer with a different image. The layers are in Z
      order, which means that overlays with higher values of layer are inserted on top of
      overlays with lower values of layer. Default is 0.

      - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
      opaque. Default is 100.

      - **Width** *(integer) --* The width of the image when inserted into the video, in
      pixels. The overlay will be scaled up or down to the specified width. Leave blank to
      use the native width of the overlay.

    - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image
    overlay

      - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out.
      Default is 0 (no fade-out).

      - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is
      0.
    """


_ClientBatchUpdateScheduleResponseDeletesScheduleActionsTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleResponseDeletesScheduleActionsTypeDef",
    {
        "ActionName": str,
        "ScheduleActionSettings": ClientBatchUpdateScheduleResponseDeletesScheduleActionsScheduleActionSettingsTypeDef,
        "ScheduleActionStartSettings": Dict[str, Any],
    },
    total=False,
)


class ClientBatchUpdateScheduleResponseDeletesScheduleActionsTypeDef(
    _ClientBatchUpdateScheduleResponseDeletesScheduleActionsTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleResponseDeletes` `ScheduleActions`

    - **ActionName** *(string) --* The name of the action, must be unique within the
    schedule. This name provides the main reference to an action once it is added to the
    schedule. A name is unique if it is no longer in the schedule. The schedule is
    automatically cleaned up to remove actions with a start time of more than 1 hour ago
    (approximately) so at that point a name can be reused.

    - **ScheduleActionSettings** *(dict) --* Settings for this schedule action.

      - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

        - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
        http://id3.org/id3v2.4.0-structure

      - **InputSwitchSettings** *(dict) --* Action to switch the input

        - **InputAttachmentNameReference** *(string) --* The name of the input attachment
        (not the name of the input!) to switch to. The name is specified in the channel
        configuration.

        - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
        input, in order to set up the input to ingest only a portion of the file.

          - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
          being clipped.

          - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

            - **Timecode** *(string) --* The timecode for the frame where you want to start
            the clip. Optional; if not specified, the clip starts at first frame in the file.
            Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

          - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

            - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
            input (in order to clip the file), you can specify if you want the clip to
            exclude (the default) or include the frame specified by the timecode.

            - **Timecode** *(string) --* The timecode for the frame where you want to stop
            the clip. Optional; if not specified, the clip continues to the end of the file.
            Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

        - **UrlPath** *(list) --* The value for the variable portion of the URL for the
        dynamic input, for this instance of the input. Each time you use the same dynamic
        input in an input switch action, you can provide a different value, in order to
        connect the input to a different content source.

          - *(string) --* Placeholder documentation for __string

      - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
      pipelines

        - **Pipelines** *(list) --* Placeholder documentation for
        __listOfPipelinePauseStateSettings

          - *(dict) --* Settings for pausing a pipeline.

            - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or
            "PIPELINE_1").

      - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35
      return_to_network message

        - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
        as defined in SCTE-35.

      - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert
      message

        - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
        ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
        duration, there is an expectation that the downstream system can read the duration
        and cue in at that time. If you do not enter a duration, the splice_insert will
        continue indefinitely and there is an expectation that you will enter a
        return_to_network to end the splice_insert at the appropriate time.

        - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
        as defined in SCTE-35.

      - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

        - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
        SCTE-35 time_signal.

          - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

            - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

              - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
              Segmentation Descriptor.

                - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
                restriction parameters.

                  - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
                  archive_allowed_flag.

                  - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
                  device_restrictions parameter.

                  - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
                  no_regional_blackout_flag parameter.

                  - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
                  web_delivery_allowed_flag parameter.

                - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
                that is valid for the specified segmentation_type_id.

                - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
                segmentation_event_cancel_indicator.

                - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
                segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
                ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter
                time in 90 KHz clock ticks. If you do not enter a duration, the time_signal
                will continue until you insert a cancellation message.

                - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
                segmentation_event_id.

                - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
                segmentation_type_id. One of the segmentation_type_id values listed in the
                SCTE-35 specification. On the console, enter the ID in decimal (for example,
                "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34")
                or decimal (for example, "52").

                - **SegmentationUpid** *(string) --* Corresponds to SCTE-35
                segmentation_upid. Enter a string containing the hexadecimal representation
                of the characters that make up the SCTE-35 segmentation_upid value. Must
                contain an even number of hex characters. Do not include spaces between each
                hex pair. For example, the ASCII "ADS Information" becomes hex
                "41445320496e666f726d6174696f6e.

                - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
                segmentation_upid_type. On the console, enter one of the types listed in the
                SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from
                the specification is "12" in decimal. In the CLI, API, or an SDK, enter one
                of the types listed in the SCTE-35 specification, in either hex (for example,
                "0x0C" ) or in decimal (for example, "12").

                - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35
                segments_expected. A value that is valid for the specified
                segmentation_type_id.

                - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
                value that is valid for the specified segmentation_type_id.

                - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
                sub_segments_expected. A value that is valid for the specified
                segmentation_type_id.

      - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

        - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
        the video. If omitted or set to 0 the duration is unlimited and the image will remain
        until it is explicitly deactivated.

        - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
        fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

        - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
        milliseconds for the image to fade out. The fade-out starts when the duration time is
        hit, so it effectively extends the duration. Default is 0 (no fade-out).

        - **Height** *(integer) --* The height of the image when inserted into the video, in
        pixels. The overlay will be scaled up or down to the specified height. Leave blank to
        use the native height of the overlay.

        - **Image** *(dict) --* The location and filename of the image file to overlay on the
        video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
        pixels) than the input video.

          - **PasswordParam** *(string) --* key used to extract the password from EC2
          Parameter store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
          file accessible to the Live system (eg. a http:// URI) depending on the output
          type. For example, a RTMP destination should have a uri simliar to:
          "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
        left edge of the video frame, in pixels. 0 (the default) is the left edge of the
        frame. If the placement causes the overlay to extend beyond the right edge of the
        underlying video, then the overlay is cropped on the right.

        - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
        top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
        If the placement causes the overlay to extend beyond the bottom edge of the
        underlying video, then the overlay is cropped on the bottom.

        - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that
        can be overlaid on the video, each layer with a different image. The layers are in Z
        order, which means that overlays with higher values of layer are inserted on top of
        overlays with lower values of layer. Default is 0.

        - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
        opaque. Default is 100.

        - **Width** *(integer) --* The width of the image when inserted into the video, in
        pixels. The overlay will be scaled up or down to the specified width. Leave blank to
        use the native width of the overlay.

      - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image
      overlay

        - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out.
        Default is 0 (no fade-out).

        - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is
        0.

    - **ScheduleActionStartSettings** *(dict) --* The time for the action to start in the
    channel.

      - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start
      time for an action.

        - **Time** *(string) --* Start time for the action to start in the channel. (Not the
        time for the action to be added to the schedule: actions are always added to the
        schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are
        digits (for example, mm might be 01) except for the two constants "T" for time and
        "Z" for "UTC format".

      - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action
      as relative to another action.

        - **FollowPoint** *(string) --* Identifies whether this action starts relative to the
        start or relative to the end of the reference action.

        - **ReferenceActionName** *(string) --* The action name of another action that this
        one refers to.

      - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an
      action that should be applied immediately.
    """


_ClientBatchUpdateScheduleResponseDeletesTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleResponseDeletesTypeDef",
    {
        "ScheduleActions": List[
            ClientBatchUpdateScheduleResponseDeletesScheduleActionsTypeDef
        ]
    },
    total=False,
)


class ClientBatchUpdateScheduleResponseDeletesTypeDef(
    _ClientBatchUpdateScheduleResponseDeletesTypeDef
):
    """
    Type definition for `ClientBatchUpdateScheduleResponse` `Deletes`

    - **ScheduleActions** *(list) --* List of actions that have been deleted from the schedule.

      - *(dict) --* Contains information on a single schedule action.

        - **ActionName** *(string) --* The name of the action, must be unique within the
        schedule. This name provides the main reference to an action once it is added to the
        schedule. A name is unique if it is no longer in the schedule. The schedule is
        automatically cleaned up to remove actions with a start time of more than 1 hour ago
        (approximately) so at that point a name can be reused.

        - **ScheduleActionSettings** *(dict) --* Settings for this schedule action.

          - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

            - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
            http://id3.org/id3v2.4.0-structure

          - **InputSwitchSettings** *(dict) --* Action to switch the input

            - **InputAttachmentNameReference** *(string) --* The name of the input attachment
            (not the name of the input!) to switch to. The name is specified in the channel
            configuration.

            - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
            input, in order to set up the input to ingest only a portion of the file.

              - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
              being clipped.

              - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

                - **Timecode** *(string) --* The timecode for the frame where you want to start
                the clip. Optional; if not specified, the clip starts at first frame in the file.
                Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

              - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

                - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
                input (in order to clip the file), you can specify if you want the clip to
                exclude (the default) or include the frame specified by the timecode.

                - **Timecode** *(string) --* The timecode for the frame where you want to stop
                the clip. Optional; if not specified, the clip continues to the end of the file.
                Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

            - **UrlPath** *(list) --* The value for the variable portion of the URL for the
            dynamic input, for this instance of the input. Each time you use the same dynamic
            input in an input switch action, you can provide a different value, in order to
            connect the input to a different content source.

              - *(string) --* Placeholder documentation for __string

          - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
          pipelines

            - **Pipelines** *(list) --* Placeholder documentation for
            __listOfPipelinePauseStateSettings

              - *(dict) --* Settings for pausing a pipeline.

                - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or
                "PIPELINE_1").

          - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35
          return_to_network message

            - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
            as defined in SCTE-35.

          - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert
          message

            - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
            ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
            duration, there is an expectation that the downstream system can read the duration
            and cue in at that time. If you do not enter a duration, the splice_insert will
            continue indefinitely and there is an expectation that you will enter a
            return_to_network to end the splice_insert at the appropriate time.

            - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
            as defined in SCTE-35.

          - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

            - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
            SCTE-35 time_signal.

              - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

                - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

                  - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
                  Segmentation Descriptor.

                    - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
                    restriction parameters.

                      - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
                      archive_allowed_flag.

                      - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
                      device_restrictions parameter.

                      - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
                      no_regional_blackout_flag parameter.

                      - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
                      web_delivery_allowed_flag parameter.

                    - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
                    that is valid for the specified segmentation_type_id.

                    - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
                    segmentation_event_cancel_indicator.

                    - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
                    segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
                    ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter
                    time in 90 KHz clock ticks. If you do not enter a duration, the time_signal
                    will continue until you insert a cancellation message.

                    - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
                    segmentation_event_id.

                    - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
                    segmentation_type_id. One of the segmentation_type_id values listed in the
                    SCTE-35 specification. On the console, enter the ID in decimal (for example,
                    "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34")
                    or decimal (for example, "52").

                    - **SegmentationUpid** *(string) --* Corresponds to SCTE-35
                    segmentation_upid. Enter a string containing the hexadecimal representation
                    of the characters that make up the SCTE-35 segmentation_upid value. Must
                    contain an even number of hex characters. Do not include spaces between each
                    hex pair. For example, the ASCII "ADS Information" becomes hex
                    "41445320496e666f726d6174696f6e.

                    - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
                    segmentation_upid_type. On the console, enter one of the types listed in the
                    SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from
                    the specification is "12" in decimal. In the CLI, API, or an SDK, enter one
                    of the types listed in the SCTE-35 specification, in either hex (for example,
                    "0x0C" ) or in decimal (for example, "12").

                    - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35
                    segments_expected. A value that is valid for the specified
                    segmentation_type_id.

                    - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
                    value that is valid for the specified segmentation_type_id.

                    - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
                    sub_segments_expected. A value that is valid for the specified
                    segmentation_type_id.

          - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

            - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
            the video. If omitted or set to 0 the duration is unlimited and the image will remain
            until it is explicitly deactivated.

            - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
            fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

            - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
            milliseconds for the image to fade out. The fade-out starts when the duration time is
            hit, so it effectively extends the duration. Default is 0 (no fade-out).

            - **Height** *(integer) --* The height of the image when inserted into the video, in
            pixels. The overlay will be scaled up or down to the specified height. Leave blank to
            use the native height of the overlay.

            - **Image** *(dict) --* The location and filename of the image file to overlay on the
            video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
            pixels) than the input video.

              - **PasswordParam** *(string) --* key used to extract the password from EC2
              Parameter store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
              file accessible to the Live system (eg. a http:// URI) depending on the output
              type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
            left edge of the video frame, in pixels. 0 (the default) is the left edge of the
            frame. If the placement causes the overlay to extend beyond the right edge of the
            underlying video, then the overlay is cropped on the right.

            - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
            top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
            If the placement causes the overlay to extend beyond the bottom edge of the
            underlying video, then the overlay is cropped on the bottom.

            - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that
            can be overlaid on the video, each layer with a different image. The layers are in Z
            order, which means that overlays with higher values of layer are inserted on top of
            overlays with lower values of layer. Default is 0.

            - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
            opaque. Default is 100.

            - **Width** *(integer) --* The width of the image when inserted into the video, in
            pixels. The overlay will be scaled up or down to the specified width. Leave blank to
            use the native width of the overlay.

          - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image
          overlay

            - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out.
            Default is 0 (no fade-out).

            - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is
            0.

        - **ScheduleActionStartSettings** *(dict) --* The time for the action to start in the
        channel.

          - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start
          time for an action.

            - **Time** *(string) --* Start time for the action to start in the channel. (Not the
            time for the action to be added to the schedule: actions are always added to the
            schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are
            digits (for example, mm might be 01) except for the two constants "T" for time and
            "Z" for "UTC format".

          - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action
          as relative to another action.

            - **FollowPoint** *(string) --* Identifies whether this action starts relative to the
            start or relative to the end of the reference action.

            - **ReferenceActionName** *(string) --* The action name of another action that this
            one refers to.

          - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an
          action that should be applied immediately.
    """


_ClientBatchUpdateScheduleResponseTypeDef = TypedDict(
    "_ClientBatchUpdateScheduleResponseTypeDef",
    {
        "Creates": ClientBatchUpdateScheduleResponseCreatesTypeDef,
        "Deletes": ClientBatchUpdateScheduleResponseDeletesTypeDef,
    },
    total=False,
)


class ClientBatchUpdateScheduleResponseTypeDef(
    _ClientBatchUpdateScheduleResponseTypeDef
):
    """
    Type definition for `ClientBatchUpdateSchedule` `Response`

    - **Creates** *(dict) --* Schedule actions created in the schedule.

      - **ScheduleActions** *(list) --* List of actions that have been created in the schedule.

        - *(dict) --* Contains information on a single schedule action.

          - **ActionName** *(string) --* The name of the action, must be unique within the
          schedule. This name provides the main reference to an action once it is added to the
          schedule. A name is unique if it is no longer in the schedule. The schedule is
          automatically cleaned up to remove actions with a start time of more than 1 hour ago
          (approximately) so at that point a name can be reused.

          - **ScheduleActionSettings** *(dict) --* Settings for this schedule action.

            - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

              - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
              http://id3.org/id3v2.4.0-structure

            - **InputSwitchSettings** *(dict) --* Action to switch the input

              - **InputAttachmentNameReference** *(string) --* The name of the input attachment
              (not the name of the input!) to switch to. The name is specified in the channel
              configuration.

              - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
              input, in order to set up the input to ingest only a portion of the file.

                - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
                being clipped.

                - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

                  - **Timecode** *(string) --* The timecode for the frame where you want to start
                  the clip. Optional; if not specified, the clip starts at first frame in the file.
                  Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

                - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

                  - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
                  input (in order to clip the file), you can specify if you want the clip to
                  exclude (the default) or include the frame specified by the timecode.

                  - **Timecode** *(string) --* The timecode for the frame where you want to stop
                  the clip. Optional; if not specified, the clip continues to the end of the file.
                  Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

              - **UrlPath** *(list) --* The value for the variable portion of the URL for the
              dynamic input, for this instance of the input. Each time you use the same dynamic
              input in an input switch action, you can provide a different value, in order to
              connect the input to a different content source.

                - *(string) --* Placeholder documentation for __string

            - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
            pipelines

              - **Pipelines** *(list) --* Placeholder documentation for
              __listOfPipelinePauseStateSettings

                - *(dict) --* Settings for pausing a pipeline.

                  - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or
                  "PIPELINE_1").

            - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35
            return_to_network message

              - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
              as defined in SCTE-35.

            - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert
            message

              - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
              ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
              duration, there is an expectation that the downstream system can read the duration
              and cue in at that time. If you do not enter a duration, the splice_insert will
              continue indefinitely and there is an expectation that you will enter a
              return_to_network to end the splice_insert at the appropriate time.

              - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
              as defined in SCTE-35.

            - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

              - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
              SCTE-35 time_signal.

                - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

                  - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

                    - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
                    Segmentation Descriptor.

                      - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
                      restriction parameters.

                        - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
                        archive_allowed_flag.

                        - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
                        device_restrictions parameter.

                        - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
                        no_regional_blackout_flag parameter.

                        - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
                        web_delivery_allowed_flag parameter.

                      - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
                      that is valid for the specified segmentation_type_id.

                      - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
                      segmentation_event_cancel_indicator.

                      - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
                      segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
                      ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter
                      time in 90 KHz clock ticks. If you do not enter a duration, the time_signal
                      will continue until you insert a cancellation message.

                      - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
                      segmentation_event_id.

                      - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
                      segmentation_type_id. One of the segmentation_type_id values listed in the
                      SCTE-35 specification. On the console, enter the ID in decimal (for example,
                      "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34")
                      or decimal (for example, "52").

                      - **SegmentationUpid** *(string) --* Corresponds to SCTE-35
                      segmentation_upid. Enter a string containing the hexadecimal representation
                      of the characters that make up the SCTE-35 segmentation_upid value. Must
                      contain an even number of hex characters. Do not include spaces between each
                      hex pair. For example, the ASCII "ADS Information" becomes hex
                      "41445320496e666f726d6174696f6e.

                      - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
                      segmentation_upid_type. On the console, enter one of the types listed in the
                      SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from
                      the specification is "12" in decimal. In the CLI, API, or an SDK, enter one
                      of the types listed in the SCTE-35 specification, in either hex (for example,
                      "0x0C" ) or in decimal (for example, "12").

                      - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35
                      segments_expected. A value that is valid for the specified
                      segmentation_type_id.

                      - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
                      value that is valid for the specified segmentation_type_id.

                      - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
                      sub_segments_expected. A value that is valid for the specified
                      segmentation_type_id.

            - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

              - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
              the video. If omitted or set to 0 the duration is unlimited and the image will remain
              until it is explicitly deactivated.

              - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
              fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

              - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
              milliseconds for the image to fade out. The fade-out starts when the duration time is
              hit, so it effectively extends the duration. Default is 0 (no fade-out).

              - **Height** *(integer) --* The height of the image when inserted into the video, in
              pixels. The overlay will be scaled up or down to the specified height. Leave blank to
              use the native height of the overlay.

              - **Image** *(dict) --* The location and filename of the image file to overlay on the
              video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
              pixels) than the input video.

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                file accessible to the Live system (eg. a http:// URI) depending on the output
                type. For example, a RTMP destination should have a uri simliar to:
                "rtmp://fmsserver/live".

                - **Username** *(string) --* Documentation update needed

              - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
              left edge of the video frame, in pixels. 0 (the default) is the left edge of the
              frame. If the placement causes the overlay to extend beyond the right edge of the
              underlying video, then the overlay is cropped on the right.

              - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
              top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
              If the placement causes the overlay to extend beyond the bottom edge of the
              underlying video, then the overlay is cropped on the bottom.

              - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that
              can be overlaid on the video, each layer with a different image. The layers are in Z
              order, which means that overlays with higher values of layer are inserted on top of
              overlays with lower values of layer. Default is 0.

              - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
              opaque. Default is 100.

              - **Width** *(integer) --* The width of the image when inserted into the video, in
              pixels. The overlay will be scaled up or down to the specified width. Leave blank to
              use the native width of the overlay.

            - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image
            overlay

              - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out.
              Default is 0 (no fade-out).

              - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is
              0.

          - **ScheduleActionStartSettings** *(dict) --* The time for the action to start in the
          channel.

            - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start
            time for an action.

              - **Time** *(string) --* Start time for the action to start in the channel. (Not the
              time for the action to be added to the schedule: actions are always added to the
              schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are
              digits (for example, mm might be 01) except for the two constants "T" for time and
              "Z" for "UTC format".

            - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action
            as relative to another action.

              - **FollowPoint** *(string) --* Identifies whether this action starts relative to the
              start or relative to the end of the reference action.

              - **ReferenceActionName** *(string) --* The action name of another action that this
              one refers to.

            - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an
            action that should be applied immediately.

    - **Deletes** *(dict) --* Schedule actions deleted from the schedule.

      - **ScheduleActions** *(list) --* List of actions that have been deleted from the schedule.

        - *(dict) --* Contains information on a single schedule action.

          - **ActionName** *(string) --* The name of the action, must be unique within the
          schedule. This name provides the main reference to an action once it is added to the
          schedule. A name is unique if it is no longer in the schedule. The schedule is
          automatically cleaned up to remove actions with a start time of more than 1 hour ago
          (approximately) so at that point a name can be reused.

          - **ScheduleActionSettings** *(dict) --* Settings for this schedule action.

            - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

              - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
              http://id3.org/id3v2.4.0-structure

            - **InputSwitchSettings** *(dict) --* Action to switch the input

              - **InputAttachmentNameReference** *(string) --* The name of the input attachment
              (not the name of the input!) to switch to. The name is specified in the channel
              configuration.

              - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
              input, in order to set up the input to ingest only a portion of the file.

                - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
                being clipped.

                - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

                  - **Timecode** *(string) --* The timecode for the frame where you want to start
                  the clip. Optional; if not specified, the clip starts at first frame in the file.
                  Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

                - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

                  - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
                  input (in order to clip the file), you can specify if you want the clip to
                  exclude (the default) or include the frame specified by the timecode.

                  - **Timecode** *(string) --* The timecode for the frame where you want to stop
                  the clip. Optional; if not specified, the clip continues to the end of the file.
                  Enter the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

              - **UrlPath** *(list) --* The value for the variable portion of the URL for the
              dynamic input, for this instance of the input. Each time you use the same dynamic
              input in an input switch action, you can provide a different value, in order to
              connect the input to a different content source.

                - *(string) --* Placeholder documentation for __string

            - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
            pipelines

              - **Pipelines** *(list) --* Placeholder documentation for
              __listOfPipelinePauseStateSettings

                - *(dict) --* Settings for pausing a pipeline.

                  - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or
                  "PIPELINE_1").

            - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35
            return_to_network message

              - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
              as defined in SCTE-35.

            - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert
            message

              - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
              ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
              duration, there is an expectation that the downstream system can read the duration
              and cue in at that time. If you do not enter a duration, the splice_insert will
              continue indefinitely and there is an expectation that you will enter a
              return_to_network to end the splice_insert at the appropriate time.

              - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
              as defined in SCTE-35.

            - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

              - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
              SCTE-35 time_signal.

                - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

                  - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

                    - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
                    Segmentation Descriptor.

                      - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
                      restriction parameters.

                        - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
                        archive_allowed_flag.

                        - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
                        device_restrictions parameter.

                        - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
                        no_regional_blackout_flag parameter.

                        - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
                        web_delivery_allowed_flag parameter.

                      - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
                      that is valid for the specified segmentation_type_id.

                      - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
                      segmentation_event_cancel_indicator.

                      - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
                      segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
                      ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter
                      time in 90 KHz clock ticks. If you do not enter a duration, the time_signal
                      will continue until you insert a cancellation message.

                      - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
                      segmentation_event_id.

                      - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
                      segmentation_type_id. One of the segmentation_type_id values listed in the
                      SCTE-35 specification. On the console, enter the ID in decimal (for example,
                      "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34")
                      or decimal (for example, "52").

                      - **SegmentationUpid** *(string) --* Corresponds to SCTE-35
                      segmentation_upid. Enter a string containing the hexadecimal representation
                      of the characters that make up the SCTE-35 segmentation_upid value. Must
                      contain an even number of hex characters. Do not include spaces between each
                      hex pair. For example, the ASCII "ADS Information" becomes hex
                      "41445320496e666f726d6174696f6e.

                      - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
                      segmentation_upid_type. On the console, enter one of the types listed in the
                      SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from
                      the specification is "12" in decimal. In the CLI, API, or an SDK, enter one
                      of the types listed in the SCTE-35 specification, in either hex (for example,
                      "0x0C" ) or in decimal (for example, "12").

                      - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35
                      segments_expected. A value that is valid for the specified
                      segmentation_type_id.

                      - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
                      value that is valid for the specified segmentation_type_id.

                      - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
                      sub_segments_expected. A value that is valid for the specified
                      segmentation_type_id.

            - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

              - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
              the video. If omitted or set to 0 the duration is unlimited and the image will remain
              until it is explicitly deactivated.

              - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
              fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

              - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
              milliseconds for the image to fade out. The fade-out starts when the duration time is
              hit, so it effectively extends the duration. Default is 0 (no fade-out).

              - **Height** *(integer) --* The height of the image when inserted into the video, in
              pixels. The overlay will be scaled up or down to the specified height. Leave blank to
              use the native height of the overlay.

              - **Image** *(dict) --* The location and filename of the image file to overlay on the
              video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
              pixels) than the input video.

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                file accessible to the Live system (eg. a http:// URI) depending on the output
                type. For example, a RTMP destination should have a uri simliar to:
                "rtmp://fmsserver/live".

                - **Username** *(string) --* Documentation update needed

              - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
              left edge of the video frame, in pixels. 0 (the default) is the left edge of the
              frame. If the placement causes the overlay to extend beyond the right edge of the
              underlying video, then the overlay is cropped on the right.

              - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
              top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
              If the placement causes the overlay to extend beyond the bottom edge of the
              underlying video, then the overlay is cropped on the bottom.

              - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that
              can be overlaid on the video, each layer with a different image. The layers are in Z
              order, which means that overlays with higher values of layer are inserted on top of
              overlays with lower values of layer. Default is 0.

              - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
              opaque. Default is 100.

              - **Width** *(integer) --* The width of the image when inserted into the video, in
              pixels. The overlay will be scaled up or down to the specified width. Leave blank to
              use the native width of the overlay.

            - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image
            overlay

              - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out.
              Default is 0 (no fade-out).

              - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is
              0.

          - **ScheduleActionStartSettings** *(dict) --* The time for the action to start in the
          channel.

            - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start
            time for an action.

              - **Time** *(string) --* Start time for the action to start in the channel. (Not the
              time for the action to be added to the schedule: actions are always added to the
              schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are
              digits (for example, mm might be 01) except for the two constants "T" for time and
              "Z" for "UTC format".

            - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action
            as relative to another action.

              - **FollowPoint** *(string) --* Identifies whether this action starts relative to the
              start or relative to the end of the reference action.

              - **ReferenceActionName** *(string) --* The action name of another action that this
              one refers to.

            - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an
            action that should be applied immediately.
    """


_ClientCreateChannelDestinationsTypeDef = TypedDict(
    "_ClientCreateChannelDestinationsTypeDef",
    {"Id": str, "MediaPackageSettings": List[Any], "Settings": List[Any]},
    total=False,
)


class ClientCreateChannelDestinationsTypeDef(_ClientCreateChannelDestinationsTypeDef):
    """
    Type definition for `ClientCreateChannel` `Destinations`

    - **Id** *(string) --* User-specified id. This is used in an output group or an output.

    - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one
    destination for both encoders.

      - *(dict) --* MediaPackage Output Destination Settings

        - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination for
        this output group. You do not need to specify the individual inputs in MediaPackage;
        MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage
        inputs. The MediaPackage channel and MediaLive channel must be in the same region.

    - **Settings** *(list) --* Destination settings for a standard output; one destination for each
    redundant encoder.

      - *(dict) --* Placeholder documentation for OutputDestinationSettings

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

        - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)

        - **Url** *(string) --* A URL specifying a destination

        - **Username** *(string) --* username for destination
    """


_ClientCreateChannelEncoderSettingsAvailBlankingTypeDef = TypedDict(
    "_ClientCreateChannelEncoderSettingsAvailBlankingTypeDef",
    {"AvailBlankingImage": Dict[str, Any], "State": str},
    total=False,
)


class ClientCreateChannelEncoderSettingsAvailBlankingTypeDef(
    _ClientCreateChannelEncoderSettingsAvailBlankingTypeDef
):
    """
    Type definition for `ClientCreateChannelEncoderSettings` `AvailBlanking`

    - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid black.
    Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

      - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to
      a file accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked
    when insertion metadata is added.
    """


_ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef = TypedDict(
    "_ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef",
    {
        "AdAvailOffset": int,
        "NoRegionalBlackoutFlag": str,
        "WebDeliveryAllowedFlag": str,
    },
    total=False,
)


class ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef(
    _ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef
):
    """
    Type definition for `ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettings` `Scte35SpliceInsert`

    - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added
    to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does
    not apply to OOB messages.

    - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
    noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
    webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef = TypedDict(
    "_ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef",
    {
        "AdAvailOffset": int,
        "NoRegionalBlackoutFlag": str,
        "WebDeliveryAllowedFlag": str,
    },
    total=False,
)


class ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef(
    _ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef
):
    """
    Type definition for `ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettings` `Scte35TimeSignalApos`

    - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added
    to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does
    not apply to OOB messages.

    - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
    noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
    webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsTypeDef = TypedDict(
    "_ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsTypeDef",
    {
        "Scte35SpliceInsert": ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef,
        "Scte35TimeSignalApos": ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef,
    },
    total=False,
)


class ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsTypeDef(
    _ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelEncoderSettingsAvailConfiguration` `AvailSettings`

    - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

      - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added
      to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does
      not apply to OOB messages.

      - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
      noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
      webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

      - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added
      to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does
      not apply to OOB messages.

      - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
      noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
      webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientCreateChannelEncoderSettingsAvailConfigurationTypeDef = TypedDict(
    "_ClientCreateChannelEncoderSettingsAvailConfigurationTypeDef",
    {
        "AvailSettings": ClientCreateChannelEncoderSettingsAvailConfigurationAvailSettingsTypeDef
    },
    total=False,
)


class ClientCreateChannelEncoderSettingsAvailConfigurationTypeDef(
    _ClientCreateChannelEncoderSettingsAvailConfigurationTypeDef
):
    """
    Type definition for `ClientCreateChannelEncoderSettings` `AvailConfiguration`

    - **AvailSettings** *(dict) --* Ad avail settings.

      - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

        - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added
        to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does
        not apply to OOB messages.

        - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
        noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
        webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

        - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added
        to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does
        not apply to OOB messages.

        - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
        noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
        webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientCreateChannelEncoderSettingsBlackoutSlateTypeDef = TypedDict(
    "_ClientCreateChannelEncoderSettingsBlackoutSlateTypeDef",
    {
        "BlackoutSlateImage": Dict[str, Any],
        "NetworkEndBlackout": str,
        "NetworkEndBlackoutImage": Dict[str, Any],
        "NetworkId": str,
        "State": str,
    },
    total=False,
)


class ClientCreateChannelEncoderSettingsBlackoutSlateTypeDef(
    _ClientCreateChannelEncoderSettingsBlackoutSlateTypeDef
):
    """
    Type definition for `ClientCreateChannelEncoderSettings` `BlackoutSlate`

    - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid
    black. Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

      - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to
      a file accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout the
    video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35
    Network End Segmentation Descriptor is encountered. The blackout will be lifted when the
    Network Start Segmentation Descriptor is encountered. The Network End and Network Start
    descriptors must contain a network ID that matches the value entered in "Network ID".

    - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout
    image. Image will be scaled to fill the entire output raster.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

      - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to
      a file accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
    "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked
    when indicated by program metadata.
    """


_ClientCreateChannelEncoderSettingsGlobalConfigurationInputLossBehaviorTypeDef = TypedDict(
    "_ClientCreateChannelEncoderSettingsGlobalConfigurationInputLossBehaviorTypeDef",
    {
        "BlackFrameMsec": int,
        "InputLossImageColor": str,
        "InputLossImageSlate": Dict[str, Any],
        "InputLossImageType": str,
        "RepeatFrameMsec": int,
    },
    total=False,
)


class ClientCreateChannelEncoderSettingsGlobalConfigurationInputLossBehaviorTypeDef(
    _ClientCreateChannelEncoderSettingsGlobalConfigurationInputLossBehaviorTypeDef
):
    """
    Type definition for `ClientCreateChannelEncoderSettingsGlobalConfiguration` `InputLossBehavior`

    - **BlackFrameMsec** *(integer) --* Documentation update needed

    - **InputLossImageColor** *(string) --* When input loss image type is "color" this field
    specifies the color to use. Value: 6 hex characters representing the values of RGB.

    - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields
    specify the parameters for accessing the slate.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

      - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path
      to a file accessible to the Live system (eg. a http:// URI) depending on the output type.
      For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a
    slate into the output after input loss exceeds blackFrameMsec.

    - **RepeatFrameMsec** *(integer) --* Documentation update needed
    """


_ClientCreateChannelEncoderSettingsGlobalConfigurationTypeDef = TypedDict(
    "_ClientCreateChannelEncoderSettingsGlobalConfigurationTypeDef",
    {
        "InitialAudioGain": int,
        "InputEndAction": str,
        "InputLossBehavior": ClientCreateChannelEncoderSettingsGlobalConfigurationInputLossBehaviorTypeDef,
        "OutputLockingMode": str,
        "OutputTimingSource": str,
        "SupportLowFramerateInputs": str,
    },
    total=False,
)


class ClientCreateChannelEncoderSettingsGlobalConfigurationTypeDef(
    _ClientCreateChannelEncoderSettingsGlobalConfigurationTypeDef
):
    """
    Type definition for `ClientCreateChannelEncoderSettings` `GlobalConfiguration`

    - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live Event.

    - **InputEndAction** *(string) --* Indicates the action to take when the current input
    completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart
    at the beginning of the first input. When "none" is configured the encoder will transcode
    either black, a solid color, or a user specified slate images per the "Input Loss Behavior"
    configuration until the next input switch occurs (which is controlled through the Channel
    Schedule API).

    - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

      - **BlackFrameMsec** *(integer) --* Documentation update needed

      - **InputLossImageColor** *(string) --* When input loss image type is "color" this field
      specifies the color to use. Value: 6 hex characters representing the values of RGB.

      - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields
      specify the parameters for accessing the slate.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

        - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path
        to a file accessible to the Live system (eg. a http:// URI) depending on the output type.
        For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a
      slate into the output after input loss exceeds blackFrameMsec.

      - **RepeatFrameMsec** *(integer) --* Documentation update needed

    - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
    PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to the
    other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each pipeline to the
    Unix epoch.

    - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the Live
    encoder should be paced by its system clock (which optionally may be locked to another source
    via NTP) or should be locked to the clock of the source that is providing the input stream.

    - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with very
    low video framerates. This is commonly set to enabled for music channels with less than one
    video frame per second.
    """


_RequiredClientCreateChannelEncoderSettingsTypeDef = TypedDict(
    "_RequiredClientCreateChannelEncoderSettingsTypeDef",
    {
        "AudioDescriptions": List[Any],
        "OutputGroups": List[Dict],
        "TimecodeConfig": Dict[str, Any],
        "VideoDescriptions": List[Any],
    },
)
_OptionalClientCreateChannelEncoderSettingsTypeDef = TypedDict(
    "_OptionalClientCreateChannelEncoderSettingsTypeDef",
    {
        "AvailBlanking": ClientCreateChannelEncoderSettingsAvailBlankingTypeDef,
        "AvailConfiguration": ClientCreateChannelEncoderSettingsAvailConfigurationTypeDef,
        "BlackoutSlate": ClientCreateChannelEncoderSettingsBlackoutSlateTypeDef,
        "CaptionDescriptions": List[Dict],
        "GlobalConfiguration": ClientCreateChannelEncoderSettingsGlobalConfigurationTypeDef,
    },
    total=False,
)


class ClientCreateChannelEncoderSettingsTypeDef(
    _RequiredClientCreateChannelEncoderSettingsTypeDef,
    _OptionalClientCreateChannelEncoderSettingsTypeDef,
):
    """
    Type definition for `ClientCreateChannel` `EncoderSettings`

    - **AudioDescriptions** *(list) --* **[REQUIRED]** Placeholder documentation for
    __listOfAudioDescription

      - *(dict) --* Audio Description

        - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

          - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms to
          the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

          - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is corrected
          using the chosen algorithm. If set to measureOnly, the audio will be measured but not
          adjusted.

          - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
          entered, a default value will be used according to the chosen algorithm. The CALM Act
          (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2) recommends a
          target of -23 LKFS.

        - **AudioSelectorName** *(string) --* **[REQUIRED]** The name of the AudioSelector used as
        the source for this AudioDescription.

        - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The values
        for audioType are defined in ISO-IEC 13818-1.

        - **AudioTypeControl** *(string) --* Determines how audio type is determined. followInput: If
        the input contains an ISO 639 audioType, then that value is passed through to the output. If
        the input contains no ISO 639 audioType, the value in Audio Type is included in the output.
        useConfigured: The value in Audio Type is included in the output. Note that this field and
        audioType are both ignored if inputType is broadcasterMixedAd.

        - **CodecSettings** *(dict) --* Audio codec settings.

          - **AacSettings** *(dict) --* Aac Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on rate
            control mode and profile.

            - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values depend
            on rate control mode and profile. The adReceiverMix setting receives a stereo description
            plus control track and emits a mono AAC encode of the description track, with control
            data emitted in the PES header as per ETSI TS 101 154 Annex E.

            - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains pre-mixed
            main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be
            set to 3, which signals to downstream systems that this stream contains "broadcaster
            mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the
            encoder does not perform the mixing. The values in audioTypeControl and audioType (in
            AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when
            input does not contain pre-mixed audio + AD.

            - **Profile** *(string) --* AAC Profile.

            - **RateControlMode** *(string) --* Rate Control Mode.

            - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

            - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control mode
            and profile.

            - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
            MPEG-2 Transport Stream containers.

            - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is VBR.

          - **Ac3Settings** *(dict) --* Ac3 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the
            coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted
            AC-3 stream. See ATSC A/52-2012 for background on these values.

            - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
            audio is Dolby Digital, dialnorm will be passed through.

            - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
            signaling to the output bitstream as defined in the Dolby Digital specification.

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the
            LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

            - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will be
            sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was
            not supplied from one of these streams, then the static metadata settings will be used.

          - **Eac3Settings** *(dict) --* Eac3 Settings

            - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
            attenuation to the surround channels. Only used for 3/2 coding mode.

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the
            coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted
            E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

            - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
            channels.

            - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for all
            input channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input audio
            is Dolby Digital Plus, dialnorm will be passed through.

            - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

            - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
            ensures that the instantaneous signal peaks do not exceed specified levels.

            - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the LFE
            channel

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the
            LFE channel prior to encoding. Only valid with codingMode32 coding mode.

            - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only used
            for 3/2 coding mode.

            - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
            used for 3/2 coding mode.

            - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only used
            for 3/2 coding mode.

            - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level. Only
            used for 3/2 coding mode.

            - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
            sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was
            not supplied from one of these streams, then the static metadata settings will be used.

            - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will be
            passed through if it is present on the input. This detection is dynamic over the life of
            the transcode. Inputs that alternate between DD+ and non-DD+ content will have a
            consistent DD+ output as the system alternates between passthrough and encoding.

            - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree phase
            shift to the surround channels. Only used for 3/2 coding mode.

            - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
            mode.

            - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra center
            back surround channel is matrix encoded into the left and right surround channels.

            - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround is
            matrix encoded into the two channels.

          - **Mp2Settings** *(dict) --* Mp2 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second.

            - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are codingMode10
            (for mono) or codingMode20 (for stereo).

            - **SampleRate** *(float) --* Sample rate in Hz.

          - **PassThroughSettings** *(dict) --* Pass Through Settings

        - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only used
        if languageControlMode is useConfigured, or there is no ISO 639 language code specified in
        the input.

        - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639 language
        code of the output to follow the ISO 639 language code of the input. The languageCode will be
        used when useConfigured is set, or when followInput is selected but there is no ISO 639
        language code specified by the input.

        - **Name** *(string) --* **[REQUIRED]** The name of this AudioDescription. Outputs will use
        this name to uniquely identify this AudioDescription. Description names should be unique
        within this Live Event.

        - **RemixSettings** *(dict) --* Settings that control how input audio channels are remixed
        into the output audio channels.

          - **ChannelMappings** *(list) --* **[REQUIRED]** Mapping of input channels to output
          channels, with appropriate gain adjustments.

            - *(dict) --* Audio Channel Mapping

              - **InputChannelLevels** *(list) --* **[REQUIRED]** Indices and gain values for each
              input channel that should be remixed into this output channel.

                - *(dict) --* Input Channel Level

                  - **Gain** *(integer) --* **[REQUIRED]** Remixing value. Units are in dB and
                  acceptable values are within the range from -60 (mute) and 6 dB.

                  - **InputChannel** *(integer) --* **[REQUIRED]** The index of the input channel
                  used as a source.

              - **OutputChannel** *(integer) --* **[REQUIRED]** The index of the output channel being
              produced.

          - **ChannelsIn** *(integer) --* Number of input channels to be used.

          - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid values: 1,
          2, 4, 6, 8

        - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the name
        displayed by the player (eg. English, or Director Commentary).

    - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

      - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid black.
      Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

        - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to
        a file accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked
      when insertion metadata is added.

    - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.

      - **AvailSettings** *(dict) --* Ad avail settings.

        - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added
          to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does
          not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
          noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
          webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added
          to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does
          not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
          noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
          webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **BlackoutSlate** *(dict) --* Settings for blackout slate.

      - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid
      black. Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

        - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to
        a file accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout the
      video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35
      Network End Segmentation Descriptor is encountered. The blackout will be lifted when the
      Network Start Segmentation Descriptor is encountered. The Network End and Network Start
      descriptors must contain a network ID that matches the value entered in "Network ID".

      - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout
      image. Image will be scaled to fill the entire output raster.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

        - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to
        a file accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
      "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked
      when indicated by program metadata.

    - **CaptionDescriptions** *(list) --* Settings for caption decriptions

      - *(dict) --* Output groups for this Live Event. Output groups contain information about where
      streams should be distributed.

        - **CaptionSelectorName** *(string) --* **[REQUIRED]** Specifies which input caption selector
        to use as a caption source when generating output captions. This field should match a
        captionSelector name.

        - **DestinationSettings** *(dict) --* Additional settings for captions destination that
        depend on the destination type.

          - **AribDestinationSettings** *(dict) --* Arib Destination Settings

          - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting
            alignment to centered will place the captions at the bottom center of the output.
            Similarly, setting a left alignment will align captions to the bottom left of the output.
            If x and y positions are given in conjunction with the alignment parameter, the font will
            be justified (either left or centered) relative to those coordinates. Selecting "smart"
            justification will left-justify live subtitles and center-justify pre-recorded subtitles.
            All burn-in and DVB-Sub font settings must match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle.
            255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it
            to 0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension must
            be 'ttf' or 'tte'. Although the user can select output fonts for many different types of
            input captions, embedded, STL and teletext sources use a strict grid system. Using
            external fonts with these caption sources could cause unexpected display of proportional
            fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
              store

              - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a
              path to a file accessible to the Live system (eg. a http:// URI) depending on the
              output type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option
            is not valid for source captions that are STL, 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is
            opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96
            dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the size
            of the output. Giving a positive integer will specify the exact font size in points. All
            burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid
            for source captions that are either 608/embedded or teletext. These source settings are
            already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must
            match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is
            not valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions.
            All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0
            is transparent. Leaving this parameter out is equivalent to setting it to 0
            (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative
            to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the
            left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative
            to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above
            the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used
            to generate the output subtitles bitmap. Only applicable for Teletext inputs and
            DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative
            to the left side of the output in pixels. A value of 10 would result in the captions
            starting 10 pixels from the left of the output. If no explicit xPosition is provided, the
            horizontal caption position will be determined by the alignment parameter. All burn-in
            and DVB-Sub font settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to
            the top of the output in pixels. A value of 10 would result in the captions starting 10
            pixels from the top of the output. If no explicit yPosition is provided, the caption will
            be positioned towards the bottom of the output. All burn-in and DVB-Sub font settings
            must match.

          - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting
            alignment to centered will place the captions at the bottom center of the output.
            Similarly, setting a left alignment will align captions to the bottom left of the output.
            If x and y positions are given in conjunction with the alignment parameter, the font will
            be justified (either left or centered) relative to those coordinates. Selecting "smart"
            justification will left-justify live subtitles and center-justify pre-recorded subtitles.
            This option is not valid for source captions that are STL or 608/embedded. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle.
            255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it
            to 0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension must
            be 'ttf' or 'tte'. Although the user can select output fonts for many different types of
            input captions, embedded, STL and teletext sources use a strict grid system. Using
            external fonts with these caption sources could cause unexpected display of proportional
            fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
              store

              - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a
              path to a file accessible to the Live system (eg. a http:// URI) depending on the
              output type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option
            is not valid for source captions that are STL, 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is
            opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96
            dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to auto fontSize will scale depending on the size
            of the output. Giving a positive integer will specify the exact font size in points. All
            burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid
            for source captions that are either 608/embedded or teletext. These source settings are
            already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must
            match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is
            not valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions.
            All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0
            is transparent. Leaving this parameter blank is equivalent to setting it to 0
            (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative
            to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the
            left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative
            to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above
            the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used
            to generate the output subtitles bitmap. Only applicable for Teletext inputs and
            DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative
            to the left side of the output in pixels. A value of 10 would result in the captions
            starting 10 pixels from the left of the output. If no explicit xPosition is provided, the
            horizontal caption position will be determined by the alignment parameter. This option is
            not valid for source captions that are STL, 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to
            the top of the output in pixels. A value of 10 would result in the captions starting 10
            pixels from the top of the output. If no explicit yPosition is provided, the caption will
            be positioned towards the bottom of the output. This option is not valid for source
            captions that are STL, 608/embedded or teletext. These source settings are already
            pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

          - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

          - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20 Destination
          Settings

          - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination Settings

          - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded Destination
          Settings

          - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

          - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

          - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

          - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

            - **StyleControl** *(string) --* When set to passthrough, passes through style and
            position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the CFF-TT
            output or TTML output.

          - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

        - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
        http://www.loc.gov/standards/iso639-2/

        - **LanguageDescription** *(string) --* Human readable information to indicate captions
        available for players (eg. English, or Spanish).

        - **Name** *(string) --* **[REQUIRED]** Name of the caption description. Used to associate a
        caption description with an output. Names must be unique within an event.

    - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a whole.

      - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live Event.

      - **InputEndAction** *(string) --* Indicates the action to take when the current input
      completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart
      at the beginning of the first input. When "none" is configured the encoder will transcode
      either black, a solid color, or a user specified slate images per the "Input Loss Behavior"
      configuration until the next input switch occurs (which is controlled through the Channel
      Schedule API).

      - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

        - **BlackFrameMsec** *(integer) --* Documentation update needed

        - **InputLossImageColor** *(string) --* When input loss image type is "color" this field
        specifies the color to use. Value: 6 hex characters representing the values of RGB.

        - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields
        specify the parameters for accessing the slate.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

          - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path
          to a file accessible to the Live system (eg. a http:// URI) depending on the output type.
          For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a
        slate into the output after input loss exceeds blackFrameMsec.

        - **RepeatFrameMsec** *(integer) --* Documentation update needed

      - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
      PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to the
      other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each pipeline to the
      Unix epoch.

      - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the Live
      encoder should be paced by its system clock (which optionally may be locked to another source
      via NTP) or should be locked to the clock of the source that is providing the input stream.

      - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with very
      low video framerates. This is commonly set to enabled for music channels with less than one
      video frame per second.

    - **OutputGroups** *(list) --* **[REQUIRED]** Placeholder documentation for __listOfOutputGroup

      - *(dict) --* Output groups for this Live Event. Output groups contain information about where
      streams should be distributed.

        - **Name** *(string) --* Custom output group name optionally defined by the user. Only
        letters, numbers, and the underscore character allowed; only 32 characters allowed.

        - **OutputGroupSettings** *(dict) --* **[REQUIRED]** Settings associated with the output
        group.

          - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

            - **Destination** *(dict) --* **[REQUIRED]** A directory and base filename where archive
            files should be written.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **RolloverInterval** *(integer) --* Number of seconds to write to archive file before
            closing and starting a new one.

          - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

            - **Destination** *(dict) --* **[REQUIRED]** The destination for the frame capture files.
            Either the URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
            s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
            container, plus a file name prefix (for example,
            mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of the
            prefix from the destination field (for example, "curling_") + name modifier + the counter
            (5 digits, starting from 00001) + extension (which is always .jpg). For example,
            curlingLow.00001.jpg

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **HlsGroupSettings** *(dict) --* Hls Group Settings

            - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals
            through to this group of Apple HLS outputs.

              - *(string) --* Hls Ad Markers

            - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to each
            output in the media .m3u8 file. Can be used if base manifest is delivered from a
            different URL than the main .m3u8 file.

            - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to each
            output in the media .m3u8 file. Can be used if base manifest is delivered from a
            different URL than the main .m3u8 file.

            - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to caption
            languages. Is only meaningful if captionLanguageSetting is set to "insert".

              - *(dict) --* Maps a caption channel to an ISO 693-2 language code
              (http://www.loc.gov/standards/iso639-2), with an optional description.

                - **CaptionChannel** *(integer) --* **[REQUIRED]** The closed caption channel being
                described by this CaptionLanguageMapping. Each channel mapping must have a unique
                channel number (maximum of 4)

                - **LanguageCode** *(string) --* **[REQUIRED]** Three character ISO 639-2 language
                code (see http://www.loc.gov/standards/iso639-2)

                - **LanguageDescription** *(string) --* **[REQUIRED]** Textual description of language

            - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output captions.
            insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in
            the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you
            specify. Make sure to specify the languages in the order in which they appear in the
            original source (if the source is embedded format) or the order of the caption selectors
            (if the source is other than embedded). Otherwise, languages in the manifest will not
            match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in
            the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.

            - **ClientCache** *(string) --* When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no
            tag in the manifest, which prevents clients from saving media segments for later replay.

            - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default
            RFC-4281) during m3u8 playlist generation.

            - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit, 16-byte
            hex value represented by a 32-character text string. If ivSource is set to "explicit"
            then this parameter is required and is used as the IV for encryption.

            - **Destination** *(dict) --* **[REQUIRED]** A directory or HTTP destination for the HLS
            segments, manifest files, and encryption keys (if enabled).

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **DirectoryStructure** *(string) --* Place segments in subdirectories.

            - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
            scheme. Exclude this parameter if no encryption is desired.

            - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

              - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
                outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer
                encoding to Akamai. User should contact Akamai to enable this feature.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before the
                Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
                wait until a restart is initiated. A value of 0 means never restart.

                - **Salt** *(string) --* Salt for authenticated Akamai.

                - **Token** *(string) --* Token parameter for authenticated akamai. If not specified,
                _gda_ is used.

              - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
                outputs.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before the
                Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
                wait until a restart is initiated. A value of 0 means never restart.

              - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
                outputs.

                - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are
                stored in non-persistent memory for faster reading and writing.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before the
                Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
                wait until a restart is initiated. A value of 0 means never restart.

              - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
                outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer
                encoding to WebDAV.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before the
                Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
                wait until a restart is initiated. A value of 0 means never restart.

            - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only manifest,
            but do create the master and media manifests (according to the Output Selection field).
            STANDARD: Create an I-frame-only manifest for each output that contains video, as well as
            the other manifests (according to the Output Selection field). The I-frame manifest
            contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more
            #EXT-X-BYTERANGE entries identifying the I-frame position. For example,
            #EXT-X-BYTERANGE:160364@1461888"

            - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
            maximum number of segments in the media manifest file. After this maximum, older segments
            are removed from the media manifest. This number must be less than or equal to the Keep
            Segments field.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on input
            loss.

            - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization
            Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If
            set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.

            - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization Vector)
            is a 128-bit number used in conjunction with the key for encrypting blocks. If this
            setting is "followsSegmentNumber", it will cause the IV to change every segment (to match
            the segment number). If this is set to "explicit", you must enter a constantIv value.

            - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
            number of media segments (.ts files) to retain in the destination directory.

            - **KeyFormat** *(string) --* The value specifies how the key is represented in the
            resource identified by the URI. If parameter is absent, an implicit value of "identity"
            is used. A reverse DNS string can also be given.

            - **KeyFormatVersions** *(string) --* Either a single positive integer version value or a
            slash delimited list of version values (1/2/3).

            - **KeyProviderSettings** *(dict) --* The key provider settings.

              - **StaticKeySettings** *(dict) --* Static Key Settings

                - **KeyProviderServer** *(dict) --* The URL of the license server used for protecting
                content.

                  - **PasswordParam** *(string) --* key used to extract the password from EC2
                  Parameter store

                  - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be
                  a path to a file accessible to the Live system (eg. a http:// URI) depending on the
                  output type. For example, a RTMP destination should have a uri simliar to:
                  "rtmp://fmsserver/live".

                  - **Username** *(string) --* Documentation update needed

                - **StaticKeyValue** *(string) --* **[REQUIRED]** Static key value as a 32 character
                hexadecimal string.

            - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

            - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest should
            use floating point or integer values for segment duration.

            - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
            looking ahead and back within the specified range for a nearby avail and extending the
            segment size if needed.

            - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in the
            destination and manifest. If "live", only the number segments specified in keepSegments
            and indexNSegments are kept; newer segments replace older segments, which may prevent
            players from rewinding all the way to the beginning of the event. VOD mode uses HLS
            EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type
            manifest on completion of the stream.

            - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests (master
            manifest, if applicable, and media manifests) for this output group. SEGMENTSONLY: Does
            not generate any manifests for this output group.

            - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in
            .m3u8 manifest files. The value is calculated as follows: either the program date and
            time are initialized using the input timecode source, or the time is initialized using
            the input timecode source and the date is initialized using the timestampOffset.

            - **ProgramDateTimePeriod** *(integer) --* Period of insertion of EXT-X-PROGRAM-DATE-TIME
            entry, in seconds.

            - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for each
            pipeline includes information about both pipelines: first its own media files, then the
            media files of the other pipeline. This feature allows playout device that support stale
            manifest detection to switch from one manifest to the other, when the current manifest
            seems to be stale. There are still two destinations and two master manifests, but both
            master manifests reference the media files from both pipelines. DISABLED: The master
            manifest (.m3u8 file) for each pipeline includes information about its own pipeline only.
            For an HLS output group with MediaPackage as the destination, the DISABLED behavior is
            always followed. MediaPackage regenerates the manifests it serves to players so a
            redundant manifest from MediaLive is irrelevant.

            - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to create
            (in seconds). Note that segments will end on the next keyframe after this number of
            seconds, so actual segment length may be longer.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
            subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream
            for this setting to have an effect.

            - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for video
            in EXT-X-STREAM-INF tag of variant manifest.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

            - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
            offset to fine tune the timestamps.

            - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments - multiple
            .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the program as a
            single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index
            segments for playback. A typical use for this value is when sending the output to AWS
            Elemental MediaConvert, which can accept only a single media file. Playback while the
            channel is running is not guaranteed due to HTTP server caching.

          - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

            - **Destination** *(dict) --* **[REQUIRED]** MediaPackage channel destination.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

            - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point Identity"
            element used in each message placed in the sparse track. Only enabled if sparseTrackType
            is not "none".

            - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only MS
            Smooth output, the fragment absolute time will be set to the current timecode. This
            option does not write timecodes to the audio elementary stream.

            - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
            certificate chain to a trusted Certificate Authority (CA). This will cause https outputs
            to self-signed certificates to fail.

            - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying
            connection to the IIS server if the connection is lost. Content will be cached during
            this time and the cache will be be delivered to the IIS server once the connection is
            re-established.

            - **Destination** *(dict) --* **[REQUIRED]** Smooth Streaming publish point on an IIS
            server. Elemental Live acts as a "Push" encoder to IIS.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should only
            be specified if eventIdMode is set to useConfigured.

            - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the IIS
            server. If no event ID is sent and the same Live Event is used without changing the
            publishing point, clients might see cached video from the previous run. Options: -
            "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and send
            an event ID based on the current timestamp - "noEventId" - do not send an event ID to the
            IIS server.

            - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS server
            when stopping the event

            - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
            outputs.

            - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds).
            Fragment length must be compatible with GOP size and framerate.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on input
            loss.

            - **NumRetries** *(integer) --* Number of retry attempts.

            - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due to
            output failure, due to exhausting the numRetries on one segment, or exceeding
            filecacheDuration.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the
            second pipeline.

            - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages to
            generate a sparse track in this group of MS-Smooth outputs.

            - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so
            publishing point doesn't start until all streams start.

            - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
            timestampOffsetMode is set to useConfiguredOffset.

            - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
            useEventStartDate: Use the date the event was started as the offset -
            useConfiguredOffset: Use an explicitly configured date as the offset

          - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

            - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting
            with CDN

            - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up. If
            remote origin server stalls the RTMP connection and does not accept content fast enough
            the 'Media Cache' will fill up. When the cache reaches the duration specified by
            cacheLength the cache will stop accepting new content. If set to disconnectImmediately,
            the RTMP output will force a disconnect. Clear the media cache, and reconnect after
            restartDelay seconds. If set to waitForServer, the RTMP output will wait up to 5 minutes
            to allow the origin server to begin accepting data again.

            - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate buffer
            size.

            - **CaptionData** *(string) --* Controls the types of data that passes to onCaptionInfo
            outputs. If set to 'all' then 608 and 708 carried DTVCC data will be passed. If set to
            'field1AndField2608' then DTVCC data will be stripped out, but 608 data from both fields
            will be passed. If set to 'field1608' then only the data carried in 608 from field 1
            video will be passed.

            - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input
            becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput: Stop
            transmitting data until input returns. This does not close the underlying RTMP connection.

            - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait
            until a restart is initiated. A value of 0 means never restart.

          - **UdpGroupSettings** *(dict) --* Udp Group Settings

            - **InputLossAction** *(string) --* Specifies behavior of last resort when input video is
            lost, and no more backup inputs are available. When dropTs is selected the entire
            transport stream will stop being emitted. When dropProgram is selected the program can be
            dropped from the transport stream (and replaced with null packets to meet the TS bitrate
            requirement). Or, when emitProgram is chosen the transport stream will continue to be
            produced normally with repeat frames, black frames, or slate frames substituted for the
            absent input video.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

        - **Outputs** *(list) --* **[REQUIRED]** Placeholder documentation for __listOfOutput

          - *(dict) --* Output settings. There can be multiple outputs within a group.

            - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as audio
            sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used as
            caption sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **OutputName** *(string) --* The name used to identify an output.

            - **OutputSettings** *(dict) --* **[REQUIRED]** Output type-specific settings.

              - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                - **ContainerSettings** *(dict) --* **[REQUIRED]** Settings specific to the container
                type of the file.

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream is
                    removed from the input. This allows the output audio configuration to dynamically
                    change based on input configuration. If this is set to encodeSilence, all output
                    audio streams will output encoded silence when not connected to an active input
                    stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing
                    and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in
                    the transport stream. Can be entered as a decimal or hexadecimal value. Valid
                    values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for
                    ARIB Captions will be auto-selected from unused pids. If set to useConfigured,
                    ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for
                    Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for
                    each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                    stream(s) in the transport stream. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182
                    (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for
                    AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits
                    per second. Setting to 0 lets the muxer automatically determine the appropriate
                    bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer model
                    for accurate interleaving. Setting to bufferModel to none can lead to lower
                    latency, but low-memory devices may not be able to play back the stream without
                    interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at
                    the specified table repetition interval.

                      - **NetworkId** *(integer) --* **[REQUIRED]** The numeric value placed in the
                      Network Information Table (NIT).

                      - **NetworkName** *(string) --* **[REQUIRED]** The network name text placed in
                      the networkNameDescriptor inside the Network Information Table. Maximum length
                      is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at
                    the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information into
                      output stream. The sdtFollow setting copies SDT information from input stream
                      to output stream. The sdtFollowIfPresent setting copies SDT information from
                      input stream to output stream if SDT information is present in the input,
                      otherwise it will fall back on the user-defined values. The sdtManual setting
                      means user will enter the SDT information. The sdtNone setting means output
                      stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be entered in
                    ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                    values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                    specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB
                    Teletext data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                    input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                    audio EBP markers will be added to partitions 3 and 4. The interval between these
                    additional markers will be fixed, and will be slightly shorter than the video EBP
                    marker interval. Only available when EBP Cablelabs segmentation markers are
                    selected. Partitions 1 and 2 will always follow the video interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                    Points do not come within the specified time interval of each other by looking
                    ahead at input video. If another EBP is going to come in within the specified
                    time interval, the current EBP is not emitted, and the segment is "stretched" to
                    the next marker. The lookahead value does not add latency to the system. The Live
                    Event must be configured elsewhere to create sufficient latency to make the
                    lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set
                    to videoAndAudioPids, EBP markers will be placed on the video PID and all audio
                    PIDs. If set to videoPid, EBP markers will be placed on only the video PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES
                    header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV
                    Platform data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                    Signal data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used
                    with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input
                    source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data
                    to this output. Multiple values are accepted, and can be entered in ranges and/or
                    by comma separation. Can be entered as decimal or hexadecimal values. Each PID
                    specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a downstream
                    encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between instances of
                    this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                    Reference value is inserted for every Packetized Elementary Stream (PES) header.
                    This parameter is effective only when the PCR PID is the same as the video or
                    audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock
                    Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference
                    (PCR) in the transport stream. When no value is given, the encoder will assign
                    the same value as the Video PID. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between instances of
                    this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                    (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in the
                    Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27
                    data to this output. Multiple values are accepted, and can be entered in ranges
                    and/or by comma separation. Can be entered as decimal or hexadecimal values. Each
                    PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input
                    source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in
                    the transport stream. Can be entered as a decimal or hexadecimal value. Valid
                    values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                    segmentationTime period. raiSegstart sets the Random Access Indicator bit in the
                    adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the
                    private data bytes. psiSegstart inserts PAT and PMT tables at the start of
                    segments. ebp adds Encoder Boundary Point information to the adaptation field as
                    per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary
                    Point information to the adaptation field using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter controls
                    how segmentation markers are inserted into the transport stream. With avails, it
                    is possible that segments may be truncated, which can influence where future
                    segmentation markers are inserted. When a segmentation style of "resetCadence" is
                    selected and a segment is truncated due to an avail, we will reset the
                    segmentation cadence. This means the subsequent segment will have a duration of
                    $segmentationTime seconds. When a segmentation style of "maintainCadence" is
                    selected and a segment is truncated due to an avail, we will not reset the
                    segmentation cadence. This means the subsequent segment will likely be truncated
                    as well. However, all segments after that will have a duration of
                    $segmentationTime seconds. Note that EBP lookahead is a slight exception to this
                    rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata
                    will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID field
                    in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                    stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Extension** *(string) --* Output file extension. If excluded, this will be
                auto-selected from the container type.

                - **NameModifier** *(string) --* String concatenated to the end of the destination
                filename. Required for multiple outputs of the same type.

              - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                - **NameModifier** *(string) --* Required if the output group contains more than one
                output. This modifier forms part of the output file name.

              - **HlsOutputSettings** *(dict) --* Hls Output Settings

                - **HlsSettings** *(dict) --* **[REQUIRED]** Settings regarding the underlying
                stream. These settings are different for audio-only outputs.

                  - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                    - **AudioGroupId** *(string) --* Specifies the group to which the audio Rendition
                    belongs.

                    - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image to
                    use as the cover art for an audio-only output. We recommend a low bit-size file
                    because the image increases the output audio bandwidth. The image is attached to
                    the audio as an ID3 tag, frame type APIC, picture type 0x10, as per the "ID3 tag
                    version 2.4.0 - Native Frames" standard.

                      - **PasswordParam** *(string) --* key used to extract the password from EC2
                      Parameter store

                      - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This
                      should be a path to a file accessible to the Live system (eg. a http:// URI)
                      depending on the output type. For example, a RTMP destination should have a uri
                      simliar to: "rtmp://fmsserver/live".

                      - **Username** *(string) --* Documentation update needed

                    - **AudioTrackType** *(string) --* Four types of audio-only tracks are supported:
                    Audio-Only Variant Stream The client can play back this audio-only stream instead
                    of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the
                    HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the
                    client should try to play back by default. Represented as an EXT-X-MEDIA in the
                    HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not
                    Default Alternate rendition that the client may try to play back by default.
                    Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES
                    Alternate Audio, not Auto Select Alternate rendition that the client will not try
                    to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with
                    DEFAULT=NO, AUTOSELECT=NO

                  - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                    - **AudioRenditionSets** *(string) --* List all the audio groups that are used
                    with the video output stream. Input all the audio GROUP-IDs that are associated
                    to the video, separate by ','.

                    - **M3u8Settings** *(dict) --* **[REQUIRED]** Settings information for the .m3u8
                    container

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for
                      each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                      stream(s) in the transport stream. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values.

                      - **EcmPid** *(string) --* This parameter is unused and deprecated.

                      - **PatInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. A value of \\"0\\" writes out the
                      PMT once per segment file.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                      Reference value is inserted for every Packetized Elementary Stream (PES)
                      header. This parameter is effective only when the PCR PID is the same as the
                      video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock References (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the encoder
                      will assign the same value as the Video PID. Can be entered as a decimal or
                      hexadecimal value.

                      - **PmtInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. A value of \\"0\\" writes out the
                      PMT once per segment file.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                      (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.

                      - **ProgramNum** *(integer) --* The value of the program number field in the
                      Program Map Table.

                      - **Scte35Behavior** *(string) --* If set to passthrough, passes any SCTE-35
                      signals from the input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in
                      the transport stream. Can be entered as a decimal or hexadecimal value.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata is passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                      stream in the transport stream. Can be entered as a decimal or hexadecimal
                      value.

                - **NameModifier** *(string) --* String concatenated to the end of the destination
                filename. Accepts \\"Format Identifiers\\":#formatIdentifierParameters.

                - **SegmentModifier** *(string) --* String concatenated to end of segment filenames.

              - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

              - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                - **H265PackagingType** *(string) --* Only applicable when this output is referencing
                an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1
                or HVC1.

                - **NameModifier** *(string) --* String concatenated to the end of the destination
                filename. Required for multiple outputs of the same type.

              - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls
                certificate chain to a trusted Certificate Authority (CA). This will cause rtmps
                outputs with self-signed certificates to fail.

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying a connection to the Flash Media server if the connection is lost.

                - **Destination** *(dict) --* **[REQUIRED]** The RTMP endpoint excluding the stream
                name (eg. rtmp://host/appname). For connection to Akamai, a username and password
                must be supplied. URI fields accept format identifiers.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **NumRetries** *(integer) --* Number of retry attempts.

              - **UdpOutputSettings** *(dict) --* Udp Output Settings

                - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger values
                increase latency through the transcoder but simultaneously assist the transcoder in
                maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery,
                input switching, input disruptions, picture reordering, etc.

                - **ContainerSettings** *(dict) --* **[REQUIRED]** Udp Container Settings

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream is
                    removed from the input. This allows the output audio configuration to dynamically
                    change based on input configuration. If this is set to encodeSilence, all output
                    audio streams will output encoded silence when not connected to an active input
                    stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing
                    and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in
                    the transport stream. Can be entered as a decimal or hexadecimal value. Valid
                    values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for
                    ARIB Captions will be auto-selected from unused pids. If set to useConfigured,
                    ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for
                    Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for
                    each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                    stream(s) in the transport stream. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182
                    (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for
                    AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits
                    per second. Setting to 0 lets the muxer automatically determine the appropriate
                    bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer model
                    for accurate interleaving. Setting to bufferModel to none can lead to lower
                    latency, but low-memory devices may not be able to play back the stream without
                    interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at
                    the specified table repetition interval.

                      - **NetworkId** *(integer) --* **[REQUIRED]** The numeric value placed in the
                      Network Information Table (NIT).

                      - **NetworkName** *(string) --* **[REQUIRED]** The network name text placed in
                      the networkNameDescriptor inside the Network Information Table. Maximum length
                      is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at
                    the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information into
                      output stream. The sdtFollow setting copies SDT information from input stream
                      to output stream. The sdtFollowIfPresent setting copies SDT information from
                      input stream to output stream if SDT information is present in the input,
                      otherwise it will fall back on the user-defined values. The sdtManual setting
                      means user will enter the SDT information. The sdtNone setting means output
                      stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be entered in
                    ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                    values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                    specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB
                    Teletext data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                    input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                    audio EBP markers will be added to partitions 3 and 4. The interval between these
                    additional markers will be fixed, and will be slightly shorter than the video EBP
                    marker interval. Only available when EBP Cablelabs segmentation markers are
                    selected. Partitions 1 and 2 will always follow the video interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                    Points do not come within the specified time interval of each other by looking
                    ahead at input video. If another EBP is going to come in within the specified
                    time interval, the current EBP is not emitted, and the segment is "stretched" to
                    the next marker. The lookahead value does not add latency to the system. The Live
                    Event must be configured elsewhere to create sufficient latency to make the
                    lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set
                    to videoAndAudioPids, EBP markers will be placed on the video PID and all audio
                    PIDs. If set to videoPid, EBP markers will be placed on only the video PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES
                    header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV
                    Platform data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                    Signal data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used
                    with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input
                    source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data
                    to this output. Multiple values are accepted, and can be entered in ranges and/or
                    by comma separation. Can be entered as decimal or hexadecimal values. Each PID
                    specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a downstream
                    encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between instances of
                    this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                    Reference value is inserted for every Packetized Elementary Stream (PES) header.
                    This parameter is effective only when the PCR PID is the same as the video or
                    audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock
                    Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference
                    (PCR) in the transport stream. When no value is given, the encoder will assign
                    the same value as the Video PID. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between instances of
                    this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                    (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in the
                    Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27
                    data to this output. Multiple values are accepted, and can be entered in ranges
                    and/or by comma separation. Can be entered as decimal or hexadecimal values. Each
                    PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input
                    source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in
                    the transport stream. Can be entered as a decimal or hexadecimal value. Valid
                    values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                    segmentationTime period. raiSegstart sets the Random Access Indicator bit in the
                    adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the
                    private data bytes. psiSegstart inserts PAT and PMT tables at the start of
                    segments. ebp adds Encoder Boundary Point information to the adaptation field as
                    per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary
                    Point information to the adaptation field using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter controls
                    how segmentation markers are inserted into the transport stream. With avails, it
                    is possible that segments may be truncated, which can influence where future
                    segmentation markers are inserted. When a segmentation style of "resetCadence" is
                    selected and a segment is truncated due to an avail, we will reset the
                    segmentation cadence. This means the subsequent segment will have a duration of
                    $segmentationTime seconds. When a segmentation style of "maintainCadence" is
                    selected and a segment is truncated due to an avail, we will not reset the
                    segmentation cadence. This means the subsequent segment will likely be truncated
                    as well. However, all segments after that will have a duration of
                    $segmentationTime seconds. Note that EBP lookahead is a slight exception to this
                    rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata
                    will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID field
                    in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                    stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Destination** *(dict) --* **[REQUIRED]** Destination address and port number for
                RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg.
                rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward Error
                Correction on UDP outputs.

                  - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of the
                  FEC protection matrix. The number of transport stream packets per column error
                  correction packet. Must be between 4 and 20, inclusive.

                  - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                  - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the FEC
                  protection matrix. Must be between 1 and 20, inclusive. If only Column FEC is used,
                  then larger values increase robustness. If Row FEC is used, then this is the number
                  of transport stream packets per row error correction packet, and the value must be
                  between 4 and 20, inclusive, if includeFec is columnAndRow. If includeFec is
                  column, this value must be 1 to 20, inclusive.

            - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the
            source for this output.

    - **TimecodeConfig** *(dict) --* **[REQUIRED]** Contains settings used to acquire and adjust
    timecode information from inputs.

      - **Source** *(string) --* **[REQUIRED]** Identifies the source for the timecode that will be
      associated with the events outputs. -Embedded (embedded): Initialize the output timecode with
      timecode from the the source. If no embedded timecode is detected in the source, the system
      falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time.
      -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.

      - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
      resynchronized to the input timecode. Discrepancies below this threshold are permitted to avoid
      unnecessary discontinuities in the output timecode. No timecode sync when this is not specified.

    - **VideoDescriptions** *(list) --* **[REQUIRED]** Placeholder documentation for
    __listOfVideoDescription

      - *(dict) --* Video settings for this stream.

        - **CodecSettings** *(dict) --* Video codec settings.

          - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

            - **CaptureInterval** *(integer) --* **[REQUIRED]** The frequency, in seconds, for
            capturing frames for inclusion in the output. For example, "10" means capture a frame
            every 10 seconds.

          - **H264Settings** *(dict) --* H264 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input AFD
            value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value
            will be the value configured in the fixedAfd parameter.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output
            must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.

            - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be filled
            (HRD buffer model).

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
              conversion to the output

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main or
            High profile) or cavlc.

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the
            output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each frame to
            reduce flicker or 'pop' on I-frames.

            - **FramerateControl** *(string) --* This field indicates how the output video frame rate
            is specified. If "specified" is selected then the output video frame rate is determined
            by framerateNumerator and framerateDenominator, else if "initializeFromSource" is
            selected then the output video frame rate will be set equal to the input video frame rate
            of the first input.

            - **FramerateDenominator** *(integer) --* Framerate denominator.

            - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction,
            e.g. 24000 / 1001 = 23.976 fps.

            - **GopBReference** *(string) --* Documentation update needed

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining mid-stream
            will receive an IDR frame as quickly as possible. Setting this value to 0 will break
            output segmenting.

            - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
            seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run time.

            - **Level** *(string) --* H.264 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease
            latency and memory usage, while high can produce better quality for certain content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR: Set
            the maximum bitrate in order to accommodate expected spikes in the complexity of the
            video.

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled.
            Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene
            Change Detection. If a scene change I-frame is within I-interval frames of a cadence
            I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch
            requires enabling lookahead as well as setting I-interval. The normal cadence resumes for
            the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1

            - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may use
            more than requested if using B-frames and/or interlaced encoding.

            - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio is
            specified. If "specified" is selected then the output video pixel aspect ratio is
            determined by parNumerator and parDenominator, else if "initializeFromSource" is selected
            then the output pixsel aspect ratio will be set equal to the input video pixel aspect
            ratio of the first input.

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.264 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode.
            Applies only when the rate control mode is QVBR. Set values for the QVBR quality level
            field and Max bitrate field that suit your most important viewing devices. Recommended
            values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet:
            Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M
            to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate. Recommended
            if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary, depending on the
            video complexity. Recommended instead of QVBR if you want to maintain a specific average
            bitrate over the duration of the channel. CBR: Quality varies, depending on the video
            complexity. Recommended only if you distribute your assets to devices that cannot handle
            variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames when
            scene change is detected. - Off: does not force an I-frame when scene change is detected.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to
            the number of macroblock rows for progressive pictures, and less than or equal to half
            the number of macroblock rows for interlaced pictures. This field is optional; when no
            value is specified the encoder will choose the number of slices based on encode
            resolution.

            - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values reduce
            high-frequency content in the encoded image.

            - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each frame
            based on spatial variation of content complexity.

            - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per sub-GOP.
            If set to dynamic, optimize the number of B-frames used for each sub-GOP to improve
            visual quality.

            - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

            - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each frame
            based on temporal variation of content complexity.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into
            the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei':
            Pass through picture timing SEI messages from the source specified in Timecode Config

          - **H265Settings** *(dict) --* H265 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input AFD
            value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value
            will be the value configured in the fixedAfd parameter.

            - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
            Alternative Transfer Function SEI message to support backwards compatibility with non-HDR
            decoders and displays.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output
            must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
              conversion to the output

              - **Hdr10Settings** *(dict) --* Hdr10 Settings

                - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
                defining the maximum light level, in nits, of any single pixel within an encoded HDR
                video stream or file.

                - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata
                value defining the maximum average light level, in nits, for any single frame within
                an encoded HDR video stream or file.

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the
            output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each frame to
            reduce flicker or 'pop' on I-frames.

            - **FramerateDenominator** *(integer) --* **[REQUIRED]** Framerate denominator.

            - **FramerateNumerator** *(integer) --* **[REQUIRED]** Framerate numerator - framerate is
            a fraction, e.g. 24000 / 1001 = 23.976 fps.

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining mid-stream
            will receive an IDR frame as quickly as possible. Setting this value to 0 will break
            output segmenting.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
            seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run time.

            - **Level** *(string) --* H.265 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease
            latency and memory usage, while high can produce better quality for certain content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled.
            Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene
            Change Detection. If a scene change I-frame is within I-interval frames of a cadence
            I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch
            requires enabling lookahead as well as setting I-interval. The normal cadence resumes for
            the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.265 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode.
            Applies only when the rate control mode is QVBR. Set values for the QVBR quality level
            field and Max bitrate field that suit your most important viewing devices. Recommended
            values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet:
            Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M
            to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate. Recommended
            if you or your viewers pay for bandwidth. CBR: Quality varies, depending on the video
            complexity. Recommended only if you distribute your assets to devices that cannot handle
            variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to
            the number of macroblock rows for progressive pictures, and less than or equal to half
            the number of macroblock rows for interlaced pictures. This field is optional; when no
            value is specified the encoder will choose the number of slices based on encode
            resolution.

            - **Tier** *(string) --* H.265 Tier.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into
            the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei':
            Pass through picture timing SEI messages from the source specified in Timecode Config

        - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For most
        codecs, you can leave this field and width blank in order to use the height and width
        (resolution) from the source. Note, however, that leaving blank is not recommended. For the
        Frame Capture codec, height and width are required.

        - **Name** *(string) --* **[REQUIRED]** The name of this VideoDescription. Outputs will use
        this name to uniquely identify this Description. Description names should be unique within
        this Live Event.

        - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the input
        stream. RESPOND causes input video to be clipped, depending on the AFD value, input display
        aspect ratio, and output display aspect ratio, and (except for FRAMECAPTURE codec) includes
        the values in the output. PASSTHROUGH (does not apply to FRAMECAPTURE codec) ignores the AFD
        values and includes the values in the output, so input video is not clipped. NONE ignores the
        AFD values and does not include the values through to the output, so input video is not
        clipped.

        - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to stretch
        the video to the specified output resolution (height and width). This option will override
        any position value. DEFAULT may insert black boxes (pillar boxes or letter boxes) around the
        video to provide the specified output resolution.

        - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
        scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended for
        most content.

        - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For most
        codecs, you can leave this field and height blank in order to use the height and width
        (resolution) from the source. Note, however, that leaving blank is not recommended. For the
        Frame Capture codec, height and width are required.
    """


_ClientCreateChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef = TypedDict(
    "_ClientCreateChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    {"HlsInputSettings": Dict[str, Any], "ServerValidation": str},
    total=False,
)


class ClientCreateChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef(
    _ClientCreateChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelInputAttachmentsInputSettings` `NetworkInputSettings`

    - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS
    manifest.

      - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that
      most closely matches this value will be chosen, otherwise the highest bandwidth stream in
      the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS
      manifest.

      - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin
      this many buffer segments from the end (most recently written segment). When not
      specified, the HLS input will begin with the first segment specified in the m3u8.

      - **Retries** *(integer) --* The number of consecutive times that attempts to read a
      manifest or segment must fail before the input is considered unavailable.

      - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt
      to read a manifest or segment fails.

    - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
    checkCryptographyOnly, cryptography in the certificate will be checked, but not the
    server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do
    not strictly match the corresponding certificate's wildcard pattern and would otherwise
    cause the event to error. This setting is ignored for protocols that do not use https.
    """


_ClientCreateChannelInputAttachmentsInputSettingsTypeDef = TypedDict(
    "_ClientCreateChannelInputAttachmentsInputSettingsTypeDef",
    {
        "AudioSelectors": List[Any],
        "CaptionSelectors": List[Any],
        "DeblockFilter": str,
        "DenoiseFilter": str,
        "FilterStrength": int,
        "InputFilter": str,
        "NetworkInputSettings": ClientCreateChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef,
        "SourceEndBehavior": str,
        "VideoSelector": Dict[str, Any],
    },
    total=False,
)


class ClientCreateChannelInputAttachmentsInputSettingsTypeDef(
    _ClientCreateChannelInputAttachmentsInputSettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelInputAttachments` `InputSettings`

    - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs that
    have multiple available.

      - *(dict) --* Audio Selector

        - **Name** *(string) --* **[REQUIRED]** The name of this AudioSelector. AudioDescriptions
        will use this name to uniquely identify this Selector. Selector names should be unique
        per input.

        - **SelectorSettings** *(dict) --* The audio selector settings.

          - **AudioLanguageSelection** *(dict) --* Audio Language Selection

            - **LanguageCode** *(string) --* **[REQUIRED]** Selects a specific three-letter
            language code from within an audio source.

            - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
            stream demux strictly identifies audio streams by their language descriptor. If a PMT
            update occurs such that an audio stream matching the initially selected language is
            no longer present then mute will be encoded until the language returns. If "loose",
            then on a PMT update the demux will choose another audio stream in the program with
            the same stream type if it can't find one with the same language.

          - **AudioPidSelection** *(dict) --* Audio Pid Selection

            - **Pid** *(integer) --* **[REQUIRED]** Selects a specific PID from within a source.

    - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs that
    have multiple available.

      - *(dict) --* Output groups for this Live Event. Output groups contain information about
      where streams should be distributed.

        - **LanguageCode** *(string) --* When specified this field indicates the three letter
        language code of the caption track to extract from the source.

        - **Name** *(string) --* **[REQUIRED]** Name identifier for a caption selector. This name
        is used to associate this caption selector with one or more caption descriptions. Names
        must be unique within an event.

        - **SelectorSettings** *(dict) --* Caption selector settings.

          - **AribSourceSettings** *(dict) --* Arib Source Settings

          - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

            - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this PID
            for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed
            through, regardless of selectors.

          - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via
            the "608 compatibility bytes" fields of the 708 wrapper as well as translated into
            708. 708 data present in the source content will be discarded.

            - **Scte20Detection** *(string) --* Set to "auto" to handle streams with intermittent
            and/or non-aligned SCTE-20 and Embedded captions.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
            within the video track from which to extract captions. Unused for passthrough.

            - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

          - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via
            the "608 compatibility bytes" fields of the 708 wrapper as well as translated into
            708. 708 data present in the source content will be discarded.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
            within the video track from which to extract captions. Unused for passthrough.

          - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

            - **Pid** *(integer) --* The pid field is used in conjunction with the caption
            selector languageCode field as follows: - Specify PID and Language: Extracts captions
            from that PID; the language is "informational". - Specify PID and omit Language:
            Extracts the specified PID. - Omit PID and specify Language: Extracts the specified
            language, whichever PID that happens to be. - Omit PID and omit Language: Valid only
            if source is DVB-Sub that is being passed through; all languages will be passed
            through.

          - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

            - **PageNumber** *(string) --* Specifies the teletext page number within the data
            stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused
            for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.

    - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

    - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

    - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal) to 5
    (strongest).

    - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have the
    deblocking filter enabled by default. 1) auto - filtering will be applied depending on input
    type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering
    will be applied regardless of input type

    - **NetworkInputSettings** *(dict) --* Input settings.

      - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS
      manifest.

        - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that
        most closely matches this value will be chosen, otherwise the highest bandwidth stream in
        the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS
        manifest.

        - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin
        this many buffer segments from the end (most recently written segment). When not
        specified, the HLS input will begin with the first segment specified in the m3u8.

        - **Retries** *(integer) --* The number of consecutive times that attempts to read a
        manifest or segment must fail before the input is considered unavailable.

        - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt
        to read a manifest or segment fails.

      - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
      checkCryptographyOnly, cryptography in the certificate will be checked, but not the
      server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do
      not strictly match the corresponding certificate's wildcard pattern and would otherwise
      cause the event to error. This setting is ignored for protocols that do not use https.

    - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file input to
    be streamed indefinitely.

    - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input
    types that have multiple available.

      - **ColorSpace** *(string) --* Specifies the color space of an input. This setting works in
      tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine
      if any conversion will be performed.

      - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
      follow. This field controls how the value in the colorSpace field will be used. fallback
      means that when the input does include color space data, that data will be used, but when
      the input has no color space data, the value in colorSpace will be used. Choose fallback if
      your input is sometimes missing color space data, but when it does have color space data,
      that data is correct. force means to always use the value in colorSpace. Choose force if
      your input usually has no color space data or might have unreliable color space data.

      - **SelectorSettings** *(dict) --* The video selector settings.

        - **VideoSelectorPid** *(dict) --* Video Selector Pid

          - **Pid** *(integer) --* Selects a specific PID from within a video source.

        - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

          - **ProgramId** *(integer) --* Selects a specific program from within a multi-program
          transport stream. If the program doesn't exist, the first program within the transport
          stream will be selected by default.
    """


_ClientCreateChannelInputAttachmentsTypeDef = TypedDict(
    "_ClientCreateChannelInputAttachmentsTypeDef",
    {
        "InputAttachmentName": str,
        "InputId": str,
        "InputSettings": ClientCreateChannelInputAttachmentsInputSettingsTypeDef,
    },
    total=False,
)


class ClientCreateChannelInputAttachmentsTypeDef(
    _ClientCreateChannelInputAttachmentsTypeDef
):
    """
    Type definition for `ClientCreateChannel` `InputAttachments`

    - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
    required if the user wants to use this input in an input switch action.

    - **InputId** *(string) --* The ID of the input

    - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

      - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs that
      have multiple available.

        - *(dict) --* Audio Selector

          - **Name** *(string) --* **[REQUIRED]** The name of this AudioSelector. AudioDescriptions
          will use this name to uniquely identify this Selector. Selector names should be unique
          per input.

          - **SelectorSettings** *(dict) --* The audio selector settings.

            - **AudioLanguageSelection** *(dict) --* Audio Language Selection

              - **LanguageCode** *(string) --* **[REQUIRED]** Selects a specific three-letter
              language code from within an audio source.

              - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
              stream demux strictly identifies audio streams by their language descriptor. If a PMT
              update occurs such that an audio stream matching the initially selected language is
              no longer present then mute will be encoded until the language returns. If "loose",
              then on a PMT update the demux will choose another audio stream in the program with
              the same stream type if it can't find one with the same language.

            - **AudioPidSelection** *(dict) --* Audio Pid Selection

              - **Pid** *(integer) --* **[REQUIRED]** Selects a specific PID from within a source.

      - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs that
      have multiple available.

        - *(dict) --* Output groups for this Live Event. Output groups contain information about
        where streams should be distributed.

          - **LanguageCode** *(string) --* When specified this field indicates the three letter
          language code of the caption track to extract from the source.

          - **Name** *(string) --* **[REQUIRED]** Name identifier for a caption selector. This name
          is used to associate this caption selector with one or more caption descriptions. Names
          must be unique within an event.

          - **SelectorSettings** *(dict) --* Caption selector settings.

            - **AribSourceSettings** *(dict) --* Arib Source Settings

            - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

              - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this PID
              for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed
              through, regardless of selectors.

            - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via
              the "608 compatibility bytes" fields of the 708 wrapper as well as translated into
              708. 708 data present in the source content will be discarded.

              - **Scte20Detection** *(string) --* Set to "auto" to handle streams with intermittent
              and/or non-aligned SCTE-20 and Embedded captions.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
              within the video track from which to extract captions. Unused for passthrough.

              - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

            - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via
              the "608 compatibility bytes" fields of the 708 wrapper as well as translated into
              708. 708 data present in the source content will be discarded.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
              within the video track from which to extract captions. Unused for passthrough.

            - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

              - **Pid** *(integer) --* The pid field is used in conjunction with the caption
              selector languageCode field as follows: - Specify PID and Language: Extracts captions
              from that PID; the language is "informational". - Specify PID and omit Language:
              Extracts the specified PID. - Omit PID and specify Language: Extracts the specified
              language, whichever PID that happens to be. - Omit PID and omit Language: Valid only
              if source is DVB-Sub that is being passed through; all languages will be passed
              through.

            - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

              - **PageNumber** *(string) --* Specifies the teletext page number within the data
              stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused
              for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.

      - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

      - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

      - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal) to 5
      (strongest).

      - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have the
      deblocking filter enabled by default. 1) auto - filtering will be applied depending on input
      type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering
      will be applied regardless of input type

      - **NetworkInputSettings** *(dict) --* Input settings.

        - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS
        manifest.

          - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that
          most closely matches this value will be chosen, otherwise the highest bandwidth stream in
          the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS
          manifest.

          - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin
          this many buffer segments from the end (most recently written segment). When not
          specified, the HLS input will begin with the first segment specified in the m3u8.

          - **Retries** *(integer) --* The number of consecutive times that attempts to read a
          manifest or segment must fail before the input is considered unavailable.

          - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt
          to read a manifest or segment fails.

        - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
        checkCryptographyOnly, cryptography in the certificate will be checked, but not the
        server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do
        not strictly match the corresponding certificate's wildcard pattern and would otherwise
        cause the event to error. This setting is ignored for protocols that do not use https.

      - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file input to
      be streamed indefinitely.

      - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input
      types that have multiple available.

        - **ColorSpace** *(string) --* Specifies the color space of an input. This setting works in
        tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine
        if any conversion will be performed.

        - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
        follow. This field controls how the value in the colorSpace field will be used. fallback
        means that when the input does include color space data, that data will be used, but when
        the input has no color space data, the value in colorSpace will be used. Choose fallback if
        your input is sometimes missing color space data, but when it does have color space data,
        that data is correct. force means to always use the value in colorSpace. Choose force if
        your input usually has no color space data or might have unreliable color space data.

        - **SelectorSettings** *(dict) --* The video selector settings.

          - **VideoSelectorPid** *(dict) --* Video Selector Pid

            - **Pid** *(integer) --* Selects a specific PID from within a video source.

          - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

            - **ProgramId** *(integer) --* Selects a specific program from within a multi-program
            transport stream. If the program doesn't exist, the first program within the transport
            stream will be selected by default.
    """


_ClientCreateChannelResponseChannelEgressEndpointsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEgressEndpointsTypeDef",
    {"SourceIp": str},
    total=False,
)


class ClientCreateChannelResponseChannelEgressEndpointsTypeDef(
    _ClientCreateChannelResponseChannelEgressEndpointsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannel` `EgressEndpoints`

    - **SourceIp** *(string) --* Public IP of where a channel's output comes from
    """


_ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef",
    {"Algorithm": str, "AlgorithmControl": str, "TargetLkfs": float},
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptions` `AudioNormalizationSettings`

    - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
    to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

    - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
    corrected using the chosen algorithm. If set to measureOnly, the audio will be
    measured but not adjusted.

    - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value
    is entered, a default value will be used according to the chosen algorithm. The CALM
    Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
    recommends a target of -23 LKFS.
    """


_ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef",
    {
        "Bitrate": float,
        "CodingMode": str,
        "InputType": str,
        "Profile": str,
        "RateControlMode": str,
        "RawFormat": str,
        "SampleRate": float,
        "Spec": str,
        "VbrQuality": str,
    },
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettings` `AacSettings`

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
    rate control mode and profile.

    - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
    depend on rate control mode and profile. The adReceiverMix setting receives a
    stereo description plus control track and emits a mono AAC encode of the
    description track, with control data emitted in the PES header as per ETSI TS 101
    154 Annex E.

    - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
    pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
    (audioType) will be set to 3, which signals to downstream systems that this stream
    contains "broadcaster mixed AD". Note that the input received by the encoder must
    contain pre-mixed audio; the encoder does not perform the mixing. The values in
    audioTypeControl and audioType (in AudioDescription) are ignored when set to
    broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
    audio + AD.

    - **Profile** *(string) --* AAC Profile.

    - **RateControlMode** *(string) --* Rate Control Mode.

    - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

    - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
    control mode and profile.

    - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
    or MPEG-2 Transport Stream containers.

    - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
    VBR.
    """


_ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef",
    {
        "Bitrate": float,
        "BitstreamMode": str,
        "CodingMode": str,
        "Dialnorm": int,
        "DrcProfile": str,
        "LfeFilter": str,
        "MetadataControl": str,
    },
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettings` `Ac3Settings`

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
    the coding mode.

    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
    emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

    - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
    channels.

    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
    input audio is Dolby Digital, dialnorm will be passed through.

    - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
    compression signaling to the output bitstream as defined in the Dolby Digital
    specification.

    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
    to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

    - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
    will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
    If audio was not supplied from one of these streams, then the static metadata
    settings will be used.
    """


_ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef",
    {
        "AttenuationControl": str,
        "Bitrate": float,
        "BitstreamMode": str,
        "CodingMode": str,
        "DcFilter": str,
        "Dialnorm": int,
        "DrcLine": str,
        "DrcRf": str,
        "LfeControl": str,
        "LfeFilter": str,
        "LoRoCenterMixLevel": float,
        "LoRoSurroundMixLevel": float,
        "LtRtCenterMixLevel": float,
        "LtRtSurroundMixLevel": float,
        "MetadataControl": str,
        "PassthroughControl": str,
        "PhaseControl": str,
        "StereoDownmix": str,
        "SurroundExMode": str,
        "SurroundMode": str,
    },
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettings` `Eac3Settings`

    - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
    attenuation to the surround channels. Only used for 3/2 coding mode.

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
    the coding mode.

    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
    emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

    - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
    channels.

    - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
    for all input channels.

    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
    audio is Dolby Digital Plus, dialnorm will be passed through.

    - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

    - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
    compression, ensures that the instantaneous signal peaks do not exceed specified
    levels.

    - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
    LFE channel

    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
    to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

    - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
    used for 3/2 coding mode.

    - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
    Only used for 3/2 coding mode.

    - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
    used for 3/2 coding mode.

    - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
    Only used for 3/2 coding mode.

    - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
    be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
    audio was not supplied from one of these streams, then the static metadata settings
    will be used.

    - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
    will be passed through if it is present on the input. This detection is dynamic
    over the life of the transcode. Inputs that alternate between DD+ and non-DD+
    content will have a consistent DD+ output as the system alternates between
    passthrough and encoding.

    - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
    phase shift to the surround channels. Only used for 3/2 coding mode.

    - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
    coding mode.

    - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
    center back surround channel is matrix encoded into the left and right surround
    channels.

    - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
    Surround is matrix encoded into the two channels.
    """


_ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef",
    {"Bitrate": float, "CodingMode": str, "SampleRate": float},
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettings` `Mp2Settings`

    - **Bitrate** *(float) --* Average bitrate in bits/second.

    - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
    codingMode10 (for mono) or codingMode20 (for stereo).

    - **SampleRate** *(float) --* Sample rate in Hz.
    """


_ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef",
    {
        "AacSettings": ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef,
        "Ac3Settings": ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef,
        "Eac3Settings": ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef,
        "Mp2Settings": ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef,
        "PassThroughSettings": Dict[str, Any],
    },
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptions` `CodecSettings`

    - **AacSettings** *(dict) --* Aac Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
      rate control mode and profile.

      - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
      depend on rate control mode and profile. The adReceiverMix setting receives a
      stereo description plus control track and emits a mono AAC encode of the
      description track, with control data emitted in the PES header as per ETSI TS 101
      154 Annex E.

      - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
      pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
      (audioType) will be set to 3, which signals to downstream systems that this stream
      contains "broadcaster mixed AD". Note that the input received by the encoder must
      contain pre-mixed audio; the encoder does not perform the mixing. The values in
      audioTypeControl and audioType (in AudioDescription) are ignored when set to
      broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
      audio + AD.

      - **Profile** *(string) --* AAC Profile.

      - **RateControlMode** *(string) --* Rate Control Mode.

      - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

      - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
      control mode and profile.

      - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
      or MPEG-2 Transport Stream containers.

      - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
      VBR.

    - **Ac3Settings** *(dict) --* Ac3 Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
      the coding mode.

      - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
      emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

      - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
      channels.

      - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
      input audio is Dolby Digital, dialnorm will be passed through.

      - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
      compression signaling to the output bitstream as defined in the Dolby Digital
      specification.

      - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
      to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

      - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
      will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
      If audio was not supplied from one of these streams, then the static metadata
      settings will be used.

    - **Eac3Settings** *(dict) --* Eac3 Settings

      - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
      attenuation to the surround channels. Only used for 3/2 coding mode.

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
      the coding mode.

      - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
      emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

      - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
      channels.

      - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
      for all input channels.

      - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
      audio is Dolby Digital Plus, dialnorm will be passed through.

      - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

      - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
      compression, ensures that the instantaneous signal peaks do not exceed specified
      levels.

      - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
      LFE channel

      - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
      to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

      - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
      used for 3/2 coding mode.

      - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
      Only used for 3/2 coding mode.

      - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
      used for 3/2 coding mode.

      - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
      Only used for 3/2 coding mode.

      - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
      be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
      audio was not supplied from one of these streams, then the static metadata settings
      will be used.

      - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
      will be passed through if it is present on the input. This detection is dynamic
      over the life of the transcode. Inputs that alternate between DD+ and non-DD+
      content will have a consistent DD+ output as the system alternates between
      passthrough and encoding.

      - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
      phase shift to the surround channels. Only used for 3/2 coding mode.

      - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
      coding mode.

      - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
      center back surround channel is matrix encoded into the left and right surround
      channels.

      - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
      Surround is matrix encoded into the two channels.

    - **Mp2Settings** *(dict) --* Mp2 Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second.

      - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
      codingMode10 (for mono) or codingMode20 (for stereo).

      - **SampleRate** *(float) --* Sample rate in Hz.

    - **PassThroughSettings** *(dict) --* Pass Through Settings
    """


_ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsTypeDef",
    {
        "AudioNormalizationSettings": ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef,
        "AudioSelectorName": str,
        "AudioType": str,
        "AudioTypeControl": str,
        "CodecSettings": ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef,
        "LanguageCode": str,
        "LanguageCodeControl": str,
        "Name": str,
        "RemixSettings": Dict[str, Any],
        "StreamName": str,
    },
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettings` `AudioDescriptions`

    - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

      - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
      to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

      - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
      corrected using the chosen algorithm. If set to measureOnly, the audio will be
      measured but not adjusted.

      - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value
      is entered, a default value will be used according to the chosen algorithm. The CALM
      Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
      recommends a target of -23 LKFS.

    - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
    for this AudioDescription.

    - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
    values for audioType are defined in ISO-IEC 13818-1.

    - **AudioTypeControl** *(string) --* Determines how audio type is determined.
    followInput: If the input contains an ISO 639 audioType, then that value is passed
    through to the output. If the input contains no ISO 639 audioType, the value in Audio
    Type is included in the output. useConfigured: The value in Audio Type is included in
    the output. Note that this field and audioType are both ignored if inputType is
    broadcasterMixedAd.

    - **CodecSettings** *(dict) --* Audio codec settings.

      - **AacSettings** *(dict) --* Aac Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
        rate control mode and profile.

        - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
        depend on rate control mode and profile. The adReceiverMix setting receives a
        stereo description plus control track and emits a mono AAC encode of the
        description track, with control data emitted in the PES header as per ETSI TS 101
        154 Annex E.

        - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
        pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
        (audioType) will be set to 3, which signals to downstream systems that this stream
        contains "broadcaster mixed AD". Note that the input received by the encoder must
        contain pre-mixed audio; the encoder does not perform the mixing. The values in
        audioTypeControl and audioType (in AudioDescription) are ignored when set to
        broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
        audio + AD.

        - **Profile** *(string) --* AAC Profile.

        - **RateControlMode** *(string) --* Rate Control Mode.

        - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

        - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
        control mode and profile.

        - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
        or MPEG-2 Transport Stream containers.

        - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
        VBR.

      - **Ac3Settings** *(dict) --* Ac3 Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
        the coding mode.

        - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
        emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

        - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
        channels.

        - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
        input audio is Dolby Digital, dialnorm will be passed through.

        - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
        compression signaling to the output bitstream as defined in the Dolby Digital
        specification.

        - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
        to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

        - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
        will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
        If audio was not supplied from one of these streams, then the static metadata
        settings will be used.

      - **Eac3Settings** *(dict) --* Eac3 Settings

        - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
        attenuation to the surround channels. Only used for 3/2 coding mode.

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
        the coding mode.

        - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
        emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

        - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
        channels.

        - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
        for all input channels.

        - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
        audio is Dolby Digital Plus, dialnorm will be passed through.

        - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

        - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
        compression, ensures that the instantaneous signal peaks do not exceed specified
        levels.

        - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
        LFE channel

        - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
        to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

        - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
        used for 3/2 coding mode.

        - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
        Only used for 3/2 coding mode.

        - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
        used for 3/2 coding mode.

        - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
        Only used for 3/2 coding mode.

        - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
        be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
        audio was not supplied from one of these streams, then the static metadata settings
        will be used.

        - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
        will be passed through if it is present on the input. This detection is dynamic
        over the life of the transcode. Inputs that alternate between DD+ and non-DD+
        content will have a consistent DD+ output as the system alternates between
        passthrough and encoding.

        - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
        phase shift to the surround channels. Only used for 3/2 coding mode.

        - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
        coding mode.

        - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
        center back surround channel is matrix encoded into the left and right surround
        channels.

        - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
        Surround is matrix encoded into the two channels.

      - **Mp2Settings** *(dict) --* Mp2 Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second.

        - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
        codingMode10 (for mono) or codingMode20 (for stereo).

        - **SampleRate** *(float) --* Sample rate in Hz.

      - **PassThroughSettings** *(dict) --* Pass Through Settings

    - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
    used if languageControlMode is useConfigured, or there is no ISO 639 language code
    specified in the input.

    - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
    language code of the output to follow the ISO 639 language code of the input. The
    languageCode will be used when useConfigured is set, or when followInput is selected
    but there is no ISO 639 language code specified by the input.

    - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name
    to uniquely identify this AudioDescription. Description names should be unique within
    this Live Event.

    - **RemixSettings** *(dict) --* Settings that control how input audio channels are
    remixed into the output audio channels.

      - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
      appropriate gain adjustments.

        - *(dict) --* Audio Channel Mapping

          - **InputChannelLevels** *(list) --* Indices and gain values for each input
          channel that should be remixed into this output channel.

            - *(dict) --* Input Channel Level

              - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable
              values are within the range from -60 (mute) and 6 dB.

              - **InputChannel** *(integer) --* The index of the input channel used as a
              source.

          - **OutputChannel** *(integer) --* The index of the output channel being produced.

      - **ChannelsIn** *(integer) --* Number of input channels to be used.

      - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
      values: 1, 2, 4, 6, 8

    - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
    name displayed by the player (eg. English, or Director Commentary).
    """


_ClientCreateChannelResponseChannelEncoderSettingsAvailBlankingTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsAvailBlankingTypeDef",
    {"AvailBlankingImage": Dict[str, Any], "State": str},
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsAvailBlankingTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsAvailBlankingTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettings` `AvailBlanking`

    - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
    black. Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be
    blanked when insertion metadata is added.
    """


_ClientCreateChannelResponseChannelEncoderSettingsBlackoutSlateTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsBlackoutSlateTypeDef",
    {
        "BlackoutSlateImage": Dict[str, Any],
        "NetworkEndBlackout": str,
        "NetworkEndBlackoutImage": Dict[str, Any],
        "NetworkId": str,
        "State": str,
    },
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsBlackoutSlateTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsBlackoutSlateTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettings` `BlackoutSlate`

    - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for
    solid black. Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
    the video, audio, and captions, and raise the "Network Blackout Image" slate when an
    SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be
    lifted when the Network Start Segmentation Descriptor is encountered. The Network End and
    Network Start descriptors must contain a network ID that matches the value entered in
    "Network ID".

    - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End
    Blackout image. Image will be scaled to fill the entire output raster.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
    "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be
    blanked when indicated by program metadata.
    """


_ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef",
    {"CaptureInterval": int},
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettings` `FrameCaptureSettings`

    - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
    frames for inclusion in the output. For example, "10" means capture a frame every
    10 seconds.
    """


_ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef",
    {
        "ColorSpacePassthroughSettings": Dict[str, Any],
        "Rec601Settings": Dict,
        "Rec709Settings": Dict[str, Any],
    },
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings` `ColorSpaceSettings`

    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
    space conversion to the output

    - **Rec601Settings** *(dict) --* Rec601 Settings

    - **Rec709Settings** *(dict) --* Rec709 Settings
    """


_ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef",
    {
        "AdaptiveQuantization": str,
        "AfdSignaling": str,
        "Bitrate": int,
        "BufFillPct": int,
        "BufSize": int,
        "ColorMetadata": str,
        "ColorSpaceSettings": ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef,
        "EntropyEncoding": str,
        "FixedAfd": str,
        "FlickerAq": str,
        "FramerateControl": str,
        "FramerateDenominator": int,
        "FramerateNumerator": int,
        "GopBReference": str,
        "GopClosedCadence": int,
        "GopNumBFrames": int,
        "GopSize": float,
        "GopSizeUnits": str,
        "Level": str,
        "LookAheadRateControl": str,
        "MaxBitrate": int,
        "MinIInterval": int,
        "NumRefFrames": int,
        "ParControl": str,
        "ParDenominator": int,
        "ParNumerator": int,
        "Profile": str,
        "QvbrQualityLevel": int,
        "RateControlMode": str,
        "ScanType": str,
        "SceneChangeDetect": str,
        "Slices": int,
        "Softness": int,
        "SpatialAq": str,
        "SubgopLength": str,
        "Syntax": str,
        "TemporalAq": str,
        "TimecodeInsertion": str,
    },
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettings` `H264Settings`

    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
    quantizers to vary to improve visual quality.

    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
    output stream. If afdSignaling is "auto", the system will try to preserve the input
    AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
    AFD value will be the value configured in the fixedAfd parameter.

    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
    control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
    output must have a unique value when its bitrate is rounded down to the nearest
    multiple of 1000.

    - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
    filled (HRD buffer model).

    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

    - **ColorSpaceSettings** *(dict) --* Color Space settings

      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
      space conversion to the output

      - **Rec601Settings** *(dict) --* Rec601 Settings

      - **Rec709Settings** *(dict) --* Rec709 Settings

    - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
    Main or High profile) or cavlc.

    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
    the output stream. Only valid when afdSignaling is set to 'Fixed'.

    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
    frame to reduce flicker or 'pop' on I-frames.

    - **FramerateControl** *(string) --* This field indicates how the output video
    frame rate is specified. If "specified" is selected then the output video frame
    rate is determined by framerateNumerator and framerateDenominator, else if
    "initializeFromSource" is selected then the output video frame rate will be set
    equal to the input video frame rate of the first input.

    - **FramerateDenominator** *(integer) --* Framerate denominator.

    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
    fraction, e.g. 24000 / 1001 = 23.976 fps.

    - **GopBReference** *(string) --* Documentation update needed

    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
    applications, it is recommended that this be set to 1 so a decoder joining
    mid-stream will receive an IDR frame as quickly as possible. Setting this value to
    0 will break output segmenting.

    - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
    or seconds per gopSizeUnits. Must be greater than zero.

    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
    seconds. If seconds the system will convert the gopSize into a frame count at run
    time.

    - **Level** *(string) --* H.264 Level.

    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
    decrease latency and memory usage, while high can produce better quality for
    certain content.

    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
    VBR: Set the maximum bitrate in order to accommodate expected spikes in the
    complexity of the video.

    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
    enabled. Enforces separation between repeated (cadence) I-frames and I-frames
    inserted by Scene Change Detection. If a scene change I-frame is within I-interval
    frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
    I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
    normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
    Min-I-interval - 1

    - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
    may use more than requested if using B-frames and/or interlaced encoding.

    - **ParControl** *(string) --* This field indicates how the output pixel aspect
    ratio is specified. If "specified" is selected then the output video pixel aspect
    ratio is determined by parNumerator and parDenominator, else if
    "initializeFromSource" is selected then the output pixsel aspect ratio will be set
    equal to the input video pixel aspect ratio of the first input.

    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

    - **Profile** *(string) --* H.264 Profile.

    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
    encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
    quality level field and Max bitrate field that suit your most important viewing
    devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
    bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
    Quality level: 6. Max bitrate: 1M to 1.5M

    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
    specified quality level except when it is constrained by the maximum bitrate.
    Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
    vary, depending on the video complexity. Recommended instead of QVBR if you want to
    maintain a specific average bitrate over the duration of the channel. CBR: Quality
    varies, depending on the video complexity. Recommended only if you distribute your
    assets to devices that cannot handle variable bitrates.

    - **ScanType** *(string) --* Sets the scan type of the output to progressive or
    top-field-first interlaced.

    - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
    I-frames when scene change is detected. - Off: does not force an I-frame when scene
    change is detected.

    - **Slices** *(integer) --* Number of slices per picture. Must be less than or
    equal to the number of macroblock rows for progressive pictures, and less than or
    equal to half the number of macroblock rows for interlaced pictures. This field is
    optional; when no value is specified the encoder will choose the number of slices
    based on encode resolution.

    - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
    reduce high-frequency content in the encoded image.

    - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
    frame based on spatial variation of content complexity.

    - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
    sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
    to improve visual quality.

    - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

    - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
    frame based on temporal variation of content complexity.

    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
    into the video elementary stream. - 'disabled': Do not include timecodes -
    'picTimingSei': Pass through picture timing SEI messages from the source specified
    in Timecode Config
    """


_ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef",
    {"MaxCll": int, "MaxFall": int},
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings` `Hdr10Settings`

    - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
    value defining the maximum light level, in nits, of any single pixel within an
    encoded HDR video stream or file.

    - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
    metadata value defining the maximum average light level, in nits, for any
    single frame within an encoded HDR video stream or file.
    """


_ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef",
    {
        "ColorSpacePassthroughSettings": Dict[str, Any],
        "Hdr10Settings": ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef,
        "Rec601Settings": Dict,
        "Rec709Settings": Dict[str, Any],
    },
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings` `ColorSpaceSettings`

    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
    space conversion to the output

    - **Hdr10Settings** *(dict) --* Hdr10 Settings

      - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
      value defining the maximum light level, in nits, of any single pixel within an
      encoded HDR video stream or file.

      - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
      metadata value defining the maximum average light level, in nits, for any
      single frame within an encoded HDR video stream or file.

    - **Rec601Settings** *(dict) --* Rec601 Settings

    - **Rec709Settings** *(dict) --* Rec709 Settings
    """


_ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef",
    {
        "AdaptiveQuantization": str,
        "AfdSignaling": str,
        "AlternativeTransferFunction": str,
        "Bitrate": int,
        "BufSize": int,
        "ColorMetadata": str,
        "ColorSpaceSettings": ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef,
        "FixedAfd": str,
        "FlickerAq": str,
        "FramerateDenominator": int,
        "FramerateNumerator": int,
        "GopClosedCadence": int,
        "GopSize": float,
        "GopSizeUnits": str,
        "Level": str,
        "LookAheadRateControl": str,
        "MaxBitrate": int,
        "MinIInterval": int,
        "ParDenominator": int,
        "ParNumerator": int,
        "Profile": str,
        "QvbrQualityLevel": int,
        "RateControlMode": str,
        "ScanType": str,
        "SceneChangeDetect": str,
        "Slices": int,
        "Tier": str,
        "TimecodeInsertion": str,
    },
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettings` `H265Settings`

    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
    quantizers to vary to improve visual quality.

    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
    output stream. If afdSignaling is "auto", the system will try to preserve the input
    AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
    AFD value will be the value configured in the fixedAfd parameter.

    - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
    Alternative Transfer Function SEI message to support backwards compatibility with
    non-HDR decoders and displays.

    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
    control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
    output must have a unique value when its bitrate is rounded down to the nearest
    multiple of 1000.

    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

    - **ColorSpaceSettings** *(dict) --* Color Space settings

      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
      space conversion to the output

      - **Hdr10Settings** *(dict) --* Hdr10 Settings

        - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
        value defining the maximum light level, in nits, of any single pixel within an
        encoded HDR video stream or file.

        - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
        metadata value defining the maximum average light level, in nits, for any
        single frame within an encoded HDR video stream or file.

      - **Rec601Settings** *(dict) --* Rec601 Settings

      - **Rec709Settings** *(dict) --* Rec709 Settings

    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
    the output stream. Only valid when afdSignaling is set to 'Fixed'.

    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
    frame to reduce flicker or 'pop' on I-frames.

    - **FramerateDenominator** *(integer) --* Framerate denominator.

    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
    fraction, e.g. 24000 / 1001 = 23.976 fps.

    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
    applications, it is recommended that this be set to 1 so a decoder joining
    mid-stream will receive an IDR frame as quickly as possible. Setting this value to
    0 will break output segmenting.

    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
    or seconds per gopSizeUnits. Must be greater than zero.

    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
    seconds. If seconds the system will convert the gopSize into a frame count at run
    time.

    - **Level** *(string) --* H.265 Level.

    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
    decrease latency and memory usage, while high can produce better quality for
    certain content.

    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
    enabled. Enforces separation between repeated (cadence) I-frames and I-frames
    inserted by Scene Change Detection. If a scene change I-frame is within I-interval
    frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
    I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
    normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
    Min-I-interval - 1

    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

    - **Profile** *(string) --* H.265 Profile.

    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
    encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
    quality level field and Max bitrate field that suit your most important viewing
    devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
    bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
    Quality level: 6. Max bitrate: 1M to 1.5M

    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
    specified quality level except when it is constrained by the maximum bitrate.
    Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
    depending on the video complexity. Recommended only if you distribute your assets
    to devices that cannot handle variable bitrates.

    - **ScanType** *(string) --* Sets the scan type of the output to progressive or
    top-field-first interlaced.

    - **SceneChangeDetect** *(string) --* Scene change detection.

    - **Slices** *(integer) --* Number of slices per picture. Must be less than or
    equal to the number of macroblock rows for progressive pictures, and less than or
    equal to half the number of macroblock rows for interlaced pictures. This field is
    optional; when no value is specified the encoder will choose the number of slices
    based on encode resolution.

    - **Tier** *(string) --* H.265 Tier.

    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
    into the video elementary stream. - 'disabled': Do not include timecodes -
    'picTimingSei': Pass through picture timing SEI messages from the source specified
    in Timecode Config
    """


_ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef",
    {
        "FrameCaptureSettings": ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef,
        "H264Settings": ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef,
        "H265Settings": ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef,
    },
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptions` `CodecSettings`

    - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

      - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
      frames for inclusion in the output. For example, "10" means capture a frame every
      10 seconds.

    - **H264Settings** *(dict) --* H264 Settings

      - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
      quantizers to vary to improve visual quality.

      - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
      output stream. If afdSignaling is "auto", the system will try to preserve the input
      AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
      AFD value will be the value configured in the fixedAfd parameter.

      - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
      control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
      output must have a unique value when its bitrate is rounded down to the nearest
      multiple of 1000.

      - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
      filled (HRD buffer model).

      - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

      - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

      - **ColorSpaceSettings** *(dict) --* Color Space settings

        - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
        space conversion to the output

        - **Rec601Settings** *(dict) --* Rec601 Settings

        - **Rec709Settings** *(dict) --* Rec709 Settings

      - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
      Main or High profile) or cavlc.

      - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
      the output stream. Only valid when afdSignaling is set to 'Fixed'.

      - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
      frame to reduce flicker or 'pop' on I-frames.

      - **FramerateControl** *(string) --* This field indicates how the output video
      frame rate is specified. If "specified" is selected then the output video frame
      rate is determined by framerateNumerator and framerateDenominator, else if
      "initializeFromSource" is selected then the output video frame rate will be set
      equal to the input video frame rate of the first input.

      - **FramerateDenominator** *(integer) --* Framerate denominator.

      - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
      fraction, e.g. 24000 / 1001 = 23.976 fps.

      - **GopBReference** *(string) --* Documentation update needed

      - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
      applications, it is recommended that this be set to 1 so a decoder joining
      mid-stream will receive an IDR frame as quickly as possible. Setting this value to
      0 will break output segmenting.

      - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

      - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
      or seconds per gopSizeUnits. Must be greater than zero.

      - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
      seconds. If seconds the system will convert the gopSize into a frame count at run
      time.

      - **Level** *(string) --* H.264 Level.

      - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
      decrease latency and memory usage, while high can produce better quality for
      certain content.

      - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
      VBR: Set the maximum bitrate in order to accommodate expected spikes in the
      complexity of the video.

      - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
      enabled. Enforces separation between repeated (cadence) I-frames and I-frames
      inserted by Scene Change Detection. If a scene change I-frame is within I-interval
      frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
      I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
      normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
      Min-I-interval - 1

      - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
      may use more than requested if using B-frames and/or interlaced encoding.

      - **ParControl** *(string) --* This field indicates how the output pixel aspect
      ratio is specified. If "specified" is selected then the output video pixel aspect
      ratio is determined by parNumerator and parDenominator, else if
      "initializeFromSource" is selected then the output pixsel aspect ratio will be set
      equal to the input video pixel aspect ratio of the first input.

      - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

      - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

      - **Profile** *(string) --* H.264 Profile.

      - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
      encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
      quality level field and Max bitrate field that suit your most important viewing
      devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
      bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
      Quality level: 6. Max bitrate: 1M to 1.5M

      - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
      specified quality level except when it is constrained by the maximum bitrate.
      Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
      vary, depending on the video complexity. Recommended instead of QVBR if you want to
      maintain a specific average bitrate over the duration of the channel. CBR: Quality
      varies, depending on the video complexity. Recommended only if you distribute your
      assets to devices that cannot handle variable bitrates.

      - **ScanType** *(string) --* Sets the scan type of the output to progressive or
      top-field-first interlaced.

      - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
      I-frames when scene change is detected. - Off: does not force an I-frame when scene
      change is detected.

      - **Slices** *(integer) --* Number of slices per picture. Must be less than or
      equal to the number of macroblock rows for progressive pictures, and less than or
      equal to half the number of macroblock rows for interlaced pictures. This field is
      optional; when no value is specified the encoder will choose the number of slices
      based on encode resolution.

      - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
      reduce high-frequency content in the encoded image.

      - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
      frame based on spatial variation of content complexity.

      - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
      sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
      to improve visual quality.

      - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

      - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
      frame based on temporal variation of content complexity.

      - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
      into the video elementary stream. - 'disabled': Do not include timecodes -
      'picTimingSei': Pass through picture timing SEI messages from the source specified
      in Timecode Config

    - **H265Settings** *(dict) --* H265 Settings

      - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
      quantizers to vary to improve visual quality.

      - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
      output stream. If afdSignaling is "auto", the system will try to preserve the input
      AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
      AFD value will be the value configured in the fixedAfd parameter.

      - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
      Alternative Transfer Function SEI message to support backwards compatibility with
      non-HDR decoders and displays.

      - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
      control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
      output must have a unique value when its bitrate is rounded down to the nearest
      multiple of 1000.

      - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

      - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

      - **ColorSpaceSettings** *(dict) --* Color Space settings

        - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
        space conversion to the output

        - **Hdr10Settings** *(dict) --* Hdr10 Settings

          - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
          value defining the maximum light level, in nits, of any single pixel within an
          encoded HDR video stream or file.

          - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
          metadata value defining the maximum average light level, in nits, for any
          single frame within an encoded HDR video stream or file.

        - **Rec601Settings** *(dict) --* Rec601 Settings

        - **Rec709Settings** *(dict) --* Rec709 Settings

      - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
      the output stream. Only valid when afdSignaling is set to 'Fixed'.

      - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
      frame to reduce flicker or 'pop' on I-frames.

      - **FramerateDenominator** *(integer) --* Framerate denominator.

      - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
      fraction, e.g. 24000 / 1001 = 23.976 fps.

      - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
      applications, it is recommended that this be set to 1 so a decoder joining
      mid-stream will receive an IDR frame as quickly as possible. Setting this value to
      0 will break output segmenting.

      - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
      or seconds per gopSizeUnits. Must be greater than zero.

      - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
      seconds. If seconds the system will convert the gopSize into a frame count at run
      time.

      - **Level** *(string) --* H.265 Level.

      - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
      decrease latency and memory usage, while high can produce better quality for
      certain content.

      - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

      - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
      enabled. Enforces separation between repeated (cadence) I-frames and I-frames
      inserted by Scene Change Detection. If a scene change I-frame is within I-interval
      frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
      I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
      normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
      Min-I-interval - 1

      - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

      - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

      - **Profile** *(string) --* H.265 Profile.

      - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
      encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
      quality level field and Max bitrate field that suit your most important viewing
      devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
      bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
      Quality level: 6. Max bitrate: 1M to 1.5M

      - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
      specified quality level except when it is constrained by the maximum bitrate.
      Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
      depending on the video complexity. Recommended only if you distribute your assets
      to devices that cannot handle variable bitrates.

      - **ScanType** *(string) --* Sets the scan type of the output to progressive or
      top-field-first interlaced.

      - **SceneChangeDetect** *(string) --* Scene change detection.

      - **Slices** *(integer) --* Number of slices per picture. Must be less than or
      equal to the number of macroblock rows for progressive pictures, and less than or
      equal to half the number of macroblock rows for interlaced pictures. This field is
      optional; when no value is specified the encoder will choose the number of slices
      based on encode resolution.

      - **Tier** *(string) --* H.265 Tier.

      - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
      into the video elementary stream. - 'disabled': Do not include timecodes -
      'picTimingSei': Pass through picture timing SEI messages from the source specified
      in Timecode Config
    """


_ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsTypeDef",
    {
        "CodecSettings": ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef,
        "Height": int,
        "Name": str,
        "RespondToAfd": str,
        "ScalingBehavior": str,
        "Sharpness": int,
        "Width": int,
    },
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelEncoderSettings` `VideoDescriptions`

    - **CodecSettings** *(dict) --* Video codec settings.

      - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

        - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
        frames for inclusion in the output. For example, "10" means capture a frame every
        10 seconds.

      - **H264Settings** *(dict) --* H264 Settings

        - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
        quantizers to vary to improve visual quality.

        - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
        output stream. If afdSignaling is "auto", the system will try to preserve the input
        AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
        AFD value will be the value configured in the fixedAfd parameter.

        - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
        control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
        output must have a unique value when its bitrate is rounded down to the nearest
        multiple of 1000.

        - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
        filled (HRD buffer model).

        - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

        - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

        - **ColorSpaceSettings** *(dict) --* Color Space settings

          - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
          space conversion to the output

          - **Rec601Settings** *(dict) --* Rec601 Settings

          - **Rec709Settings** *(dict) --* Rec709 Settings

        - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
        Main or High profile) or cavlc.

        - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
        the output stream. Only valid when afdSignaling is set to 'Fixed'.

        - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
        frame to reduce flicker or 'pop' on I-frames.

        - **FramerateControl** *(string) --* This field indicates how the output video
        frame rate is specified. If "specified" is selected then the output video frame
        rate is determined by framerateNumerator and framerateDenominator, else if
        "initializeFromSource" is selected then the output video frame rate will be set
        equal to the input video frame rate of the first input.

        - **FramerateDenominator** *(integer) --* Framerate denominator.

        - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
        fraction, e.g. 24000 / 1001 = 23.976 fps.

        - **GopBReference** *(string) --* Documentation update needed

        - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
        applications, it is recommended that this be set to 1 so a decoder joining
        mid-stream will receive an IDR frame as quickly as possible. Setting this value to
        0 will break output segmenting.

        - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

        - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
        or seconds per gopSizeUnits. Must be greater than zero.

        - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
        seconds. If seconds the system will convert the gopSize into a frame count at run
        time.

        - **Level** *(string) --* H.264 Level.

        - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
        decrease latency and memory usage, while high can produce better quality for
        certain content.

        - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
        VBR: Set the maximum bitrate in order to accommodate expected spikes in the
        complexity of the video.

        - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
        enabled. Enforces separation between repeated (cadence) I-frames and I-frames
        inserted by Scene Change Detection. If a scene change I-frame is within I-interval
        frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
        I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
        normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
        Min-I-interval - 1

        - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
        may use more than requested if using B-frames and/or interlaced encoding.

        - **ParControl** *(string) --* This field indicates how the output pixel aspect
        ratio is specified. If "specified" is selected then the output video pixel aspect
        ratio is determined by parNumerator and parDenominator, else if
        "initializeFromSource" is selected then the output pixsel aspect ratio will be set
        equal to the input video pixel aspect ratio of the first input.

        - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

        - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

        - **Profile** *(string) --* H.264 Profile.

        - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
        encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
        quality level field and Max bitrate field that suit your most important viewing
        devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
        bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
        Quality level: 6. Max bitrate: 1M to 1.5M

        - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
        specified quality level except when it is constrained by the maximum bitrate.
        Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
        vary, depending on the video complexity. Recommended instead of QVBR if you want to
        maintain a specific average bitrate over the duration of the channel. CBR: Quality
        varies, depending on the video complexity. Recommended only if you distribute your
        assets to devices that cannot handle variable bitrates.

        - **ScanType** *(string) --* Sets the scan type of the output to progressive or
        top-field-first interlaced.

        - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
        I-frames when scene change is detected. - Off: does not force an I-frame when scene
        change is detected.

        - **Slices** *(integer) --* Number of slices per picture. Must be less than or
        equal to the number of macroblock rows for progressive pictures, and less than or
        equal to half the number of macroblock rows for interlaced pictures. This field is
        optional; when no value is specified the encoder will choose the number of slices
        based on encode resolution.

        - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
        reduce high-frequency content in the encoded image.

        - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
        frame based on spatial variation of content complexity.

        - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
        sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
        to improve visual quality.

        - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

        - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
        frame based on temporal variation of content complexity.

        - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
        into the video elementary stream. - 'disabled': Do not include timecodes -
        'picTimingSei': Pass through picture timing SEI messages from the source specified
        in Timecode Config

      - **H265Settings** *(dict) --* H265 Settings

        - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
        quantizers to vary to improve visual quality.

        - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
        output stream. If afdSignaling is "auto", the system will try to preserve the input
        AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
        AFD value will be the value configured in the fixedAfd parameter.

        - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
        Alternative Transfer Function SEI message to support backwards compatibility with
        non-HDR decoders and displays.

        - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
        control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
        output must have a unique value when its bitrate is rounded down to the nearest
        multiple of 1000.

        - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

        - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

        - **ColorSpaceSettings** *(dict) --* Color Space settings

          - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
          space conversion to the output

          - **Hdr10Settings** *(dict) --* Hdr10 Settings

            - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
            value defining the maximum light level, in nits, of any single pixel within an
            encoded HDR video stream or file.

            - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
            metadata value defining the maximum average light level, in nits, for any
            single frame within an encoded HDR video stream or file.

          - **Rec601Settings** *(dict) --* Rec601 Settings

          - **Rec709Settings** *(dict) --* Rec709 Settings

        - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
        the output stream. Only valid when afdSignaling is set to 'Fixed'.

        - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
        frame to reduce flicker or 'pop' on I-frames.

        - **FramerateDenominator** *(integer) --* Framerate denominator.

        - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
        fraction, e.g. 24000 / 1001 = 23.976 fps.

        - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
        applications, it is recommended that this be set to 1 so a decoder joining
        mid-stream will receive an IDR frame as quickly as possible. Setting this value to
        0 will break output segmenting.

        - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
        or seconds per gopSizeUnits. Must be greater than zero.

        - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
        seconds. If seconds the system will convert the gopSize into a frame count at run
        time.

        - **Level** *(string) --* H.265 Level.

        - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
        decrease latency and memory usage, while high can produce better quality for
        certain content.

        - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

        - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
        enabled. Enforces separation between repeated (cadence) I-frames and I-frames
        inserted by Scene Change Detection. If a scene change I-frame is within I-interval
        frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
        I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
        normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
        Min-I-interval - 1

        - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

        - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

        - **Profile** *(string) --* H.265 Profile.

        - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
        encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
        quality level field and Max bitrate field that suit your most important viewing
        devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
        bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
        Quality level: 6. Max bitrate: 1M to 1.5M

        - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
        specified quality level except when it is constrained by the maximum bitrate.
        Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
        depending on the video complexity. Recommended only if you distribute your assets
        to devices that cannot handle variable bitrates.

        - **ScanType** *(string) --* Sets the scan type of the output to progressive or
        top-field-first interlaced.

        - **SceneChangeDetect** *(string) --* Scene change detection.

        - **Slices** *(integer) --* Number of slices per picture. Must be less than or
        equal to the number of macroblock rows for progressive pictures, and less than or
        equal to half the number of macroblock rows for interlaced pictures. This field is
        optional; when no value is specified the encoder will choose the number of slices
        based on encode resolution.

        - **Tier** *(string) --* H.265 Tier.

        - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
        into the video elementary stream. - 'disabled': Do not include timecodes -
        'picTimingSei': Pass through picture timing SEI messages from the source specified
        in Timecode Config

    - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
    most codecs, you can leave this field and width blank in order to use the height and
    width (resolution) from the source. Note, however, that leaving blank is not
    recommended. For the Frame Capture codec, height and width are required.

    - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name
    to uniquely identify this Description. Description names should be unique within this
    Live Event.

    - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the
    input stream. RESPOND causes input video to be clipped, depending on the AFD value,
    input display aspect ratio, and output display aspect ratio, and (except for
    FRAMECAPTURE codec) includes the values in the output. PASSTHROUGH (does not apply to
    FRAMECAPTURE codec) ignores the AFD values and includes the values in the output, so
    input video is not clipped. NONE ignores the AFD values and does not include the values
    through to the output, so input video is not clipped.

    - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
    stretch the video to the specified output resolution (height and width). This option
    will override any position value. DEFAULT may insert black boxes (pillar boxes or
    letter boxes) around the video to provide the specified output resolution.

    - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
    scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
    for most content.

    - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
    most codecs, you can leave this field and height blank in order to use the height and
    width (resolution) from the source. Note, however, that leaving blank is not
    recommended. For the Frame Capture codec, height and width are required.
    """


_ClientCreateChannelResponseChannelEncoderSettingsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelEncoderSettingsTypeDef",
    {
        "AudioDescriptions": List[
            ClientCreateChannelResponseChannelEncoderSettingsAudioDescriptionsTypeDef
        ],
        "AvailBlanking": ClientCreateChannelResponseChannelEncoderSettingsAvailBlankingTypeDef,
        "AvailConfiguration": Dict[str, Any],
        "BlackoutSlate": ClientCreateChannelResponseChannelEncoderSettingsBlackoutSlateTypeDef,
        "CaptionDescriptions": List[Dict],
        "GlobalConfiguration": Dict[str, Any],
        "OutputGroups": List[Dict],
        "TimecodeConfig": Dict[str, Any],
        "VideoDescriptions": List[
            ClientCreateChannelResponseChannelEncoderSettingsVideoDescriptionsTypeDef
        ],
    },
    total=False,
)


class ClientCreateChannelResponseChannelEncoderSettingsTypeDef(
    _ClientCreateChannelResponseChannelEncoderSettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannel` `EncoderSettings`

    - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

      - *(dict) --* Audio Description

        - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

          - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
          to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

          - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
          corrected using the chosen algorithm. If set to measureOnly, the audio will be
          measured but not adjusted.

          - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value
          is entered, a default value will be used according to the chosen algorithm. The CALM
          Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
          recommends a target of -23 LKFS.

        - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
        for this AudioDescription.

        - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
        values for audioType are defined in ISO-IEC 13818-1.

        - **AudioTypeControl** *(string) --* Determines how audio type is determined.
        followInput: If the input contains an ISO 639 audioType, then that value is passed
        through to the output. If the input contains no ISO 639 audioType, the value in Audio
        Type is included in the output. useConfigured: The value in Audio Type is included in
        the output. Note that this field and audioType are both ignored if inputType is
        broadcasterMixedAd.

        - **CodecSettings** *(dict) --* Audio codec settings.

          - **AacSettings** *(dict) --* Aac Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
            rate control mode and profile.

            - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
            depend on rate control mode and profile. The adReceiverMix setting receives a
            stereo description plus control track and emits a mono AAC encode of the
            description track, with control data emitted in the PES header as per ETSI TS 101
            154 Annex E.

            - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
            pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
            (audioType) will be set to 3, which signals to downstream systems that this stream
            contains "broadcaster mixed AD". Note that the input received by the encoder must
            contain pre-mixed audio; the encoder does not perform the mixing. The values in
            audioTypeControl and audioType (in AudioDescription) are ignored when set to
            broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
            audio + AD.

            - **Profile** *(string) --* AAC Profile.

            - **RateControlMode** *(string) --* Rate Control Mode.

            - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

            - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
            control mode and profile.

            - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
            or MPEG-2 Transport Stream containers.

            - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
            VBR.

          - **Ac3Settings** *(dict) --* Ac3 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
            the coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
            emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

            - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
            channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
            input audio is Dolby Digital, dialnorm will be passed through.

            - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
            compression signaling to the output bitstream as defined in the Dolby Digital
            specification.

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
            to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

            - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
            will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
            If audio was not supplied from one of these streams, then the static metadata
            settings will be used.

          - **Eac3Settings** *(dict) --* Eac3 Settings

            - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
            attenuation to the surround channels. Only used for 3/2 coding mode.

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
            the coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
            emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

            - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
            channels.

            - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
            for all input channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
            audio is Dolby Digital Plus, dialnorm will be passed through.

            - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

            - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
            compression, ensures that the instantaneous signal peaks do not exceed specified
            levels.

            - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
            LFE channel

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
            to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

            - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
            used for 3/2 coding mode.

            - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
            Only used for 3/2 coding mode.

            - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
            used for 3/2 coding mode.

            - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
            Only used for 3/2 coding mode.

            - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
            be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
            audio was not supplied from one of these streams, then the static metadata settings
            will be used.

            - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
            will be passed through if it is present on the input. This detection is dynamic
            over the life of the transcode. Inputs that alternate between DD+ and non-DD+
            content will have a consistent DD+ output as the system alternates between
            passthrough and encoding.

            - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
            phase shift to the surround channels. Only used for 3/2 coding mode.

            - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
            coding mode.

            - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
            center back surround channel is matrix encoded into the left and right surround
            channels.

            - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
            Surround is matrix encoded into the two channels.

          - **Mp2Settings** *(dict) --* Mp2 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second.

            - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
            codingMode10 (for mono) or codingMode20 (for stereo).

            - **SampleRate** *(float) --* Sample rate in Hz.

          - **PassThroughSettings** *(dict) --* Pass Through Settings

        - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
        used if languageControlMode is useConfigured, or there is no ISO 639 language code
        specified in the input.

        - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
        language code of the output to follow the ISO 639 language code of the input. The
        languageCode will be used when useConfigured is set, or when followInput is selected
        but there is no ISO 639 language code specified by the input.

        - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name
        to uniquely identify this AudioDescription. Description names should be unique within
        this Live Event.

        - **RemixSettings** *(dict) --* Settings that control how input audio channels are
        remixed into the output audio channels.

          - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
          appropriate gain adjustments.

            - *(dict) --* Audio Channel Mapping

              - **InputChannelLevels** *(list) --* Indices and gain values for each input
              channel that should be remixed into this output channel.

                - *(dict) --* Input Channel Level

                  - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable
                  values are within the range from -60 (mute) and 6 dB.

                  - **InputChannel** *(integer) --* The index of the input channel used as a
                  source.

              - **OutputChannel** *(integer) --* The index of the output channel being produced.

          - **ChannelsIn** *(integer) --* Number of input channels to be used.

          - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
          values: 1, 2, 4, 6, 8

        - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
        name displayed by the player (eg. English, or Director Commentary).

    - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

      - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
      black. Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be
      blanked when insertion metadata is added.

    - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail
    insertion.

      - **AvailSettings** *(dict) --* Ad avail settings.

        - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
          added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
          messages and does not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
          with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
          slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
          with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
          slates

        - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
          added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
          messages and does not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
          with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
          slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
          with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
          slates

    - **BlackoutSlate** *(dict) --* Settings for blackout slate.

      - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for
      solid black. Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
      the video, audio, and captions, and raise the "Network Blackout Image" slate when an
      SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be
      lifted when the Network Start Segmentation Descriptor is encountered. The Network End and
      Network Start descriptors must contain a network ID that matches the value entered in
      "Network ID".

      - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End
      Blackout image. Image will be scaled to fill the entire output raster.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
      "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be
      blanked when indicated by program metadata.

    - **CaptionDescriptions** *(list) --* Settings for caption decriptions

      - *(dict) --* Output groups for this Live Event. Output groups contain information about
      where streams should be distributed.

        - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use
        as a caption source when generating output captions. This field should match a
        captionSelector name.

        - **DestinationSettings** *(dict) --* Additional settings for captions destination that
        depend on the destination type.

          - **AribDestinationSettings** *(dict) --* Arib Destination Settings

          - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
            setting alignment to centered will place the captions at the bottom center of the
            output. Similarly, setting a left alignment will align captions to the bottom left
            of the output. If x and y positions are given in conjunction with the alignment
            parameter, the font will be justified (either left or centered) relative to those
            coordinates. Selecting "smart" justification will left-justify live subtitles and
            center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
            match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
            rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is
            equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
            must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension
            must be 'ttf' or 'tte'. Although the user can select output fonts for many
            different types of input captions, embedded, STL and teletext sources use a strict
            grid system. Using external fonts with these caption sources could cause unexpected
            display of proportional fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2
              Parameter store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
              file accessible to the Live system (eg. a http:// URI) depending on the output
              type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
            option is not valid for source captions that are STL, 608/embedded or teletext.
            These source settings are already pre-defined by the caption stream. All burn-in
            and DVB-Sub font settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
            255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
            is 96 dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on
            the size of the output. Giving a positive integer will specify the exact font size
            in points. All burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not
            valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
            font settings must match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
            is not valid for source captions that are either 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
            captions. All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
            opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to
            0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels to the left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels above the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
            used to generate the output subtitles bitmap. Only applicable for Teletext inputs
            and DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption
            relative to the left side of the output in pixels. A value of 10 would result in
            the captions starting 10 pixels from the left of the output. If no explicit
            xPosition is provided, the horizontal caption position will be determined by the
            alignment parameter. All burn-in and DVB-Sub font settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption
            relative to the top of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the top of the output. If no explicit yPosition is
            provided, the caption will be positioned towards the bottom of the output. All
            burn-in and DVB-Sub font settings must match.

          - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
            setting alignment to centered will place the captions at the bottom center of the
            output. Similarly, setting a left alignment will align captions to the bottom left
            of the output. If x and y positions are given in conjunction with the alignment
            parameter, the font will be justified (either left or centered) relative to those
            coordinates. Selecting "smart" justification will left-justify live subtitles and
            center-justify pre-recorded subtitles. This option is not valid for source captions
            that are STL or 608/embedded. These source settings are already pre-defined by the
            caption stream. All burn-in and DVB-Sub font settings must match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
            rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
            equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
            must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension
            must be 'ttf' or 'tte'. Although the user can select output fonts for many
            different types of input captions, embedded, STL and teletext sources use a strict
            grid system. Using external fonts with these caption sources could cause unexpected
            display of proportional fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2
              Parameter store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
              file accessible to the Live system (eg. a http:// URI) depending on the output
              type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
            option is not valid for source captions that are STL, 608/embedded or teletext.
            These source settings are already pre-defined by the caption stream. All burn-in
            and DVB-Sub font settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
            255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
            is 96 dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
            size of the output. Giving a positive integer will specify the exact font size in
            points. All burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not
            valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
            font settings must match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
            is not valid for source captions that are either 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
            captions. All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
            opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it
            to 0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels to the left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels above the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
            used to generate the output subtitles bitmap. Only applicable for Teletext inputs
            and DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption
            relative to the left side of the output in pixels. A value of 10 would result in
            the captions starting 10 pixels from the left of the output. If no explicit
            xPosition is provided, the horizontal caption position will be determined by the
            alignment parameter. This option is not valid for source captions that are STL,
            608/embedded or teletext. These source settings are already pre-defined by the
            caption stream. All burn-in and DVB-Sub font settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption
            relative to the top of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the top of the output. If no explicit yPosition is
            provided, the caption will be positioned towards the bottom of the output. This
            option is not valid for source captions that are STL, 608/embedded or teletext.
            These source settings are already pre-defined by the caption stream. All burn-in
            and DVB-Sub font settings must match.

          - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

          - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
          Destination Settings

          - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
          Settings

          - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
          Destination Settings

          - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

          - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

          - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

          - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

            - **StyleControl** *(string) --* When set to passthrough, passes through style and
            position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
            CFF-TT output or TTML output.

          - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

        - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
        http://www.loc.gov/standards/iso639-2/

        - **LanguageDescription** *(string) --* Human readable information to indicate captions
        available for players (eg. English, or Spanish).

        - **Name** *(string) --* Name of the caption description. Used to associate a caption
        description with an output. Names must be unique within an event.

    - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
    whole.

      - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
      Event.

      - **InputEndAction** *(string) --* Indicates the action to take when the current input
      completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
      restart at the beginning of the first input. When "none" is configured the encoder will
      transcode either black, a solid color, or a user specified slate images per the "Input
      Loss Behavior" configuration until the next input switch occurs (which is controlled
      through the Channel Schedule API).

      - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

        - **BlackFrameMsec** *(integer) --* Documentation update needed

        - **InputLossImageColor** *(string) --* When input loss image type is "color" this
        field specifies the color to use. Value: 6 hex characters representing the values of
        RGB.

        - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these
        fields specify the parameters for accessing the slate.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or
        a slate into the output after input loss exceeds blackFrameMsec.

        - **RepeatFrameMsec** *(integer) --* Documentation update needed

      - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
      PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to
      the other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each
      pipeline to the Unix epoch.

      - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by
      the Live encoder should be paced by its system clock (which optionally may be locked to
      another source via NTP) or should be locked to the clock of the source that is providing
      the input stream.

      - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
      very low video framerates. This is commonly set to enabled for music channels with less
      than one video frame per second.

    - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

      - *(dict) --* Output groups for this Live Event. Output groups contain information about
      where streams should be distributed.

        - **Name** *(string) --* Custom output group name optionally defined by the user. Only
        letters, numbers, and the underscore character allowed; only 32 characters allowed.

        - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

          - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

            - **Destination** *(dict) --* A directory and base filename where archive files
            should be written.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
            before closing and starting a new one.

          - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

            - **Destination** *(dict) --* The destination for the frame capture files. Either
            the URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
            s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
            container, plus a file name prefix (for example,
            mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
            the prefix from the destination field (for example, "curling_") + name modifier +
            the counter (5 digits, starting from 00001) + extension (which is always .jpg). For
            example, curlingLow.00001.jpg

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **HlsGroupSettings** *(dict) --* Hls Group Settings

            - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35
            signals through to this group of Apple HLS outputs.

              - *(string) --* Hls Ad Markers

            - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
            each output in the media .m3u8 file. Can be used if base manifest is delivered from
            a different URL than the main .m3u8 file.

            - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
            each output in the media .m3u8 file. Can be used if base manifest is delivered from
            a different URL than the main .m3u8 file.

            - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
            caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

              - *(dict) --* Maps a caption channel to an ISO 693-2 language code
              (http://www.loc.gov/standards/iso639-2), with an optional description.

                - **CaptionChannel** *(integer) --* The closed caption channel being described
                by this CaptionLanguageMapping. Each channel mapping must have a unique channel
                number (maximum of 4)

                - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                http://www.loc.gov/standards/iso639-2)

                - **LanguageDescription** *(string) --* Textual description of language

            - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
            captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least
            one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for
            each Language Code you specify. Make sure to specify the languages in the order in
            which they appear in the original source (if the source is embedded format) or the
            order of the caption selectors (if the source is other than embedded). Otherwise,
            languages in the manifest will not match up properly with the output captions.
            none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any
            CLOSED-CAPTIONS line from the manifest.

            - **ClientCache** *(string) --* When set to "disabled", sets the
            #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
            segments for later replay.

            - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the
            default RFC-4281) during m3u8 playlist generation.

            - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
            16-byte hex value represented by a 32-character text string. If ivSource is set to
            "explicit" then this parameter is required and is used as the IV for encryption.

            - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
            manifest files, and encryption keys (if enabled).

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **DirectoryStructure** *(string) --* Place segments in subdirectories.

            - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
            scheme. Exclude this parameter if no encryption is desired.

            - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

              - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                transfer encoding to Akamai. User should contact Akamai to enable this feature.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made
                before the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of
                seconds to wait until a restart is initiated. A value of 0 means never restart.

                - **Salt** *(string) --* Salt for authenticated Akamai.

                - **Token** *(string) --* Token parameter for authenticated akamai. If not
                specified, _gda_ is used.

              - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made
                before the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of
                seconds to wait until a restart is initiated. A value of 0 means never restart.

              - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **MediaStoreStorageClass** *(string) --* When set to temporal, output files
                are stored in non-persistent memory for faster reading and writing.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made
                before the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of
                seconds to wait until a restart is initiated. A value of 0 means never restart.

              - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                transfer encoding to WebDAV.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made
                before the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of
                seconds to wait until a restart is initiated. A value of 0 means never restart.

            - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
            manifest, but do create the master and media manifests (according to the Output
            Selection field). STANDARD: Create an I-frame-only manifest for each output that
            contains video, as well as the other manifests (according to the Output Selection
            field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
            I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
            position. For example, #EXT-X-BYTERANGE:160364@1461888"

            - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies
            the maximum number of segments in the media manifest file. After this maximum,
            older segments are removed from the media manifest. This number must be less than
            or equal to the Keep Segments field.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on
            input loss.

            - **IvInManifest** *(string) --* For use with encryptionType. The IV
            (Initialization Vector) is a 128-bit number used in conjunction with the key for
            encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the
            IV is not in the manifest.

            - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
            Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
            If this setting is "followsSegmentNumber", it will cause the IV to change every
            segment (to match the segment number). If this is set to "explicit", you must enter
            a constantIv value.

            - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
            number of media segments (.ts files) to retain in the destination directory.

            - **KeyFormat** *(string) --* The value specifies how the key is represented in the
            resource identified by the URI. If parameter is absent, an implicit value of
            "identity" is used. A reverse DNS string can also be given.

            - **KeyFormatVersions** *(string) --* Either a single positive integer version
            value or a slash delimited list of version values (1/2/3).

            - **KeyProviderSettings** *(dict) --* The key provider settings.

              - **StaticKeySettings** *(dict) --* Static Key Settings

                - **KeyProviderServer** *(dict) --* The URL of the license server used for
                protecting content.

                  - **PasswordParam** *(string) --* key used to extract the password from EC2
                  Parameter store

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                  to a file accessible to the Live system (eg. a http:// URI) depending on the
                  output type. For example, a RTMP destination should have a uri simliar to:
                  "rtmp://fmsserver/live".

                  - **Username** *(string) --* Documentation update needed

                - **StaticKeyValue** *(string) --* Static key value as a 32 character
                hexadecimal string.

            - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

            - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
            should use floating point or integer values for segment duration.

            - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
            looking ahead and back within the specified range for a nearby avail and extending
            the segment size if needed.

            - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
            the destination and manifest. If "live", only the number segments specified in
            keepSegments and indexNSegments are kept; newer segments replace older segments,
            which may prevent players from rewinding all the way to the beginning of the event.
            VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
            converting it to a "VOD" type manifest on completion of the stream.

            - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests
            (master manifest, if applicable, and media manifests) for this output group.
            SEGMENTSONLY: Does not generate any manifests for this output group.

            - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME
            tag in .m3u8 manifest files. The value is calculated as follows: either the program
            date and time are initialized using the input timecode source, or the time is
            initialized using the input timecode source and the date is initialized using the
            timestampOffset.

            - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
            EXT-X-PROGRAM-DATE-TIME entry, in seconds.

            - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
            each pipeline includes information about both pipelines: first its own media files,
            then the media files of the other pipeline. This feature allows playout device that
            support stale manifest detection to switch from one manifest to the other, when the
            current manifest seems to be stale. There are still two destinations and two master
            manifests, but both master manifests reference the media files from both pipelines.
            DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
            about its own pipeline only. For an HLS output group with MediaPackage as the
            destination, the DISABLED behavior is always followed. MediaPackage regenerates the
            manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

            - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
            create (in seconds). Note that segments will end on the next keyframe after this
            number of seconds, so actual segment length may be longer.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
            subdirectory before starting a new one. directoryStructure must be
            subdirectoryPerStream for this setting to have an effect.

            - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
            video in EXT-X-STREAM-INF tag of variant manifest.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

            - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
            offset to fine tune the timestamps.

            - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
            multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
            program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE
            tags to index segments for playback. A typical use for this value is when sending
            the output to AWS Elemental MediaConvert, which can accept only a single media
            file. Playback while the channel is running is not guaranteed due to HTTP server
            caching.

          - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

            - **Destination** *(dict) --* MediaPackage channel destination.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

            - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point
            Identity" element used in each message placed in the sparse track. Only enabled if
            sparseTrackType is not "none".

            - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an
            audio-only MS Smooth output, the fragment absolute time will be set to the current
            timecode. This option does not write timecodes to the audio elementary stream.

            - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
            certificate chain to a trusted Certificate Authority (CA). This will cause https
            outputs to self-signed certificates to fail.

            - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
            retrying connection to the IIS server if the connection is lost. Content will be
            cached during this time and the cache will be be delivered to the IIS server once
            the connection is re-established.

            - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
            Elemental Live acts as a "Push" encoder to IIS.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
            only be specified if eventIdMode is set to useConfigured.

            - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
            IIS server. If no event ID is sent and the same Live Event is used without changing
            the publishing point, clients might see cached video from the previous run.
            Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" -
            generate and send an event ID based on the current timestamp - "noEventId" - do not
            send an event ID to the IIS server.

            - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
            server when stopping the event

            - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
            outputs.

            - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in
            seconds). Fragment length must be compatible with GOP size and framerate.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on
            input loss.

            - **NumRetries** *(integer) --* Number of retry attempts.

            - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
            to output failure, due to exhausting the numRetries on one segment, or exceeding
            filecacheDuration.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from
            the second pipeline.

            - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
            to generate a sparse track in this group of MS-Smooth outputs.

            - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest
            so publishing point doesn't start until all streams start.

            - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
            timestampOffsetMode is set to useConfiguredOffset.

            - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
            useEventStartDate: Use the date the event was started as the offset -
            useConfiguredOffset: Use an explicitly configured date as the offset

          - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

            - **AuthenticationScheme** *(string) --* Authentication scheme to use when
            connecting with CDN

            - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills
            up. If remote origin server stalls the RTMP connection and does not accept content
            fast enough the 'Media Cache' will fill up. When the cache reaches the duration
            specified by cacheLength the cache will stop accepting new content. If set to
            disconnectImmediately, the RTMP output will force a disconnect. Clear the media
            cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
            output will wait up to 5 minutes to allow the origin server to begin accepting data
            again.

            - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
            buffer size.

            - **CaptionData** *(string) --* Controls the types of data that passes to
            onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
            passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but
            608 data from both fields will be passed. If set to 'field1608' then only the data
            carried in 608 from field 1 video will be passed.

            - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if
            input becomes unavailable. - emitOutput: Emit a slate until input returns. -
            pauseOutput: Stop transmitting data until input returns. This does not close the
            underlying RTMP connection.

            - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
            wait until a restart is initiated. A value of 0 means never restart.

          - **UdpGroupSettings** *(dict) --* Udp Group Settings

            - **InputLossAction** *(string) --* Specifies behavior of last resort when input
            video is lost, and no more backup inputs are available. When dropTs is selected the
            entire transport stream will stop being emitted. When dropProgram is selected the
            program can be dropped from the transport stream (and replaced with null packets to
            meet the TS bitrate requirement). Or, when emitProgram is chosen the transport
            stream will continue to be produced normally with repeat frames, black frames, or
            slate frames substituted for the absent input video.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

        - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

          - *(dict) --* Output settings. There can be multiple outputs within a group.

            - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
            audio sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
            as caption sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **OutputName** *(string) --* The name used to identify an output.

            - **OutputSettings** *(dict) --* Output type-specific settings.

              - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                - **ContainerSettings** *(dict) --* Settings specific to the container type of
                the file.

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream
                    is removed from the input. This allows the output audio configuration to
                    dynamically change based on input configuration. If this is set to
                    encodeSilence, all output audio streams will output encoded silence when
                    not connected to an active input stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                    muxing and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                    Captions in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                    for ARIB Captions will be auto-selected from unused pids. If set to
                    useConfigured, ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                    for Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                    for each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                    audio stream(s) in the transport stream. Multiple values are accepted, and
                    can be entered in ranges and/or by comma separation. Can be entered as
                    decimal or hexadecimal values. Each PID specified must be in the range of
                    32 (or 0x20)..8182 (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                    0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                    type = 0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                    bits per second. Setting to 0 lets the muxer automatically determine the
                    appropriate bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                    model for accurate interleaving. Setting to bufferModel to none can lead to
                    lower latency, but low-memory devices may not be able to play back the
                    stream without interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                    (NIT) at the specified table repetition interval.

                      - **NetworkId** *(integer) --* The numeric value placed in the Network
                      Information Table (NIT).

                      - **NetworkName** *(string) --* The network name text placed in the
                      networkNameDescriptor inside the Network Information Table. Maximum
                      length is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                    (SDT) at the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information
                      into output stream. The sdtFollow setting copies SDT information from
                      input stream to output stream. The sdtFollowIfPresent setting copies SDT
                      information from input stream to output stream if SDT information is
                      present in the input, otherwise it will fall back on the user-defined
                      values. The sdtManual setting means user will enter the SDT information.
                      The sdtNone setting means output stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed
                      in the serviceDescriptor in the Service Description Table. Maximum length
                      is 256 characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                    the specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                    DVB Teletext data to this output. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                    the input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                    selected, audio EBP markers will be added to partitions 3 and 4. The
                    interval between these additional markers will be fixed, and will be
                    slightly shorter than the video EBP marker interval. Only available when
                    EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                    always follow the video interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                    Boundary Points do not come within the specified time interval of each
                    other by looking ahead at input video. If another EBP is going to come in
                    within the specified time interval, the current EBP is not emitted, and the
                    segment is "stretched" to the next marker. The lookahead value does not add
                    latency to the system. The Live Event must be configured elsewhere to
                    create sufficient latency to make the lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                    If set to videoAndAudioPids, EBP markers will be placed on the video PID
                    and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                    the video PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                    PES header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Platform data to this output. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment.
                    Only used with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                    input source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                    KLV data to this output. Multiple values are accepted, and can be entered
                    in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a
                    downstream encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between
                    instances of this table in the output transport stream. Valid values are 0,
                    10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                    Clock Reference value is inserted for every Packetized Elementary Stream
                    (PES) header. This parameter is effective only when the PCR PID is the same
                    as the video or audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                    Clock Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                    Reference (PCR) in the transport stream. When no value is given, the
                    encoder will assign the same value as the Video PID. Can be entered as a
                    decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                    0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between
                    instances of this table in the output transport stream. Valid values are 0,
                    10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                    Table (PMT) in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in
                    the Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                    SCTE-27 data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                    input source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                    each segmentationTime period. raiSegstart sets the Random Access Indicator
                    bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                    timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                    at the start of segments. ebp adds Encoder Boundary Point information to
                    the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                    ebpLegacy adds Encoder Boundary Point information to the adaptation field
                    using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter
                    controls how segmentation markers are inserted into the transport stream.
                    With avails, it is possible that segments may be truncated, which can
                    influence where future segmentation markers are inserted. When a
                    segmentation style of "resetCadence" is selected and a segment is truncated
                    due to an avail, we will reset the segmentation cadence. This means the
                    subsequent segment will have a duration of $segmentationTime seconds. When
                    a segmentation style of "maintainCadence" is selected and a segment is
                    truncated due to an avail, we will not reset the segmentation cadence. This
                    means the subsequent segment will likely be truncated as well. However, all
                    segments after that will have a duration of $segmentationTime seconds. Note
                    that EBP lookahead is a slight exception to this rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                    metadata will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID
                    field in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                    video stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Extension** *(string) --* Output file extension. If excluded, this will be
                auto-selected from the container type.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Required for multiple outputs of the same type.

              - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                - **NameModifier** *(string) --* Required if the output group contains more
                than one output. This modifier forms part of the output file name.

              - **HlsOutputSettings** *(dict) --* Hls Output Settings

                - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                settings are different for audio-only outputs.

                  - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                    - **AudioGroupId** *(string) --* Specifies the group to which the audio
                    Rendition belongs.

                    - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                    to use as the cover art for an audio-only output. We recommend a low
                    bit-size file because the image increases the output audio bandwidth. The
                    image is attached to the audio as an ID3 tag, frame type APIC, picture type
                    0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.

                      - **PasswordParam** *(string) --* key used to extract the password from
                      EC2 Parameter store

                      - **Uri** *(string) --* Uniform Resource Identifier - This should be a
                      path to a file accessible to the Live system (eg. a http:// URI)
                      depending on the output type. For example, a RTMP destination should have
                      a uri simliar to: "rtmp://fmsserver/live".

                      - **Username** *(string) --* Documentation update needed

                    - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                    supported: Audio-Only Variant Stream The client can play back this
                    audio-only stream instead of video in low-bandwidth scenarios. Represented
                    as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select,
                    Default Alternate rendition that the client should try to play back by
                    default. Represented as an EXT-X-MEDIA in the HLS manifest with
                    DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default
                    Alternate rendition that the client may try to play back by default.
                    Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO,
                    AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that
                    the client will not try to play back by default. Represented as an
                    EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO

                  - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                    - **AudioRenditionSets** *(string) --* List all the audio groups that are
                    used with the video output stream. Input all the audio GROUP-IDs that are
                    associated to the video, separate by ','.

                    - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to
                      insert for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                      audio stream(s) in the transport stream. Multiple values are accepted,
                      and can be entered in ranges and/or by comma separation. Can be entered
                      as decimal or hexadecimal values.

                      - **EcmPid** *(string) --* This parameter is unused and deprecated.

                      - **PatInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. A value of
                      \\"0\\" writes out the PMT once per segment file.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                      Clock Reference value is inserted for every Packetized Elementary Stream
                      (PES) header. This parameter is effective only when the PCR PID is the
                      same as the video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between
                      Program Clock References (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the
                      encoder will assign the same value as the Video PID. Can be entered as a
                      decimal or hexadecimal value.

                      - **PmtInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. A value of
                      \\"0\\" writes out the PMT once per segment file.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                      Table (PMT) in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                      - **ProgramNum** *(integer) --* The value of the program number field in
                      the Program Map Table.

                      - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                      SCTE-35 signals from the input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35
                      stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata is passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream
                      ID field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                      video stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Accepts \\"Format
                Identifiers\\":#formatIdentifierParameters.

                - **SegmentModifier** *(string) --* String concatenated to end of segment
                filenames.

              - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

              - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                - **H265PackagingType** *(string) --* Only applicable when this output is
                referencing an H.265 video description. Specifies whether MP4 segments should
                be packaged as HEV1 or HVC1.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Required for multiple outputs of the same type.

              - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the
                tls certificate chain to a trusted Certificate Authority (CA). This will cause
                rtmps outputs with self-signed certificates to fail.

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying a connection to the Flash Media server if the connection is lost.

                - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                rtmp://host/appname). For connection to Akamai, a username and password must be
                supplied. URI fields accept format identifiers.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **NumRetries** *(integer) --* Number of retry attempts.

              - **UdpOutputSettings** *(dict) --* Udp Output Settings

                - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                values increase latency through the transcoder but simultaneously assist the
                transcoder in maintaining a constant, low-jitter UDP/RTP output while
                accommodating clock recovery, input switching, input disruptions, picture
                reordering, etc.

                - **ContainerSettings** *(dict) --* Udp Container Settings

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream
                    is removed from the input. This allows the output audio configuration to
                    dynamically change based on input configuration. If this is set to
                    encodeSilence, all output audio streams will output encoded silence when
                    not connected to an active input stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                    muxing and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                    Captions in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                    for ARIB Captions will be auto-selected from unused pids. If set to
                    useConfigured, ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                    for Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                    for each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                    audio stream(s) in the transport stream. Multiple values are accepted, and
                    can be entered in ranges and/or by comma separation. Can be entered as
                    decimal or hexadecimal values. Each PID specified must be in the range of
                    32 (or 0x20)..8182 (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                    0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                    type = 0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                    bits per second. Setting to 0 lets the muxer automatically determine the
                    appropriate bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                    model for accurate interleaving. Setting to bufferModel to none can lead to
                    lower latency, but low-memory devices may not be able to play back the
                    stream without interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                    (NIT) at the specified table repetition interval.

                      - **NetworkId** *(integer) --* The numeric value placed in the Network
                      Information Table (NIT).

                      - **NetworkName** *(string) --* The network name text placed in the
                      networkNameDescriptor inside the Network Information Table. Maximum
                      length is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                    (SDT) at the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information
                      into output stream. The sdtFollow setting copies SDT information from
                      input stream to output stream. The sdtFollowIfPresent setting copies SDT
                      information from input stream to output stream if SDT information is
                      present in the input, otherwise it will fall back on the user-defined
                      values. The sdtManual setting means user will enter the SDT information.
                      The sdtNone setting means output stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed
                      in the serviceDescriptor in the Service Description Table. Maximum length
                      is 256 characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                    the specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                    DVB Teletext data to this output. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                    the input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                    selected, audio EBP markers will be added to partitions 3 and 4. The
                    interval between these additional markers will be fixed, and will be
                    slightly shorter than the video EBP marker interval. Only available when
                    EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                    always follow the video interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                    Boundary Points do not come within the specified time interval of each
                    other by looking ahead at input video. If another EBP is going to come in
                    within the specified time interval, the current EBP is not emitted, and the
                    segment is "stretched" to the next marker. The lookahead value does not add
                    latency to the system. The Live Event must be configured elsewhere to
                    create sufficient latency to make the lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                    If set to videoAndAudioPids, EBP markers will be placed on the video PID
                    and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                    the video PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                    PES header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Platform data to this output. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment.
                    Only used with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                    input source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                    KLV data to this output. Multiple values are accepted, and can be entered
                    in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a
                    downstream encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between
                    instances of this table in the output transport stream. Valid values are 0,
                    10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                    Clock Reference value is inserted for every Packetized Elementary Stream
                    (PES) header. This parameter is effective only when the PCR PID is the same
                    as the video or audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                    Clock Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                    Reference (PCR) in the transport stream. When no value is given, the
                    encoder will assign the same value as the Video PID. Can be entered as a
                    decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                    0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between
                    instances of this table in the output transport stream. Valid values are 0,
                    10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                    Table (PMT) in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in
                    the Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                    SCTE-27 data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                    input source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                    each segmentationTime period. raiSegstart sets the Random Access Indicator
                    bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                    timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                    at the start of segments. ebp adds Encoder Boundary Point information to
                    the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                    ebpLegacy adds Encoder Boundary Point information to the adaptation field
                    using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter
                    controls how segmentation markers are inserted into the transport stream.
                    With avails, it is possible that segments may be truncated, which can
                    influence where future segmentation markers are inserted. When a
                    segmentation style of "resetCadence" is selected and a segment is truncated
                    due to an avail, we will reset the segmentation cadence. This means the
                    subsequent segment will have a duration of $segmentationTime seconds. When
                    a segmentation style of "maintainCadence" is selected and a segment is
                    truncated due to an avail, we will not reset the segmentation cadence. This
                    means the subsequent segment will likely be truncated as well. However, all
                    segments after that will have a duration of $segmentationTime seconds. Note
                    that EBP lookahead is a slight exception to this rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                    metadata will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID
                    field in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                    video stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Destination** *(dict) --* Destination address and port number for RTP or
                UDP packets. Can be unicast or multicast RTP or UDP (eg.
                rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                Error Correction on UDP outputs.

                  - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                  the FEC protection matrix. The number of transport stream packets per column
                  error correction packet. Must be between 4 and 20, inclusive.

                  - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                  - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of
                  the FEC protection matrix. Must be between 1 and 20, inclusive. If only
                  Column FEC is used, then larger values increase robustness. If Row FEC is
                  used, then this is the number of transport stream packets per row error
                  correction packet, and the value must be between 4 and 20, inclusive, if
                  includeFec is columnAndRow. If includeFec is column, this value must be 1 to
                  20, inclusive.

            - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as
            the source for this output.

    - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
    information from inputs.

      - **Source** *(string) --* Identifies the source for the timecode that will be associated
      with the events outputs. -Embedded (embedded): Initialize the output timecode with
      timecode from the the source. If no embedded timecode is detected in the source, the
      system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the
      UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be
      00:00:00:00.

      - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
      resynchronized to the input timecode. Discrepancies below this threshold are permitted to
      avoid unnecessary discontinuities in the output timecode. No timecode sync when this is
      not specified.

    - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

      - *(dict) --* Video settings for this stream.

        - **CodecSettings** *(dict) --* Video codec settings.

          - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

            - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
            frames for inclusion in the output. For example, "10" means capture a frame every
            10 seconds.

          - **H264Settings** *(dict) --* H264 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input
            AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
            AFD value will be the value configured in the fixedAfd parameter.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
            output must have a unique value when its bitrate is rounded down to the nearest
            multiple of 1000.

            - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
            filled (HRD buffer model).

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
              space conversion to the output

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
            Main or High profile) or cavlc.

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
            the output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
            frame to reduce flicker or 'pop' on I-frames.

            - **FramerateControl** *(string) --* This field indicates how the output video
            frame rate is specified. If "specified" is selected then the output video frame
            rate is determined by framerateNumerator and framerateDenominator, else if
            "initializeFromSource" is selected then the output video frame rate will be set
            equal to the input video frame rate of the first input.

            - **FramerateDenominator** *(integer) --* Framerate denominator.

            - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
            fraction, e.g. 24000 / 1001 = 23.976 fps.

            - **GopBReference** *(string) --* Documentation update needed

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining
            mid-stream will receive an IDR frame as quickly as possible. Setting this value to
            0 will break output segmenting.

            - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
            or seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run
            time.

            - **Level** *(string) --* H.264 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
            decrease latency and memory usage, while high can produce better quality for
            certain content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
            VBR: Set the maximum bitrate in order to accommodate expected spikes in the
            complexity of the video.

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
            enabled. Enforces separation between repeated (cadence) I-frames and I-frames
            inserted by Scene Change Detection. If a scene change I-frame is within I-interval
            frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
            I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
            normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
            Min-I-interval - 1

            - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
            may use more than requested if using B-frames and/or interlaced encoding.

            - **ParControl** *(string) --* This field indicates how the output pixel aspect
            ratio is specified. If "specified" is selected then the output video pixel aspect
            ratio is determined by parNumerator and parDenominator, else if
            "initializeFromSource" is selected then the output pixsel aspect ratio will be set
            equal to the input video pixel aspect ratio of the first input.

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.264 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
            encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
            quality level field and Max bitrate field that suit your most important viewing
            devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
            bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
            Quality level: 6. Max bitrate: 1M to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate.
            Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
            vary, depending on the video complexity. Recommended instead of QVBR if you want to
            maintain a specific average bitrate over the duration of the channel. CBR: Quality
            varies, depending on the video complexity. Recommended only if you distribute your
            assets to devices that cannot handle variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
            I-frames when scene change is detected. - Off: does not force an I-frame when scene
            change is detected.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or
            equal to the number of macroblock rows for progressive pictures, and less than or
            equal to half the number of macroblock rows for interlaced pictures. This field is
            optional; when no value is specified the encoder will choose the number of slices
            based on encode resolution.

            - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
            reduce high-frequency content in the encoded image.

            - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
            frame based on spatial variation of content complexity.

            - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
            sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
            to improve visual quality.

            - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

            - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
            frame based on temporal variation of content complexity.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
            into the video elementary stream. - 'disabled': Do not include timecodes -
            'picTimingSei': Pass through picture timing SEI messages from the source specified
            in Timecode Config

          - **H265Settings** *(dict) --* H265 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input
            AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
            AFD value will be the value configured in the fixedAfd parameter.

            - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
            Alternative Transfer Function SEI message to support backwards compatibility with
            non-HDR decoders and displays.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
            output must have a unique value when its bitrate is rounded down to the nearest
            multiple of 1000.

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
              space conversion to the output

              - **Hdr10Settings** *(dict) --* Hdr10 Settings

                - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
                value defining the maximum light level, in nits, of any single pixel within an
                encoded HDR video stream or file.

                - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                metadata value defining the maximum average light level, in nits, for any
                single frame within an encoded HDR video stream or file.

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
            the output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
            frame to reduce flicker or 'pop' on I-frames.

            - **FramerateDenominator** *(integer) --* Framerate denominator.

            - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
            fraction, e.g. 24000 / 1001 = 23.976 fps.

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining
            mid-stream will receive an IDR frame as quickly as possible. Setting this value to
            0 will break output segmenting.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
            or seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run
            time.

            - **Level** *(string) --* H.265 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
            decrease latency and memory usage, while high can produce better quality for
            certain content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
            enabled. Enforces separation between repeated (cadence) I-frames and I-frames
            inserted by Scene Change Detection. If a scene change I-frame is within I-interval
            frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
            I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
            normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
            Min-I-interval - 1

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.265 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
            encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
            quality level field and Max bitrate field that suit your most important viewing
            devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
            bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
            Quality level: 6. Max bitrate: 1M to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate.
            Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
            depending on the video complexity. Recommended only if you distribute your assets
            to devices that cannot handle variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or
            equal to the number of macroblock rows for progressive pictures, and less than or
            equal to half the number of macroblock rows for interlaced pictures. This field is
            optional; when no value is specified the encoder will choose the number of slices
            based on encode resolution.

            - **Tier** *(string) --* H.265 Tier.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
            into the video elementary stream. - 'disabled': Do not include timecodes -
            'picTimingSei': Pass through picture timing SEI messages from the source specified
            in Timecode Config

        - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
        most codecs, you can leave this field and width blank in order to use the height and
        width (resolution) from the source. Note, however, that leaving blank is not
        recommended. For the Frame Capture codec, height and width are required.

        - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name
        to uniquely identify this Description. Description names should be unique within this
        Live Event.

        - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the
        input stream. RESPOND causes input video to be clipped, depending on the AFD value,
        input display aspect ratio, and output display aspect ratio, and (except for
        FRAMECAPTURE codec) includes the values in the output. PASSTHROUGH (does not apply to
        FRAMECAPTURE codec) ignores the AFD values and includes the values in the output, so
        input video is not clipped. NONE ignores the AFD values and does not include the values
        through to the output, so input video is not clipped.

        - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
        stretch the video to the specified output resolution (height and width). This option
        will override any position value. DEFAULT may insert black boxes (pillar boxes or
        letter boxes) around the video to provide the specified output resolution.

        - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
        scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
        for most content.

        - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
        most codecs, you can leave this field and height blank in order to use the height and
        width (resolution) from the source. Note, however, that leaving blank is not
        recommended. For the Frame Capture codec, height and width are required.
    """


_ClientCreateChannelResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    {"HlsInputSettings": Dict[str, Any], "ServerValidation": str},
    total=False,
)


class ClientCreateChannelResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef(
    _ClientCreateChannelResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelInputAttachmentsInputSettings` `NetworkInputSettings`

    - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
    HLS manifest.

      - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
      BANDWIDTH that most closely matches this value will be chosen, otherwise the
      highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
      bits per second, as in an HLS manifest.

      - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
      begin this many buffer segments from the end (most recently written segment). When
      not specified, the HLS input will begin with the first segment specified in the
      m3u8.

      - **Retries** *(integer) --* The number of consecutive times that attempts to read
      a manifest or segment must fail before the input is considered unavailable.

      - **RetryInterval** *(integer) --* The number of seconds between retries when an
      attempt to read a manifest or segment fails.

    - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
    checkCryptographyOnly, cryptography in the certificate will be checked, but not the
    server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
    name) do not strictly match the corresponding certificate's wildcard pattern and
    would otherwise cause the event to error. This setting is ignored for protocols that
    do not use https.
    """


_ClientCreateChannelResponseChannelInputAttachmentsInputSettingsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelInputAttachmentsInputSettingsTypeDef",
    {
        "AudioSelectors": List[Any],
        "CaptionSelectors": List[Any],
        "DeblockFilter": str,
        "DenoiseFilter": str,
        "FilterStrength": int,
        "InputFilter": str,
        "NetworkInputSettings": ClientCreateChannelResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef,
        "SourceEndBehavior": str,
        "VideoSelector": Dict[str, Any],
    },
    total=False,
)


class ClientCreateChannelResponseChannelInputAttachmentsInputSettingsTypeDef(
    _ClientCreateChannelResponseChannelInputAttachmentsInputSettingsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannelInputAttachments` `InputSettings`

    - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
    that have multiple available.

      - *(dict) --* Audio Selector

        - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
        this name to uniquely identify this Selector. Selector names should be unique per
        input.

        - **SelectorSettings** *(dict) --* The audio selector settings.

          - **AudioLanguageSelection** *(dict) --* Audio Language Selection

            - **LanguageCode** *(string) --* Selects a specific three-letter language code
            from within an audio source.

            - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
            stream demux strictly identifies audio streams by their language descriptor. If
            a PMT update occurs such that an audio stream matching the initially selected
            language is no longer present then mute will be encoded until the language
            returns. If "loose", then on a PMT update the demux will choose another audio
            stream in the program with the same stream type if it can't find one with the
            same language.

          - **AudioPidSelection** *(dict) --* Audio Pid Selection

            - **Pid** *(integer) --* Selects a specific PID from within a source.

    - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
    that have multiple available.

      - *(dict) --* Output groups for this Live Event. Output groups contain information
      about where streams should be distributed.

        - **LanguageCode** *(string) --* When specified this field indicates the three
        letter language code of the caption track to extract from the source.

        - **Name** *(string) --* Name identifier for a caption selector. This name is used
        to associate this caption selector with one or more caption descriptions. Names
        must be unique within an event.

        - **SelectorSettings** *(dict) --* Caption selector settings.

          - **AribSourceSettings** *(dict) --* Arib Source Settings

          - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

            - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
            PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
            is passed through, regardless of selectors.

          - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
            through via the "608 compatibility bytes" fields of the 708 wrapper as well as
            translated into 708. 708 data present in the source content will be discarded.

            - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
            intermittent and/or non-aligned SCTE-20 and Embedded captions.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
            number within the video track from which to extract captions. Unused for
            passthrough.

            - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

          - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
            through via the "608 compatibility bytes" fields of the 708 wrapper as well as
            translated into 708. 708 data present in the source content will be discarded.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
            number within the video track from which to extract captions. Unused for
            passthrough.

          - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

            - **Pid** *(integer) --* The pid field is used in conjunction with the caption
            selector languageCode field as follows: - Specify PID and Language: Extracts
            captions from that PID; the language is "informational". - Specify PID and omit
            Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
            the specified language, whichever PID that happens to be. - Omit PID and omit
            Language: Valid only if source is DVB-Sub that is being passed through; all
            languages will be passed through.

          - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

            - **PageNumber** *(string) --* Specifies the teletext page number within the
            data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
            (2303). Unused for passthrough. Should be specified as a hexadecimal string
            with no "0x" prefix.

    - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

    - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

    - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
    to 5 (strongest).

    - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
    the deblocking filter enabled by default. 1) auto - filtering will be applied depending
    on input type/quality 2) disabled - no filtering will be applied to the input 3) forced
    - filtering will be applied regardless of input type

    - **NetworkInputSettings** *(dict) --* Input settings.

      - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
      HLS manifest.

        - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
        BANDWIDTH that most closely matches this value will be chosen, otherwise the
        highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
        bits per second, as in an HLS manifest.

        - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
        begin this many buffer segments from the end (most recently written segment). When
        not specified, the HLS input will begin with the first segment specified in the
        m3u8.

        - **Retries** *(integer) --* The number of consecutive times that attempts to read
        a manifest or segment must fail before the input is considered unavailable.

        - **RetryInterval** *(integer) --* The number of seconds between retries when an
        attempt to read a manifest or segment fails.

      - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
      checkCryptographyOnly, cryptography in the certificate will be checked, but not the
      server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
      name) do not strictly match the corresponding certificate's wildcard pattern and
      would otherwise cause the event to error. This setting is ignored for protocols that
      do not use https.

    - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
    input to be streamed indefinitely.

    - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
    input types that have multiple available.

      - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
      works in tandem with colorSpaceUsage and a video description's
      colorSpaceSettingsChoice to determine if any conversion will be performed.

      - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
      follow. This field controls how the value in the colorSpace field will be used.
      fallback means that when the input does include color space data, that data will be
      used, but when the input has no color space data, the value in colorSpace will be
      used. Choose fallback if your input is sometimes missing color space data, but when
      it does have color space data, that data is correct. force means to always use the
      value in colorSpace. Choose force if your input usually has no color space data or
      might have unreliable color space data.

      - **SelectorSettings** *(dict) --* The video selector settings.

        - **VideoSelectorPid** *(dict) --* Video Selector Pid

          - **Pid** *(integer) --* Selects a specific PID from within a video source.

        - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

          - **ProgramId** *(integer) --* Selects a specific program from within a
          multi-program transport stream. If the program doesn't exist, the first program
          within the transport stream will be selected by default.
    """


_ClientCreateChannelResponseChannelInputAttachmentsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelInputAttachmentsTypeDef",
    {
        "InputAttachmentName": str,
        "InputId": str,
        "InputSettings": ClientCreateChannelResponseChannelInputAttachmentsInputSettingsTypeDef,
    },
    total=False,
)


class ClientCreateChannelResponseChannelInputAttachmentsTypeDef(
    _ClientCreateChannelResponseChannelInputAttachmentsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannel` `InputAttachments`

    - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
    required if the user wants to use this input in an input switch action.

    - **InputId** *(string) --* The ID of the input

    - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

      - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
      that have multiple available.

        - *(dict) --* Audio Selector

          - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
          this name to uniquely identify this Selector. Selector names should be unique per
          input.

          - **SelectorSettings** *(dict) --* The audio selector settings.

            - **AudioLanguageSelection** *(dict) --* Audio Language Selection

              - **LanguageCode** *(string) --* Selects a specific three-letter language code
              from within an audio source.

              - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
              stream demux strictly identifies audio streams by their language descriptor. If
              a PMT update occurs such that an audio stream matching the initially selected
              language is no longer present then mute will be encoded until the language
              returns. If "loose", then on a PMT update the demux will choose another audio
              stream in the program with the same stream type if it can't find one with the
              same language.

            - **AudioPidSelection** *(dict) --* Audio Pid Selection

              - **Pid** *(integer) --* Selects a specific PID from within a source.

      - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
      that have multiple available.

        - *(dict) --* Output groups for this Live Event. Output groups contain information
        about where streams should be distributed.

          - **LanguageCode** *(string) --* When specified this field indicates the three
          letter language code of the caption track to extract from the source.

          - **Name** *(string) --* Name identifier for a caption selector. This name is used
          to associate this caption selector with one or more caption descriptions. Names
          must be unique within an event.

          - **SelectorSettings** *(dict) --* Caption selector settings.

            - **AribSourceSettings** *(dict) --* Arib Source Settings

            - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

              - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
              PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
              is passed through, regardless of selectors.

            - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
              through via the "608 compatibility bytes" fields of the 708 wrapper as well as
              translated into 708. 708 data present in the source content will be discarded.

              - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
              intermittent and/or non-aligned SCTE-20 and Embedded captions.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
              number within the video track from which to extract captions. Unused for
              passthrough.

              - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

            - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
              through via the "608 compatibility bytes" fields of the 708 wrapper as well as
              translated into 708. 708 data present in the source content will be discarded.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
              number within the video track from which to extract captions. Unused for
              passthrough.

            - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

              - **Pid** *(integer) --* The pid field is used in conjunction with the caption
              selector languageCode field as follows: - Specify PID and Language: Extracts
              captions from that PID; the language is "informational". - Specify PID and omit
              Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
              the specified language, whichever PID that happens to be. - Omit PID and omit
              Language: Valid only if source is DVB-Sub that is being passed through; all
              languages will be passed through.

            - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

              - **PageNumber** *(string) --* Specifies the teletext page number within the
              data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
              (2303). Unused for passthrough. Should be specified as a hexadecimal string
              with no "0x" prefix.

      - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

      - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

      - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
      to 5 (strongest).

      - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
      the deblocking filter enabled by default. 1) auto - filtering will be applied depending
      on input type/quality 2) disabled - no filtering will be applied to the input 3) forced
      - filtering will be applied regardless of input type

      - **NetworkInputSettings** *(dict) --* Input settings.

        - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
        HLS manifest.

          - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
          BANDWIDTH that most closely matches this value will be chosen, otherwise the
          highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
          bits per second, as in an HLS manifest.

          - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
          begin this many buffer segments from the end (most recently written segment). When
          not specified, the HLS input will begin with the first segment specified in the
          m3u8.

          - **Retries** *(integer) --* The number of consecutive times that attempts to read
          a manifest or segment must fail before the input is considered unavailable.

          - **RetryInterval** *(integer) --* The number of seconds between retries when an
          attempt to read a manifest or segment fails.

        - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
        checkCryptographyOnly, cryptography in the certificate will be checked, but not the
        server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
        name) do not strictly match the corresponding certificate's wildcard pattern and
        would otherwise cause the event to error. This setting is ignored for protocols that
        do not use https.

      - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
      input to be streamed indefinitely.

      - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
      input types that have multiple available.

        - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
        works in tandem with colorSpaceUsage and a video description's
        colorSpaceSettingsChoice to determine if any conversion will be performed.

        - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
        follow. This field controls how the value in the colorSpace field will be used.
        fallback means that when the input does include color space data, that data will be
        used, but when the input has no color space data, the value in colorSpace will be
        used. Choose fallback if your input is sometimes missing color space data, but when
        it does have color space data, that data is correct. force means to always use the
        value in colorSpace. Choose force if your input usually has no color space data or
        might have unreliable color space data.

        - **SelectorSettings** *(dict) --* The video selector settings.

          - **VideoSelectorPid** *(dict) --* Video Selector Pid

            - **Pid** *(integer) --* Selects a specific PID from within a video source.

          - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

            - **ProgramId** *(integer) --* Selects a specific program from within a
            multi-program transport stream. If the program doesn't exist, the first program
            within the transport stream will be selected by default.
    """


_ClientCreateChannelResponseChannelInputSpecificationTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelInputSpecificationTypeDef",
    {"Codec": str, "MaximumBitrate": str, "Resolution": str},
    total=False,
)


class ClientCreateChannelResponseChannelInputSpecificationTypeDef(
    _ClientCreateChannelResponseChannelInputSpecificationTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannel` `InputSpecification`

    - **Codec** *(string) --* Input codec

    - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

    - **Resolution** *(string) --* Input resolution, categorized coarsely
    """


_ClientCreateChannelResponseChannelPipelineDetailsTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelPipelineDetailsTypeDef",
    {
        "ActiveInputAttachmentName": str,
        "ActiveInputSwitchActionName": str,
        "PipelineId": str,
    },
    total=False,
)


class ClientCreateChannelResponseChannelPipelineDetailsTypeDef(
    _ClientCreateChannelResponseChannelPipelineDetailsTypeDef
):
    """
    Type definition for `ClientCreateChannelResponseChannel` `PipelineDetails`

    - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
    currently being ingested by this pipeline.

    - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
    action that occurred most recently and that resulted in the switch to the current input
    attachment for this pipeline.

    - **PipelineId** *(string) --* Pipeline ID
    """


_ClientCreateChannelResponseChannelTypeDef = TypedDict(
    "_ClientCreateChannelResponseChannelTypeDef",
    {
        "Arn": str,
        "ChannelClass": str,
        "Destinations": List[Any],
        "EgressEndpoints": List[
            ClientCreateChannelResponseChannelEgressEndpointsTypeDef
        ],
        "EncoderSettings": ClientCreateChannelResponseChannelEncoderSettingsTypeDef,
        "Id": str,
        "InputAttachments": List[
            ClientCreateChannelResponseChannelInputAttachmentsTypeDef
        ],
        "InputSpecification": ClientCreateChannelResponseChannelInputSpecificationTypeDef,
        "LogLevel": str,
        "Name": str,
        "PipelineDetails": List[
            ClientCreateChannelResponseChannelPipelineDetailsTypeDef
        ],
        "PipelinesRunningCount": int,
        "RoleArn": str,
        "State": str,
        "Tags": Dict[str, str],
    },
    total=False,
)


class ClientCreateChannelResponseChannelTypeDef(
    _ClientCreateChannelResponseChannelTypeDef
):
    """
    Type definition for `ClientCreateChannelResponse` `Channel`

    - **Arn** *(string) --* The unique arn of the channel.

    - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two
    pipelines or SINGLE_PIPELINE for a channel with one pipeline.

    - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there
    is one destination per output. For other types (HLS, for example), there is one destination
    per packager.

      - *(dict) --* Placeholder documentation for OutputDestination

        - **Id** *(string) --* User-specified id. This is used in an output group or an output.

        - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output;
        one destination for both encoders.

          - *(dict) --* MediaPackage Output Destination Settings

            - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the
            destination for this output group. You do not need to specify the individual inputs
            in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines
            to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must
            be in the same region.

        - **Settings** *(list) --* Destination settings for a standard output; one destination
        for each redundant encoder.

          - *(dict) --* Placeholder documentation for OutputDestinationSettings

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type
            rtmp://)

            - **Url** *(string) --* A URL specifying a destination

            - **Username** *(string) --* username for destination

    - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from

      - *(dict) --* Placeholder documentation for ChannelEgressEndpoint

        - **SourceIp** *(string) --* Public IP of where a channel's output comes from

    - **EncoderSettings** *(dict) --* Encoder Settings

      - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

        - *(dict) --* Audio Description

          - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

            - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
            to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

            - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
            corrected using the chosen algorithm. If set to measureOnly, the audio will be
            measured but not adjusted.

            - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value
            is entered, a default value will be used according to the chosen algorithm. The CALM
            Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
            recommends a target of -23 LKFS.

          - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
          for this AudioDescription.

          - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
          values for audioType are defined in ISO-IEC 13818-1.

          - **AudioTypeControl** *(string) --* Determines how audio type is determined.
          followInput: If the input contains an ISO 639 audioType, then that value is passed
          through to the output. If the input contains no ISO 639 audioType, the value in Audio
          Type is included in the output. useConfigured: The value in Audio Type is included in
          the output. Note that this field and audioType are both ignored if inputType is
          broadcasterMixedAd.

          - **CodecSettings** *(dict) --* Audio codec settings.

            - **AacSettings** *(dict) --* Aac Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
              rate control mode and profile.

              - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
              depend on rate control mode and profile. The adReceiverMix setting receives a
              stereo description plus control track and emits a mono AAC encode of the
              description track, with control data emitted in the PES header as per ETSI TS 101
              154 Annex E.

              - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
              pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
              (audioType) will be set to 3, which signals to downstream systems that this stream
              contains "broadcaster mixed AD". Note that the input received by the encoder must
              contain pre-mixed audio; the encoder does not perform the mixing. The values in
              audioTypeControl and audioType (in AudioDescription) are ignored when set to
              broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
              audio + AD.

              - **Profile** *(string) --* AAC Profile.

              - **RateControlMode** *(string) --* Rate Control Mode.

              - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

              - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
              control mode and profile.

              - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
              or MPEG-2 Transport Stream containers.

              - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
              VBR.

            - **Ac3Settings** *(dict) --* Ac3 Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
              the coding mode.

              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
              emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

              - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
              channels.

              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
              input audio is Dolby Digital, dialnorm will be passed through.

              - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
              compression signaling to the output bitstream as defined in the Dolby Digital
              specification.

              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
              to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

              - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
              will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
              If audio was not supplied from one of these streams, then the static metadata
              settings will be used.

            - **Eac3Settings** *(dict) --* Eac3 Settings

              - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
              attenuation to the surround channels. Only used for 3/2 coding mode.

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
              the coding mode.

              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
              emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

              - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
              channels.

              - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
              for all input channels.

              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
              audio is Dolby Digital Plus, dialnorm will be passed through.

              - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

              - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
              compression, ensures that the instantaneous signal peaks do not exceed specified
              levels.

              - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
              LFE channel

              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
              to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

              - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
              used for 3/2 coding mode.

              - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
              Only used for 3/2 coding mode.

              - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
              used for 3/2 coding mode.

              - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
              Only used for 3/2 coding mode.

              - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
              be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
              audio was not supplied from one of these streams, then the static metadata settings
              will be used.

              - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
              will be passed through if it is present on the input. This detection is dynamic
              over the life of the transcode. Inputs that alternate between DD+ and non-DD+
              content will have a consistent DD+ output as the system alternates between
              passthrough and encoding.

              - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
              phase shift to the surround channels. Only used for 3/2 coding mode.

              - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
              coding mode.

              - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
              center back surround channel is matrix encoded into the left and right surround
              channels.

              - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
              Surround is matrix encoded into the two channels.

            - **Mp2Settings** *(dict) --* Mp2 Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second.

              - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
              codingMode10 (for mono) or codingMode20 (for stereo).

              - **SampleRate** *(float) --* Sample rate in Hz.

            - **PassThroughSettings** *(dict) --* Pass Through Settings

          - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
          used if languageControlMode is useConfigured, or there is no ISO 639 language code
          specified in the input.

          - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
          language code of the output to follow the ISO 639 language code of the input. The
          languageCode will be used when useConfigured is set, or when followInput is selected
          but there is no ISO 639 language code specified by the input.

          - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name
          to uniquely identify this AudioDescription. Description names should be unique within
          this Live Event.

          - **RemixSettings** *(dict) --* Settings that control how input audio channels are
          remixed into the output audio channels.

            - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
            appropriate gain adjustments.

              - *(dict) --* Audio Channel Mapping

                - **InputChannelLevels** *(list) --* Indices and gain values for each input
                channel that should be remixed into this output channel.

                  - *(dict) --* Input Channel Level

                    - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable
                    values are within the range from -60 (mute) and 6 dB.

                    - **InputChannel** *(integer) --* The index of the input channel used as a
                    source.

                - **OutputChannel** *(integer) --* The index of the output channel being produced.

            - **ChannelsIn** *(integer) --* Number of input channels to be used.

            - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
            values: 1, 2, 4, 6, 8

          - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
          name displayed by the player (eg. English, or Director Commentary).

      - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

        - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
        black. Only bmp and png images are supported.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **State** *(string) --* When set to enabled, causes video, audio and captions to be
        blanked when insertion metadata is added.

      - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail
      insertion.

        - **AvailSettings** *(dict) --* Ad avail settings.

          - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
            added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
            messages and does not apply to OOB messages.

            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
            with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
            slates

            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
            with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
            slates

          - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
            added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
            messages and does not apply to OOB messages.

            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
            with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
            slates

            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
            with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
            slates

      - **BlackoutSlate** *(dict) --* Settings for blackout slate.

        - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for
        solid black. Only bmp and png images are supported.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
        the video, audio, and captions, and raise the "Network Blackout Image" slate when an
        SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be
        lifted when the Network Start Segmentation Descriptor is encountered. The Network End and
        Network Start descriptors must contain a network ID that matches the value entered in
        "Network ID".

        - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End
        Blackout image. Image will be scaled to fill the entire output raster.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
        "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

        - **State** *(string) --* When set to enabled, causes video, audio and captions to be
        blanked when indicated by program metadata.

      - **CaptionDescriptions** *(list) --* Settings for caption decriptions

        - *(dict) --* Output groups for this Live Event. Output groups contain information about
        where streams should be distributed.

          - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use
          as a caption source when generating output captions. This field should match a
          captionSelector name.

          - **DestinationSettings** *(dict) --* Additional settings for captions destination that
          depend on the destination type.

            - **AribDestinationSettings** *(dict) --* Arib Destination Settings

            - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
              setting alignment to centered will place the captions at the bottom center of the
              output. Similarly, setting a left alignment will align captions to the bottom left
              of the output. If x and y positions are given in conjunction with the alignment
              parameter, the font will be justified (either left or centered) relative to those
              coordinates. Selecting "smart" justification will left-justify live subtitles and
              center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
              match.

              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
              captions. All burn-in and DVB-Sub font settings must match.

              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
              rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is
              equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
              must match.

              - **Font** *(dict) --* External font file used for caption burn-in. File extension
              must be 'ttf' or 'tte'. Although the user can select output fonts for many
              different types of input captions, embedded, STL and teletext sources use a strict
              grid system. Using external fonts with these caption sources could cause unexpected
              display of proportional fonts. All burn-in and DVB-Sub font settings must match.

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                file accessible to the Live system (eg. a http:// URI) depending on the output
                type. For example, a RTMP destination should have a uri simliar to:
                "rtmp://fmsserver/live".

                - **Username** *(string) --* Documentation update needed

              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
              option is not valid for source captions that are STL, 608/embedded or teletext.
              These source settings are already pre-defined by the caption stream. All burn-in
              and DVB-Sub font settings must match.

              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
              255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
              is 96 dpi. All burn-in and DVB-Sub font settings must match.

              - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on
              the size of the output. Giving a positive integer will specify the exact font size
              in points. All burn-in and DVB-Sub font settings must match.

              - **OutlineColor** *(string) --* Specifies font outline color. This option is not
              valid for source captions that are either 608/embedded or teletext. These source
              settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
              font settings must match.

              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
              is not valid for source captions that are either 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
              captions. All burn-in and DVB-Sub font settings must match.

              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
              opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to
              0 (transparent). All burn-in and DVB-Sub font settings must match.

              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels to the left. All burn-in and DVB-Sub font settings must match.

              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels above the text. All burn-in and DVB-Sub font settings must match.

              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
              used to generate the output subtitles bitmap. Only applicable for Teletext inputs
              and DVB-Sub/Burn-in outputs.

              - **XPosition** *(integer) --* Specifies the horizontal position of the caption
              relative to the left side of the output in pixels. A value of 10 would result in
              the captions starting 10 pixels from the left of the output. If no explicit
              xPosition is provided, the horizontal caption position will be determined by the
              alignment parameter. All burn-in and DVB-Sub font settings must match.

              - **YPosition** *(integer) --* Specifies the vertical position of the caption
              relative to the top of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the top of the output. If no explicit yPosition is
              provided, the caption will be positioned towards the bottom of the output. All
              burn-in and DVB-Sub font settings must match.

            - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
              setting alignment to centered will place the captions at the bottom center of the
              output. Similarly, setting a left alignment will align captions to the bottom left
              of the output. If x and y positions are given in conjunction with the alignment
              parameter, the font will be justified (either left or centered) relative to those
              coordinates. Selecting "smart" justification will left-justify live subtitles and
              center-justify pre-recorded subtitles. This option is not valid for source captions
              that are STL or 608/embedded. These source settings are already pre-defined by the
              caption stream. All burn-in and DVB-Sub font settings must match.

              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
              captions. All burn-in and DVB-Sub font settings must match.

              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
              rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
              equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
              must match.

              - **Font** *(dict) --* External font file used for caption burn-in. File extension
              must be 'ttf' or 'tte'. Although the user can select output fonts for many
              different types of input captions, embedded, STL and teletext sources use a strict
              grid system. Using external fonts with these caption sources could cause unexpected
              display of proportional fonts. All burn-in and DVB-Sub font settings must match.

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                file accessible to the Live system (eg. a http:// URI) depending on the output
                type. For example, a RTMP destination should have a uri simliar to:
                "rtmp://fmsserver/live".

                - **Username** *(string) --* Documentation update needed

              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
              option is not valid for source captions that are STL, 608/embedded or teletext.
              These source settings are already pre-defined by the caption stream. All burn-in
              and DVB-Sub font settings must match.

              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
              255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
              is 96 dpi. All burn-in and DVB-Sub font settings must match.

              - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
              size of the output. Giving a positive integer will specify the exact font size in
              points. All burn-in and DVB-Sub font settings must match.

              - **OutlineColor** *(string) --* Specifies font outline color. This option is not
              valid for source captions that are either 608/embedded or teletext. These source
              settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
              font settings must match.

              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
              is not valid for source captions that are either 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
              captions. All burn-in and DVB-Sub font settings must match.

              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
              opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it
              to 0 (transparent). All burn-in and DVB-Sub font settings must match.

              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels to the left. All burn-in and DVB-Sub font settings must match.

              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels above the text. All burn-in and DVB-Sub font settings must match.

              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
              used to generate the output subtitles bitmap. Only applicable for Teletext inputs
              and DVB-Sub/Burn-in outputs.

              - **XPosition** *(integer) --* Specifies the horizontal position of the caption
              relative to the left side of the output in pixels. A value of 10 would result in
              the captions starting 10 pixels from the left of the output. If no explicit
              xPosition is provided, the horizontal caption position will be determined by the
              alignment parameter. This option is not valid for source captions that are STL,
              608/embedded or teletext. These source settings are already pre-defined by the
              caption stream. All burn-in and DVB-Sub font settings must match.

              - **YPosition** *(integer) --* Specifies the vertical position of the caption
              relative to the top of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the top of the output. If no explicit yPosition is
              provided, the caption will be positioned towards the bottom of the output. This
              option is not valid for source captions that are STL, 608/embedded or teletext.
              These source settings are already pre-defined by the caption stream. All burn-in
              and DVB-Sub font settings must match.

            - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

            - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
            Destination Settings

            - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
            Settings

            - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
            Destination Settings

            - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

            - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

            - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

            - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

              - **StyleControl** *(string) --* When set to passthrough, passes through style and
              position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
              CFF-TT output or TTML output.

            - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

          - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
          http://www.loc.gov/standards/iso639-2/

          - **LanguageDescription** *(string) --* Human readable information to indicate captions
          available for players (eg. English, or Spanish).

          - **Name** *(string) --* Name of the caption description. Used to associate a caption
          description with an output. Names must be unique within an event.

      - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
      whole.

        - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
        Event.

        - **InputEndAction** *(string) --* Indicates the action to take when the current input
        completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
        restart at the beginning of the first input. When "none" is configured the encoder will
        transcode either black, a solid color, or a user specified slate images per the "Input
        Loss Behavior" configuration until the next input switch occurs (which is controlled
        through the Channel Schedule API).

        - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

          - **BlackFrameMsec** *(integer) --* Documentation update needed

          - **InputLossImageColor** *(string) --* When input loss image type is "color" this
          field specifies the color to use. Value: 6 hex characters representing the values of
          RGB.

          - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these
          fields specify the parameters for accessing the slate.

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
            accessible to the Live system (eg. a http:// URI) depending on the output type. For
            example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            - **Username** *(string) --* Documentation update needed

          - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or
          a slate into the output after input loss exceeds blackFrameMsec.

          - **RepeatFrameMsec** *(integer) --* Documentation update needed

        - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
        PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to
        the other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each
        pipeline to the Unix epoch.

        - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by
        the Live encoder should be paced by its system clock (which optionally may be locked to
        another source via NTP) or should be locked to the clock of the source that is providing
        the input stream.

        - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
        very low video framerates. This is commonly set to enabled for music channels with less
        than one video frame per second.

      - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

        - *(dict) --* Output groups for this Live Event. Output groups contain information about
        where streams should be distributed.

          - **Name** *(string) --* Custom output group name optionally defined by the user. Only
          letters, numbers, and the underscore character allowed; only 32 characters allowed.

          - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

            - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

              - **Destination** *(dict) --* A directory and base filename where archive files
              should be written.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
              before closing and starting a new one.

            - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

              - **Destination** *(dict) --* The destination for the frame capture files. Either
              the URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
              s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
              container, plus a file name prefix (for example,
              mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
              the prefix from the destination field (for example, "curling_") + name modifier +
              the counter (5 digits, starting from 00001) + extension (which is always .jpg). For
              example, curlingLow.00001.jpg

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **HlsGroupSettings** *(dict) --* Hls Group Settings

              - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35
              signals through to this group of Apple HLS outputs.

                - *(string) --* Hls Ad Markers

              - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
              each output in the media .m3u8 file. Can be used if base manifest is delivered from
              a different URL than the main .m3u8 file.

              - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
              each output in the media .m3u8 file. Can be used if base manifest is delivered from
              a different URL than the main .m3u8 file.

              - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
              caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

                - *(dict) --* Maps a caption channel to an ISO 693-2 language code
                (http://www.loc.gov/standards/iso639-2), with an optional description.

                  - **CaptionChannel** *(integer) --* The closed caption channel being described
                  by this CaptionLanguageMapping. Each channel mapping must have a unique channel
                  number (maximum of 4)

                  - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                  http://www.loc.gov/standards/iso639-2)

                  - **LanguageDescription** *(string) --* Textual description of language

              - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
              captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least
              one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for
              each Language Code you specify. Make sure to specify the languages in the order in
              which they appear in the original source (if the source is embedded format) or the
              order of the caption selectors (if the source is other than embedded). Otherwise,
              languages in the manifest will not match up properly with the output captions.
              none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any
              CLOSED-CAPTIONS line from the manifest.

              - **ClientCache** *(string) --* When set to "disabled", sets the
              #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
              segments for later replay.

              - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the
              default RFC-4281) during m3u8 playlist generation.

              - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
              16-byte hex value represented by a 32-character text string. If ivSource is set to
              "explicit" then this parameter is required and is used as the IV for encryption.

              - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
              manifest files, and encryption keys (if enabled).

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **DirectoryStructure** *(string) --* Place segments in subdirectories.

              - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
              scheme. Exclude this parameter if no encryption is desired.

              - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

                - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                  transfer encoding to Akamai. User should contact Akamai to enable this feature.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made
                  before the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of
                  seconds to wait until a restart is initiated. A value of 0 means never restart.

                  - **Salt** *(string) --* Salt for authenticated Akamai.

                  - **Token** *(string) --* Token parameter for authenticated akamai. If not
                  specified, _gda_ is used.

                - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made
                  before the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of
                  seconds to wait until a restart is initiated. A value of 0 means never restart.

                - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **MediaStoreStorageClass** *(string) --* When set to temporal, output files
                  are stored in non-persistent memory for faster reading and writing.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made
                  before the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of
                  seconds to wait until a restart is initiated. A value of 0 means never restart.

                - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                  transfer encoding to WebDAV.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made
                  before the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of
                  seconds to wait until a restart is initiated. A value of 0 means never restart.

              - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
              manifest, but do create the master and media manifests (according to the Output
              Selection field). STANDARD: Create an I-frame-only manifest for each output that
              contains video, as well as the other manifests (according to the Output Selection
              field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
              I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
              position. For example, #EXT-X-BYTERANGE:160364@1461888"

              - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies
              the maximum number of segments in the media manifest file. After this maximum,
              older segments are removed from the media manifest. This number must be less than
              or equal to the Keep Segments field.

              - **InputLossAction** *(string) --* Parameter that control output group behavior on
              input loss.

              - **IvInManifest** *(string) --* For use with encryptionType. The IV
              (Initialization Vector) is a 128-bit number used in conjunction with the key for
              encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the
              IV is not in the manifest.

              - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
              Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
              If this setting is "followsSegmentNumber", it will cause the IV to change every
              segment (to match the segment number). If this is set to "explicit", you must enter
              a constantIv value.

              - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
              number of media segments (.ts files) to retain in the destination directory.

              - **KeyFormat** *(string) --* The value specifies how the key is represented in the
              resource identified by the URI. If parameter is absent, an implicit value of
              "identity" is used. A reverse DNS string can also be given.

              - **KeyFormatVersions** *(string) --* Either a single positive integer version
              value or a slash delimited list of version values (1/2/3).

              - **KeyProviderSettings** *(dict) --* The key provider settings.

                - **StaticKeySettings** *(dict) --* Static Key Settings

                  - **KeyProviderServer** *(dict) --* The URL of the license server used for
                  protecting content.

                    - **PasswordParam** *(string) --* key used to extract the password from EC2
                    Parameter store

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                    to a file accessible to the Live system (eg. a http:// URI) depending on the
                    output type. For example, a RTMP destination should have a uri simliar to:
                    "rtmp://fmsserver/live".

                    - **Username** *(string) --* Documentation update needed

                  - **StaticKeyValue** *(string) --* Static key value as a 32 character
                  hexadecimal string.

              - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

              - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
              should use floating point or integer values for segment duration.

              - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
              looking ahead and back within the specified range for a nearby avail and extending
              the segment size if needed.

              - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
              the destination and manifest. If "live", only the number segments specified in
              keepSegments and indexNSegments are kept; newer segments replace older segments,
              which may prevent players from rewinding all the way to the beginning of the event.
              VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
              converting it to a "VOD" type manifest on completion of the stream.

              - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests
              (master manifest, if applicable, and media manifests) for this output group.
              SEGMENTSONLY: Does not generate any manifests for this output group.

              - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME
              tag in .m3u8 manifest files. The value is calculated as follows: either the program
              date and time are initialized using the input timecode source, or the time is
              initialized using the input timecode source and the date is initialized using the
              timestampOffset.

              - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
              EXT-X-PROGRAM-DATE-TIME entry, in seconds.

              - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
              each pipeline includes information about both pipelines: first its own media files,
              then the media files of the other pipeline. This feature allows playout device that
              support stale manifest detection to switch from one manifest to the other, when the
              current manifest seems to be stale. There are still two destinations and two master
              manifests, but both master manifests reference the media files from both pipelines.
              DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
              about its own pipeline only. For an HLS output group with MediaPackage as the
              destination, the DISABLED behavior is always followed. MediaPackage regenerates the
              manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

              - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
              create (in seconds). Note that segments will end on the next keyframe after this
              number of seconds, so actual segment length may be longer.

              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
              configured segment size is always used.

              - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
              subdirectory before starting a new one. directoryStructure must be
              subdirectoryPerStream for this setting to have an effect.

              - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
              video in EXT-X-STREAM-INF tag of variant manifest.

              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

              - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
              offset to fine tune the timestamps.

              - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
              multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
              program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE
              tags to index segments for playback. A typical use for this value is when sending
              the output to AWS Elemental MediaConvert, which can accept only a single media
              file. Playback while the channel is running is not guaranteed due to HTTP server
              caching.

            - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

              - **Destination** *(dict) --* MediaPackage channel destination.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

              - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point
              Identity" element used in each message placed in the sparse track. Only enabled if
              sparseTrackType is not "none".

              - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an
              audio-only MS Smooth output, the fragment absolute time will be set to the current
              timecode. This option does not write timecodes to the audio elementary stream.

              - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
              certificate chain to a trusted Certificate Authority (CA). This will cause https
              outputs to self-signed certificates to fail.

              - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
              retrying connection to the IIS server if the connection is lost. Content will be
              cached during this time and the cache will be be delivered to the IIS server once
              the connection is re-established.

              - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
              Elemental Live acts as a "Push" encoder to IIS.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
              only be specified if eventIdMode is set to useConfigured.

              - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
              IIS server. If no event ID is sent and the same Live Event is used without changing
              the publishing point, clients might see cached video from the previous run.
              Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" -
              generate and send an event ID based on the current timestamp - "noEventId" - do not
              send an event ID to the IIS server.

              - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
              server when stopping the event

              - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
              outputs.

              - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in
              seconds). Fragment length must be compatible with GOP size and framerate.

              - **InputLossAction** *(string) --* Parameter that control output group behavior on
              input loss.

              - **NumRetries** *(integer) --* Number of retry attempts.

              - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
              to output failure, due to exhausting the numRetries on one segment, or exceeding
              filecacheDuration.

              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
              configured segment size is always used.

              - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from
              the second pipeline.

              - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
              to generate a sparse track in this group of MS-Smooth outputs.

              - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest
              so publishing point doesn't start until all streams start.

              - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
              timestampOffsetMode is set to useConfiguredOffset.

              - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
              useEventStartDate: Use the date the event was started as the offset -
              useConfiguredOffset: Use an explicitly configured date as the offset

            - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

              - **AuthenticationScheme** *(string) --* Authentication scheme to use when
              connecting with CDN

              - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills
              up. If remote origin server stalls the RTMP connection and does not accept content
              fast enough the 'Media Cache' will fill up. When the cache reaches the duration
              specified by cacheLength the cache will stop accepting new content. If set to
              disconnectImmediately, the RTMP output will force a disconnect. Clear the media
              cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
              output will wait up to 5 minutes to allow the origin server to begin accepting data
              again.

              - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
              buffer size.

              - **CaptionData** *(string) --* Controls the types of data that passes to
              onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
              passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but
              608 data from both fields will be passed. If set to 'field1608' then only the data
              carried in 608 from field 1 video will be passed.

              - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if
              input becomes unavailable. - emitOutput: Emit a slate until input returns. -
              pauseOutput: Stop transmitting data until input returns. This does not close the
              underlying RTMP connection.

              - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
              wait until a restart is initiated. A value of 0 means never restart.

            - **UdpGroupSettings** *(dict) --* Udp Group Settings

              - **InputLossAction** *(string) --* Specifies behavior of last resort when input
              video is lost, and no more backup inputs are available. When dropTs is selected the
              entire transport stream will stop being emitted. When dropProgram is selected the
              program can be dropped from the transport stream (and replaced with null packets to
              meet the TS bitrate requirement). Or, when emitProgram is chosen the transport
              stream will continue to be produced normally with repeat frames, black frames, or
              slate frames substituted for the absent input video.

              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

          - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

            - *(dict) --* Output settings. There can be multiple outputs within a group.

              - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
              audio sources for this output.

                - *(string) --* Placeholder documentation for __string

              - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
              as caption sources for this output.

                - *(string) --* Placeholder documentation for __string

              - **OutputName** *(string) --* The name used to identify an output.

              - **OutputSettings** *(dict) --* Output type-specific settings.

                - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                  - **ContainerSettings** *(dict) --* Settings specific to the container type of
                  the file.

                    - **M2tsSettings** *(dict) --* M2ts Settings

                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                      streams will be removed from the program if the selected input audio stream
                      is removed from the input. This allows the output audio configuration to
                      dynamically change based on input configuration. If this is set to
                      encodeSilence, all output audio streams will output encoded silence when
                      not connected to an active input stream.

                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                      muxing and removes video descriptor.

                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                      Captions in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                      for ARIB Captions will be auto-selected from unused pids. If set to
                      useConfigured, ARIB Captions will be on the configured pid number.

                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                      for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                      audio stream(s) in the transport stream. Multiple values are accepted, and
                      can be entered in ranges and/or by comma separation. Can be entered as
                      decimal or hexadecimal values. Each PID specified must be in the range of
                      32 (or 0x20)..8182 (or 0x1ff6).

                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                      0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                      type = 0x06.

                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                      bits per second. Setting to 0 lets the muxer automatically determine the
                      appropriate bitrate.

                      - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                      model for accurate interleaving. Setting to bufferModel to none can lead to
                      lower latency, but low-memory devices may not be able to play back the
                      stream without interruptions.

                      - **CcDescriptor** *(string) --* When set to enabled, generates
                      captionServiceDescriptor in PMT.

                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                      (NIT) at the specified table repetition interval.

                        - **NetworkId** *(integer) --* The numeric value placed in the Network
                        Information Table (NIT).

                        - **NetworkName** *(string) --* The network name text placed in the
                        networkNameDescriptor inside the Network Information Table. Maximum
                        length is 256 characters.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                      (SDT) at the specified table repetition interval.

                        - **OutputSdt** *(string) --* Selects method of inserting SDT information
                        into output stream. The sdtFollow setting copies SDT information from
                        input stream to output stream. The sdtFollowIfPresent setting copies SDT
                        information from input stream to output stream if SDT information is
                        present in the input, otherwise it will fall back on the user-defined
                        values. The sdtManual setting means user will enter the SDT information.
                        The sdtNone setting means output stream will not contain SDT information.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                        - **ServiceName** *(string) --* The service name placed in the
                        serviceDescriptor in the Service Description Table. Maximum length is 256
                        characters.

                        - **ServiceProviderName** *(string) --* The service provider name placed
                        in the serviceDescriptor in the Service Description Table. Maximum length
                        is 256 characters.

                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                      Subtitle data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                      the specified table repetition interval.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                      DVB Teletext data to this output. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                      the input source to this output.

                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                      selected, audio EBP markers will be added to partitions 3 and 4. The
                      interval between these additional markers will be fixed, and will be
                      slightly shorter than the video EBP marker interval. Only available when
                      EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                      always follow the video interval.

                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                      Boundary Points do not come within the specified time interval of each
                      other by looking ahead at input video. If another EBP is going to come in
                      within the specified time interval, the current EBP is not emitted, and the
                      segment is "stretched" to the next marker. The lookahead value does not add
                      latency to the system. The Live Event must be configured elsewhere to
                      create sufficient latency to make the lookahead accurate.

                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                      If set to videoAndAudioPids, EBP markers will be placed on the video PID
                      and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                      the video PID.

                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                      PES header.

                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Platform data to this output. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **FragmentTime** *(float) --* The length in seconds of each fragment.
                      Only used with EBP markers.

                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                      input source to this output.

                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                      KLV data to this output. Multiple values are accepted, and can be entered
                      in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                      packets to insert into the transport stream. This can be used if a
                      downstream encryption system requires periodic null packets.

                      - **PatInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. Valid values are 0,
                      10..1000.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                      Clock Reference value is inserted for every Packetized Elementary Stream
                      (PES) header. This parameter is effective only when the PCR PID is the same
                      as the video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock Reference (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the
                      encoder will assign the same value as the Video PID. Can be entered as a
                      decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                      0x1ff6).

                      - **PmtInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. Valid values are 0,
                      10..1000.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                      Table (PMT) in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **ProgramNum** *(integer) --* The value of the program number field in
                      the Program Map Table.

                      - **RateMode** *(string) --* When vbr, does not insert null packets into
                      transport stream to fill specified bitrate. The bitrate setting acts as the
                      maximum bitrate when vbr is set.

                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                      SCTE-27 data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                      input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                      each segmentationTime period. raiSegstart sets the Random Access Indicator
                      bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                      timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                      at the start of segments. ebp adds Encoder Boundary Point information to
                      the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                      ebpLegacy adds Encoder Boundary Point information to the adaptation field
                      using a legacy proprietary format.

                      - **SegmentationStyle** *(string) --* The segmentation style parameter
                      controls how segmentation markers are inserted into the transport stream.
                      With avails, it is possible that segments may be truncated, which can
                      influence where future segmentation markers are inserted. When a
                      segmentation style of "resetCadence" is selected and a segment is truncated
                      due to an avail, we will reset the segmentation cadence. This means the
                      subsequent segment will have a duration of $segmentationTime seconds. When
                      a segmentation style of "maintainCadence" is selected and a segment is
                      truncated due to an avail, we will not reset the segmentation cadence. This
                      means the subsequent segment will likely be truncated as well. However, all
                      segments after that will have a duration of $segmentationTime seconds. Note
                      that EBP lookahead is a slight exception to this rule.

                      - **SegmentationTime** *(float) --* The length in seconds of each segment.
                      Required unless markers is set to None_.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata will be passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                      video stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                  - **Extension** *(string) --* Output file extension. If excluded, this will be
                  auto-selected from the container type.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Required for multiple outputs of the same type.

                - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                  - **NameModifier** *(string) --* Required if the output group contains more
                  than one output. This modifier forms part of the output file name.

                - **HlsOutputSettings** *(dict) --* Hls Output Settings

                  - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                  settings are different for audio-only outputs.

                    - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                      - **AudioGroupId** *(string) --* Specifies the group to which the audio
                      Rendition belongs.

                      - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                      to use as the cover art for an audio-only output. We recommend a low
                      bit-size file because the image increases the output audio bandwidth. The
                      image is attached to the audio as an ID3 tag, frame type APIC, picture type
                      0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.

                        - **PasswordParam** *(string) --* key used to extract the password from
                        EC2 Parameter store

                        - **Uri** *(string) --* Uniform Resource Identifier - This should be a
                        path to a file accessible to the Live system (eg. a http:// URI)
                        depending on the output type. For example, a RTMP destination should have
                        a uri simliar to: "rtmp://fmsserver/live".

                        - **Username** *(string) --* Documentation update needed

                      - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                      supported: Audio-Only Variant Stream The client can play back this
                      audio-only stream instead of video in low-bandwidth scenarios. Represented
                      as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select,
                      Default Alternate rendition that the client should try to play back by
                      default. Represented as an EXT-X-MEDIA in the HLS manifest with
                      DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default
                      Alternate rendition that the client may try to play back by default.
                      Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO,
                      AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that
                      the client will not try to play back by default. Represented as an
                      EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO

                    - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                      - **AudioRenditionSets** *(string) --* List all the audio groups that are
                      used with the video output stream. Input all the audio GROUP-IDs that are
                      associated to the video, separate by ','.

                      - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                        - **AudioFramesPerPes** *(integer) --* The number of audio frames to
                        insert for each PES packet.

                        - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                        audio stream(s) in the transport stream. Multiple values are accepted,
                        and can be entered in ranges and/or by comma separation. Can be entered
                        as decimal or hexadecimal values.

                        - **EcmPid** *(string) --* This parameter is unused and deprecated.

                        - **PatInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. A value of
                        \\"0\\" writes out the PMT once per segment file.

                        - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                        Clock Reference value is inserted for every Packetized Elementary Stream
                        (PES) header. This parameter is effective only when the PCR PID is the
                        same as the video or audio elementary stream.

                        - **PcrPeriod** *(integer) --* Maximum time in milliseconds between
                        Program Clock References (PCRs) inserted into the transport stream.

                        - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                        Reference (PCR) in the transport stream. When no value is given, the
                        encoder will assign the same value as the Video PID. Can be entered as a
                        decimal or hexadecimal value.

                        - **PmtInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. A value of
                        \\"0\\" writes out the PMT once per segment file.

                        - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                        Table (PMT) in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                        - **ProgramNum** *(integer) --* The value of the program number field in
                        the Program Map Table.

                        - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                        SCTE-35 signals from the input source to this output.

                        - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35
                        stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                        - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                        metadata is passed through from input to output.

                        - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                        metadata stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **TransportStreamId** *(integer) --* The value of the transport stream
                        ID field in the Program Map Table.

                        - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                        video stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Accepts \\"Format
                  Identifiers\\":#formatIdentifierParameters.

                  - **SegmentModifier** *(string) --* String concatenated to end of segment
                  filenames.

                - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

                - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                  - **H265PackagingType** *(string) --* Only applicable when this output is
                  referencing an H.265 video description. Specifies whether MP4 segments should
                  be packaged as HEV1 or HVC1.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Required for multiple outputs of the same type.

                - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                  - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the
                  tls certificate chain to a trusted Certificate Authority (CA). This will cause
                  rtmps outputs with self-signed certificates to fail.

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying a connection to the Flash Media server if the connection is lost.

                  - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                  rtmp://host/appname). For connection to Akamai, a username and password must be
                  supplied. URI fields accept format identifiers.

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                  - **NumRetries** *(integer) --* Number of retry attempts.

                - **UdpOutputSettings** *(dict) --* Udp Output Settings

                  - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                  values increase latency through the transcoder but simultaneously assist the
                  transcoder in maintaining a constant, low-jitter UDP/RTP output while
                  accommodating clock recovery, input switching, input disruptions, picture
                  reordering, etc.

                  - **ContainerSettings** *(dict) --* Udp Container Settings

                    - **M2tsSettings** *(dict) --* M2ts Settings

                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                      streams will be removed from the program if the selected input audio stream
                      is removed from the input. This allows the output audio configuration to
                      dynamically change based on input configuration. If this is set to
                      encodeSilence, all output audio streams will output encoded silence when
                      not connected to an active input stream.

                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                      muxing and removes video descriptor.

                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                      Captions in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                      for ARIB Captions will be auto-selected from unused pids. If set to
                      useConfigured, ARIB Captions will be on the configured pid number.

                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                      for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                      audio stream(s) in the transport stream. Multiple values are accepted, and
                      can be entered in ranges and/or by comma separation. Can be entered as
                      decimal or hexadecimal values. Each PID specified must be in the range of
                      32 (or 0x20)..8182 (or 0x1ff6).

                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                      0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                      type = 0x06.

                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                      bits per second. Setting to 0 lets the muxer automatically determine the
                      appropriate bitrate.

                      - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                      model for accurate interleaving. Setting to bufferModel to none can lead to
                      lower latency, but low-memory devices may not be able to play back the
                      stream without interruptions.

                      - **CcDescriptor** *(string) --* When set to enabled, generates
                      captionServiceDescriptor in PMT.

                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                      (NIT) at the specified table repetition interval.

                        - **NetworkId** *(integer) --* The numeric value placed in the Network
                        Information Table (NIT).

                        - **NetworkName** *(string) --* The network name text placed in the
                        networkNameDescriptor inside the Network Information Table. Maximum
                        length is 256 characters.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                      (SDT) at the specified table repetition interval.

                        - **OutputSdt** *(string) --* Selects method of inserting SDT information
                        into output stream. The sdtFollow setting copies SDT information from
                        input stream to output stream. The sdtFollowIfPresent setting copies SDT
                        information from input stream to output stream if SDT information is
                        present in the input, otherwise it will fall back on the user-defined
                        values. The sdtManual setting means user will enter the SDT information.
                        The sdtNone setting means output stream will not contain SDT information.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                        - **ServiceName** *(string) --* The service name placed in the
                        serviceDescriptor in the Service Description Table. Maximum length is 256
                        characters.

                        - **ServiceProviderName** *(string) --* The service provider name placed
                        in the serviceDescriptor in the Service Description Table. Maximum length
                        is 256 characters.

                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                      Subtitle data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                      the specified table repetition interval.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                      DVB Teletext data to this output. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                      the input source to this output.

                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                      selected, audio EBP markers will be added to partitions 3 and 4. The
                      interval between these additional markers will be fixed, and will be
                      slightly shorter than the video EBP marker interval. Only available when
                      EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                      always follow the video interval.

                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                      Boundary Points do not come within the specified time interval of each
                      other by looking ahead at input video. If another EBP is going to come in
                      within the specified time interval, the current EBP is not emitted, and the
                      segment is "stretched" to the next marker. The lookahead value does not add
                      latency to the system. The Live Event must be configured elsewhere to
                      create sufficient latency to make the lookahead accurate.

                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                      If set to videoAndAudioPids, EBP markers will be placed on the video PID
                      and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                      the video PID.

                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                      PES header.

                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Platform data to this output. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **FragmentTime** *(float) --* The length in seconds of each fragment.
                      Only used with EBP markers.

                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                      input source to this output.

                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                      KLV data to this output. Multiple values are accepted, and can be entered
                      in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                      packets to insert into the transport stream. This can be used if a
                      downstream encryption system requires periodic null packets.

                      - **PatInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. Valid values are 0,
                      10..1000.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                      Clock Reference value is inserted for every Packetized Elementary Stream
                      (PES) header. This parameter is effective only when the PCR PID is the same
                      as the video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock Reference (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the
                      encoder will assign the same value as the Video PID. Can be entered as a
                      decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                      0x1ff6).

                      - **PmtInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. Valid values are 0,
                      10..1000.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                      Table (PMT) in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **ProgramNum** *(integer) --* The value of the program number field in
                      the Program Map Table.

                      - **RateMode** *(string) --* When vbr, does not insert null packets into
                      transport stream to fill specified bitrate. The bitrate setting acts as the
                      maximum bitrate when vbr is set.

                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                      SCTE-27 data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                      input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                      each segmentationTime period. raiSegstart sets the Random Access Indicator
                      bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                      timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                      at the start of segments. ebp adds Encoder Boundary Point information to
                      the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                      ebpLegacy adds Encoder Boundary Point information to the adaptation field
                      using a legacy proprietary format.

                      - **SegmentationStyle** *(string) --* The segmentation style parameter
                      controls how segmentation markers are inserted into the transport stream.
                      With avails, it is possible that segments may be truncated, which can
                      influence where future segmentation markers are inserted. When a
                      segmentation style of "resetCadence" is selected and a segment is truncated
                      due to an avail, we will reset the segmentation cadence. This means the
                      subsequent segment will have a duration of $segmentationTime seconds. When
                      a segmentation style of "maintainCadence" is selected and a segment is
                      truncated due to an avail, we will not reset the segmentation cadence. This
                      means the subsequent segment will likely be truncated as well. However, all
                      segments after that will have a duration of $segmentationTime seconds. Note
                      that EBP lookahead is a slight exception to this rule.

                      - **SegmentationTime** *(float) --* The length in seconds of each segment.
                      Required unless markers is set to None_.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata will be passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                      video stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                  - **Destination** *(dict) --* Destination address and port number for RTP or
                  UDP packets. Can be unicast or multicast RTP or UDP (eg.
                  rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                  - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                  Error Correction on UDP outputs.

                    - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                    the FEC protection matrix. The number of transport stream packets per column
                    error correction packet. Must be between 4 and 20, inclusive.

                    - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                    - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of
                    the FEC protection matrix. Must be between 1 and 20, inclusive. If only
                    Column FEC is used, then larger values increase robustness. If Row FEC is
                    used, then this is the number of transport stream packets per row error
                    correction packet, and the value must be between 4 and 20, inclusive, if
                    includeFec is columnAndRow. If includeFec is column, this value must be 1 to
                    20, inclusive.

              - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as
              the source for this output.

      - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
      information from inputs.

        - **Source** *(string) --* Identifies the source for the timecode that will be associated
        with the events outputs. -Embedded (embedded): Initialize the output timecode with
        timecode from the the source. If no embedded timecode is detected in the source, the
        system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the
        UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be
        00:00:00:00.

        - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
        resynchronized to the input timecode. Discrepancies below this threshold are permitted to
        avoid unnecessary discontinuities in the output timecode. No timecode sync when this is
        not specified.

      - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

        - *(dict) --* Video settings for this stream.

          - **CodecSettings** *(dict) --* Video codec settings.

            - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

              - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
              frames for inclusion in the output. For example, "10" means capture a frame every
              10 seconds.

            - **H264Settings** *(dict) --* H264 Settings

              - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
              quantizers to vary to improve visual quality.

              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
              output stream. If afdSignaling is "auto", the system will try to preserve the input
              AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
              AFD value will be the value configured in the fixedAfd parameter.

              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
              control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
              output must have a unique value when its bitrate is rounded down to the nearest
              multiple of 1000.

              - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
              filled (HRD buffer model).

              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              - **ColorSpaceSettings** *(dict) --* Color Space settings

                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
                space conversion to the output

                - **Rec601Settings** *(dict) --* Rec601 Settings

                - **Rec709Settings** *(dict) --* Rec709 Settings

              - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
              Main or High profile) or cavlc.

              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
              the output stream. Only valid when afdSignaling is set to 'Fixed'.

              - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
              frame to reduce flicker or 'pop' on I-frames.

              - **FramerateControl** *(string) --* This field indicates how the output video
              frame rate is specified. If "specified" is selected then the output video frame
              rate is determined by framerateNumerator and framerateDenominator, else if
              "initializeFromSource" is selected then the output video frame rate will be set
              equal to the input video frame rate of the first input.

              - **FramerateDenominator** *(integer) --* Framerate denominator.

              - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
              fraction, e.g. 24000 / 1001 = 23.976 fps.

              - **GopBReference** *(string) --* Documentation update needed

              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
              applications, it is recommended that this be set to 1 so a decoder joining
              mid-stream will receive an IDR frame as quickly as possible. Setting this value to
              0 will break output segmenting.

              - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
              or seconds per gopSizeUnits. Must be greater than zero.

              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
              seconds. If seconds the system will convert the gopSize into a frame count at run
              time.

              - **Level** *(string) --* H.264 Level.

              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
              decrease latency and memory usage, while high can produce better quality for
              certain content.

              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
              VBR: Set the maximum bitrate in order to accommodate expected spikes in the
              complexity of the video.

              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
              enabled. Enforces separation between repeated (cadence) I-frames and I-frames
              inserted by Scene Change Detection. If a scene change I-frame is within I-interval
              frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
              I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
              normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
              Min-I-interval - 1

              - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
              may use more than requested if using B-frames and/or interlaced encoding.

              - **ParControl** *(string) --* This field indicates how the output pixel aspect
              ratio is specified. If "specified" is selected then the output video pixel aspect
              ratio is determined by parNumerator and parDenominator, else if
              "initializeFromSource" is selected then the output pixsel aspect ratio will be set
              equal to the input video pixel aspect ratio of the first input.

              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              - **Profile** *(string) --* H.264 Profile.

              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
              encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
              quality level field and Max bitrate field that suit your most important viewing
              devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
              bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
              Quality level: 6. Max bitrate: 1M to 1.5M

              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
              specified quality level except when it is constrained by the maximum bitrate.
              Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
              vary, depending on the video complexity. Recommended instead of QVBR if you want to
              maintain a specific average bitrate over the duration of the channel. CBR: Quality
              varies, depending on the video complexity. Recommended only if you distribute your
              assets to devices that cannot handle variable bitrates.

              - **ScanType** *(string) --* Sets the scan type of the output to progressive or
              top-field-first interlaced.

              - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
              I-frames when scene change is detected. - Off: does not force an I-frame when scene
              change is detected.

              - **Slices** *(integer) --* Number of slices per picture. Must be less than or
              equal to the number of macroblock rows for progressive pictures, and less than or
              equal to half the number of macroblock rows for interlaced pictures. This field is
              optional; when no value is specified the encoder will choose the number of slices
              based on encode resolution.

              - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
              reduce high-frequency content in the encoded image.

              - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
              frame based on spatial variation of content complexity.

              - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
              sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
              to improve visual quality.

              - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

              - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
              frame based on temporal variation of content complexity.

              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
              into the video elementary stream. - 'disabled': Do not include timecodes -
              'picTimingSei': Pass through picture timing SEI messages from the source specified
              in Timecode Config

            - **H265Settings** *(dict) --* H265 Settings

              - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
              quantizers to vary to improve visual quality.

              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
              output stream. If afdSignaling is "auto", the system will try to preserve the input
              AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
              AFD value will be the value configured in the fixedAfd parameter.

              - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
              Alternative Transfer Function SEI message to support backwards compatibility with
              non-HDR decoders and displays.

              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
              control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
              output must have a unique value when its bitrate is rounded down to the nearest
              multiple of 1000.

              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              - **ColorSpaceSettings** *(dict) --* Color Space settings

                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
                space conversion to the output

                - **Hdr10Settings** *(dict) --* Hdr10 Settings

                  - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
                  value defining the maximum light level, in nits, of any single pixel within an
                  encoded HDR video stream or file.

                  - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                  metadata value defining the maximum average light level, in nits, for any
                  single frame within an encoded HDR video stream or file.

                - **Rec601Settings** *(dict) --* Rec601 Settings

                - **Rec709Settings** *(dict) --* Rec709 Settings

              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
              the output stream. Only valid when afdSignaling is set to 'Fixed'.

              - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
              frame to reduce flicker or 'pop' on I-frames.

              - **FramerateDenominator** *(integer) --* Framerate denominator.

              - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
              fraction, e.g. 24000 / 1001 = 23.976 fps.

              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
              applications, it is recommended that this be set to 1 so a decoder joining
              mid-stream will receive an IDR frame as quickly as possible. Setting this value to
              0 will break output segmenting.

              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
              or seconds per gopSizeUnits. Must be greater than zero.

              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
              seconds. If seconds the system will convert the gopSize into a frame count at run
              time.

              - **Level** *(string) --* H.265 Level.

              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
              decrease latency and memory usage, while high can produce better quality for
              certain content.

              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
              enabled. Enforces separation between repeated (cadence) I-frames and I-frames
              inserted by Scene Change Detection. If a scene change I-frame is within I-interval
              frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
              I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
              normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
              Min-I-interval - 1

              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              - **Profile** *(string) --* H.265 Profile.

              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
              encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
              quality level field and Max bitrate field that suit your most important viewing
              devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
              bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
              Quality level: 6. Max bitrate: 1M to 1.5M

              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
              specified quality level except when it is constrained by the maximum bitrate.
              Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
              depending on the video complexity. Recommended only if you distribute your assets
              to devices that cannot handle variable bitrates.

              - **ScanType** *(string) --* Sets the scan type of the output to progressive or
              top-field-first interlaced.

              - **SceneChangeDetect** *(string) --* Scene change detection.

              - **Slices** *(integer) --* Number of slices per picture. Must be less than or
              equal to the number of macroblock rows for progressive pictures, and less than or
              equal to half the number of macroblock rows for interlaced pictures. This field is
              optional; when no value is specified the encoder will choose the number of slices
              based on encode resolution.

              - **Tier** *(string) --* H.265 Tier.

              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
              into the video elementary stream. - 'disabled': Do not include timecodes -
              'picTimingSei': Pass through picture timing SEI messages from the source specified
              in Timecode Config

          - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
          most codecs, you can leave this field and width blank in order to use the height and
          width (resolution) from the source. Note, however, that leaving blank is not
          recommended. For the Frame Capture codec, height and width are required.

          - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name
          to uniquely identify this Description. Description names should be unique within this
          Live Event.

          - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the
          input stream. RESPOND causes input video to be clipped, depending on the AFD value,
          input display aspect ratio, and output display aspect ratio, and (except for
          FRAMECAPTURE codec) includes the values in the output. PASSTHROUGH (does not apply to
          FRAMECAPTURE codec) ignores the AFD values and includes the values in the output, so
          input video is not clipped. NONE ignores the AFD values and does not include the values
          through to the output, so input video is not clipped.

          - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
          stretch the video to the specified output resolution (height and width). This option
          will override any position value. DEFAULT may insert black boxes (pillar boxes or
          letter boxes) around the video to provide the specified output resolution.

          - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
          scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
          for most content.

          - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
          most codecs, you can leave this field and height blank in order to use the height and
          width (resolution) from the source. Note, however, that leaving blank is not
          recommended. For the Frame Capture codec, height and width are required.

    - **Id** *(string) --* The unique id of the channel.

    - **InputAttachments** *(list) --* List of input attachments for channel.

      - *(dict) --* Placeholder documentation for InputAttachment

        - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
        required if the user wants to use this input in an input switch action.

        - **InputId** *(string) --* The ID of the input

        - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

          - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
          that have multiple available.

            - *(dict) --* Audio Selector

              - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
              this name to uniquely identify this Selector. Selector names should be unique per
              input.

              - **SelectorSettings** *(dict) --* The audio selector settings.

                - **AudioLanguageSelection** *(dict) --* Audio Language Selection

                  - **LanguageCode** *(string) --* Selects a specific three-letter language code
                  from within an audio source.

                  - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
                  stream demux strictly identifies audio streams by their language descriptor. If
                  a PMT update occurs such that an audio stream matching the initially selected
                  language is no longer present then mute will be encoded until the language
                  returns. If "loose", then on a PMT update the demux will choose another audio
                  stream in the program with the same stream type if it can't find one with the
                  same language.

                - **AudioPidSelection** *(dict) --* Audio Pid Selection

                  - **Pid** *(integer) --* Selects a specific PID from within a source.

          - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
          that have multiple available.

            - *(dict) --* Output groups for this Live Event. Output groups contain information
            about where streams should be distributed.

              - **LanguageCode** *(string) --* When specified this field indicates the three
              letter language code of the caption track to extract from the source.

              - **Name** *(string) --* Name identifier for a caption selector. This name is used
              to associate this caption selector with one or more caption descriptions. Names
              must be unique within an event.

              - **SelectorSettings** *(dict) --* Caption selector settings.

                - **AribSourceSettings** *(dict) --* Arib Source Settings

                - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

                  - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
                  PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
                  is passed through, regardless of selectors.

                - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                  through via the "608 compatibility bytes" fields of the 708 wrapper as well as
                  translated into 708. 708 data present in the source content will be discarded.

                  - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
                  intermittent and/or non-aligned SCTE-20 and Embedded captions.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                  number within the video track from which to extract captions. Unused for
                  passthrough.

                  - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

                - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                  through via the "608 compatibility bytes" fields of the 708 wrapper as well as
                  translated into 708. 708 data present in the source content will be discarded.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                  number within the video track from which to extract captions. Unused for
                  passthrough.

                - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

                  - **Pid** *(integer) --* The pid field is used in conjunction with the caption
                  selector languageCode field as follows: - Specify PID and Language: Extracts
                  captions from that PID; the language is "informational". - Specify PID and omit
                  Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
                  the specified language, whichever PID that happens to be. - Omit PID and omit
                  Language: Valid only if source is DVB-Sub that is being passed through; all
                  languages will be passed through.

                - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

                  - **PageNumber** *(string) --* Specifies the teletext page number within the
                  data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
                  (2303). Unused for passthrough. Should be specified as a hexadecimal string
                  with no "0x" prefix.

          - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

          - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

          - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
          to 5 (strongest).

          - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
          the deblocking filter enabled by default. 1) auto - filtering will be applied depending
          on input type/quality 2) disabled - no filtering will be applied to the input 3) forced
          - filtering will be applied regardless of input type

          - **NetworkInputSettings** *(dict) --* Input settings.

            - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
            HLS manifest.

              - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
              BANDWIDTH that most closely matches this value will be chosen, otherwise the
              highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
              bits per second, as in an HLS manifest.

              - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
              begin this many buffer segments from the end (most recently written segment). When
              not specified, the HLS input will begin with the first segment specified in the
              m3u8.

              - **Retries** *(integer) --* The number of consecutive times that attempts to read
              a manifest or segment must fail before the input is considered unavailable.

              - **RetryInterval** *(integer) --* The number of seconds between retries when an
              attempt to read a manifest or segment fails.

            - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
            checkCryptographyOnly, cryptography in the certificate will be checked, but not the
            server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
            name) do not strictly match the corresponding certificate's wildcard pattern and
            would otherwise cause the event to error. This setting is ignored for protocols that
            do not use https.

          - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
          input to be streamed indefinitely.

          - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
          input types that have multiple available.

            - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
            works in tandem with colorSpaceUsage and a video description's
            colorSpaceSettingsChoice to determine if any conversion will be performed.

            - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
            follow. This field controls how the value in the colorSpace field will be used.
            fallback means that when the input does include color space data, that data will be
            used, but when the input has no color space data, the value in colorSpace will be
            used. Choose fallback if your input is sometimes missing color space data, but when
            it does have color space data, that data is correct. force means to always use the
            value in colorSpace. Choose force if your input usually has no color space data or
            might have unreliable color space data.

            - **SelectorSettings** *(dict) --* The video selector settings.

              - **VideoSelectorPid** *(dict) --* Video Selector Pid

                - **Pid** *(integer) --* Selects a specific PID from within a video source.

              - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

                - **ProgramId** *(integer) --* Selects a specific program from within a
                multi-program transport stream. If the program doesn't exist, the first program
                within the transport stream will be selected by default.

    - **InputSpecification** *(dict) --* Placeholder documentation for InputSpecification

      - **Codec** *(string) --* Input codec

      - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

      - **Resolution** *(string) --* Input resolution, categorized coarsely

    - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.

    - **Name** *(string) --* The name of the channel. (user-mutable)

    - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.

      - *(dict) --* Runtime details of a pipeline when a channel is running.

        - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
        currently being ingested by this pipeline.

        - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
        action that occurred most recently and that resulted in the switch to the current input
        attachment for this pipeline.

        - **PipelineId** *(string) --* Pipeline ID

    - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.

    - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running
    the Channel.

    - **State** *(string) --* Placeholder documentation for ChannelState

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string
    """


_ClientCreateChannelResponseTypeDef = TypedDict(
    "_ClientCreateChannelResponseTypeDef",
    {"Channel": ClientCreateChannelResponseChannelTypeDef},
    total=False,
)


class ClientCreateChannelResponseTypeDef(_ClientCreateChannelResponseTypeDef):
    """
    Type definition for `ClientCreateChannel` `Response`

    - **Channel** *(dict) --* Placeholder documentation for Channel

      - **Arn** *(string) --* The unique arn of the channel.

      - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two
      pipelines or SINGLE_PIPELINE for a channel with one pipeline.

      - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there
      is one destination per output. For other types (HLS, for example), there is one destination
      per packager.

        - *(dict) --* Placeholder documentation for OutputDestination

          - **Id** *(string) --* User-specified id. This is used in an output group or an output.

          - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output;
          one destination for both encoders.

            - *(dict) --* MediaPackage Output Destination Settings

              - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the
              destination for this output group. You do not need to specify the individual inputs
              in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines
              to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must
              be in the same region.

          - **Settings** *(list) --* Destination settings for a standard output; one destination
          for each redundant encoder.

            - *(dict) --* Placeholder documentation for OutputDestinationSettings

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
              store

              - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type
              rtmp://)

              - **Url** *(string) --* A URL specifying a destination

              - **Username** *(string) --* username for destination

      - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from

        - *(dict) --* Placeholder documentation for ChannelEgressEndpoint

          - **SourceIp** *(string) --* Public IP of where a channel's output comes from

      - **EncoderSettings** *(dict) --* Encoder Settings

        - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

          - *(dict) --* Audio Description

            - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

              - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
              to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

              - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
              corrected using the chosen algorithm. If set to measureOnly, the audio will be
              measured but not adjusted.

              - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value
              is entered, a default value will be used according to the chosen algorithm. The CALM
              Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
              recommends a target of -23 LKFS.

            - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
            for this AudioDescription.

            - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
            values for audioType are defined in ISO-IEC 13818-1.

            - **AudioTypeControl** *(string) --* Determines how audio type is determined.
            followInput: If the input contains an ISO 639 audioType, then that value is passed
            through to the output. If the input contains no ISO 639 audioType, the value in Audio
            Type is included in the output. useConfigured: The value in Audio Type is included in
            the output. Note that this field and audioType are both ignored if inputType is
            broadcasterMixedAd.

            - **CodecSettings** *(dict) --* Audio codec settings.

              - **AacSettings** *(dict) --* Aac Settings

                - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
                rate control mode and profile.

                - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
                depend on rate control mode and profile. The adReceiverMix setting receives a
                stereo description plus control track and emits a mono AAC encode of the
                description track, with control data emitted in the PES header as per ETSI TS 101
                154 Annex E.

                - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
                pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
                (audioType) will be set to 3, which signals to downstream systems that this stream
                contains "broadcaster mixed AD". Note that the input received by the encoder must
                contain pre-mixed audio; the encoder does not perform the mixing. The values in
                audioTypeControl and audioType (in AudioDescription) are ignored when set to
                broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
                audio + AD.

                - **Profile** *(string) --* AAC Profile.

                - **RateControlMode** *(string) --* Rate Control Mode.

                - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

                - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
                control mode and profile.

                - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
                or MPEG-2 Transport Stream containers.

                - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
                VBR.

              - **Ac3Settings** *(dict) --* Ac3 Settings

                - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
                the coding mode.

                - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
                emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

                - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
                channels.

                - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
                input audio is Dolby Digital, dialnorm will be passed through.

                - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
                compression signaling to the output bitstream as defined in the Dolby Digital
                specification.

                - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
                to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

                - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
                will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
                If audio was not supplied from one of these streams, then the static metadata
                settings will be used.

              - **Eac3Settings** *(dict) --* Eac3 Settings

                - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
                attenuation to the surround channels. Only used for 3/2 coding mode.

                - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
                the coding mode.

                - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
                emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

                - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
                channels.

                - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
                for all input channels.

                - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
                audio is Dolby Digital Plus, dialnorm will be passed through.

                - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

                - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
                compression, ensures that the instantaneous signal peaks do not exceed specified
                levels.

                - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
                LFE channel

                - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
                to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

                - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
                used for 3/2 coding mode.

                - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
                Only used for 3/2 coding mode.

                - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
                used for 3/2 coding mode.

                - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
                Only used for 3/2 coding mode.

                - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
                be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
                audio was not supplied from one of these streams, then the static metadata settings
                will be used.

                - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
                will be passed through if it is present on the input. This detection is dynamic
                over the life of the transcode. Inputs that alternate between DD+ and non-DD+
                content will have a consistent DD+ output as the system alternates between
                passthrough and encoding.

                - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
                phase shift to the surround channels. Only used for 3/2 coding mode.

                - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
                coding mode.

                - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
                center back surround channel is matrix encoded into the left and right surround
                channels.

                - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
                Surround is matrix encoded into the two channels.

              - **Mp2Settings** *(dict) --* Mp2 Settings

                - **Bitrate** *(float) --* Average bitrate in bits/second.

                - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
                codingMode10 (for mono) or codingMode20 (for stereo).

                - **SampleRate** *(float) --* Sample rate in Hz.

              - **PassThroughSettings** *(dict) --* Pass Through Settings

            - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
            used if languageControlMode is useConfigured, or there is no ISO 639 language code
            specified in the input.

            - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
            language code of the output to follow the ISO 639 language code of the input. The
            languageCode will be used when useConfigured is set, or when followInput is selected
            but there is no ISO 639 language code specified by the input.

            - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name
            to uniquely identify this AudioDescription. Description names should be unique within
            this Live Event.

            - **RemixSettings** *(dict) --* Settings that control how input audio channels are
            remixed into the output audio channels.

              - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
              appropriate gain adjustments.

                - *(dict) --* Audio Channel Mapping

                  - **InputChannelLevels** *(list) --* Indices and gain values for each input
                  channel that should be remixed into this output channel.

                    - *(dict) --* Input Channel Level

                      - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable
                      values are within the range from -60 (mute) and 6 dB.

                      - **InputChannel** *(integer) --* The index of the input channel used as a
                      source.

                  - **OutputChannel** *(integer) --* The index of the output channel being produced.

              - **ChannelsIn** *(integer) --* Number of input channels to be used.

              - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
              values: 1, 2, 4, 6, 8

            - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
            name displayed by the player (eg. English, or Director Commentary).

        - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

          - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
          black. Only bmp and png images are supported.

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
            accessible to the Live system (eg. a http:// URI) depending on the output type. For
            example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            - **Username** *(string) --* Documentation update needed

          - **State** *(string) --* When set to enabled, causes video, audio and captions to be
          blanked when insertion metadata is added.

        - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail
        insertion.

          - **AvailSettings** *(dict) --* Ad avail settings.

            - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

              - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
              added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
              messages and does not apply to OOB messages.

              - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
              with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
              slates

              - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
              with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
              slates

            - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

              - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
              added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
              messages and does not apply to OOB messages.

              - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
              with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
              slates

              - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
              with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
              slates

        - **BlackoutSlate** *(dict) --* Settings for blackout slate.

          - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for
          solid black. Only bmp and png images are supported.

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
            accessible to the Live system (eg. a http:// URI) depending on the output type. For
            example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            - **Username** *(string) --* Documentation update needed

          - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
          the video, audio, and captions, and raise the "Network Blackout Image" slate when an
          SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be
          lifted when the Network Start Segmentation Descriptor is encountered. The Network End and
          Network Start descriptors must contain a network ID that matches the value entered in
          "Network ID".

          - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End
          Blackout image. Image will be scaled to fill the entire output raster.

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
            accessible to the Live system (eg. a http:// URI) depending on the output type. For
            example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            - **Username** *(string) --* Documentation update needed

          - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
          "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

          - **State** *(string) --* When set to enabled, causes video, audio and captions to be
          blanked when indicated by program metadata.

        - **CaptionDescriptions** *(list) --* Settings for caption decriptions

          - *(dict) --* Output groups for this Live Event. Output groups contain information about
          where streams should be distributed.

            - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use
            as a caption source when generating output captions. This field should match a
            captionSelector name.

            - **DestinationSettings** *(dict) --* Additional settings for captions destination that
            depend on the destination type.

              - **AribDestinationSettings** *(dict) --* Arib Destination Settings

              - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

                - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
                setting alignment to centered will place the captions at the bottom center of the
                output. Similarly, setting a left alignment will align captions to the bottom left
                of the output. If x and y positions are given in conjunction with the alignment
                parameter, the font will be justified (either left or centered) relative to those
                coordinates. Selecting "smart" justification will left-justify live subtitles and
                center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
                match.

                - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
                captions. All burn-in and DVB-Sub font settings must match.

                - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
                rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is
                equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
                must match.

                - **Font** *(dict) --* External font file used for caption burn-in. File extension
                must be 'ttf' or 'tte'. Although the user can select output fonts for many
                different types of input captions, embedded, STL and teletext sources use a strict
                grid system. Using external fonts with these caption sources could cause unexpected
                display of proportional fonts. All burn-in and DVB-Sub font settings must match.

                  - **PasswordParam** *(string) --* key used to extract the password from EC2
                  Parameter store

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                  file accessible to the Live system (eg. a http:// URI) depending on the output
                  type. For example, a RTMP destination should have a uri simliar to:
                  "rtmp://fmsserver/live".

                  - **Username** *(string) --* Documentation update needed

                - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
                option is not valid for source captions that are STL, 608/embedded or teletext.
                These source settings are already pre-defined by the caption stream. All burn-in
                and DVB-Sub font settings must match.

                - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
                255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

                - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
                is 96 dpi. All burn-in and DVB-Sub font settings must match.

                - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on
                the size of the output. Giving a positive integer will specify the exact font size
                in points. All burn-in and DVB-Sub font settings must match.

                - **OutlineColor** *(string) --* Specifies font outline color. This option is not
                valid for source captions that are either 608/embedded or teletext. These source
                settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
                font settings must match.

                - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
                is not valid for source captions that are either 608/embedded or teletext. These
                source settings are already pre-defined by the caption stream. All burn-in and
                DVB-Sub font settings must match.

                - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
                captions. All burn-in and DVB-Sub font settings must match.

                - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
                opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to
                0 (transparent). All burn-in and DVB-Sub font settings must match.

                - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
                relative to the captions in pixels. A value of -2 would result in a shadow offset 2
                pixels to the left. All burn-in and DVB-Sub font settings must match.

                - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
                relative to the captions in pixels. A value of -2 would result in a shadow offset 2
                pixels above the text. All burn-in and DVB-Sub font settings must match.

                - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
                used to generate the output subtitles bitmap. Only applicable for Teletext inputs
                and DVB-Sub/Burn-in outputs.

                - **XPosition** *(integer) --* Specifies the horizontal position of the caption
                relative to the left side of the output in pixels. A value of 10 would result in
                the captions starting 10 pixels from the left of the output. If no explicit
                xPosition is provided, the horizontal caption position will be determined by the
                alignment parameter. All burn-in and DVB-Sub font settings must match.

                - **YPosition** *(integer) --* Specifies the vertical position of the caption
                relative to the top of the output in pixels. A value of 10 would result in the
                captions starting 10 pixels from the top of the output. If no explicit yPosition is
                provided, the caption will be positioned towards the bottom of the output. All
                burn-in and DVB-Sub font settings must match.

              - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

                - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
                setting alignment to centered will place the captions at the bottom center of the
                output. Similarly, setting a left alignment will align captions to the bottom left
                of the output. If x and y positions are given in conjunction with the alignment
                parameter, the font will be justified (either left or centered) relative to those
                coordinates. Selecting "smart" justification will left-justify live subtitles and
                center-justify pre-recorded subtitles. This option is not valid for source captions
                that are STL or 608/embedded. These source settings are already pre-defined by the
                caption stream. All burn-in and DVB-Sub font settings must match.

                - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
                captions. All burn-in and DVB-Sub font settings must match.

                - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
                rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
                equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
                must match.

                - **Font** *(dict) --* External font file used for caption burn-in. File extension
                must be 'ttf' or 'tte'. Although the user can select output fonts for many
                different types of input captions, embedded, STL and teletext sources use a strict
                grid system. Using external fonts with these caption sources could cause unexpected
                display of proportional fonts. All burn-in and DVB-Sub font settings must match.

                  - **PasswordParam** *(string) --* key used to extract the password from EC2
                  Parameter store

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                  file accessible to the Live system (eg. a http:// URI) depending on the output
                  type. For example, a RTMP destination should have a uri simliar to:
                  "rtmp://fmsserver/live".

                  - **Username** *(string) --* Documentation update needed

                - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
                option is not valid for source captions that are STL, 608/embedded or teletext.
                These source settings are already pre-defined by the caption stream. All burn-in
                and DVB-Sub font settings must match.

                - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
                255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

                - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
                is 96 dpi. All burn-in and DVB-Sub font settings must match.

                - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
                size of the output. Giving a positive integer will specify the exact font size in
                points. All burn-in and DVB-Sub font settings must match.

                - **OutlineColor** *(string) --* Specifies font outline color. This option is not
                valid for source captions that are either 608/embedded or teletext. These source
                settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
                font settings must match.

                - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
                is not valid for source captions that are either 608/embedded or teletext. These
                source settings are already pre-defined by the caption stream. All burn-in and
                DVB-Sub font settings must match.

                - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
                captions. All burn-in and DVB-Sub font settings must match.

                - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
                opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it
                to 0 (transparent). All burn-in and DVB-Sub font settings must match.

                - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
                relative to the captions in pixels. A value of -2 would result in a shadow offset 2
                pixels to the left. All burn-in and DVB-Sub font settings must match.

                - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
                relative to the captions in pixels. A value of -2 would result in a shadow offset 2
                pixels above the text. All burn-in and DVB-Sub font settings must match.

                - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
                used to generate the output subtitles bitmap. Only applicable for Teletext inputs
                and DVB-Sub/Burn-in outputs.

                - **XPosition** *(integer) --* Specifies the horizontal position of the caption
                relative to the left side of the output in pixels. A value of 10 would result in
                the captions starting 10 pixels from the left of the output. If no explicit
                xPosition is provided, the horizontal caption position will be determined by the
                alignment parameter. This option is not valid for source captions that are STL,
                608/embedded or teletext. These source settings are already pre-defined by the
                caption stream. All burn-in and DVB-Sub font settings must match.

                - **YPosition** *(integer) --* Specifies the vertical position of the caption
                relative to the top of the output in pixels. A value of 10 would result in the
                captions starting 10 pixels from the top of the output. If no explicit yPosition is
                provided, the caption will be positioned towards the bottom of the output. This
                option is not valid for source captions that are STL, 608/embedded or teletext.
                These source settings are already pre-defined by the caption stream. All burn-in
                and DVB-Sub font settings must match.

              - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

              - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
              Destination Settings

              - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
              Settings

              - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
              Destination Settings

              - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

              - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

              - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

              - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

                - **StyleControl** *(string) --* When set to passthrough, passes through style and
                position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
                CFF-TT output or TTML output.

              - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

            - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
            http://www.loc.gov/standards/iso639-2/

            - **LanguageDescription** *(string) --* Human readable information to indicate captions
            available for players (eg. English, or Spanish).

            - **Name** *(string) --* Name of the caption description. Used to associate a caption
            description with an output. Names must be unique within an event.

        - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
        whole.

          - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
          Event.

          - **InputEndAction** *(string) --* Indicates the action to take when the current input
          completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
          restart at the beginning of the first input. When "none" is configured the encoder will
          transcode either black, a solid color, or a user specified slate images per the "Input
          Loss Behavior" configuration until the next input switch occurs (which is controlled
          through the Channel Schedule API).

          - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

            - **BlackFrameMsec** *(integer) --* Documentation update needed

            - **InputLossImageColor** *(string) --* When input loss image type is "color" this
            field specifies the color to use. Value: 6 hex characters representing the values of
            RGB.

            - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these
            fields specify the parameters for accessing the slate.

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
              store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
              accessible to the Live system (eg. a http:// URI) depending on the output type. For
              example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or
            a slate into the output after input loss exceeds blackFrameMsec.

            - **RepeatFrameMsec** *(integer) --* Documentation update needed

          - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
          PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to
          the other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each
          pipeline to the Unix epoch.

          - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by
          the Live encoder should be paced by its system clock (which optionally may be locked to
          another source via NTP) or should be locked to the clock of the source that is providing
          the input stream.

          - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
          very low video framerates. This is commonly set to enabled for music channels with less
          than one video frame per second.

        - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

          - *(dict) --* Output groups for this Live Event. Output groups contain information about
          where streams should be distributed.

            - **Name** *(string) --* Custom output group name optionally defined by the user. Only
            letters, numbers, and the underscore character allowed; only 32 characters allowed.

            - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

              - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

                - **Destination** *(dict) --* A directory and base filename where archive files
                should be written.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
                before closing and starting a new one.

              - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

                - **Destination** *(dict) --* The destination for the frame capture files. Either
                the URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
                s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
                container, plus a file name prefix (for example,
                mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
                the prefix from the destination field (for example, "curling_") + name modifier +
                the counter (5 digits, starting from 00001) + extension (which is always .jpg). For
                example, curlingLow.00001.jpg

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **HlsGroupSettings** *(dict) --* Hls Group Settings

                - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35
                signals through to this group of Apple HLS outputs.

                  - *(string) --* Hls Ad Markers

                - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
                each output in the media .m3u8 file. Can be used if base manifest is delivered from
                a different URL than the main .m3u8 file.

                - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
                each output in the media .m3u8 file. Can be used if base manifest is delivered from
                a different URL than the main .m3u8 file.

                - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
                caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

                  - *(dict) --* Maps a caption channel to an ISO 693-2 language code
                  (http://www.loc.gov/standards/iso639-2), with an optional description.

                    - **CaptionChannel** *(integer) --* The closed caption channel being described
                    by this CaptionLanguageMapping. Each channel mapping must have a unique channel
                    number (maximum of 4)

                    - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                    http://www.loc.gov/standards/iso639-2)

                    - **LanguageDescription** *(string) --* Textual description of language

                - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
                captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least
                one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for
                each Language Code you specify. Make sure to specify the languages in the order in
                which they appear in the original source (if the source is embedded format) or the
                order of the caption selectors (if the source is other than embedded). Otherwise,
                languages in the manifest will not match up properly with the output captions.
                none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any
                CLOSED-CAPTIONS line from the manifest.

                - **ClientCache** *(string) --* When set to "disabled", sets the
                #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
                segments for later replay.

                - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the
                default RFC-4281) during m3u8 playlist generation.

                - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
                16-byte hex value represented by a 32-character text string. If ivSource is set to
                "explicit" then this parameter is required and is used as the IV for encryption.

                - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
                manifest files, and encryption keys (if enabled).

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **DirectoryStructure** *(string) --* Place segments in subdirectories.

                - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
                scheme. Exclude this parameter if no encryption is desired.

                - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

                  - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                    retrying connection to the CDN if the connection is lost.

                    - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                    streaming outputs.

                    - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                    transfer encoding to Akamai. User should contact Akamai to enable this feature.

                    - **NumRetries** *(integer) --* Number of retry attempts that will be made
                    before the Live Event is put into an error state.

                    - **RestartDelay** *(integer) --* If a streaming output fails, number of
                    seconds to wait until a restart is initiated. A value of 0 means never restart.

                    - **Salt** *(string) --* Salt for authenticated Akamai.

                    - **Token** *(string) --* Token parameter for authenticated akamai. If not
                    specified, _gda_ is used.

                  - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                    retrying connection to the CDN if the connection is lost.

                    - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                    streaming outputs.

                    - **NumRetries** *(integer) --* Number of retry attempts that will be made
                    before the Live Event is put into an error state.

                    - **RestartDelay** *(integer) --* If a streaming output fails, number of
                    seconds to wait until a restart is initiated. A value of 0 means never restart.

                  - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                    retrying connection to the CDN if the connection is lost.

                    - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                    streaming outputs.

                    - **MediaStoreStorageClass** *(string) --* When set to temporal, output files
                    are stored in non-persistent memory for faster reading and writing.

                    - **NumRetries** *(integer) --* Number of retry attempts that will be made
                    before the Live Event is put into an error state.

                    - **RestartDelay** *(integer) --* If a streaming output fails, number of
                    seconds to wait until a restart is initiated. A value of 0 means never restart.

                  - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                    retrying connection to the CDN if the connection is lost.

                    - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                    streaming outputs.

                    - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                    transfer encoding to WebDAV.

                    - **NumRetries** *(integer) --* Number of retry attempts that will be made
                    before the Live Event is put into an error state.

                    - **RestartDelay** *(integer) --* If a streaming output fails, number of
                    seconds to wait until a restart is initiated. A value of 0 means never restart.

                - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
                manifest, but do create the master and media manifests (according to the Output
                Selection field). STANDARD: Create an I-frame-only manifest for each output that
                contains video, as well as the other manifests (according to the Output Selection
                field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
                I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
                position. For example, #EXT-X-BYTERANGE:160364@1461888"

                - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies
                the maximum number of segments in the media manifest file. After this maximum,
                older segments are removed from the media manifest. This number must be less than
                or equal to the Keep Segments field.

                - **InputLossAction** *(string) --* Parameter that control output group behavior on
                input loss.

                - **IvInManifest** *(string) --* For use with encryptionType. The IV
                (Initialization Vector) is a 128-bit number used in conjunction with the key for
                encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the
                IV is not in the manifest.

                - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
                Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
                If this setting is "followsSegmentNumber", it will cause the IV to change every
                segment (to match the segment number). If this is set to "explicit", you must enter
                a constantIv value.

                - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
                number of media segments (.ts files) to retain in the destination directory.

                - **KeyFormat** *(string) --* The value specifies how the key is represented in the
                resource identified by the URI. If parameter is absent, an implicit value of
                "identity" is used. A reverse DNS string can also be given.

                - **KeyFormatVersions** *(string) --* Either a single positive integer version
                value or a slash delimited list of version values (1/2/3).

                - **KeyProviderSettings** *(dict) --* The key provider settings.

                  - **StaticKeySettings** *(dict) --* Static Key Settings

                    - **KeyProviderServer** *(dict) --* The URL of the license server used for
                    protecting content.

                      - **PasswordParam** *(string) --* key used to extract the password from EC2
                      Parameter store

                      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                      to a file accessible to the Live system (eg. a http:// URI) depending on the
                      output type. For example, a RTMP destination should have a uri simliar to:
                      "rtmp://fmsserver/live".

                      - **Username** *(string) --* Documentation update needed

                    - **StaticKeyValue** *(string) --* Static key value as a 32 character
                    hexadecimal string.

                - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

                - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
                should use floating point or integer values for segment duration.

                - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
                looking ahead and back within the specified range for a nearby avail and extending
                the segment size if needed.

                - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
                the destination and manifest. If "live", only the number segments specified in
                keepSegments and indexNSegments are kept; newer segments replace older segments,
                which may prevent players from rewinding all the way to the beginning of the event.
                VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
                converting it to a "VOD" type manifest on completion of the stream.

                - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests
                (master manifest, if applicable, and media manifests) for this output group.
                SEGMENTSONLY: Does not generate any manifests for this output group.

                - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME
                tag in .m3u8 manifest files. The value is calculated as follows: either the program
                date and time are initialized using the input timecode source, or the time is
                initialized using the input timecode source and the date is initialized using the
                timestampOffset.

                - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
                EXT-X-PROGRAM-DATE-TIME entry, in seconds.

                - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
                each pipeline includes information about both pipelines: first its own media files,
                then the media files of the other pipeline. This feature allows playout device that
                support stale manifest detection to switch from one manifest to the other, when the
                current manifest seems to be stale. There are still two destinations and two master
                manifests, but both master manifests reference the media files from both pipelines.
                DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
                about its own pipeline only. For an HLS output group with MediaPackage as the
                destination, the DISABLED behavior is always followed. MediaPackage regenerates the
                manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

                - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
                create (in seconds). Note that segments will end on the next keyframe after this
                number of seconds, so actual segment length may be longer.

                - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
                configured segment size is always used.

                - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
                subdirectory before starting a new one. directoryStructure must be
                subdirectoryPerStream for this setting to have an effect.

                - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
                video in EXT-X-STREAM-INF tag of variant manifest.

                - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

                - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

                - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
                offset to fine tune the timestamps.

                - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
                multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
                program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE
                tags to index segments for playback. A typical use for this value is when sending
                the output to AWS Elemental MediaConvert, which can accept only a single media
                file. Playback while the channel is running is not guaranteed due to HTTP server
                caching.

              - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

                - **Destination** *(dict) --* MediaPackage channel destination.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

                - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point
                Identity" element used in each message placed in the sparse track. Only enabled if
                sparseTrackType is not "none".

                - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an
                audio-only MS Smooth output, the fragment absolute time will be set to the current
                timecode. This option does not write timecodes to the audio elementary stream.

                - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
                certificate chain to a trusted Certificate Authority (CA). This will cause https
                outputs to self-signed certificates to fail.

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the IIS server if the connection is lost. Content will be
                cached during this time and the cache will be be delivered to the IIS server once
                the connection is re-established.

                - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
                Elemental Live acts as a "Push" encoder to IIS.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
                only be specified if eventIdMode is set to useConfigured.

                - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
                IIS server. If no event ID is sent and the same Live Event is used without changing
                the publishing point, clients might see cached video from the previous run.
                Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" -
                generate and send an event ID based on the current timestamp - "noEventId" - do not
                send an event ID to the IIS server.

                - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
                server when stopping the event

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
                outputs.

                - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in
                seconds). Fragment length must be compatible with GOP size and framerate.

                - **InputLossAction** *(string) --* Parameter that control output group behavior on
                input loss.

                - **NumRetries** *(integer) --* Number of retry attempts.

                - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
                to output failure, due to exhausting the numRetries on one segment, or exceeding
                filecacheDuration.

                - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
                configured segment size is always used.

                - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from
                the second pipeline.

                - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
                to generate a sparse track in this group of MS-Smooth outputs.

                - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest
                so publishing point doesn't start until all streams start.

                - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
                timestampOffsetMode is set to useConfiguredOffset.

                - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
                useEventStartDate: Use the date the event was started as the offset -
                useConfiguredOffset: Use an explicitly configured date as the offset

              - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

                - **AuthenticationScheme** *(string) --* Authentication scheme to use when
                connecting with CDN

                - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills
                up. If remote origin server stalls the RTMP connection and does not accept content
                fast enough the 'Media Cache' will fill up. When the cache reaches the duration
                specified by cacheLength the cache will stop accepting new content. If set to
                disconnectImmediately, the RTMP output will force a disconnect. Clear the media
                cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
                output will wait up to 5 minutes to allow the origin server to begin accepting data
                again.

                - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
                buffer size.

                - **CaptionData** *(string) --* Controls the types of data that passes to
                onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
                passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but
                608 data from both fields will be passed. If set to 'field1608' then only the data
                carried in 608 from field 1 video will be passed.

                - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if
                input becomes unavailable. - emitOutput: Emit a slate until input returns. -
                pauseOutput: Stop transmitting data until input returns. This does not close the
                underlying RTMP connection.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
                wait until a restart is initiated. A value of 0 means never restart.

              - **UdpGroupSettings** *(dict) --* Udp Group Settings

                - **InputLossAction** *(string) --* Specifies behavior of last resort when input
                video is lost, and no more backup inputs are available. When dropTs is selected the
                entire transport stream will stop being emitted. When dropProgram is selected the
                program can be dropped from the transport stream (and replaced with null packets to
                meet the TS bitrate requirement). Or, when emitProgram is chosen the transport
                stream will continue to be produced normally with repeat frames, black frames, or
                slate frames substituted for the absent input video.

                - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

                - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

            - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

              - *(dict) --* Output settings. There can be multiple outputs within a group.

                - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
                audio sources for this output.

                  - *(string) --* Placeholder documentation for __string

                - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
                as caption sources for this output.

                  - *(string) --* Placeholder documentation for __string

                - **OutputName** *(string) --* The name used to identify an output.

                - **OutputSettings** *(dict) --* Output type-specific settings.

                  - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                    - **ContainerSettings** *(dict) --* Settings specific to the container type of
                    the file.

                      - **M2tsSettings** *(dict) --* M2ts Settings

                        - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                        streams will be removed from the program if the selected input audio stream
                        is removed from the input. This allows the output audio configuration to
                        dynamically change based on input configuration. If this is set to
                        encodeSilence, all output audio streams will output encoded silence when
                        not connected to an active input stream.

                        - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                        muxing and removes video descriptor.

                        - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                        Captions in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                        for ARIB Captions will be auto-selected from unused pids. If set to
                        useConfigured, ARIB Captions will be on the configured pid number.

                        - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                        for Dolby Digital audio. When set to atsc, the ATSC model is used.

                        - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                        for each PES packet.

                        - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                        audio stream(s) in the transport stream. Multiple values are accepted, and
                        can be entered in ranges and/or by comma separation. Can be entered as
                        decimal or hexadecimal values. Each PID specified must be in the range of
                        32 (or 0x20)..8182 (or 0x1ff6).

                        - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                        0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                        type = 0x06.

                        - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                        bits per second. Setting to 0 lets the muxer automatically determine the
                        appropriate bitrate.

                        - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                        model for accurate interleaving. Setting to bufferModel to none can lead to
                        lower latency, but low-memory devices may not be able to play back the
                        stream without interruptions.

                        - **CcDescriptor** *(string) --* When set to enabled, generates
                        captionServiceDescriptor in PMT.

                        - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                        (NIT) at the specified table repetition interval.

                          - **NetworkId** *(integer) --* The numeric value placed in the Network
                          Information Table (NIT).

                          - **NetworkName** *(string) --* The network name text placed in the
                          networkNameDescriptor inside the Network Information Table. Maximum
                          length is 256 characters.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                        - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                        (SDT) at the specified table repetition interval.

                          - **OutputSdt** *(string) --* Selects method of inserting SDT information
                          into output stream. The sdtFollow setting copies SDT information from
                          input stream to output stream. The sdtFollowIfPresent setting copies SDT
                          information from input stream to output stream if SDT information is
                          present in the input, otherwise it will fall back on the user-defined
                          values. The sdtManual setting means user will enter the SDT information.
                          The sdtNone setting means output stream will not contain SDT information.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                          - **ServiceName** *(string) --* The service name placed in the
                          serviceDescriptor in the Service Description Table. Maximum length is 256
                          characters.

                          - **ServiceProviderName** *(string) --* The service provider name placed
                          in the serviceDescriptor in the Service Description Table. Maximum length
                          is 256 characters.

                        - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                        Subtitle data to this output. Multiple values are accepted, and can be
                        entered in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                        the specified table repetition interval.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                        - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                        DVB Teletext data to this output. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                        the input source to this output.

                        - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                        selected, audio EBP markers will be added to partitions 3 and 4. The
                        interval between these additional markers will be fixed, and will be
                        slightly shorter than the video EBP marker interval. Only available when
                        EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                        always follow the video interval.

                        - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                        Boundary Points do not come within the specified time interval of each
                        other by looking ahead at input video. If another EBP is going to come in
                        within the specified time interval, the current EBP is not emitted, and the
                        segment is "stretched" to the next marker. The lookahead value does not add
                        latency to the system. The Live Event must be configured elsewhere to
                        create sufficient latency to make the lookahead accurate.

                        - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                        If set to videoAndAudioPids, EBP markers will be placed on the video PID
                        and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                        the video PID.

                        - **EcmPid** *(string) --* This field is unused and deprecated.

                        - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                        PES header.

                        - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                        ETV Platform data to this output. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                        ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                        value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **FragmentTime** *(float) --* The length in seconds of each fragment.
                        Only used with EBP markers.

                        - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                        input source to this output.

                        - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                        KLV data to this output. Multiple values are accepted, and can be entered
                        in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                        packets to insert into the transport stream. This can be used if a
                        downstream encryption system requires periodic null packets.

                        - **PatInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. Valid values are 0,
                        10..1000.

                        - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                        Clock Reference value is inserted for every Packetized Elementary Stream
                        (PES) header. This parameter is effective only when the PCR PID is the same
                        as the video or audio elementary stream.

                        - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                        Clock Reference (PCRs) inserted into the transport stream.

                        - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                        Reference (PCR) in the transport stream. When no value is given, the
                        encoder will assign the same value as the Video PID. Can be entered as a
                        decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                        0x1ff6).

                        - **PmtInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. Valid values are 0,
                        10..1000.

                        - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                        Table (PMT) in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **ProgramNum** *(integer) --* The value of the program number field in
                        the Program Map Table.

                        - **RateMode** *(string) --* When vbr, does not insert null packets into
                        transport stream to fill specified bitrate. The bitrate setting acts as the
                        maximum bitrate when vbr is set.

                        - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                        SCTE-27 data to this output. Multiple values are accepted, and can be
                        entered in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                        input source to this output.

                        - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                        in the transport stream. Can be entered as a decimal or hexadecimal value.
                        Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                        each segmentationTime period. raiSegstart sets the Random Access Indicator
                        bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                        timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                        at the start of segments. ebp adds Encoder Boundary Point information to
                        the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                        ebpLegacy adds Encoder Boundary Point information to the adaptation field
                        using a legacy proprietary format.

                        - **SegmentationStyle** *(string) --* The segmentation style parameter
                        controls how segmentation markers are inserted into the transport stream.
                        With avails, it is possible that segments may be truncated, which can
                        influence where future segmentation markers are inserted. When a
                        segmentation style of "resetCadence" is selected and a segment is truncated
                        due to an avail, we will reset the segmentation cadence. This means the
                        subsequent segment will have a duration of $segmentationTime seconds. When
                        a segmentation style of "maintainCadence" is selected and a segment is
                        truncated due to an avail, we will not reset the segmentation cadence. This
                        means the subsequent segment will likely be truncated as well. However, all
                        segments after that will have a duration of $segmentationTime seconds. Note
                        that EBP lookahead is a slight exception to this rule.

                        - **SegmentationTime** *(float) --* The length in seconds of each segment.
                        Required unless markers is set to None_.

                        - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                        metadata will be passed through from input to output.

                        - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                        metadata stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **TransportStreamId** *(integer) --* The value of the transport stream ID
                        field in the Program Map Table.

                        - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                        video stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Extension** *(string) --* Output file extension. If excluded, this will be
                    auto-selected from the container type.

                    - **NameModifier** *(string) --* String concatenated to the end of the
                    destination filename. Required for multiple outputs of the same type.

                  - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                    - **NameModifier** *(string) --* Required if the output group contains more
                    than one output. This modifier forms part of the output file name.

                  - **HlsOutputSettings** *(dict) --* Hls Output Settings

                    - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                    settings are different for audio-only outputs.

                      - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                        - **AudioGroupId** *(string) --* Specifies the group to which the audio
                        Rendition belongs.

                        - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                        to use as the cover art for an audio-only output. We recommend a low
                        bit-size file because the image increases the output audio bandwidth. The
                        image is attached to the audio as an ID3 tag, frame type APIC, picture type
                        0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.

                          - **PasswordParam** *(string) --* key used to extract the password from
                          EC2 Parameter store

                          - **Uri** *(string) --* Uniform Resource Identifier - This should be a
                          path to a file accessible to the Live system (eg. a http:// URI)
                          depending on the output type. For example, a RTMP destination should have
                          a uri simliar to: "rtmp://fmsserver/live".

                          - **Username** *(string) --* Documentation update needed

                        - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                        supported: Audio-Only Variant Stream The client can play back this
                        audio-only stream instead of video in low-bandwidth scenarios. Represented
                        as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select,
                        Default Alternate rendition that the client should try to play back by
                        default. Represented as an EXT-X-MEDIA in the HLS manifest with
                        DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default
                        Alternate rendition that the client may try to play back by default.
                        Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO,
                        AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that
                        the client will not try to play back by default. Represented as an
                        EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO

                      - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                        - **AudioRenditionSets** *(string) --* List all the audio groups that are
                        used with the video output stream. Input all the audio GROUP-IDs that are
                        associated to the video, separate by ','.

                        - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                          - **AudioFramesPerPes** *(integer) --* The number of audio frames to
                          insert for each PES packet.

                          - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                          audio stream(s) in the transport stream. Multiple values are accepted,
                          and can be entered in ranges and/or by comma separation. Can be entered
                          as decimal or hexadecimal values.

                          - **EcmPid** *(string) --* This parameter is unused and deprecated.

                          - **PatInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream. A value of
                          \\"0\\" writes out the PMT once per segment file.

                          - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                          Clock Reference value is inserted for every Packetized Elementary Stream
                          (PES) header. This parameter is effective only when the PCR PID is the
                          same as the video or audio elementary stream.

                          - **PcrPeriod** *(integer) --* Maximum time in milliseconds between
                          Program Clock References (PCRs) inserted into the transport stream.

                          - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                          Reference (PCR) in the transport stream. When no value is given, the
                          encoder will assign the same value as the Video PID. Can be entered as a
                          decimal or hexadecimal value.

                          - **PmtInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream. A value of
                          \\"0\\" writes out the PMT once per segment file.

                          - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                          Table (PMT) in the transport stream. Can be entered as a decimal or
                          hexadecimal value.

                          - **ProgramNum** *(integer) --* The value of the program number field in
                          the Program Map Table.

                          - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                          SCTE-35 signals from the input source to this output.

                          - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35
                          stream in the transport stream. Can be entered as a decimal or
                          hexadecimal value.

                          - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                          metadata is passed through from input to output.

                          - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                          metadata stream in the transport stream. Can be entered as a decimal or
                          hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                          - **TransportStreamId** *(integer) --* The value of the transport stream
                          ID field in the Program Map Table.

                          - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                          video stream in the transport stream. Can be entered as a decimal or
                          hexadecimal value.

                    - **NameModifier** *(string) --* String concatenated to the end of the
                    destination filename. Accepts \\"Format
                    Identifiers\\":#formatIdentifierParameters.

                    - **SegmentModifier** *(string) --* String concatenated to end of segment
                    filenames.

                  - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

                  - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                    - **H265PackagingType** *(string) --* Only applicable when this output is
                    referencing an H.265 video description. Specifies whether MP4 segments should
                    be packaged as HEV1 or HVC1.

                    - **NameModifier** *(string) --* String concatenated to the end of the
                    destination filename. Required for multiple outputs of the same type.

                  - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                    - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the
                    tls certificate chain to a trusted Certificate Authority (CA). This will cause
                    rtmps outputs with self-signed certificates to fail.

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                    retrying a connection to the Flash Media server if the connection is lost.

                    - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                    rtmp://host/appname). For connection to Akamai, a username and password must be
                    supplied. URI fields accept format identifiers.

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string

                    - **NumRetries** *(integer) --* Number of retry attempts.

                  - **UdpOutputSettings** *(dict) --* Udp Output Settings

                    - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                    values increase latency through the transcoder but simultaneously assist the
                    transcoder in maintaining a constant, low-jitter UDP/RTP output while
                    accommodating clock recovery, input switching, input disruptions, picture
                    reordering, etc.

                    - **ContainerSettings** *(dict) --* Udp Container Settings

                      - **M2tsSettings** *(dict) --* M2ts Settings

                        - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                        streams will be removed from the program if the selected input audio stream
                        is removed from the input. This allows the output audio configuration to
                        dynamically change based on input configuration. If this is set to
                        encodeSilence, all output audio streams will output encoded silence when
                        not connected to an active input stream.

                        - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                        muxing and removes video descriptor.

                        - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                        Captions in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                        for ARIB Captions will be auto-selected from unused pids. If set to
                        useConfigured, ARIB Captions will be on the configured pid number.

                        - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                        for Dolby Digital audio. When set to atsc, the ATSC model is used.

                        - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                        for each PES packet.

                        - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                        audio stream(s) in the transport stream. Multiple values are accepted, and
                        can be entered in ranges and/or by comma separation. Can be entered as
                        decimal or hexadecimal values. Each PID specified must be in the range of
                        32 (or 0x20)..8182 (or 0x1ff6).

                        - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                        0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                        type = 0x06.

                        - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                        bits per second. Setting to 0 lets the muxer automatically determine the
                        appropriate bitrate.

                        - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                        model for accurate interleaving. Setting to bufferModel to none can lead to
                        lower latency, but low-memory devices may not be able to play back the
                        stream without interruptions.

                        - **CcDescriptor** *(string) --* When set to enabled, generates
                        captionServiceDescriptor in PMT.

                        - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                        (NIT) at the specified table repetition interval.

                          - **NetworkId** *(integer) --* The numeric value placed in the Network
                          Information Table (NIT).

                          - **NetworkName** *(string) --* The network name text placed in the
                          networkNameDescriptor inside the Network Information Table. Maximum
                          length is 256 characters.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                        - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                        (SDT) at the specified table repetition interval.

                          - **OutputSdt** *(string) --* Selects method of inserting SDT information
                          into output stream. The sdtFollow setting copies SDT information from
                          input stream to output stream. The sdtFollowIfPresent setting copies SDT
                          information from input stream to output stream if SDT information is
                          present in the input, otherwise it will fall back on the user-defined
                          values. The sdtManual setting means user will enter the SDT information.
                          The sdtNone setting means output stream will not contain SDT information.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                          - **ServiceName** *(string) --* The service name placed in the
                          serviceDescriptor in the Service Description Table. Maximum length is 256
                          characters.

                          - **ServiceProviderName** *(string) --* The service provider name placed
                          in the serviceDescriptor in the Service Description Table. Maximum length
                          is 256 characters.

                        - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                        Subtitle data to this output. Multiple values are accepted, and can be
                        entered in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                        the specified table repetition interval.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                        - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                        DVB Teletext data to this output. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                        the input source to this output.

                        - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                        selected, audio EBP markers will be added to partitions 3 and 4. The
                        interval between these additional markers will be fixed, and will be
                        slightly shorter than the video EBP marker interval. Only available when
                        EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                        always follow the video interval.

                        - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                        Boundary Points do not come within the specified time interval of each
                        other by looking ahead at input video. If another EBP is going to come in
                        within the specified time interval, the current EBP is not emitted, and the
                        segment is "stretched" to the next marker. The lookahead value does not add
                        latency to the system. The Live Event must be configured elsewhere to
                        create sufficient latency to make the lookahead accurate.

                        - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                        If set to videoAndAudioPids, EBP markers will be placed on the video PID
                        and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                        the video PID.

                        - **EcmPid** *(string) --* This field is unused and deprecated.

                        - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                        PES header.

                        - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                        ETV Platform data to this output. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                        ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                        value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **FragmentTime** *(float) --* The length in seconds of each fragment.
                        Only used with EBP markers.

                        - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                        input source to this output.

                        - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                        KLV data to this output. Multiple values are accepted, and can be entered
                        in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                        packets to insert into the transport stream. This can be used if a
                        downstream encryption system requires periodic null packets.

                        - **PatInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. Valid values are 0,
                        10..1000.

                        - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                        Clock Reference value is inserted for every Packetized Elementary Stream
                        (PES) header. This parameter is effective only when the PCR PID is the same
                        as the video or audio elementary stream.

                        - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                        Clock Reference (PCRs) inserted into the transport stream.

                        - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                        Reference (PCR) in the transport stream. When no value is given, the
                        encoder will assign the same value as the Video PID. Can be entered as a
                        decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                        0x1ff6).

                        - **PmtInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. Valid values are 0,
                        10..1000.

                        - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                        Table (PMT) in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **ProgramNum** *(integer) --* The value of the program number field in
                        the Program Map Table.

                        - **RateMode** *(string) --* When vbr, does not insert null packets into
                        transport stream to fill specified bitrate. The bitrate setting acts as the
                        maximum bitrate when vbr is set.

                        - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                        SCTE-27 data to this output. Multiple values are accepted, and can be
                        entered in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                        input source to this output.

                        - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                        in the transport stream. Can be entered as a decimal or hexadecimal value.
                        Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                        each segmentationTime period. raiSegstart sets the Random Access Indicator
                        bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                        timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                        at the start of segments. ebp adds Encoder Boundary Point information to
                        the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                        ebpLegacy adds Encoder Boundary Point information to the adaptation field
                        using a legacy proprietary format.

                        - **SegmentationStyle** *(string) --* The segmentation style parameter
                        controls how segmentation markers are inserted into the transport stream.
                        With avails, it is possible that segments may be truncated, which can
                        influence where future segmentation markers are inserted. When a
                        segmentation style of "resetCadence" is selected and a segment is truncated
                        due to an avail, we will reset the segmentation cadence. This means the
                        subsequent segment will have a duration of $segmentationTime seconds. When
                        a segmentation style of "maintainCadence" is selected and a segment is
                        truncated due to an avail, we will not reset the segmentation cadence. This
                        means the subsequent segment will likely be truncated as well. However, all
                        segments after that will have a duration of $segmentationTime seconds. Note
                        that EBP lookahead is a slight exception to this rule.

                        - **SegmentationTime** *(float) --* The length in seconds of each segment.
                        Required unless markers is set to None_.

                        - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                        metadata will be passed through from input to output.

                        - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                        metadata stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **TransportStreamId** *(integer) --* The value of the transport stream ID
                        field in the Program Map Table.

                        - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                        video stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Destination** *(dict) --* Destination address and port number for RTP or
                    UDP packets. Can be unicast or multicast RTP or UDP (eg.
                    rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string

                    - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                    Error Correction on UDP outputs.

                      - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                      the FEC protection matrix. The number of transport stream packets per column
                      error correction packet. Must be between 4 and 20, inclusive.

                      - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                      - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of
                      the FEC protection matrix. Must be between 1 and 20, inclusive. If only
                      Column FEC is used, then larger values increase robustness. If Row FEC is
                      used, then this is the number of transport stream packets per row error
                      correction packet, and the value must be between 4 and 20, inclusive, if
                      includeFec is columnAndRow. If includeFec is column, this value must be 1 to
                      20, inclusive.

                - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as
                the source for this output.

        - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
        information from inputs.

          - **Source** *(string) --* Identifies the source for the timecode that will be associated
          with the events outputs. -Embedded (embedded): Initialize the output timecode with
          timecode from the the source. If no embedded timecode is detected in the source, the
          system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the
          UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be
          00:00:00:00.

          - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
          resynchronized to the input timecode. Discrepancies below this threshold are permitted to
          avoid unnecessary discontinuities in the output timecode. No timecode sync when this is
          not specified.

        - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

          - *(dict) --* Video settings for this stream.

            - **CodecSettings** *(dict) --* Video codec settings.

              - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

                - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
                frames for inclusion in the output. For example, "10" means capture a frame every
                10 seconds.

              - **H264Settings** *(dict) --* H264 Settings

                - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
                quantizers to vary to improve visual quality.

                - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
                output stream. If afdSignaling is "auto", the system will try to preserve the input
                AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
                AFD value will be the value configured in the fixedAfd parameter.

                - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
                control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
                output must have a unique value when its bitrate is rounded down to the nearest
                multiple of 1000.

                - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
                filled (HRD buffer model).

                - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

                - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

                - **ColorSpaceSettings** *(dict) --* Color Space settings

                  - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
                  space conversion to the output

                  - **Rec601Settings** *(dict) --* Rec601 Settings

                  - **Rec709Settings** *(dict) --* Rec709 Settings

                - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
                Main or High profile) or cavlc.

                - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
                the output stream. Only valid when afdSignaling is set to 'Fixed'.

                - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
                frame to reduce flicker or 'pop' on I-frames.

                - **FramerateControl** *(string) --* This field indicates how the output video
                frame rate is specified. If "specified" is selected then the output video frame
                rate is determined by framerateNumerator and framerateDenominator, else if
                "initializeFromSource" is selected then the output video frame rate will be set
                equal to the input video frame rate of the first input.

                - **FramerateDenominator** *(integer) --* Framerate denominator.

                - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
                fraction, e.g. 24000 / 1001 = 23.976 fps.

                - **GopBReference** *(string) --* Documentation update needed

                - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
                applications, it is recommended that this be set to 1 so a decoder joining
                mid-stream will receive an IDR frame as quickly as possible. Setting this value to
                0 will break output segmenting.

                - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

                - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
                or seconds per gopSizeUnits. Must be greater than zero.

                - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
                seconds. If seconds the system will convert the gopSize into a frame count at run
                time.

                - **Level** *(string) --* H.264 Level.

                - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
                decrease latency and memory usage, while high can produce better quality for
                certain content.

                - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
                VBR: Set the maximum bitrate in order to accommodate expected spikes in the
                complexity of the video.

                - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
                enabled. Enforces separation between repeated (cadence) I-frames and I-frames
                inserted by Scene Change Detection. If a scene change I-frame is within I-interval
                frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
                I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
                normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
                Min-I-interval - 1

                - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
                may use more than requested if using B-frames and/or interlaced encoding.

                - **ParControl** *(string) --* This field indicates how the output pixel aspect
                ratio is specified. If "specified" is selected then the output video pixel aspect
                ratio is determined by parNumerator and parDenominator, else if
                "initializeFromSource" is selected then the output pixsel aspect ratio will be set
                equal to the input video pixel aspect ratio of the first input.

                - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

                - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

                - **Profile** *(string) --* H.264 Profile.

                - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
                encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
                quality level field and Max bitrate field that suit your most important viewing
                devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
                bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
                Quality level: 6. Max bitrate: 1M to 1.5M

                - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
                specified quality level except when it is constrained by the maximum bitrate.
                Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
                vary, depending on the video complexity. Recommended instead of QVBR if you want to
                maintain a specific average bitrate over the duration of the channel. CBR: Quality
                varies, depending on the video complexity. Recommended only if you distribute your
                assets to devices that cannot handle variable bitrates.

                - **ScanType** *(string) --* Sets the scan type of the output to progressive or
                top-field-first interlaced.

                - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
                I-frames when scene change is detected. - Off: does not force an I-frame when scene
                change is detected.

                - **Slices** *(integer) --* Number of slices per picture. Must be less than or
                equal to the number of macroblock rows for progressive pictures, and less than or
                equal to half the number of macroblock rows for interlaced pictures. This field is
                optional; when no value is specified the encoder will choose the number of slices
                based on encode resolution.

                - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
                reduce high-frequency content in the encoded image.

                - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
                frame based on spatial variation of content complexity.

                - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
                sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
                to improve visual quality.

                - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

                - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
                frame based on temporal variation of content complexity.

                - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
                into the video elementary stream. - 'disabled': Do not include timecodes -
                'picTimingSei': Pass through picture timing SEI messages from the source specified
                in Timecode Config

              - **H265Settings** *(dict) --* H265 Settings

                - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
                quantizers to vary to improve visual quality.

                - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
                output stream. If afdSignaling is "auto", the system will try to preserve the input
                AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
                AFD value will be the value configured in the fixedAfd parameter.

                - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
                Alternative Transfer Function SEI message to support backwards compatibility with
                non-HDR decoders and displays.

                - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
                control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
                output must have a unique value when its bitrate is rounded down to the nearest
                multiple of 1000.

                - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

                - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

                - **ColorSpaceSettings** *(dict) --* Color Space settings

                  - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
                  space conversion to the output

                  - **Hdr10Settings** *(dict) --* Hdr10 Settings

                    - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
                    value defining the maximum light level, in nits, of any single pixel within an
                    encoded HDR video stream or file.

                    - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                    metadata value defining the maximum average light level, in nits, for any
                    single frame within an encoded HDR video stream or file.

                  - **Rec601Settings** *(dict) --* Rec601 Settings

                  - **Rec709Settings** *(dict) --* Rec709 Settings

                - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
                the output stream. Only valid when afdSignaling is set to 'Fixed'.

                - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
                frame to reduce flicker or 'pop' on I-frames.

                - **FramerateDenominator** *(integer) --* Framerate denominator.

                - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
                fraction, e.g. 24000 / 1001 = 23.976 fps.

                - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
                applications, it is recommended that this be set to 1 so a decoder joining
                mid-stream will receive an IDR frame as quickly as possible. Setting this value to
                0 will break output segmenting.

                - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
                or seconds per gopSizeUnits. Must be greater than zero.

                - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
                seconds. If seconds the system will convert the gopSize into a frame count at run
                time.

                - **Level** *(string) --* H.265 Level.

                - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
                decrease latency and memory usage, while high can produce better quality for
                certain content.

                - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

                - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
                enabled. Enforces separation between repeated (cadence) I-frames and I-frames
                inserted by Scene Change Detection. If a scene change I-frame is within I-interval
                frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
                I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
                normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
                Min-I-interval - 1

                - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

                - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

                - **Profile** *(string) --* H.265 Profile.

                - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
                encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
                quality level field and Max bitrate field that suit your most important viewing
                devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
                bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
                Quality level: 6. Max bitrate: 1M to 1.5M

                - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
                specified quality level except when it is constrained by the maximum bitrate.
                Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
                depending on the video complexity. Recommended only if you distribute your assets
                to devices that cannot handle variable bitrates.

                - **ScanType** *(string) --* Sets the scan type of the output to progressive or
                top-field-first interlaced.

                - **SceneChangeDetect** *(string) --* Scene change detection.

                - **Slices** *(integer) --* Number of slices per picture. Must be less than or
                equal to the number of macroblock rows for progressive pictures, and less than or
                equal to half the number of macroblock rows for interlaced pictures. This field is
                optional; when no value is specified the encoder will choose the number of slices
                based on encode resolution.

                - **Tier** *(string) --* H.265 Tier.

                - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
                into the video elementary stream. - 'disabled': Do not include timecodes -
                'picTimingSei': Pass through picture timing SEI messages from the source specified
                in Timecode Config

            - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
            most codecs, you can leave this field and width blank in order to use the height and
            width (resolution) from the source. Note, however, that leaving blank is not
            recommended. For the Frame Capture codec, height and width are required.

            - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name
            to uniquely identify this Description. Description names should be unique within this
            Live Event.

            - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the
            input stream. RESPOND causes input video to be clipped, depending on the AFD value,
            input display aspect ratio, and output display aspect ratio, and (except for
            FRAMECAPTURE codec) includes the values in the output. PASSTHROUGH (does not apply to
            FRAMECAPTURE codec) ignores the AFD values and includes the values in the output, so
            input video is not clipped. NONE ignores the AFD values and does not include the values
            through to the output, so input video is not clipped.

            - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
            stretch the video to the specified output resolution (height and width). This option
            will override any position value. DEFAULT may insert black boxes (pillar boxes or
            letter boxes) around the video to provide the specified output resolution.

            - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
            scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
            for most content.

            - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
            most codecs, you can leave this field and height blank in order to use the height and
            width (resolution) from the source. Note, however, that leaving blank is not
            recommended. For the Frame Capture codec, height and width are required.

      - **Id** *(string) --* The unique id of the channel.

      - **InputAttachments** *(list) --* List of input attachments for channel.

        - *(dict) --* Placeholder documentation for InputAttachment

          - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
          required if the user wants to use this input in an input switch action.

          - **InputId** *(string) --* The ID of the input

          - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

            - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
            that have multiple available.

              - *(dict) --* Audio Selector

                - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
                this name to uniquely identify this Selector. Selector names should be unique per
                input.

                - **SelectorSettings** *(dict) --* The audio selector settings.

                  - **AudioLanguageSelection** *(dict) --* Audio Language Selection

                    - **LanguageCode** *(string) --* Selects a specific three-letter language code
                    from within an audio source.

                    - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
                    stream demux strictly identifies audio streams by their language descriptor. If
                    a PMT update occurs such that an audio stream matching the initially selected
                    language is no longer present then mute will be encoded until the language
                    returns. If "loose", then on a PMT update the demux will choose another audio
                    stream in the program with the same stream type if it can't find one with the
                    same language.

                  - **AudioPidSelection** *(dict) --* Audio Pid Selection

                    - **Pid** *(integer) --* Selects a specific PID from within a source.

            - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
            that have multiple available.

              - *(dict) --* Output groups for this Live Event. Output groups contain information
              about where streams should be distributed.

                - **LanguageCode** *(string) --* When specified this field indicates the three
                letter language code of the caption track to extract from the source.

                - **Name** *(string) --* Name identifier for a caption selector. This name is used
                to associate this caption selector with one or more caption descriptions. Names
                must be unique within an event.

                - **SelectorSettings** *(dict) --* Caption selector settings.

                  - **AribSourceSettings** *(dict) --* Arib Source Settings

                  - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

                    - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
                    PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
                    is passed through, regardless of selectors.

                  - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

                    - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                    through via the "608 compatibility bytes" fields of the 708 wrapper as well as
                    translated into 708. 708 data present in the source content will be discarded.

                    - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
                    intermittent and/or non-aligned SCTE-20 and Embedded captions.

                    - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                    number within the video track from which to extract captions. Unused for
                    passthrough.

                    - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

                  - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

                    - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                    through via the "608 compatibility bytes" fields of the 708 wrapper as well as
                    translated into 708. 708 data present in the source content will be discarded.

                    - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                    number within the video track from which to extract captions. Unused for
                    passthrough.

                  - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

                    - **Pid** *(integer) --* The pid field is used in conjunction with the caption
                    selector languageCode field as follows: - Specify PID and Language: Extracts
                    captions from that PID; the language is "informational". - Specify PID and omit
                    Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
                    the specified language, whichever PID that happens to be. - Omit PID and omit
                    Language: Valid only if source is DVB-Sub that is being passed through; all
                    languages will be passed through.

                  - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

                    - **PageNumber** *(string) --* Specifies the teletext page number within the
                    data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
                    (2303). Unused for passthrough. Should be specified as a hexadecimal string
                    with no "0x" prefix.

            - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

            - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

            - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
            to 5 (strongest).

            - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
            the deblocking filter enabled by default. 1) auto - filtering will be applied depending
            on input type/quality 2) disabled - no filtering will be applied to the input 3) forced
            - filtering will be applied regardless of input type

            - **NetworkInputSettings** *(dict) --* Input settings.

              - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
              HLS manifest.

                - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
                BANDWIDTH that most closely matches this value will be chosen, otherwise the
                highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
                bits per second, as in an HLS manifest.

                - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
                begin this many buffer segments from the end (most recently written segment). When
                not specified, the HLS input will begin with the first segment specified in the
                m3u8.

                - **Retries** *(integer) --* The number of consecutive times that attempts to read
                a manifest or segment must fail before the input is considered unavailable.

                - **RetryInterval** *(integer) --* The number of seconds between retries when an
                attempt to read a manifest or segment fails.

              - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
              checkCryptographyOnly, cryptography in the certificate will be checked, but not the
              server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
              name) do not strictly match the corresponding certificate's wildcard pattern and
              would otherwise cause the event to error. This setting is ignored for protocols that
              do not use https.

            - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
            input to be streamed indefinitely.

            - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
            input types that have multiple available.

              - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
              works in tandem with colorSpaceUsage and a video description's
              colorSpaceSettingsChoice to determine if any conversion will be performed.

              - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
              follow. This field controls how the value in the colorSpace field will be used.
              fallback means that when the input does include color space data, that data will be
              used, but when the input has no color space data, the value in colorSpace will be
              used. Choose fallback if your input is sometimes missing color space data, but when
              it does have color space data, that data is correct. force means to always use the
              value in colorSpace. Choose force if your input usually has no color space data or
              might have unreliable color space data.

              - **SelectorSettings** *(dict) --* The video selector settings.

                - **VideoSelectorPid** *(dict) --* Video Selector Pid

                  - **Pid** *(integer) --* Selects a specific PID from within a video source.

                - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

                  - **ProgramId** *(integer) --* Selects a specific program from within a
                  multi-program transport stream. If the program doesn't exist, the first program
                  within the transport stream will be selected by default.

      - **InputSpecification** *(dict) --* Placeholder documentation for InputSpecification

        - **Codec** *(string) --* Input codec

        - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

        - **Resolution** *(string) --* Input resolution, categorized coarsely

      - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.

      - **Name** *(string) --* The name of the channel. (user-mutable)

      - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.

        - *(dict) --* Runtime details of a pipeline when a channel is running.

          - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
          currently being ingested by this pipeline.

          - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
          action that occurred most recently and that resulted in the switch to the current input
          attachment for this pipeline.

          - **PipelineId** *(string) --* Pipeline ID

      - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.

      - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running
      the Channel.

      - **State** *(string) --* Placeholder documentation for ChannelState

      - **Tags** *(dict) --* A collection of key-value pairs.

        - *(string) --* Placeholder documentation for __string

          - *(string) --* Placeholder documentation for __string
    """


_ClientCreateInputDestinationsTypeDef = TypedDict(
    "_ClientCreateInputDestinationsTypeDef", {"StreamName": str}, total=False
)


class ClientCreateInputDestinationsTypeDef(_ClientCreateInputDestinationsTypeDef):
    """
    Type definition for `ClientCreateInput` `Destinations`

    - **StreamName** *(string) --* A unique name for the location the RTMP stream is being pushed
    to.
    """


_ClientCreateInputResponseInputDestinationsVpcTypeDef = TypedDict(
    "_ClientCreateInputResponseInputDestinationsVpcTypeDef",
    {"AvailabilityZone": str, "NetworkInterfaceId": str},
    total=False,
)


class ClientCreateInputResponseInputDestinationsVpcTypeDef(
    _ClientCreateInputResponseInputDestinationsVpcTypeDef
):
    """
    Type definition for `ClientCreateInputResponseInputDestinations` `Vpc`

    - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

    - **NetworkInterfaceId** *(string) --* The network interface ID of the Input
    destination in the VPC.
    """


_ClientCreateInputResponseInputDestinationsTypeDef = TypedDict(
    "_ClientCreateInputResponseInputDestinationsTypeDef",
    {
        "Ip": str,
        "Port": str,
        "Url": str,
        "Vpc": ClientCreateInputResponseInputDestinationsVpcTypeDef,
    },
    total=False,
)


class ClientCreateInputResponseInputDestinationsTypeDef(
    _ClientCreateInputResponseInputDestinationsTypeDef
):
    """
    Type definition for `ClientCreateInputResponseInput` `Destinations`

    - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains
    fixed for the lifetime of the input.

    - **Port** *(string) --* The port number for the input.

    - **Url** *(string) --* This represents the endpoint that the customer stream will be
    pushed to.

    - **Vpc** *(dict) --* The properties for a VPC type input destination.

      - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

      - **NetworkInterfaceId** *(string) --* The network interface ID of the Input
      destination in the VPC.
    """


_ClientCreateInputResponseInputMediaConnectFlowsTypeDef = TypedDict(
    "_ClientCreateInputResponseInputMediaConnectFlowsTypeDef",
    {"FlowArn": str},
    total=False,
)


class ClientCreateInputResponseInputMediaConnectFlowsTypeDef(
    _ClientCreateInputResponseInputMediaConnectFlowsTypeDef
):
    """
    Type definition for `ClientCreateInputResponseInput` `MediaConnectFlows`

    - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a
    source.
    """


_ClientCreateInputResponseInputSourcesTypeDef = TypedDict(
    "_ClientCreateInputResponseInputSourcesTypeDef",
    {"PasswordParam": str, "Url": str, "Username": str},
    total=False,
)


class ClientCreateInputResponseInputSourcesTypeDef(
    _ClientCreateInputResponseInputSourcesTypeDef
):
    """
    Type definition for `ClientCreateInputResponseInput` `Sources`

    - **PasswordParam** *(string) --* The key used to extract the password from EC2 Parameter
    store.

    - **Url** *(string) --* This represents the customer's source URL where stream is pulled
    from.

    - **Username** *(string) --* The username for the input source.
    """


_ClientCreateInputResponseInputTypeDef = TypedDict(
    "_ClientCreateInputResponseInputTypeDef",
    {
        "Arn": str,
        "AttachedChannels": List[Any],
        "Destinations": List[ClientCreateInputResponseInputDestinationsTypeDef],
        "Id": str,
        "InputClass": str,
        "InputSourceType": str,
        "MediaConnectFlows": List[
            ClientCreateInputResponseInputMediaConnectFlowsTypeDef
        ],
        "Name": str,
        "RoleArn": str,
        "SecurityGroups": List[Any],
        "Sources": List[ClientCreateInputResponseInputSourcesTypeDef],
        "State": str,
        "Tags": Dict[str, str],
        "Type": str,
    },
    total=False,
)


class ClientCreateInputResponseInputTypeDef(_ClientCreateInputResponseInputTypeDef):
    """
    Type definition for `ClientCreateInputResponse` `Input`

    - **Arn** *(string) --* The Unique ARN of the input (generated, immutable).

    - **AttachedChannels** *(list) --* A list of channel IDs that that input is attached to
    (currently an input can only be attached to one channel).

      - *(string) --* Placeholder documentation for __string

    - **Destinations** *(list) --* A list of the destinations of the input (PUSH-type).

      - *(dict) --* The settings for a PUSH type input.

        - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains
        fixed for the lifetime of the input.

        - **Port** *(string) --* The port number for the input.

        - **Url** *(string) --* This represents the endpoint that the customer stream will be
        pushed to.

        - **Vpc** *(dict) --* The properties for a VPC type input destination.

          - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

          - **NetworkInterfaceId** *(string) --* The network interface ID of the Input
          destination in the VPC.

    - **Id** *(string) --* The generated ID of the input (unique for user account, immutable).

    - **InputClass** *(string) --* STANDARD - MediaLive expects two sources to be connected to
    this input. If the channel is also STANDARD, both sources will be ingested. If the channel is
    SINGLE_PIPELINE, only the first source will be ingested; the second source will always be
    ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one source to
    this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If the
    ChannelClass is STANDARD, this value is not valid because the channel requires two sources in
    the input.

    - **InputSourceType** *(string) --* Certain pull input sources can be dynamic, meaning that
    they can have their URL's dynamically changes during input switch actions. Presently, this
    functionality only works with MP4_FILE inputs.

    - **MediaConnectFlows** *(list) --* A list of MediaConnect Flows for this input.

      - *(dict) --* The settings for a MediaConnect Flow.

        - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a
        source.

    - **Name** *(string) --* The user-assigned name (This is a mutable value).

    - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role this input assumes
    during and after creation.

    - **SecurityGroups** *(list) --* A list of IDs for all the Input Security Groups attached to
    the input.

      - *(string) --* Placeholder documentation for __string

    - **Sources** *(list) --* A list of the sources of the input (PULL-type).

      - *(dict) --* The settings for a PULL type input.

        - **PasswordParam** *(string) --* The key used to extract the password from EC2 Parameter
        store.

        - **Url** *(string) --* This represents the customer's source URL where stream is pulled
        from.

        - **Username** *(string) --* The username for the input source.

    - **State** *(string) --* Placeholder documentation for InputState

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string

    - **Type** *(string) --* Placeholder documentation for InputType
    """


_ClientCreateInputResponseTypeDef = TypedDict(
    "_ClientCreateInputResponseTypeDef",
    {"Input": ClientCreateInputResponseInputTypeDef},
    total=False,
)


class ClientCreateInputResponseTypeDef(_ClientCreateInputResponseTypeDef):
    """
    Type definition for `ClientCreateInput` `Response`

    - **Input** *(dict) --* Placeholder documentation for Input

      - **Arn** *(string) --* The Unique ARN of the input (generated, immutable).

      - **AttachedChannels** *(list) --* A list of channel IDs that that input is attached to
      (currently an input can only be attached to one channel).

        - *(string) --* Placeholder documentation for __string

      - **Destinations** *(list) --* A list of the destinations of the input (PUSH-type).

        - *(dict) --* The settings for a PUSH type input.

          - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains
          fixed for the lifetime of the input.

          - **Port** *(string) --* The port number for the input.

          - **Url** *(string) --* This represents the endpoint that the customer stream will be
          pushed to.

          - **Vpc** *(dict) --* The properties for a VPC type input destination.

            - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

            - **NetworkInterfaceId** *(string) --* The network interface ID of the Input
            destination in the VPC.

      - **Id** *(string) --* The generated ID of the input (unique for user account, immutable).

      - **InputClass** *(string) --* STANDARD - MediaLive expects two sources to be connected to
      this input. If the channel is also STANDARD, both sources will be ingested. If the channel is
      SINGLE_PIPELINE, only the first source will be ingested; the second source will always be
      ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one source to
      this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If the
      ChannelClass is STANDARD, this value is not valid because the channel requires two sources in
      the input.

      - **InputSourceType** *(string) --* Certain pull input sources can be dynamic, meaning that
      they can have their URL's dynamically changes during input switch actions. Presently, this
      functionality only works with MP4_FILE inputs.

      - **MediaConnectFlows** *(list) --* A list of MediaConnect Flows for this input.

        - *(dict) --* The settings for a MediaConnect Flow.

          - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a
          source.

      - **Name** *(string) --* The user-assigned name (This is a mutable value).

      - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role this input assumes
      during and after creation.

      - **SecurityGroups** *(list) --* A list of IDs for all the Input Security Groups attached to
      the input.

        - *(string) --* Placeholder documentation for __string

      - **Sources** *(list) --* A list of the sources of the input (PULL-type).

        - *(dict) --* The settings for a PULL type input.

          - **PasswordParam** *(string) --* The key used to extract the password from EC2 Parameter
          store.

          - **Url** *(string) --* This represents the customer's source URL where stream is pulled
          from.

          - **Username** *(string) --* The username for the input source.

      - **State** *(string) --* Placeholder documentation for InputState

      - **Tags** *(dict) --* A collection of key-value pairs.

        - *(string) --* Placeholder documentation for __string

          - *(string) --* Placeholder documentation for __string

      - **Type** *(string) --* Placeholder documentation for InputType
    """


_ClientCreateInputSecurityGroupResponseSecurityGroupWhitelistRulesTypeDef = TypedDict(
    "_ClientCreateInputSecurityGroupResponseSecurityGroupWhitelistRulesTypeDef",
    {"Cidr": str},
    total=False,
)


class ClientCreateInputSecurityGroupResponseSecurityGroupWhitelistRulesTypeDef(
    _ClientCreateInputSecurityGroupResponseSecurityGroupWhitelistRulesTypeDef
):
    """
    Type definition for `ClientCreateInputSecurityGroupResponseSecurityGroup` `WhitelistRules`

    - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
    """


_ClientCreateInputSecurityGroupResponseSecurityGroupTypeDef = TypedDict(
    "_ClientCreateInputSecurityGroupResponseSecurityGroupTypeDef",
    {
        "Arn": str,
        "Id": str,
        "Inputs": List[str],
        "State": str,
        "Tags": Dict[str, str],
        "WhitelistRules": List[
            ClientCreateInputSecurityGroupResponseSecurityGroupWhitelistRulesTypeDef
        ],
    },
    total=False,
)


class ClientCreateInputSecurityGroupResponseSecurityGroupTypeDef(
    _ClientCreateInputSecurityGroupResponseSecurityGroupTypeDef
):
    """
    Type definition for `ClientCreateInputSecurityGroupResponse` `SecurityGroup`

    - **Arn** *(string) --* Unique ARN of Input Security Group

    - **Id** *(string) --* The Id of the Input Security Group

    - **Inputs** *(list) --* The list of inputs currently using this Input Security Group.

      - *(string) --* Placeholder documentation for __string

    - **State** *(string) --* The current state of the Input Security Group.

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string

    - **WhitelistRules** *(list) --* Whitelist rules and their sync status

      - *(dict) --* Whitelist rule

        - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
    """


_ClientCreateInputSecurityGroupResponseTypeDef = TypedDict(
    "_ClientCreateInputSecurityGroupResponseTypeDef",
    {"SecurityGroup": ClientCreateInputSecurityGroupResponseSecurityGroupTypeDef},
    total=False,
)


class ClientCreateInputSecurityGroupResponseTypeDef(
    _ClientCreateInputSecurityGroupResponseTypeDef
):
    """
    Type definition for `ClientCreateInputSecurityGroup` `Response`

    - **SecurityGroup** *(dict) --* An Input Security Group

      - **Arn** *(string) --* Unique ARN of Input Security Group

      - **Id** *(string) --* The Id of the Input Security Group

      - **Inputs** *(list) --* The list of inputs currently using this Input Security Group.

        - *(string) --* Placeholder documentation for __string

      - **State** *(string) --* The current state of the Input Security Group.

      - **Tags** *(dict) --* A collection of key-value pairs.

        - *(string) --* Placeholder documentation for __string

          - *(string) --* Placeholder documentation for __string

      - **WhitelistRules** *(list) --* Whitelist rules and their sync status

        - *(dict) --* Whitelist rule

          - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
    """


_ClientCreateInputSecurityGroupWhitelistRulesTypeDef = TypedDict(
    "_ClientCreateInputSecurityGroupWhitelistRulesTypeDef", {"Cidr": str}, total=False
)


class ClientCreateInputSecurityGroupWhitelistRulesTypeDef(
    _ClientCreateInputSecurityGroupWhitelistRulesTypeDef
):
    """
    Type definition for `ClientCreateInputSecurityGroup` `WhitelistRules`

    - **Cidr** *(string) --* The IPv4 CIDR to whitelist.
    """


_ClientDeleteChannelResponseEgressEndpointsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEgressEndpointsTypeDef", {"SourceIp": str}, total=False
)


class ClientDeleteChannelResponseEgressEndpointsTypeDef(
    _ClientDeleteChannelResponseEgressEndpointsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponse` `EgressEndpoints`

    - **SourceIp** *(string) --* Public IP of where a channel's output comes from
    """


_ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef",
    {"Algorithm": str, "AlgorithmControl": str, "TargetLkfs": float},
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettingsAudioDescriptions` `AudioNormalizationSettings`

    - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
    to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

    - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
    corrected using the chosen algorithm. If set to measureOnly, the audio will be measured
    but not adjusted.

    - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
    entered, a default value will be used according to the chosen algorithm. The CALM Act
    (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
    recommends a target of -23 LKFS.
    """


_ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef",
    {
        "Bitrate": float,
        "CodingMode": str,
        "InputType": str,
        "Profile": str,
        "RateControlMode": str,
        "RawFormat": str,
        "SampleRate": float,
        "Spec": str,
        "VbrQuality": str,
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettings` `AacSettings`

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
    rate control mode and profile.

    - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
    depend on rate control mode and profile. The adReceiverMix setting receives a stereo
    description plus control track and emits a mono AAC encode of the description track,
    with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

    - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
    pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
    (audioType) will be set to 3, which signals to downstream systems that this stream
    contains "broadcaster mixed AD". Note that the input received by the encoder must
    contain pre-mixed audio; the encoder does not perform the mixing. The values in
    audioTypeControl and audioType (in AudioDescription) are ignored when set to
    broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
    + AD.

    - **Profile** *(string) --* AAC Profile.

    - **RateControlMode** *(string) --* Rate Control Mode.

    - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

    - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
    mode and profile.

    - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
    MPEG-2 Transport Stream containers.

    - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
    VBR.
    """


_ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef",
    {
        "Bitrate": float,
        "BitstreamMode": str,
        "CodingMode": str,
        "Dialnorm": int,
        "DrcProfile": str,
        "LfeFilter": str,
        "MetadataControl": str,
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettings` `Ac3Settings`

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
    the coding mode.

    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
    emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

    - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
    channels.

    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
    audio is Dolby Digital, dialnorm will be passed through.

    - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
    signaling to the output bitstream as defined in the Dolby Digital specification.

    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
    the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

    - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
    be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
    audio was not supplied from one of these streams, then the static metadata settings
    will be used.
    """


_ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef",
    {
        "AttenuationControl": str,
        "Bitrate": float,
        "BitstreamMode": str,
        "CodingMode": str,
        "DcFilter": str,
        "Dialnorm": int,
        "DrcLine": str,
        "DrcRf": str,
        "LfeControl": str,
        "LfeFilter": str,
        "LoRoCenterMixLevel": float,
        "LoRoSurroundMixLevel": float,
        "LtRtCenterMixLevel": float,
        "LtRtSurroundMixLevel": float,
        "MetadataControl": str,
        "PassthroughControl": str,
        "PhaseControl": str,
        "StereoDownmix": str,
        "SurroundExMode": str,
        "SurroundMode": str,
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettings` `Eac3Settings`

    - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
    attenuation to the surround channels. Only used for 3/2 coding mode.

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
    the coding mode.

    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
    emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

    - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
    channels.

    - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
    all input channels.

    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
    audio is Dolby Digital Plus, dialnorm will be passed through.

    - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

    - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
    ensures that the instantaneous signal peaks do not exceed specified levels.

    - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
    LFE channel

    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
    the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

    - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
    used for 3/2 coding mode.

    - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
    used for 3/2 coding mode.

    - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
    used for 3/2 coding mode.

    - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
    Only used for 3/2 coding mode.

    - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
    sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
    was not supplied from one of these streams, then the static metadata settings will be
    used.

    - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
    be passed through if it is present on the input. This detection is dynamic over the
    life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
    have a consistent DD+ output as the system alternates between passthrough and
    encoding.

    - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
    phase shift to the surround channels. Only used for 3/2 coding mode.

    - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
    mode.

    - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
    center back surround channel is matrix encoded into the left and right surround
    channels.

    - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
    is matrix encoded into the two channels.
    """


_ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef",
    {"Bitrate": float, "CodingMode": str, "SampleRate": float},
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettings` `Mp2Settings`

    - **Bitrate** *(float) --* Average bitrate in bits/second.

    - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
    codingMode10 (for mono) or codingMode20 (for stereo).

    - **SampleRate** *(float) --* Sample rate in Hz.
    """


_ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef",
    {
        "AacSettings": ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef,
        "Ac3Settings": ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef,
        "Eac3Settings": ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef,
        "Mp2Settings": ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef,
        "PassThroughSettings": Dict[str, Any],
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettingsAudioDescriptions` `CodecSettings`

    - **AacSettings** *(dict) --* Aac Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
      rate control mode and profile.

      - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
      depend on rate control mode and profile. The adReceiverMix setting receives a stereo
      description plus control track and emits a mono AAC encode of the description track,
      with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

      - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
      pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
      (audioType) will be set to 3, which signals to downstream systems that this stream
      contains "broadcaster mixed AD". Note that the input received by the encoder must
      contain pre-mixed audio; the encoder does not perform the mixing. The values in
      audioTypeControl and audioType (in AudioDescription) are ignored when set to
      broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
      + AD.

      - **Profile** *(string) --* AAC Profile.

      - **RateControlMode** *(string) --* Rate Control Mode.

      - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

      - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
      mode and profile.

      - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
      MPEG-2 Transport Stream containers.

      - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
      VBR.

    - **Ac3Settings** *(dict) --* Ac3 Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
      the coding mode.

      - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
      emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

      - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
      channels.

      - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
      audio is Dolby Digital, dialnorm will be passed through.

      - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
      signaling to the output bitstream as defined in the Dolby Digital specification.

      - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
      the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

      - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
      be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
      audio was not supplied from one of these streams, then the static metadata settings
      will be used.

    - **Eac3Settings** *(dict) --* Eac3 Settings

      - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
      attenuation to the surround channels. Only used for 3/2 coding mode.

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
      the coding mode.

      - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
      emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

      - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
      channels.

      - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
      all input channels.

      - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
      audio is Dolby Digital Plus, dialnorm will be passed through.

      - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

      - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
      ensures that the instantaneous signal peaks do not exceed specified levels.

      - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
      LFE channel

      - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
      the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

      - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
      used for 3/2 coding mode.

      - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
      used for 3/2 coding mode.

      - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
      used for 3/2 coding mode.

      - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
      Only used for 3/2 coding mode.

      - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
      sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
      was not supplied from one of these streams, then the static metadata settings will be
      used.

      - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
      be passed through if it is present on the input. This detection is dynamic over the
      life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
      have a consistent DD+ output as the system alternates between passthrough and
      encoding.

      - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
      phase shift to the surround channels. Only used for 3/2 coding mode.

      - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
      mode.

      - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
      center back surround channel is matrix encoded into the left and right surround
      channels.

      - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
      is matrix encoded into the two channels.

    - **Mp2Settings** *(dict) --* Mp2 Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second.

      - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
      codingMode10 (for mono) or codingMode20 (for stereo).

      - **SampleRate** *(float) --* Sample rate in Hz.

    - **PassThroughSettings** *(dict) --* Pass Through Settings
    """


_ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsTypeDef",
    {
        "AudioNormalizationSettings": ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef,
        "AudioSelectorName": str,
        "AudioType": str,
        "AudioTypeControl": str,
        "CodecSettings": ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef,
        "LanguageCode": str,
        "LanguageCodeControl": str,
        "Name": str,
        "RemixSettings": Dict[str, Any],
        "StreamName": str,
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettings` `AudioDescriptions`

    - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

      - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
      to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

      - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
      corrected using the chosen algorithm. If set to measureOnly, the audio will be measured
      but not adjusted.

      - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
      entered, a default value will be used according to the chosen algorithm. The CALM Act
      (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
      recommends a target of -23 LKFS.

    - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
    for this AudioDescription.

    - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
    values for audioType are defined in ISO-IEC 13818-1.

    - **AudioTypeControl** *(string) --* Determines how audio type is determined.
    followInput: If the input contains an ISO 639 audioType, then that value is passed
    through to the output. If the input contains no ISO 639 audioType, the value in Audio
    Type is included in the output. useConfigured: The value in Audio Type is included in the
    output. Note that this field and audioType are both ignored if inputType is
    broadcasterMixedAd.

    - **CodecSettings** *(dict) --* Audio codec settings.

      - **AacSettings** *(dict) --* Aac Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
        rate control mode and profile.

        - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
        depend on rate control mode and profile. The adReceiverMix setting receives a stereo
        description plus control track and emits a mono AAC encode of the description track,
        with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

        - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
        pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
        (audioType) will be set to 3, which signals to downstream systems that this stream
        contains "broadcaster mixed AD". Note that the input received by the encoder must
        contain pre-mixed audio; the encoder does not perform the mixing. The values in
        audioTypeControl and audioType (in AudioDescription) are ignored when set to
        broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
        + AD.

        - **Profile** *(string) --* AAC Profile.

        - **RateControlMode** *(string) --* Rate Control Mode.

        - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

        - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
        mode and profile.

        - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
        MPEG-2 Transport Stream containers.

        - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
        VBR.

      - **Ac3Settings** *(dict) --* Ac3 Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
        the coding mode.

        - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
        emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

        - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
        channels.

        - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
        audio is Dolby Digital, dialnorm will be passed through.

        - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
        signaling to the output bitstream as defined in the Dolby Digital specification.

        - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
        the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

        - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
        be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
        audio was not supplied from one of these streams, then the static metadata settings
        will be used.

      - **Eac3Settings** *(dict) --* Eac3 Settings

        - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
        attenuation to the surround channels. Only used for 3/2 coding mode.

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
        the coding mode.

        - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
        emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

        - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
        channels.

        - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
        all input channels.

        - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
        audio is Dolby Digital Plus, dialnorm will be passed through.

        - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

        - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
        ensures that the instantaneous signal peaks do not exceed specified levels.

        - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
        LFE channel

        - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
        the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

        - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
        used for 3/2 coding mode.

        - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
        used for 3/2 coding mode.

        - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
        used for 3/2 coding mode.

        - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
        Only used for 3/2 coding mode.

        - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
        sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
        was not supplied from one of these streams, then the static metadata settings will be
        used.

        - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
        be passed through if it is present on the input. This detection is dynamic over the
        life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
        have a consistent DD+ output as the system alternates between passthrough and
        encoding.

        - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
        phase shift to the surround channels. Only used for 3/2 coding mode.

        - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
        mode.

        - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
        center back surround channel is matrix encoded into the left and right surround
        channels.

        - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
        is matrix encoded into the two channels.

      - **Mp2Settings** *(dict) --* Mp2 Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second.

        - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
        codingMode10 (for mono) or codingMode20 (for stereo).

        - **SampleRate** *(float) --* Sample rate in Hz.

      - **PassThroughSettings** *(dict) --* Pass Through Settings

    - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
    used if languageControlMode is useConfigured, or there is no ISO 639 language code
    specified in the input.

    - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
    language code of the output to follow the ISO 639 language code of the input. The
    languageCode will be used when useConfigured is set, or when followInput is selected but
    there is no ISO 639 language code specified by the input.

    - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to
    uniquely identify this AudioDescription. Description names should be unique within this
    Live Event.

    - **RemixSettings** *(dict) --* Settings that control how input audio channels are
    remixed into the output audio channels.

      - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
      appropriate gain adjustments.

        - *(dict) --* Audio Channel Mapping

          - **InputChannelLevels** *(list) --* Indices and gain values for each input channel
          that should be remixed into this output channel.

            - *(dict) --* Input Channel Level

              - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values
              are within the range from -60 (mute) and 6 dB.

              - **InputChannel** *(integer) --* The index of the input channel used as a
              source.

          - **OutputChannel** *(integer) --* The index of the output channel being produced.

      - **ChannelsIn** *(integer) --* Number of input channels to be used.

      - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
      values: 1, 2, 4, 6, 8

    - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
    name displayed by the player (eg. English, or Director Commentary).
    """


_ClientDeleteChannelResponseEncoderSettingsAvailBlankingTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsAvailBlankingTypeDef",
    {"AvailBlankingImage": Dict[str, Any], "State": str},
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsAvailBlankingTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsAvailBlankingTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettings` `AvailBlanking`

    - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
    black. Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be
    blanked when insertion metadata is added.
    """


_ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef",
    {
        "AdAvailOffset": int,
        "NoRegionalBlackoutFlag": str,
        "WebDeliveryAllowedFlag": str,
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettings` `Scte35SpliceInsert`

    - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
    added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
    messages and does not apply to OOB messages.

    - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
    noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
    webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef",
    {
        "AdAvailOffset": int,
        "NoRegionalBlackoutFlag": str,
        "WebDeliveryAllowedFlag": str,
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettings` `Scte35TimeSignalApos`

    - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
    added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
    messages and does not apply to OOB messages.

    - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
    noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
    webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef",
    {
        "Scte35SpliceInsert": ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef,
        "Scte35TimeSignalApos": ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef,
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettingsAvailConfiguration` `AvailSettings`

    - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

      - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
      added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
      messages and does not apply to OOB messages.

      - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
      noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
      webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

      - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
      added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
      messages and does not apply to OOB messages.

      - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
      noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
      webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientDeleteChannelResponseEncoderSettingsAvailConfigurationTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsAvailConfigurationTypeDef",
    {
        "AvailSettings": ClientDeleteChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsAvailConfigurationTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsAvailConfigurationTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettings` `AvailConfiguration`

    - **AvailSettings** *(dict) --* Ad avail settings.

      - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

        - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
        added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
        messages and does not apply to OOB messages.

        - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
        noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
        webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

        - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
        added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
        messages and does not apply to OOB messages.

        - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
        noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
        webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientDeleteChannelResponseEncoderSettingsBlackoutSlateTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsBlackoutSlateTypeDef",
    {
        "BlackoutSlateImage": Dict[str, Any],
        "NetworkEndBlackout": str,
        "NetworkEndBlackoutImage": Dict[str, Any],
        "NetworkId": str,
        "State": str,
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsBlackoutSlateTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsBlackoutSlateTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettings` `BlackoutSlate`

    - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid
    black. Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
    the video, audio, and captions, and raise the "Network Blackout Image" slate when an
    SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted
    when the Network Start Segmentation Descriptor is encountered. The Network End and Network
    Start descriptors must contain a network ID that matches the value entered in "Network ID".

    - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout
    image. Image will be scaled to fill the entire output raster.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
    "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be
    blanked when indicated by program metadata.
    """


_ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef",
    {"CaptureInterval": int},
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettings` `FrameCaptureSettings`

    - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
    for inclusion in the output. For example, "10" means capture a frame every 10 seconds.
    """


_ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef",
    {
        "ColorSpacePassthroughSettings": Dict[str, Any],
        "Rec601Settings": Dict,
        "Rec709Settings": Dict[str, Any],
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264Settings` `ColorSpaceSettings`

    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
    conversion to the output

    - **Rec601Settings** *(dict) --* Rec601 Settings

    - **Rec709Settings** *(dict) --* Rec709 Settings
    """


_ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef",
    {
        "AdaptiveQuantization": str,
        "AfdSignaling": str,
        "Bitrate": int,
        "BufFillPct": int,
        "BufSize": int,
        "ColorMetadata": str,
        "ColorSpaceSettings": ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef,
        "EntropyEncoding": str,
        "FixedAfd": str,
        "FlickerAq": str,
        "FramerateControl": str,
        "FramerateDenominator": int,
        "FramerateNumerator": int,
        "GopBReference": str,
        "GopClosedCadence": int,
        "GopNumBFrames": int,
        "GopSize": float,
        "GopSizeUnits": str,
        "Level": str,
        "LookAheadRateControl": str,
        "MaxBitrate": int,
        "MinIInterval": int,
        "NumRefFrames": int,
        "ParControl": str,
        "ParDenominator": int,
        "ParNumerator": int,
        "Profile": str,
        "QvbrQualityLevel": int,
        "RateControlMode": str,
        "ScanType": str,
        "SceneChangeDetect": str,
        "Slices": int,
        "Softness": int,
        "SpatialAq": str,
        "SubgopLength": str,
        "Syntax": str,
        "TemporalAq": str,
        "TimecodeInsertion": str,
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettings` `H264Settings`

    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
    quantizers to vary to improve visual quality.

    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
    output stream. If afdSignaling is "auto", the system will try to preserve the input
    AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
    value will be the value configured in the fixedAfd parameter.

    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
    control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
    output must have a unique value when its bitrate is rounded down to the nearest
    multiple of 1000.

    - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
    filled (HRD buffer model).

    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

    - **ColorSpaceSettings** *(dict) --* Color Space settings

      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
      conversion to the output

      - **Rec601Settings** *(dict) --* Rec601 Settings

      - **Rec709Settings** *(dict) --* Rec709 Settings

    - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
    or High profile) or cavlc.

    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
    the output stream. Only valid when afdSignaling is set to 'Fixed'.

    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
    frame to reduce flicker or 'pop' on I-frames.

    - **FramerateControl** *(string) --* This field indicates how the output video frame
    rate is specified. If "specified" is selected then the output video frame rate is
    determined by framerateNumerator and framerateDenominator, else if
    "initializeFromSource" is selected then the output video frame rate will be set equal
    to the input video frame rate of the first input.

    - **FramerateDenominator** *(integer) --* Framerate denominator.

    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
    fraction, e.g. 24000 / 1001 = 23.976 fps.

    - **GopBReference** *(string) --* Documentation update needed

    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
    applications, it is recommended that this be set to 1 so a decoder joining mid-stream
    will receive an IDR frame as quickly as possible. Setting this value to 0 will break
    output segmenting.

    - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
    seconds per gopSizeUnits. Must be greater than zero.

    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
    seconds. If seconds the system will convert the gopSize into a frame count at run
    time.

    - **Level** *(string) --* H.264 Level.

    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
    decrease latency and memory usage, while high can produce better quality for certain
    content.

    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
    Set the maximum bitrate in order to accommodate expected spikes in the complexity of
    the video.

    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
    enabled. Enforces separation between repeated (cadence) I-frames and I-frames
    inserted by Scene Change Detection. If a scene change I-frame is within I-interval
    frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
    I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
    normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
    Min-I-interval - 1

    - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
    use more than requested if using B-frames and/or interlaced encoding.

    - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
    is specified. If "specified" is selected then the output video pixel aspect ratio is
    determined by parNumerator and parDenominator, else if "initializeFromSource" is
    selected then the output pixsel aspect ratio will be set equal to the input video
    pixel aspect ratio of the first input.

    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

    - **Profile** *(string) --* H.264 Profile.

    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
    encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
    quality level field and Max bitrate field that suit your most important viewing
    devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
    bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
    Quality level: 6. Max bitrate: 1M to 1.5M

    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
    specified quality level except when it is constrained by the maximum bitrate.
    Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
    depending on the video complexity. Recommended instead of QVBR if you want to
    maintain a specific average bitrate over the duration of the channel. CBR: Quality
    varies, depending on the video complexity. Recommended only if you distribute your
    assets to devices that cannot handle variable bitrates.

    - **ScanType** *(string) --* Sets the scan type of the output to progressive or
    top-field-first interlaced.

    - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
    when scene change is detected. - Off: does not force an I-frame when scene change is
    detected.

    - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
    to the number of macroblock rows for progressive pictures, and less than or equal to
    half the number of macroblock rows for interlaced pictures. This field is optional;
    when no value is specified the encoder will choose the number of slices based on
    encode resolution.

    - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
    reduce high-frequency content in the encoded image.

    - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
    frame based on spatial variation of content complexity.

    - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
    sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
    improve visual quality.

    - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

    - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
    frame based on temporal variation of content complexity.

    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
    into the video elementary stream. - 'disabled': Do not include timecodes -
    'picTimingSei': Pass through picture timing SEI messages from the source specified in
    Timecode Config
    """


_ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef",
    {"MaxCll": int, "MaxFall": int},
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings` `Hdr10Settings`

    - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
    defining the maximum light level, in nits, of any single pixel within an encoded
    HDR video stream or file.

    - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
    metadata value defining the maximum average light level, in nits, for any single
    frame within an encoded HDR video stream or file.
    """


_ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef",
    {
        "ColorSpacePassthroughSettings": Dict[str, Any],
        "Hdr10Settings": ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef,
        "Rec601Settings": Dict,
        "Rec709Settings": Dict[str, Any],
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265Settings` `ColorSpaceSettings`

    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
    conversion to the output

    - **Hdr10Settings** *(dict) --* Hdr10 Settings

      - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
      defining the maximum light level, in nits, of any single pixel within an encoded
      HDR video stream or file.

      - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
      metadata value defining the maximum average light level, in nits, for any single
      frame within an encoded HDR video stream or file.

    - **Rec601Settings** *(dict) --* Rec601 Settings

    - **Rec709Settings** *(dict) --* Rec709 Settings
    """


_ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef",
    {
        "AdaptiveQuantization": str,
        "AfdSignaling": str,
        "AlternativeTransferFunction": str,
        "Bitrate": int,
        "BufSize": int,
        "ColorMetadata": str,
        "ColorSpaceSettings": ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef,
        "FixedAfd": str,
        "FlickerAq": str,
        "FramerateDenominator": int,
        "FramerateNumerator": int,
        "GopClosedCadence": int,
        "GopSize": float,
        "GopSizeUnits": str,
        "Level": str,
        "LookAheadRateControl": str,
        "MaxBitrate": int,
        "MinIInterval": int,
        "ParDenominator": int,
        "ParNumerator": int,
        "Profile": str,
        "QvbrQualityLevel": int,
        "RateControlMode": str,
        "ScanType": str,
        "SceneChangeDetect": str,
        "Slices": int,
        "Tier": str,
        "TimecodeInsertion": str,
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettings` `H265Settings`

    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
    quantizers to vary to improve visual quality.

    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
    output stream. If afdSignaling is "auto", the system will try to preserve the input
    AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
    value will be the value configured in the fixedAfd parameter.

    - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
    Alternative Transfer Function SEI message to support backwards compatibility with
    non-HDR decoders and displays.

    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
    control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
    output must have a unique value when its bitrate is rounded down to the nearest
    multiple of 1000.

    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

    - **ColorSpaceSettings** *(dict) --* Color Space settings

      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
      conversion to the output

      - **Hdr10Settings** *(dict) --* Hdr10 Settings

        - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
        defining the maximum light level, in nits, of any single pixel within an encoded
        HDR video stream or file.

        - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
        metadata value defining the maximum average light level, in nits, for any single
        frame within an encoded HDR video stream or file.

      - **Rec601Settings** *(dict) --* Rec601 Settings

      - **Rec709Settings** *(dict) --* Rec709 Settings

    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
    the output stream. Only valid when afdSignaling is set to 'Fixed'.

    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
    frame to reduce flicker or 'pop' on I-frames.

    - **FramerateDenominator** *(integer) --* Framerate denominator.

    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
    fraction, e.g. 24000 / 1001 = 23.976 fps.

    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
    applications, it is recommended that this be set to 1 so a decoder joining mid-stream
    will receive an IDR frame as quickly as possible. Setting this value to 0 will break
    output segmenting.

    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
    seconds per gopSizeUnits. Must be greater than zero.

    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
    seconds. If seconds the system will convert the gopSize into a frame count at run
    time.

    - **Level** *(string) --* H.265 Level.

    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
    decrease latency and memory usage, while high can produce better quality for certain
    content.

    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
    enabled. Enforces separation between repeated (cadence) I-frames and I-frames
    inserted by Scene Change Detection. If a scene change I-frame is within I-interval
    frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
    I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
    normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
    Min-I-interval - 1

    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

    - **Profile** *(string) --* H.265 Profile.

    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
    encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
    quality level field and Max bitrate field that suit your most important viewing
    devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
    bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
    Quality level: 6. Max bitrate: 1M to 1.5M

    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
    specified quality level except when it is constrained by the maximum bitrate.
    Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
    on the video complexity. Recommended only if you distribute your assets to devices
    that cannot handle variable bitrates.

    - **ScanType** *(string) --* Sets the scan type of the output to progressive or
    top-field-first interlaced.

    - **SceneChangeDetect** *(string) --* Scene change detection.

    - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
    to the number of macroblock rows for progressive pictures, and less than or equal to
    half the number of macroblock rows for interlaced pictures. This field is optional;
    when no value is specified the encoder will choose the number of slices based on
    encode resolution.

    - **Tier** *(string) --* H.265 Tier.

    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
    into the video elementary stream. - 'disabled': Do not include timecodes -
    'picTimingSei': Pass through picture timing SEI messages from the source specified in
    Timecode Config
    """


_ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef",
    {
        "FrameCaptureSettings": ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef,
        "H264Settings": ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef,
        "H265Settings": ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef,
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettingsVideoDescriptions` `CodecSettings`

    - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

      - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
      for inclusion in the output. For example, "10" means capture a frame every 10 seconds.

    - **H264Settings** *(dict) --* H264 Settings

      - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
      quantizers to vary to improve visual quality.

      - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
      output stream. If afdSignaling is "auto", the system will try to preserve the input
      AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
      value will be the value configured in the fixedAfd parameter.

      - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
      control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
      output must have a unique value when its bitrate is rounded down to the nearest
      multiple of 1000.

      - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
      filled (HRD buffer model).

      - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

      - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

      - **ColorSpaceSettings** *(dict) --* Color Space settings

        - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
        conversion to the output

        - **Rec601Settings** *(dict) --* Rec601 Settings

        - **Rec709Settings** *(dict) --* Rec709 Settings

      - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
      or High profile) or cavlc.

      - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
      the output stream. Only valid when afdSignaling is set to 'Fixed'.

      - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
      frame to reduce flicker or 'pop' on I-frames.

      - **FramerateControl** *(string) --* This field indicates how the output video frame
      rate is specified. If "specified" is selected then the output video frame rate is
      determined by framerateNumerator and framerateDenominator, else if
      "initializeFromSource" is selected then the output video frame rate will be set equal
      to the input video frame rate of the first input.

      - **FramerateDenominator** *(integer) --* Framerate denominator.

      - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
      fraction, e.g. 24000 / 1001 = 23.976 fps.

      - **GopBReference** *(string) --* Documentation update needed

      - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
      applications, it is recommended that this be set to 1 so a decoder joining mid-stream
      will receive an IDR frame as quickly as possible. Setting this value to 0 will break
      output segmenting.

      - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

      - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
      seconds per gopSizeUnits. Must be greater than zero.

      - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
      seconds. If seconds the system will convert the gopSize into a frame count at run
      time.

      - **Level** *(string) --* H.264 Level.

      - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
      decrease latency and memory usage, while high can produce better quality for certain
      content.

      - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
      Set the maximum bitrate in order to accommodate expected spikes in the complexity of
      the video.

      - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
      enabled. Enforces separation between repeated (cadence) I-frames and I-frames
      inserted by Scene Change Detection. If a scene change I-frame is within I-interval
      frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
      I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
      normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
      Min-I-interval - 1

      - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
      use more than requested if using B-frames and/or interlaced encoding.

      - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
      is specified. If "specified" is selected then the output video pixel aspect ratio is
      determined by parNumerator and parDenominator, else if "initializeFromSource" is
      selected then the output pixsel aspect ratio will be set equal to the input video
      pixel aspect ratio of the first input.

      - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

      - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

      - **Profile** *(string) --* H.264 Profile.

      - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
      encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
      quality level field and Max bitrate field that suit your most important viewing
      devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
      bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
      Quality level: 6. Max bitrate: 1M to 1.5M

      - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
      specified quality level except when it is constrained by the maximum bitrate.
      Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
      depending on the video complexity. Recommended instead of QVBR if you want to
      maintain a specific average bitrate over the duration of the channel. CBR: Quality
      varies, depending on the video complexity. Recommended only if you distribute your
      assets to devices that cannot handle variable bitrates.

      - **ScanType** *(string) --* Sets the scan type of the output to progressive or
      top-field-first interlaced.

      - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
      when scene change is detected. - Off: does not force an I-frame when scene change is
      detected.

      - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
      to the number of macroblock rows for progressive pictures, and less than or equal to
      half the number of macroblock rows for interlaced pictures. This field is optional;
      when no value is specified the encoder will choose the number of slices based on
      encode resolution.

      - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
      reduce high-frequency content in the encoded image.

      - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
      frame based on spatial variation of content complexity.

      - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
      sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
      improve visual quality.

      - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

      - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
      frame based on temporal variation of content complexity.

      - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
      into the video elementary stream. - 'disabled': Do not include timecodes -
      'picTimingSei': Pass through picture timing SEI messages from the source specified in
      Timecode Config

    - **H265Settings** *(dict) --* H265 Settings

      - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
      quantizers to vary to improve visual quality.

      - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
      output stream. If afdSignaling is "auto", the system will try to preserve the input
      AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
      value will be the value configured in the fixedAfd parameter.

      - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
      Alternative Transfer Function SEI message to support backwards compatibility with
      non-HDR decoders and displays.

      - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
      control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
      output must have a unique value when its bitrate is rounded down to the nearest
      multiple of 1000.

      - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

      - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

      - **ColorSpaceSettings** *(dict) --* Color Space settings

        - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
        conversion to the output

        - **Hdr10Settings** *(dict) --* Hdr10 Settings

          - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
          defining the maximum light level, in nits, of any single pixel within an encoded
          HDR video stream or file.

          - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
          metadata value defining the maximum average light level, in nits, for any single
          frame within an encoded HDR video stream or file.

        - **Rec601Settings** *(dict) --* Rec601 Settings

        - **Rec709Settings** *(dict) --* Rec709 Settings

      - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
      the output stream. Only valid when afdSignaling is set to 'Fixed'.

      - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
      frame to reduce flicker or 'pop' on I-frames.

      - **FramerateDenominator** *(integer) --* Framerate denominator.

      - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
      fraction, e.g. 24000 / 1001 = 23.976 fps.

      - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
      applications, it is recommended that this be set to 1 so a decoder joining mid-stream
      will receive an IDR frame as quickly as possible. Setting this value to 0 will break
      output segmenting.

      - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
      seconds per gopSizeUnits. Must be greater than zero.

      - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
      seconds. If seconds the system will convert the gopSize into a frame count at run
      time.

      - **Level** *(string) --* H.265 Level.

      - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
      decrease latency and memory usage, while high can produce better quality for certain
      content.

      - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

      - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
      enabled. Enforces separation between repeated (cadence) I-frames and I-frames
      inserted by Scene Change Detection. If a scene change I-frame is within I-interval
      frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
      I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
      normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
      Min-I-interval - 1

      - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

      - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

      - **Profile** *(string) --* H.265 Profile.

      - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
      encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
      quality level field and Max bitrate field that suit your most important viewing
      devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
      bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
      Quality level: 6. Max bitrate: 1M to 1.5M

      - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
      specified quality level except when it is constrained by the maximum bitrate.
      Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
      on the video complexity. Recommended only if you distribute your assets to devices
      that cannot handle variable bitrates.

      - **ScanType** *(string) --* Sets the scan type of the output to progressive or
      top-field-first interlaced.

      - **SceneChangeDetect** *(string) --* Scene change detection.

      - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
      to the number of macroblock rows for progressive pictures, and less than or equal to
      half the number of macroblock rows for interlaced pictures. This field is optional;
      when no value is specified the encoder will choose the number of slices based on
      encode resolution.

      - **Tier** *(string) --* H.265 Tier.

      - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
      into the video elementary stream. - 'disabled': Do not include timecodes -
      'picTimingSei': Pass through picture timing SEI messages from the source specified in
      Timecode Config
    """


_ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsTypeDef",
    {
        "CodecSettings": ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef,
        "Height": int,
        "Name": str,
        "RespondToAfd": str,
        "ScalingBehavior": str,
        "Sharpness": int,
        "Width": int,
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseEncoderSettings` `VideoDescriptions`

    - **CodecSettings** *(dict) --* Video codec settings.

      - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

        - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
        for inclusion in the output. For example, "10" means capture a frame every 10 seconds.

      - **H264Settings** *(dict) --* H264 Settings

        - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
        quantizers to vary to improve visual quality.

        - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
        output stream. If afdSignaling is "auto", the system will try to preserve the input
        AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
        value will be the value configured in the fixedAfd parameter.

        - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
        control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
        output must have a unique value when its bitrate is rounded down to the nearest
        multiple of 1000.

        - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
        filled (HRD buffer model).

        - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

        - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

        - **ColorSpaceSettings** *(dict) --* Color Space settings

          - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
          conversion to the output

          - **Rec601Settings** *(dict) --* Rec601 Settings

          - **Rec709Settings** *(dict) --* Rec709 Settings

        - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
        or High profile) or cavlc.

        - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
        the output stream. Only valid when afdSignaling is set to 'Fixed'.

        - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
        frame to reduce flicker or 'pop' on I-frames.

        - **FramerateControl** *(string) --* This field indicates how the output video frame
        rate is specified. If "specified" is selected then the output video frame rate is
        determined by framerateNumerator and framerateDenominator, else if
        "initializeFromSource" is selected then the output video frame rate will be set equal
        to the input video frame rate of the first input.

        - **FramerateDenominator** *(integer) --* Framerate denominator.

        - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
        fraction, e.g. 24000 / 1001 = 23.976 fps.

        - **GopBReference** *(string) --* Documentation update needed

        - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
        applications, it is recommended that this be set to 1 so a decoder joining mid-stream
        will receive an IDR frame as quickly as possible. Setting this value to 0 will break
        output segmenting.

        - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

        - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
        seconds per gopSizeUnits. Must be greater than zero.

        - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
        seconds. If seconds the system will convert the gopSize into a frame count at run
        time.

        - **Level** *(string) --* H.264 Level.

        - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
        decrease latency and memory usage, while high can produce better quality for certain
        content.

        - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
        Set the maximum bitrate in order to accommodate expected spikes in the complexity of
        the video.

        - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
        enabled. Enforces separation between repeated (cadence) I-frames and I-frames
        inserted by Scene Change Detection. If a scene change I-frame is within I-interval
        frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
        I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
        normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
        Min-I-interval - 1

        - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
        use more than requested if using B-frames and/or interlaced encoding.

        - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
        is specified. If "specified" is selected then the output video pixel aspect ratio is
        determined by parNumerator and parDenominator, else if "initializeFromSource" is
        selected then the output pixsel aspect ratio will be set equal to the input video
        pixel aspect ratio of the first input.

        - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

        - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

        - **Profile** *(string) --* H.264 Profile.

        - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
        encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
        quality level field and Max bitrate field that suit your most important viewing
        devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
        bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
        Quality level: 6. Max bitrate: 1M to 1.5M

        - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
        specified quality level except when it is constrained by the maximum bitrate.
        Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
        depending on the video complexity. Recommended instead of QVBR if you want to
        maintain a specific average bitrate over the duration of the channel. CBR: Quality
        varies, depending on the video complexity. Recommended only if you distribute your
        assets to devices that cannot handle variable bitrates.

        - **ScanType** *(string) --* Sets the scan type of the output to progressive or
        top-field-first interlaced.

        - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
        when scene change is detected. - Off: does not force an I-frame when scene change is
        detected.

        - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
        to the number of macroblock rows for progressive pictures, and less than or equal to
        half the number of macroblock rows for interlaced pictures. This field is optional;
        when no value is specified the encoder will choose the number of slices based on
        encode resolution.

        - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
        reduce high-frequency content in the encoded image.

        - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
        frame based on spatial variation of content complexity.

        - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
        sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
        improve visual quality.

        - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

        - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
        frame based on temporal variation of content complexity.

        - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
        into the video elementary stream. - 'disabled': Do not include timecodes -
        'picTimingSei': Pass through picture timing SEI messages from the source specified in
        Timecode Config

      - **H265Settings** *(dict) --* H265 Settings

        - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
        quantizers to vary to improve visual quality.

        - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
        output stream. If afdSignaling is "auto", the system will try to preserve the input
        AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
        value will be the value configured in the fixedAfd parameter.

        - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
        Alternative Transfer Function SEI message to support backwards compatibility with
        non-HDR decoders and displays.

        - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
        control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
        output must have a unique value when its bitrate is rounded down to the nearest
        multiple of 1000.

        - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

        - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

        - **ColorSpaceSettings** *(dict) --* Color Space settings

          - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
          conversion to the output

          - **Hdr10Settings** *(dict) --* Hdr10 Settings

            - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
            defining the maximum light level, in nits, of any single pixel within an encoded
            HDR video stream or file.

            - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
            metadata value defining the maximum average light level, in nits, for any single
            frame within an encoded HDR video stream or file.

          - **Rec601Settings** *(dict) --* Rec601 Settings

          - **Rec709Settings** *(dict) --* Rec709 Settings

        - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
        the output stream. Only valid when afdSignaling is set to 'Fixed'.

        - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
        frame to reduce flicker or 'pop' on I-frames.

        - **FramerateDenominator** *(integer) --* Framerate denominator.

        - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
        fraction, e.g. 24000 / 1001 = 23.976 fps.

        - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
        applications, it is recommended that this be set to 1 so a decoder joining mid-stream
        will receive an IDR frame as quickly as possible. Setting this value to 0 will break
        output segmenting.

        - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
        seconds per gopSizeUnits. Must be greater than zero.

        - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
        seconds. If seconds the system will convert the gopSize into a frame count at run
        time.

        - **Level** *(string) --* H.265 Level.

        - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
        decrease latency and memory usage, while high can produce better quality for certain
        content.

        - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

        - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
        enabled. Enforces separation between repeated (cadence) I-frames and I-frames
        inserted by Scene Change Detection. If a scene change I-frame is within I-interval
        frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
        I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
        normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
        Min-I-interval - 1

        - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

        - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

        - **Profile** *(string) --* H.265 Profile.

        - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
        encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
        quality level field and Max bitrate field that suit your most important viewing
        devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
        bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
        Quality level: 6. Max bitrate: 1M to 1.5M

        - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
        specified quality level except when it is constrained by the maximum bitrate.
        Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
        on the video complexity. Recommended only if you distribute your assets to devices
        that cannot handle variable bitrates.

        - **ScanType** *(string) --* Sets the scan type of the output to progressive or
        top-field-first interlaced.

        - **SceneChangeDetect** *(string) --* Scene change detection.

        - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
        to the number of macroblock rows for progressive pictures, and less than or equal to
        half the number of macroblock rows for interlaced pictures. This field is optional;
        when no value is specified the encoder will choose the number of slices based on
        encode resolution.

        - **Tier** *(string) --* H.265 Tier.

        - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
        into the video elementary stream. - 'disabled': Do not include timecodes -
        'picTimingSei': Pass through picture timing SEI messages from the source specified in
        Timecode Config

    - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
    most codecs, you can leave this field and width blank in order to use the height and
    width (resolution) from the source. Note, however, that leaving blank is not recommended.
    For the Frame Capture codec, height and width are required.

    - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to
    uniquely identify this Description. Description names should be unique within this Live
    Event.

    - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the input
    stream. RESPOND causes input video to be clipped, depending on the AFD value, input
    display aspect ratio, and output display aspect ratio, and (except for FRAMECAPTURE
    codec) includes the values in the output. PASSTHROUGH (does not apply to FRAMECAPTURE
    codec) ignores the AFD values and includes the values in the output, so input video is
    not clipped. NONE ignores the AFD values and does not include the values through to the
    output, so input video is not clipped.

    - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
    stretch the video to the specified output resolution (height and width). This option will
    override any position value. DEFAULT may insert black boxes (pillar boxes or letter
    boxes) around the video to provide the specified output resolution.

    - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
    scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
    for most content.

    - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
    most codecs, you can leave this field and height blank in order to use the height and
    width (resolution) from the source. Note, however, that leaving blank is not recommended.
    For the Frame Capture codec, height and width are required.
    """


_ClientDeleteChannelResponseEncoderSettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseEncoderSettingsTypeDef",
    {
        "AudioDescriptions": List[
            ClientDeleteChannelResponseEncoderSettingsAudioDescriptionsTypeDef
        ],
        "AvailBlanking": ClientDeleteChannelResponseEncoderSettingsAvailBlankingTypeDef,
        "AvailConfiguration": ClientDeleteChannelResponseEncoderSettingsAvailConfigurationTypeDef,
        "BlackoutSlate": ClientDeleteChannelResponseEncoderSettingsBlackoutSlateTypeDef,
        "CaptionDescriptions": List[Dict],
        "GlobalConfiguration": Dict[str, Any],
        "OutputGroups": List[Dict],
        "TimecodeConfig": Dict[str, Any],
        "VideoDescriptions": List[
            ClientDeleteChannelResponseEncoderSettingsVideoDescriptionsTypeDef
        ],
    },
    total=False,
)


class ClientDeleteChannelResponseEncoderSettingsTypeDef(
    _ClientDeleteChannelResponseEncoderSettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponse` `EncoderSettings`

    - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

      - *(dict) --* Audio Description

        - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

          - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
          to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

          - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
          corrected using the chosen algorithm. If set to measureOnly, the audio will be measured
          but not adjusted.

          - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
          entered, a default value will be used according to the chosen algorithm. The CALM Act
          (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
          recommends a target of -23 LKFS.

        - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
        for this AudioDescription.

        - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
        values for audioType are defined in ISO-IEC 13818-1.

        - **AudioTypeControl** *(string) --* Determines how audio type is determined.
        followInput: If the input contains an ISO 639 audioType, then that value is passed
        through to the output. If the input contains no ISO 639 audioType, the value in Audio
        Type is included in the output. useConfigured: The value in Audio Type is included in the
        output. Note that this field and audioType are both ignored if inputType is
        broadcasterMixedAd.

        - **CodecSettings** *(dict) --* Audio codec settings.

          - **AacSettings** *(dict) --* Aac Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
            rate control mode and profile.

            - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
            depend on rate control mode and profile. The adReceiverMix setting receives a stereo
            description plus control track and emits a mono AAC encode of the description track,
            with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

            - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
            pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
            (audioType) will be set to 3, which signals to downstream systems that this stream
            contains "broadcaster mixed AD". Note that the input received by the encoder must
            contain pre-mixed audio; the encoder does not perform the mixing. The values in
            audioTypeControl and audioType (in AudioDescription) are ignored when set to
            broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
            + AD.

            - **Profile** *(string) --* AAC Profile.

            - **RateControlMode** *(string) --* Rate Control Mode.

            - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

            - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
            mode and profile.

            - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
            MPEG-2 Transport Stream containers.

            - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
            VBR.

          - **Ac3Settings** *(dict) --* Ac3 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
            the coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
            emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

            - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
            channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
            audio is Dolby Digital, dialnorm will be passed through.

            - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
            signaling to the output bitstream as defined in the Dolby Digital specification.

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
            the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

            - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
            be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
            audio was not supplied from one of these streams, then the static metadata settings
            will be used.

          - **Eac3Settings** *(dict) --* Eac3 Settings

            - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
            attenuation to the surround channels. Only used for 3/2 coding mode.

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
            the coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
            emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

            - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
            channels.

            - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
            all input channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
            audio is Dolby Digital Plus, dialnorm will be passed through.

            - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

            - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
            ensures that the instantaneous signal peaks do not exceed specified levels.

            - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
            LFE channel

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
            the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

            - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
            used for 3/2 coding mode.

            - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
            used for 3/2 coding mode.

            - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
            used for 3/2 coding mode.

            - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
            Only used for 3/2 coding mode.

            - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
            sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
            was not supplied from one of these streams, then the static metadata settings will be
            used.

            - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
            be passed through if it is present on the input. This detection is dynamic over the
            life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
            have a consistent DD+ output as the system alternates between passthrough and
            encoding.

            - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
            phase shift to the surround channels. Only used for 3/2 coding mode.

            - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
            mode.

            - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
            center back surround channel is matrix encoded into the left and right surround
            channels.

            - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
            is matrix encoded into the two channels.

          - **Mp2Settings** *(dict) --* Mp2 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second.

            - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
            codingMode10 (for mono) or codingMode20 (for stereo).

            - **SampleRate** *(float) --* Sample rate in Hz.

          - **PassThroughSettings** *(dict) --* Pass Through Settings

        - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
        used if languageControlMode is useConfigured, or there is no ISO 639 language code
        specified in the input.

        - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
        language code of the output to follow the ISO 639 language code of the input. The
        languageCode will be used when useConfigured is set, or when followInput is selected but
        there is no ISO 639 language code specified by the input.

        - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to
        uniquely identify this AudioDescription. Description names should be unique within this
        Live Event.

        - **RemixSettings** *(dict) --* Settings that control how input audio channels are
        remixed into the output audio channels.

          - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
          appropriate gain adjustments.

            - *(dict) --* Audio Channel Mapping

              - **InputChannelLevels** *(list) --* Indices and gain values for each input channel
              that should be remixed into this output channel.

                - *(dict) --* Input Channel Level

                  - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values
                  are within the range from -60 (mute) and 6 dB.

                  - **InputChannel** *(integer) --* The index of the input channel used as a
                  source.

              - **OutputChannel** *(integer) --* The index of the output channel being produced.

          - **ChannelsIn** *(integer) --* Number of input channels to be used.

          - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
          values: 1, 2, 4, 6, 8

        - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
        name displayed by the player (eg. English, or Director Commentary).

    - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

      - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
      black. Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be
      blanked when insertion metadata is added.

    - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.

      - **AvailSettings** *(dict) --* Ad avail settings.

        - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
          added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
          messages and does not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
          noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
          webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
          added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
          messages and does not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
          noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
          webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **BlackoutSlate** *(dict) --* Settings for blackout slate.

      - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid
      black. Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
      the video, audio, and captions, and raise the "Network Blackout Image" slate when an
      SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted
      when the Network Start Segmentation Descriptor is encountered. The Network End and Network
      Start descriptors must contain a network ID that matches the value entered in "Network ID".

      - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout
      image. Image will be scaled to fill the entire output raster.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
      "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be
      blanked when indicated by program metadata.

    - **CaptionDescriptions** *(list) --* Settings for caption decriptions

      - *(dict) --* Output groups for this Live Event. Output groups contain information about
      where streams should be distributed.

        - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use as
        a caption source when generating output captions. This field should match a
        captionSelector name.

        - **DestinationSettings** *(dict) --* Additional settings for captions destination that
        depend on the destination type.

          - **AribDestinationSettings** *(dict) --* Arib Destination Settings

          - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
            setting alignment to centered will place the captions at the bottom center of the
            output. Similarly, setting a left alignment will align captions to the bottom left of
            the output. If x and y positions are given in conjunction with the alignment
            parameter, the font will be justified (either left or centered) relative to those
            coordinates. Selecting "smart" justification will left-justify live subtitles and
            center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
            match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
            rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent
            to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension
            must be 'ttf' or 'tte'. Although the user can select output fonts for many different
            types of input captions, embedded, STL and teletext sources use a strict grid system.
            Using external fonts with these caption sources could cause unexpected display of
            proportional fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2
              Parameter store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
              file accessible to the Live system (eg. a http:// URI) depending on the output
              type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
            option is not valid for source captions that are STL, 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255
            is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
            is 96 dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the
            size of the output. Giving a positive integer will specify the exact font size in
            points. All burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not
            valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
            is not valid for source captions that are either 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
            captions. All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
            opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0
            (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels to the left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels above the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
            used to generate the output subtitles bitmap. Only applicable for Teletext inputs and
            DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption
            relative to the left side of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the left of the output. If no explicit xPosition is
            provided, the horizontal caption position will be determined by the alignment
            parameter. All burn-in and DVB-Sub font settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption
            relative to the top of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the top of the output. If no explicit yPosition is
            provided, the caption will be positioned towards the bottom of the output. All
            burn-in and DVB-Sub font settings must match.

          - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
            setting alignment to centered will place the captions at the bottom center of the
            output. Similarly, setting a left alignment will align captions to the bottom left of
            the output. If x and y positions are given in conjunction with the alignment
            parameter, the font will be justified (either left or centered) relative to those
            coordinates. Selecting "smart" justification will left-justify live subtitles and
            center-justify pre-recorded subtitles. This option is not valid for source captions
            that are STL or 608/embedded. These source settings are already pre-defined by the
            caption stream. All burn-in and DVB-Sub font settings must match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
            rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
            equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
            must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension
            must be 'ttf' or 'tte'. Although the user can select output fonts for many different
            types of input captions, embedded, STL and teletext sources use a strict grid system.
            Using external fonts with these caption sources could cause unexpected display of
            proportional fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2
              Parameter store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
              file accessible to the Live system (eg. a http:// URI) depending on the output
              type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
            option is not valid for source captions that are STL, 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255
            is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
            is 96 dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
            size of the output. Giving a positive integer will specify the exact font size in
            points. All burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not
            valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
            is not valid for source captions that are either 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
            captions. All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
            opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to
            0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels to the left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels above the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
            used to generate the output subtitles bitmap. Only applicable for Teletext inputs and
            DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption
            relative to the left side of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the left of the output. If no explicit xPosition is
            provided, the horizontal caption position will be determined by the alignment
            parameter. This option is not valid for source captions that are STL, 608/embedded or
            teletext. These source settings are already pre-defined by the caption stream. All
            burn-in and DVB-Sub font settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption
            relative to the top of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the top of the output. If no explicit yPosition is
            provided, the caption will be positioned towards the bottom of the output. This
            option is not valid for source captions that are STL, 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

          - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

          - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
          Destination Settings

          - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
          Settings

          - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
          Destination Settings

          - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

          - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

          - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

          - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

            - **StyleControl** *(string) --* When set to passthrough, passes through style and
            position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
            CFF-TT output or TTML output.

          - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

        - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
        http://www.loc.gov/standards/iso639-2/

        - **LanguageDescription** *(string) --* Human readable information to indicate captions
        available for players (eg. English, or Spanish).

        - **Name** *(string) --* Name of the caption description. Used to associate a caption
        description with an output. Names must be unique within an event.

    - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
    whole.

      - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
      Event.

      - **InputEndAction** *(string) --* Indicates the action to take when the current input
      completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
      restart at the beginning of the first input. When "none" is configured the encoder will
      transcode either black, a solid color, or a user specified slate images per the "Input Loss
      Behavior" configuration until the next input switch occurs (which is controlled through the
      Channel Schedule API).

      - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

        - **BlackFrameMsec** *(integer) --* Documentation update needed

        - **InputLossImageColor** *(string) --* When input loss image type is "color" this field
        specifies the color to use. Value: 6 hex characters representing the values of RGB.

        - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields
        specify the parameters for accessing the slate.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a
        slate into the output after input loss exceeds blackFrameMsec.

        - **RepeatFrameMsec** *(integer) --* Documentation update needed

      - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
      PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to the
      other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each pipeline to
      the Unix epoch.

      - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the
      Live encoder should be paced by its system clock (which optionally may be locked to another
      source via NTP) or should be locked to the clock of the source that is providing the input
      stream.

      - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
      very low video framerates. This is commonly set to enabled for music channels with less
      than one video frame per second.

    - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

      - *(dict) --* Output groups for this Live Event. Output groups contain information about
      where streams should be distributed.

        - **Name** *(string) --* Custom output group name optionally defined by the user. Only
        letters, numbers, and the underscore character allowed; only 32 characters allowed.

        - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

          - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

            - **Destination** *(dict) --* A directory and base filename where archive files
            should be written.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
            before closing and starting a new one.

          - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

            - **Destination** *(dict) --* The destination for the frame capture files. Either the
            URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
            s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
            container, plus a file name prefix (for example,
            mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
            the prefix from the destination field (for example, "curling_") + name modifier + the
            counter (5 digits, starting from 00001) + extension (which is always .jpg). For
            example, curlingLow.00001.jpg

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **HlsGroupSettings** *(dict) --* Hls Group Settings

            - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals
            through to this group of Apple HLS outputs.

              - *(string) --* Hls Ad Markers

            - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
            each output in the media .m3u8 file. Can be used if base manifest is delivered from a
            different URL than the main .m3u8 file.

            - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
            each output in the media .m3u8 file. Can be used if base manifest is delivered from a
            different URL than the main .m3u8 file.

            - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
            caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

              - *(dict) --* Maps a caption channel to an ISO 693-2 language code
              (http://www.loc.gov/standards/iso639-2), with an optional description.

                - **CaptionChannel** *(integer) --* The closed caption channel being described by
                this CaptionLanguageMapping. Each channel mapping must have a unique channel
                number (maximum of 4)

                - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                http://www.loc.gov/standards/iso639-2)

                - **LanguageDescription** *(string) --* Textual description of language

            - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
            captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one
            language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each
            Language Code you specify. Make sure to specify the languages in the order in which
            they appear in the original source (if the source is embedded format) or the order of
            the caption selectors (if the source is other than embedded). Otherwise, languages in
            the manifest will not match up properly with the output captions. none: Include
            CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from
            the manifest.

            - **ClientCache** *(string) --* When set to "disabled", sets the
            #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
            segments for later replay.

            - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default
            RFC-4281) during m3u8 playlist generation.

            - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
            16-byte hex value represented by a 32-character text string. If ivSource is set to
            "explicit" then this parameter is required and is used as the IV for encryption.

            - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
            manifest files, and encryption keys (if enabled).

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **DirectoryStructure** *(string) --* Place segments in subdirectories.

            - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
            scheme. Exclude this parameter if no encryption is desired.

            - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

              - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                transfer encoding to Akamai. User should contact Akamai to enable this feature.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                to wait until a restart is initiated. A value of 0 means never restart.

                - **Salt** *(string) --* Salt for authenticated Akamai.

                - **Token** *(string) --* Token parameter for authenticated akamai. If not
                specified, _gda_ is used.

              - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                to wait until a restart is initiated. A value of 0 means never restart.

              - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are
                stored in non-persistent memory for faster reading and writing.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                to wait until a restart is initiated. A value of 0 means never restart.

              - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                transfer encoding to WebDAV.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                to wait until a restart is initiated. A value of 0 means never restart.

            - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
            manifest, but do create the master and media manifests (according to the Output
            Selection field). STANDARD: Create an I-frame-only manifest for each output that
            contains video, as well as the other manifests (according to the Output Selection
            field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
            I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
            position. For example, #EXT-X-BYTERANGE:160364@1461888"

            - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
            maximum number of segments in the media manifest file. After this maximum, older
            segments are removed from the media manifest. This number must be less than or equal
            to the Keep Segments field.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on
            input loss.

            - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization
            Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
            If set to "include", IV is listed in the manifest, otherwise the IV is not in the
            manifest.

            - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
            Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
            If this setting is "followsSegmentNumber", it will cause the IV to change every
            segment (to match the segment number). If this is set to "explicit", you must enter a
            constantIv value.

            - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
            number of media segments (.ts files) to retain in the destination directory.

            - **KeyFormat** *(string) --* The value specifies how the key is represented in the
            resource identified by the URI. If parameter is absent, an implicit value of
            "identity" is used. A reverse DNS string can also be given.

            - **KeyFormatVersions** *(string) --* Either a single positive integer version value
            or a slash delimited list of version values (1/2/3).

            - **KeyProviderSettings** *(dict) --* The key provider settings.

              - **StaticKeySettings** *(dict) --* Static Key Settings

                - **KeyProviderServer** *(dict) --* The URL of the license server used for
                protecting content.

                  - **PasswordParam** *(string) --* key used to extract the password from EC2
                  Parameter store

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to
                  a file accessible to the Live system (eg. a http:// URI) depending on the
                  output type. For example, a RTMP destination should have a uri simliar to:
                  "rtmp://fmsserver/live".

                  - **Username** *(string) --* Documentation update needed

                - **StaticKeyValue** *(string) --* Static key value as a 32 character hexadecimal
                string.

            - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

            - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
            should use floating point or integer values for segment duration.

            - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
            looking ahead and back within the specified range for a nearby avail and extending
            the segment size if needed.

            - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
            the destination and manifest. If "live", only the number segments specified in
            keepSegments and indexNSegments are kept; newer segments replace older segments,
            which may prevent players from rewinding all the way to the beginning of the event.
            VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
            converting it to a "VOD" type manifest on completion of the stream.

            - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests (master
            manifest, if applicable, and media manifests) for this output group. SEGMENTSONLY:
            Does not generate any manifests for this output group.

            - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag
            in .m3u8 manifest files. The value is calculated as follows: either the program date
            and time are initialized using the input timecode source, or the time is initialized
            using the input timecode source and the date is initialized using the timestampOffset.

            - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
            EXT-X-PROGRAM-DATE-TIME entry, in seconds.

            - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
            each pipeline includes information about both pipelines: first its own media files,
            then the media files of the other pipeline. This feature allows playout device that
            support stale manifest detection to switch from one manifest to the other, when the
            current manifest seems to be stale. There are still two destinations and two master
            manifests, but both master manifests reference the media files from both pipelines.
            DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
            about its own pipeline only. For an HLS output group with MediaPackage as the
            destination, the DISABLED behavior is always followed. MediaPackage regenerates the
            manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

            - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
            create (in seconds). Note that segments will end on the next keyframe after this
            number of seconds, so actual segment length may be longer.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
            subdirectory before starting a new one. directoryStructure must be
            subdirectoryPerStream for this setting to have an effect.

            - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
            video in EXT-X-STREAM-INF tag of variant manifest.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

            - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
            offset to fine tune the timestamps.

            - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
            multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
            program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags
            to index segments for playback. A typical use for this value is when sending the
            output to AWS Elemental MediaConvert, which can accept only a single media file.
            Playback while the channel is running is not guaranteed due to HTTP server caching.

          - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

            - **Destination** *(dict) --* MediaPackage channel destination.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

            - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point Identity"
            element used in each message placed in the sparse track. Only enabled if
            sparseTrackType is not "none".

            - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only
            MS Smooth output, the fragment absolute time will be set to the current timecode.
            This option does not write timecodes to the audio elementary stream.

            - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
            certificate chain to a trusted Certificate Authority (CA). This will cause https
            outputs to self-signed certificates to fail.

            - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
            retrying connection to the IIS server if the connection is lost. Content will be
            cached during this time and the cache will be be delivered to the IIS server once the
            connection is re-established.

            - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
            Elemental Live acts as a "Push" encoder to IIS.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
            only be specified if eventIdMode is set to useConfigured.

            - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
            IIS server. If no event ID is sent and the same Live Event is used without changing
            the publishing point, clients might see cached video from the previous run. Options:
            - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and
            send an event ID based on the current timestamp - "noEventId" - do not send an event
            ID to the IIS server.

            - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
            server when stopping the event

            - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
            outputs.

            - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds).
            Fragment length must be compatible with GOP size and framerate.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on
            input loss.

            - **NumRetries** *(integer) --* Number of retry attempts.

            - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
            to output failure, due to exhausting the numRetries on one segment, or exceeding
            filecacheDuration.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the
            second pipeline.

            - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
            to generate a sparse track in this group of MS-Smooth outputs.

            - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so
            publishing point doesn't start until all streams start.

            - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
            timestampOffsetMode is set to useConfiguredOffset.

            - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
            useEventStartDate: Use the date the event was started as the offset -
            useConfiguredOffset: Use an explicitly configured date as the offset

          - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

            - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting
            with CDN

            - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up.
            If remote origin server stalls the RTMP connection and does not accept content fast
            enough the 'Media Cache' will fill up. When the cache reaches the duration specified
            by cacheLength the cache will stop accepting new content. If set to
            disconnectImmediately, the RTMP output will force a disconnect. Clear the media
            cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
            output will wait up to 5 minutes to allow the origin server to begin accepting data
            again.

            - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
            buffer size.

            - **CaptionData** *(string) --* Controls the types of data that passes to
            onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
            passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608
            data from both fields will be passed. If set to 'field1608' then only the data
            carried in 608 from field 1 video will be passed.

            - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input
            becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput:
            Stop transmitting data until input returns. This does not close the underlying RTMP
            connection.

            - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
            wait until a restart is initiated. A value of 0 means never restart.

          - **UdpGroupSettings** *(dict) --* Udp Group Settings

            - **InputLossAction** *(string) --* Specifies behavior of last resort when input
            video is lost, and no more backup inputs are available. When dropTs is selected the
            entire transport stream will stop being emitted. When dropProgram is selected the
            program can be dropped from the transport stream (and replaced with null packets to
            meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream
            will continue to be produced normally with repeat frames, black frames, or slate
            frames substituted for the absent input video.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

        - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

          - *(dict) --* Output settings. There can be multiple outputs within a group.

            - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
            audio sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
            as caption sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **OutputName** *(string) --* The name used to identify an output.

            - **OutputSettings** *(dict) --* Output type-specific settings.

              - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                - **ContainerSettings** *(dict) --* Settings specific to the container type of
                the file.

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream
                    is removed from the input. This allows the output audio configuration to
                    dynamically change based on input configuration. If this is set to
                    encodeSilence, all output audio streams will output encoded silence when not
                    connected to an active input stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                    muxing and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                    for ARIB Captions will be auto-selected from unused pids. If set to
                    useConfigured, ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                    for Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                    for each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                    stream(s) in the transport stream. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81
                    for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type =
                    0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                    bits per second. Setting to 0 lets the muxer automatically determine the
                    appropriate bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                    model for accurate interleaving. Setting to bufferModel to none can lead to
                    lower latency, but low-memory devices may not be able to play back the stream
                    without interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT)
                    at the specified table repetition interval.

                      - **NetworkId** *(integer) --* The numeric value placed in the Network
                      Information Table (NIT).

                      - **NetworkName** *(string) --* The network name text placed in the
                      networkNameDescriptor inside the Network Information Table. Maximum length
                      is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT)
                    at the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information
                      into output stream. The sdtFollow setting copies SDT information from input
                      stream to output stream. The sdtFollowIfPresent setting copies SDT
                      information from input stream to output stream if SDT information is
                      present in the input, otherwise it will fall back on the user-defined
                      values. The sdtManual setting means user will enter the SDT information.
                      The sdtNone setting means output stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed in
                      the serviceDescriptor in the Service Description Table. Maximum length is
                      256 characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                    specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                    DVB Teletext data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                    input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                    audio EBP markers will be added to partitions 3 and 4. The interval between
                    these additional markers will be fixed, and will be slightly shorter than the
                    video EBP marker interval. Only available when EBP Cablelabs segmentation
                    markers are selected. Partitions 1 and 2 will always follow the video
                    interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                    Points do not come within the specified time interval of each other by
                    looking ahead at input video. If another EBP is going to come in within the
                    specified time interval, the current EBP is not emitted, and the segment is
                    "stretched" to the next marker. The lookahead value does not add latency to
                    the system. The Live Event must be configured elsewhere to create sufficient
                    latency to make the lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If
                    set to videoAndAudioPids, EBP markers will be placed on the video PID and all
                    audio PIDs. If set to videoPid, EBP markers will be placed on only the video
                    PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                    PES header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Platform data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                    Signal data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment. Only
                    used with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                    input source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV
                    data to this output. Multiple values are accepted, and can be entered in
                    ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                    values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or
                    0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a downstream
                    encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between instances
                    of this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                    Reference value is inserted for every Packetized Elementary Stream (PES)
                    header. This parameter is effective only when the PCR PID is the same as the
                    video or audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                    Clock Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                    Reference (PCR) in the transport stream. When no value is given, the encoder
                    will assign the same value as the Video PID. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between instances
                    of this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                    (PMT) in the transport stream. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in the
                    Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                    SCTE-27 data to this output. Multiple values are accepted, and can be entered
                    in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                    input source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                    segmentationTime period. raiSegstart sets the Random Access Indicator bit in
                    the adaptation field. raiAdapt sets the RAI bit and adds the current timecode
                    in the private data bytes. psiSegstart inserts PAT and PMT tables at the
                    start of segments. ebp adds Encoder Boundary Point information to the
                    adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                    ebpLegacy adds Encoder Boundary Point information to the adaptation field
                    using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter
                    controls how segmentation markers are inserted into the transport stream.
                    With avails, it is possible that segments may be truncated, which can
                    influence where future segmentation markers are inserted. When a segmentation
                    style of "resetCadence" is selected and a segment is truncated due to an
                    avail, we will reset the segmentation cadence. This means the subsequent
                    segment will have a duration of $segmentationTime seconds. When a
                    segmentation style of "maintainCadence" is selected and a segment is
                    truncated due to an avail, we will not reset the segmentation cadence. This
                    means the subsequent segment will likely be truncated as well. However, all
                    segments after that will have a duration of $segmentationTime seconds. Note
                    that EBP lookahead is a slight exception to this rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                    metadata will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID
                    field in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                    stream in the transport stream. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Extension** *(string) --* Output file extension. If excluded, this will be
                auto-selected from the container type.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Required for multiple outputs of the same type.

              - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                - **NameModifier** *(string) --* Required if the output group contains more than
                one output. This modifier forms part of the output file name.

              - **HlsOutputSettings** *(dict) --* Hls Output Settings

                - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                settings are different for audio-only outputs.

                  - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                    - **AudioGroupId** *(string) --* Specifies the group to which the audio
                    Rendition belongs.

                    - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                    to use as the cover art for an audio-only output. We recommend a low bit-size
                    file because the image increases the output audio bandwidth. The image is
                    attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as
                    per the "ID3 tag version 2.4.0 - Native Frames" standard.

                      - **PasswordParam** *(string) --* key used to extract the password from EC2
                      Parameter store

                      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                      to a file accessible to the Live system (eg. a http:// URI) depending on
                      the output type. For example, a RTMP destination should have a uri simliar
                      to: "rtmp://fmsserver/live".

                      - **Username** *(string) --* Documentation update needed

                    - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                    supported: Audio-Only Variant Stream The client can play back this audio-only
                    stream instead of video in low-bandwidth scenarios. Represented as an
                    EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default
                    Alternate rendition that the client should try to play back by default.
                    Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES,
                    AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition
                    that the client may try to play back by default. Represented as an
                    EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate
                    Audio, not Auto Select Alternate rendition that the client will not try to
                    play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with
                    DEFAULT=NO, AUTOSELECT=NO

                  - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                    - **AudioRenditionSets** *(string) --* List all the audio groups that are
                    used with the video output stream. Input all the audio GROUP-IDs that are
                    associated to the video, separate by ','.

                    - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                      audio stream(s) in the transport stream. Multiple values are accepted, and
                      can be entered in ranges and/or by comma separation. Can be entered as
                      decimal or hexadecimal values.

                      - **EcmPid** *(string) --* This parameter is unused and deprecated.

                      - **PatInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. A value of \\"0\\"
                      writes out the PMT once per segment file.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                      Clock Reference value is inserted for every Packetized Elementary Stream
                      (PES) header. This parameter is effective only when the PCR PID is the same
                      as the video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock References (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the
                      encoder will assign the same value as the Video PID. Can be entered as a
                      decimal or hexadecimal value.

                      - **PmtInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. A value of \\"0\\"
                      writes out the PMT once per segment file.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                      Table (PMT) in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                      - **ProgramNum** *(integer) --* The value of the program number field in
                      the Program Map Table.

                      - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                      SCTE-35 signals from the input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata is passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                      video stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Accepts \\"Format
                Identifiers\\":#formatIdentifierParameters.

                - **SegmentModifier** *(string) --* String concatenated to end of segment
                filenames.

              - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

              - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                - **H265PackagingType** *(string) --* Only applicable when this output is
                referencing an H.265 video description. Specifies whether MP4 segments should be
                packaged as HEV1 or HVC1.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Required for multiple outputs of the same type.

              - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls
                certificate chain to a trusted Certificate Authority (CA). This will cause rtmps
                outputs with self-signed certificates to fail.

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying a connection to the Flash Media server if the connection is lost.

                - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                rtmp://host/appname). For connection to Akamai, a username and password must be
                supplied. URI fields accept format identifiers.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **NumRetries** *(integer) --* Number of retry attempts.

              - **UdpOutputSettings** *(dict) --* Udp Output Settings

                - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                values increase latency through the transcoder but simultaneously assist the
                transcoder in maintaining a constant, low-jitter UDP/RTP output while
                accommodating clock recovery, input switching, input disruptions, picture
                reordering, etc.

                - **ContainerSettings** *(dict) --* Udp Container Settings

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream
                    is removed from the input. This allows the output audio configuration to
                    dynamically change based on input configuration. If this is set to
                    encodeSilence, all output audio streams will output encoded silence when not
                    connected to an active input stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                    muxing and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                    for ARIB Captions will be auto-selected from unused pids. If set to
                    useConfigured, ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                    for Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                    for each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                    stream(s) in the transport stream. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81
                    for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type =
                    0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                    bits per second. Setting to 0 lets the muxer automatically determine the
                    appropriate bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                    model for accurate interleaving. Setting to bufferModel to none can lead to
                    lower latency, but low-memory devices may not be able to play back the stream
                    without interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT)
                    at the specified table repetition interval.

                      - **NetworkId** *(integer) --* The numeric value placed in the Network
                      Information Table (NIT).

                      - **NetworkName** *(string) --* The network name text placed in the
                      networkNameDescriptor inside the Network Information Table. Maximum length
                      is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT)
                    at the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information
                      into output stream. The sdtFollow setting copies SDT information from input
                      stream to output stream. The sdtFollowIfPresent setting copies SDT
                      information from input stream to output stream if SDT information is
                      present in the input, otherwise it will fall back on the user-defined
                      values. The sdtManual setting means user will enter the SDT information.
                      The sdtNone setting means output stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed in
                      the serviceDescriptor in the Service Description Table. Maximum length is
                      256 characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                    specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                    DVB Teletext data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                    input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                    audio EBP markers will be added to partitions 3 and 4. The interval between
                    these additional markers will be fixed, and will be slightly shorter than the
                    video EBP marker interval. Only available when EBP Cablelabs segmentation
                    markers are selected. Partitions 1 and 2 will always follow the video
                    interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                    Points do not come within the specified time interval of each other by
                    looking ahead at input video. If another EBP is going to come in within the
                    specified time interval, the current EBP is not emitted, and the segment is
                    "stretched" to the next marker. The lookahead value does not add latency to
                    the system. The Live Event must be configured elsewhere to create sufficient
                    latency to make the lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If
                    set to videoAndAudioPids, EBP markers will be placed on the video PID and all
                    audio PIDs. If set to videoPid, EBP markers will be placed on only the video
                    PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                    PES header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Platform data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                    Signal data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment. Only
                    used with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                    input source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV
                    data to this output. Multiple values are accepted, and can be entered in
                    ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                    values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or
                    0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a downstream
                    encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between instances
                    of this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                    Reference value is inserted for every Packetized Elementary Stream (PES)
                    header. This parameter is effective only when the PCR PID is the same as the
                    video or audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                    Clock Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                    Reference (PCR) in the transport stream. When no value is given, the encoder
                    will assign the same value as the Video PID. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between instances
                    of this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                    (PMT) in the transport stream. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in the
                    Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                    SCTE-27 data to this output. Multiple values are accepted, and can be entered
                    in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                    input source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                    segmentationTime period. raiSegstart sets the Random Access Indicator bit in
                    the adaptation field. raiAdapt sets the RAI bit and adds the current timecode
                    in the private data bytes. psiSegstart inserts PAT and PMT tables at the
                    start of segments. ebp adds Encoder Boundary Point information to the
                    adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                    ebpLegacy adds Encoder Boundary Point information to the adaptation field
                    using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter
                    controls how segmentation markers are inserted into the transport stream.
                    With avails, it is possible that segments may be truncated, which can
                    influence where future segmentation markers are inserted. When a segmentation
                    style of "resetCadence" is selected and a segment is truncated due to an
                    avail, we will reset the segmentation cadence. This means the subsequent
                    segment will have a duration of $segmentationTime seconds. When a
                    segmentation style of "maintainCadence" is selected and a segment is
                    truncated due to an avail, we will not reset the segmentation cadence. This
                    means the subsequent segment will likely be truncated as well. However, all
                    segments after that will have a duration of $segmentationTime seconds. Note
                    that EBP lookahead is a slight exception to this rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                    metadata will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID
                    field in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                    stream in the transport stream. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Destination** *(dict) --* Destination address and port number for RTP or UDP
                packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or
                udp://10.100.100.100:5002).

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                Error Correction on UDP outputs.

                  - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                  the FEC protection matrix. The number of transport stream packets per column
                  error correction packet. Must be between 4 and 20, inclusive.

                  - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                  - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the
                  FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC
                  is used, then larger values increase robustness. If Row FEC is used, then this
                  is the number of transport stream packets per row error correction packet, and
                  the value must be between 4 and 20, inclusive, if includeFec is columnAndRow.
                  If includeFec is column, this value must be 1 to 20, inclusive.

            - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the
            source for this output.

    - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
    information from inputs.

      - **Source** *(string) --* Identifies the source for the timecode that will be associated
      with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode
      from the the source. If no embedded timecode is detected in the source, the system falls
      back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time.
      -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.

      - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
      resynchronized to the input timecode. Discrepancies below this threshold are permitted to
      avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not
      specified.

    - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

      - *(dict) --* Video settings for this stream.

        - **CodecSettings** *(dict) --* Video codec settings.

          - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

            - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
            for inclusion in the output. For example, "10" means capture a frame every 10 seconds.

          - **H264Settings** *(dict) --* H264 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input
            AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
            value will be the value configured in the fixedAfd parameter.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
            output must have a unique value when its bitrate is rounded down to the nearest
            multiple of 1000.

            - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
            filled (HRD buffer model).

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
              conversion to the output

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
            or High profile) or cavlc.

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
            the output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
            frame to reduce flicker or 'pop' on I-frames.

            - **FramerateControl** *(string) --* This field indicates how the output video frame
            rate is specified. If "specified" is selected then the output video frame rate is
            determined by framerateNumerator and framerateDenominator, else if
            "initializeFromSource" is selected then the output video frame rate will be set equal
            to the input video frame rate of the first input.

            - **FramerateDenominator** *(integer) --* Framerate denominator.

            - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
            fraction, e.g. 24000 / 1001 = 23.976 fps.

            - **GopBReference** *(string) --* Documentation update needed

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining mid-stream
            will receive an IDR frame as quickly as possible. Setting this value to 0 will break
            output segmenting.

            - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
            seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run
            time.

            - **Level** *(string) --* H.264 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
            decrease latency and memory usage, while high can produce better quality for certain
            content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
            Set the maximum bitrate in order to accommodate expected spikes in the complexity of
            the video.

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
            enabled. Enforces separation between repeated (cadence) I-frames and I-frames
            inserted by Scene Change Detection. If a scene change I-frame is within I-interval
            frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
            I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
            normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
            Min-I-interval - 1

            - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
            use more than requested if using B-frames and/or interlaced encoding.

            - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
            is specified. If "specified" is selected then the output video pixel aspect ratio is
            determined by parNumerator and parDenominator, else if "initializeFromSource" is
            selected then the output pixsel aspect ratio will be set equal to the input video
            pixel aspect ratio of the first input.

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.264 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
            encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
            quality level field and Max bitrate field that suit your most important viewing
            devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
            bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
            Quality level: 6. Max bitrate: 1M to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate.
            Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
            depending on the video complexity. Recommended instead of QVBR if you want to
            maintain a specific average bitrate over the duration of the channel. CBR: Quality
            varies, depending on the video complexity. Recommended only if you distribute your
            assets to devices that cannot handle variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
            when scene change is detected. - Off: does not force an I-frame when scene change is
            detected.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
            to the number of macroblock rows for progressive pictures, and less than or equal to
            half the number of macroblock rows for interlaced pictures. This field is optional;
            when no value is specified the encoder will choose the number of slices based on
            encode resolution.

            - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
            reduce high-frequency content in the encoded image.

            - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
            frame based on spatial variation of content complexity.

            - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
            sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
            improve visual quality.

            - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

            - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
            frame based on temporal variation of content complexity.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
            into the video elementary stream. - 'disabled': Do not include timecodes -
            'picTimingSei': Pass through picture timing SEI messages from the source specified in
            Timecode Config

          - **H265Settings** *(dict) --* H265 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input
            AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
            value will be the value configured in the fixedAfd parameter.

            - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
            Alternative Transfer Function SEI message to support backwards compatibility with
            non-HDR decoders and displays.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
            output must have a unique value when its bitrate is rounded down to the nearest
            multiple of 1000.

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
              conversion to the output

              - **Hdr10Settings** *(dict) --* Hdr10 Settings

                - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
                defining the maximum light level, in nits, of any single pixel within an encoded
                HDR video stream or file.

                - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                metadata value defining the maximum average light level, in nits, for any single
                frame within an encoded HDR video stream or file.

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
            the output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
            frame to reduce flicker or 'pop' on I-frames.

            - **FramerateDenominator** *(integer) --* Framerate denominator.

            - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
            fraction, e.g. 24000 / 1001 = 23.976 fps.

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining mid-stream
            will receive an IDR frame as quickly as possible. Setting this value to 0 will break
            output segmenting.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
            seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run
            time.

            - **Level** *(string) --* H.265 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
            decrease latency and memory usage, while high can produce better quality for certain
            content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
            enabled. Enforces separation between repeated (cadence) I-frames and I-frames
            inserted by Scene Change Detection. If a scene change I-frame is within I-interval
            frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
            I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
            normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
            Min-I-interval - 1

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.265 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
            encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
            quality level field and Max bitrate field that suit your most important viewing
            devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
            bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
            Quality level: 6. Max bitrate: 1M to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate.
            Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
            on the video complexity. Recommended only if you distribute your assets to devices
            that cannot handle variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
            to the number of macroblock rows for progressive pictures, and less than or equal to
            half the number of macroblock rows for interlaced pictures. This field is optional;
            when no value is specified the encoder will choose the number of slices based on
            encode resolution.

            - **Tier** *(string) --* H.265 Tier.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
            into the video elementary stream. - 'disabled': Do not include timecodes -
            'picTimingSei': Pass through picture timing SEI messages from the source specified in
            Timecode Config

        - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
        most codecs, you can leave this field and width blank in order to use the height and
        width (resolution) from the source. Note, however, that leaving blank is not recommended.
        For the Frame Capture codec, height and width are required.

        - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to
        uniquely identify this Description. Description names should be unique within this Live
        Event.

        - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the input
        stream. RESPOND causes input video to be clipped, depending on the AFD value, input
        display aspect ratio, and output display aspect ratio, and (except for FRAMECAPTURE
        codec) includes the values in the output. PASSTHROUGH (does not apply to FRAMECAPTURE
        codec) ignores the AFD values and includes the values in the output, so input video is
        not clipped. NONE ignores the AFD values and does not include the values through to the
        output, so input video is not clipped.

        - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
        stretch the video to the specified output resolution (height and width). This option will
        override any position value. DEFAULT may insert black boxes (pillar boxes or letter
        boxes) around the video to provide the specified output resolution.

        - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
        scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
        for most content.

        - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
        most codecs, you can leave this field and height blank in order to use the height and
        width (resolution) from the source. Note, however, that leaving blank is not recommended.
        For the Frame Capture codec, height and width are required.
    """


_ClientDeleteChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    {"HlsInputSettings": Dict[str, Any], "ServerValidation": str},
    total=False,
)


class ClientDeleteChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef(
    _ClientDeleteChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseInputAttachmentsInputSettings` `NetworkInputSettings`

    - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
    HLS manifest.

      - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH
      that most closely matches this value will be chosen, otherwise the highest bandwidth
      stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in
      an HLS manifest.

      - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
      begin this many buffer segments from the end (most recently written segment). When
      not specified, the HLS input will begin with the first segment specified in the m3u8.

      - **Retries** *(integer) --* The number of consecutive times that attempts to read a
      manifest or segment must fail before the input is considered unavailable.

      - **RetryInterval** *(integer) --* The number of seconds between retries when an
      attempt to read a manifest or segment fails.

    - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
    checkCryptographyOnly, cryptography in the certificate will be checked, but not the
    server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name)
    do not strictly match the corresponding certificate's wildcard pattern and would
    otherwise cause the event to error. This setting is ignored for protocols that do not
    use https.
    """


_ClientDeleteChannelResponseInputAttachmentsInputSettingsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseInputAttachmentsInputSettingsTypeDef",
    {
        "AudioSelectors": List[Any],
        "CaptionSelectors": List[Any],
        "DeblockFilter": str,
        "DenoiseFilter": str,
        "FilterStrength": int,
        "InputFilter": str,
        "NetworkInputSettings": ClientDeleteChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef,
        "SourceEndBehavior": str,
        "VideoSelector": Dict[str, Any],
    },
    total=False,
)


class ClientDeleteChannelResponseInputAttachmentsInputSettingsTypeDef(
    _ClientDeleteChannelResponseInputAttachmentsInputSettingsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponseInputAttachments` `InputSettings`

    - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
    that have multiple available.

      - *(dict) --* Audio Selector

        - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
        this name to uniquely identify this Selector. Selector names should be unique per
        input.

        - **SelectorSettings** *(dict) --* The audio selector settings.

          - **AudioLanguageSelection** *(dict) --* Audio Language Selection

            - **LanguageCode** *(string) --* Selects a specific three-letter language code
            from within an audio source.

            - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
            stream demux strictly identifies audio streams by their language descriptor. If a
            PMT update occurs such that an audio stream matching the initially selected
            language is no longer present then mute will be encoded until the language
            returns. If "loose", then on a PMT update the demux will choose another audio
            stream in the program with the same stream type if it can't find one with the
            same language.

          - **AudioPidSelection** *(dict) --* Audio Pid Selection

            - **Pid** *(integer) --* Selects a specific PID from within a source.

    - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
    that have multiple available.

      - *(dict) --* Output groups for this Live Event. Output groups contain information
      about where streams should be distributed.

        - **LanguageCode** *(string) --* When specified this field indicates the three letter
        language code of the caption track to extract from the source.

        - **Name** *(string) --* Name identifier for a caption selector. This name is used to
        associate this caption selector with one or more caption descriptions. Names must be
        unique within an event.

        - **SelectorSettings** *(dict) --* Caption selector settings.

          - **AribSourceSettings** *(dict) --* Arib Source Settings

          - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

            - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
            PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
            is passed through, regardless of selectors.

          - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
            via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
            into 708. 708 data present in the source content will be discarded.

            - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
            intermittent and/or non-aligned SCTE-20 and Embedded captions.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
            within the video track from which to extract captions. Unused for passthrough.

            - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

          - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
            via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
            into 708. 708 data present in the source content will be discarded.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
            within the video track from which to extract captions. Unused for passthrough.

          - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

            - **Pid** *(integer) --* The pid field is used in conjunction with the caption
            selector languageCode field as follows: - Specify PID and Language: Extracts
            captions from that PID; the language is "informational". - Specify PID and omit
            Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
            the specified language, whichever PID that happens to be. - Omit PID and omit
            Language: Valid only if source is DVB-Sub that is being passed through; all
            languages will be passed through.

          - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

            - **PageNumber** *(string) --* Specifies the teletext page number within the data
            stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303).
            Unused for passthrough. Should be specified as a hexadecimal string with no "0x"
            prefix.

    - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

    - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

    - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
    to 5 (strongest).

    - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
    the deblocking filter enabled by default. 1) auto - filtering will be applied depending
    on input type/quality 2) disabled - no filtering will be applied to the input 3) forced -
    filtering will be applied regardless of input type

    - **NetworkInputSettings** *(dict) --* Input settings.

      - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
      HLS manifest.

        - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH
        that most closely matches this value will be chosen, otherwise the highest bandwidth
        stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in
        an HLS manifest.

        - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
        begin this many buffer segments from the end (most recently written segment). When
        not specified, the HLS input will begin with the first segment specified in the m3u8.

        - **Retries** *(integer) --* The number of consecutive times that attempts to read a
        manifest or segment must fail before the input is considered unavailable.

        - **RetryInterval** *(integer) --* The number of seconds between retries when an
        attempt to read a manifest or segment fails.

      - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
      checkCryptographyOnly, cryptography in the certificate will be checked, but not the
      server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name)
      do not strictly match the corresponding certificate's wildcard pattern and would
      otherwise cause the event to error. This setting is ignored for protocols that do not
      use https.

    - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
    input to be streamed indefinitely.

    - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input
    types that have multiple available.

      - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
      works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice
      to determine if any conversion will be performed.

      - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
      follow. This field controls how the value in the colorSpace field will be used.
      fallback means that when the input does include color space data, that data will be
      used, but when the input has no color space data, the value in colorSpace will be used.
      Choose fallback if your input is sometimes missing color space data, but when it does
      have color space data, that data is correct. force means to always use the value in
      colorSpace. Choose force if your input usually has no color space data or might have
      unreliable color space data.

      - **SelectorSettings** *(dict) --* The video selector settings.

        - **VideoSelectorPid** *(dict) --* Video Selector Pid

          - **Pid** *(integer) --* Selects a specific PID from within a video source.

        - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

          - **ProgramId** *(integer) --* Selects a specific program from within a
          multi-program transport stream. If the program doesn't exist, the first program
          within the transport stream will be selected by default.
    """


_ClientDeleteChannelResponseInputAttachmentsTypeDef = TypedDict(
    "_ClientDeleteChannelResponseInputAttachmentsTypeDef",
    {
        "InputAttachmentName": str,
        "InputId": str,
        "InputSettings": ClientDeleteChannelResponseInputAttachmentsInputSettingsTypeDef,
    },
    total=False,
)


class ClientDeleteChannelResponseInputAttachmentsTypeDef(
    _ClientDeleteChannelResponseInputAttachmentsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponse` `InputAttachments`

    - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
    required if the user wants to use this input in an input switch action.

    - **InputId** *(string) --* The ID of the input

    - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

      - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
      that have multiple available.

        - *(dict) --* Audio Selector

          - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
          this name to uniquely identify this Selector. Selector names should be unique per
          input.

          - **SelectorSettings** *(dict) --* The audio selector settings.

            - **AudioLanguageSelection** *(dict) --* Audio Language Selection

              - **LanguageCode** *(string) --* Selects a specific three-letter language code
              from within an audio source.

              - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
              stream demux strictly identifies audio streams by their language descriptor. If a
              PMT update occurs such that an audio stream matching the initially selected
              language is no longer present then mute will be encoded until the language
              returns. If "loose", then on a PMT update the demux will choose another audio
              stream in the program with the same stream type if it can't find one with the
              same language.

            - **AudioPidSelection** *(dict) --* Audio Pid Selection

              - **Pid** *(integer) --* Selects a specific PID from within a source.

      - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
      that have multiple available.

        - *(dict) --* Output groups for this Live Event. Output groups contain information
        about where streams should be distributed.

          - **LanguageCode** *(string) --* When specified this field indicates the three letter
          language code of the caption track to extract from the source.

          - **Name** *(string) --* Name identifier for a caption selector. This name is used to
          associate this caption selector with one or more caption descriptions. Names must be
          unique within an event.

          - **SelectorSettings** *(dict) --* Caption selector settings.

            - **AribSourceSettings** *(dict) --* Arib Source Settings

            - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

              - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
              PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
              is passed through, regardless of selectors.

            - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
              via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
              into 708. 708 data present in the source content will be discarded.

              - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
              intermittent and/or non-aligned SCTE-20 and Embedded captions.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
              within the video track from which to extract captions. Unused for passthrough.

              - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

            - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
              via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
              into 708. 708 data present in the source content will be discarded.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
              within the video track from which to extract captions. Unused for passthrough.

            - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

              - **Pid** *(integer) --* The pid field is used in conjunction with the caption
              selector languageCode field as follows: - Specify PID and Language: Extracts
              captions from that PID; the language is "informational". - Specify PID and omit
              Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
              the specified language, whichever PID that happens to be. - Omit PID and omit
              Language: Valid only if source is DVB-Sub that is being passed through; all
              languages will be passed through.

            - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

              - **PageNumber** *(string) --* Specifies the teletext page number within the data
              stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303).
              Unused for passthrough. Should be specified as a hexadecimal string with no "0x"
              prefix.

      - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

      - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

      - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
      to 5 (strongest).

      - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
      the deblocking filter enabled by default. 1) auto - filtering will be applied depending
      on input type/quality 2) disabled - no filtering will be applied to the input 3) forced -
      filtering will be applied regardless of input type

      - **NetworkInputSettings** *(dict) --* Input settings.

        - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
        HLS manifest.

          - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH
          that most closely matches this value will be chosen, otherwise the highest bandwidth
          stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in
          an HLS manifest.

          - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
          begin this many buffer segments from the end (most recently written segment). When
          not specified, the HLS input will begin with the first segment specified in the m3u8.

          - **Retries** *(integer) --* The number of consecutive times that attempts to read a
          manifest or segment must fail before the input is considered unavailable.

          - **RetryInterval** *(integer) --* The number of seconds between retries when an
          attempt to read a manifest or segment fails.

        - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
        checkCryptographyOnly, cryptography in the certificate will be checked, but not the
        server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name)
        do not strictly match the corresponding certificate's wildcard pattern and would
        otherwise cause the event to error. This setting is ignored for protocols that do not
        use https.

      - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
      input to be streamed indefinitely.

      - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input
      types that have multiple available.

        - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
        works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice
        to determine if any conversion will be performed.

        - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
        follow. This field controls how the value in the colorSpace field will be used.
        fallback means that when the input does include color space data, that data will be
        used, but when the input has no color space data, the value in colorSpace will be used.
        Choose fallback if your input is sometimes missing color space data, but when it does
        have color space data, that data is correct. force means to always use the value in
        colorSpace. Choose force if your input usually has no color space data or might have
        unreliable color space data.

        - **SelectorSettings** *(dict) --* The video selector settings.

          - **VideoSelectorPid** *(dict) --* Video Selector Pid

            - **Pid** *(integer) --* Selects a specific PID from within a video source.

          - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

            - **ProgramId** *(integer) --* Selects a specific program from within a
            multi-program transport stream. If the program doesn't exist, the first program
            within the transport stream will be selected by default.
    """


_ClientDeleteChannelResponseInputSpecificationTypeDef = TypedDict(
    "_ClientDeleteChannelResponseInputSpecificationTypeDef",
    {"Codec": str, "MaximumBitrate": str, "Resolution": str},
    total=False,
)


class ClientDeleteChannelResponseInputSpecificationTypeDef(
    _ClientDeleteChannelResponseInputSpecificationTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponse` `InputSpecification`

    - **Codec** *(string) --* Input codec

    - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

    - **Resolution** *(string) --* Input resolution, categorized coarsely
    """


_ClientDeleteChannelResponsePipelineDetailsTypeDef = TypedDict(
    "_ClientDeleteChannelResponsePipelineDetailsTypeDef",
    {
        "ActiveInputAttachmentName": str,
        "ActiveInputSwitchActionName": str,
        "PipelineId": str,
    },
    total=False,
)


class ClientDeleteChannelResponsePipelineDetailsTypeDef(
    _ClientDeleteChannelResponsePipelineDetailsTypeDef
):
    """
    Type definition for `ClientDeleteChannelResponse` `PipelineDetails`

    - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
    currently being ingested by this pipeline.

    - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
    action that occurred most recently and that resulted in the switch to the current input
    attachment for this pipeline.

    - **PipelineId** *(string) --* Pipeline ID
    """


_ClientDeleteChannelResponseTypeDef = TypedDict(
    "_ClientDeleteChannelResponseTypeDef",
    {
        "Arn": str,
        "ChannelClass": str,
        "Destinations": List[Any],
        "EgressEndpoints": List[ClientDeleteChannelResponseEgressEndpointsTypeDef],
        "EncoderSettings": ClientDeleteChannelResponseEncoderSettingsTypeDef,
        "Id": str,
        "InputAttachments": List[ClientDeleteChannelResponseInputAttachmentsTypeDef],
        "InputSpecification": ClientDeleteChannelResponseInputSpecificationTypeDef,
        "LogLevel": str,
        "Name": str,
        "PipelineDetails": List[ClientDeleteChannelResponsePipelineDetailsTypeDef],
        "PipelinesRunningCount": int,
        "RoleArn": str,
        "State": str,
        "Tags": Dict[str, str],
    },
    total=False,
)


class ClientDeleteChannelResponseTypeDef(_ClientDeleteChannelResponseTypeDef):
    """
    Type definition for `ClientDeleteChannel` `Response`

    - **Arn** *(string) --* The unique arn of the channel.

    - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two
    pipelines or SINGLE_PIPELINE for a channel with one pipeline.

    - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there is
    one destination per output. For other types (HLS, for example), there is one destination per
    packager.

      - *(dict) --* Placeholder documentation for OutputDestination

        - **Id** *(string) --* User-specified id. This is used in an output group or an output.

        - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one
        destination for both encoders.

          - *(dict) --* MediaPackage Output Destination Settings

            - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination
            for this output group. You do not need to specify the individual inputs in
            MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to
            the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in
            the same region.

        - **Settings** *(list) --* Destination settings for a standard output; one destination for
        each redundant encoder.

          - *(dict) --* Placeholder documentation for OutputDestinationSettings

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)

            - **Url** *(string) --* A URL specifying a destination

            - **Username** *(string) --* username for destination

    - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from

      - *(dict) --* Placeholder documentation for ChannelEgressEndpoint

        - **SourceIp** *(string) --* Public IP of where a channel's output comes from

    - **EncoderSettings** *(dict) --* Encoder Settings

      - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

        - *(dict) --* Audio Description

          - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

            - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
            to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

            - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
            corrected using the chosen algorithm. If set to measureOnly, the audio will be measured
            but not adjusted.

            - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
            entered, a default value will be used according to the chosen algorithm. The CALM Act
            (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
            recommends a target of -23 LKFS.

          - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
          for this AudioDescription.

          - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
          values for audioType are defined in ISO-IEC 13818-1.

          - **AudioTypeControl** *(string) --* Determines how audio type is determined.
          followInput: If the input contains an ISO 639 audioType, then that value is passed
          through to the output. If the input contains no ISO 639 audioType, the value in Audio
          Type is included in the output. useConfigured: The value in Audio Type is included in the
          output. Note that this field and audioType are both ignored if inputType is
          broadcasterMixedAd.

          - **CodecSettings** *(dict) --* Audio codec settings.

            - **AacSettings** *(dict) --* Aac Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
              rate control mode and profile.

              - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
              depend on rate control mode and profile. The adReceiverMix setting receives a stereo
              description plus control track and emits a mono AAC encode of the description track,
              with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

              - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
              pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
              (audioType) will be set to 3, which signals to downstream systems that this stream
              contains "broadcaster mixed AD". Note that the input received by the encoder must
              contain pre-mixed audio; the encoder does not perform the mixing. The values in
              audioTypeControl and audioType (in AudioDescription) are ignored when set to
              broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
              + AD.

              - **Profile** *(string) --* AAC Profile.

              - **RateControlMode** *(string) --* Rate Control Mode.

              - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

              - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
              mode and profile.

              - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
              MPEG-2 Transport Stream containers.

              - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
              VBR.

            - **Ac3Settings** *(dict) --* Ac3 Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
              the coding mode.

              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
              emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

              - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
              channels.

              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
              audio is Dolby Digital, dialnorm will be passed through.

              - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
              signaling to the output bitstream as defined in the Dolby Digital specification.

              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
              the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

              - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
              be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
              audio was not supplied from one of these streams, then the static metadata settings
              will be used.

            - **Eac3Settings** *(dict) --* Eac3 Settings

              - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
              attenuation to the surround channels. Only used for 3/2 coding mode.

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
              the coding mode.

              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
              emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

              - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
              channels.

              - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
              all input channels.

              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
              audio is Dolby Digital Plus, dialnorm will be passed through.

              - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

              - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
              ensures that the instantaneous signal peaks do not exceed specified levels.

              - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
              LFE channel

              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
              the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

              - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
              used for 3/2 coding mode.

              - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
              used for 3/2 coding mode.

              - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
              used for 3/2 coding mode.

              - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
              Only used for 3/2 coding mode.

              - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
              sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
              was not supplied from one of these streams, then the static metadata settings will be
              used.

              - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
              be passed through if it is present on the input. This detection is dynamic over the
              life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
              have a consistent DD+ output as the system alternates between passthrough and
              encoding.

              - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
              phase shift to the surround channels. Only used for 3/2 coding mode.

              - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
              mode.

              - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
              center back surround channel is matrix encoded into the left and right surround
              channels.

              - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
              is matrix encoded into the two channels.

            - **Mp2Settings** *(dict) --* Mp2 Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second.

              - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
              codingMode10 (for mono) or codingMode20 (for stereo).

              - **SampleRate** *(float) --* Sample rate in Hz.

            - **PassThroughSettings** *(dict) --* Pass Through Settings

          - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
          used if languageControlMode is useConfigured, or there is no ISO 639 language code
          specified in the input.

          - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
          language code of the output to follow the ISO 639 language code of the input. The
          languageCode will be used when useConfigured is set, or when followInput is selected but
          there is no ISO 639 language code specified by the input.

          - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to
          uniquely identify this AudioDescription. Description names should be unique within this
          Live Event.

          - **RemixSettings** *(dict) --* Settings that control how input audio channels are
          remixed into the output audio channels.

            - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
            appropriate gain adjustments.

              - *(dict) --* Audio Channel Mapping

                - **InputChannelLevels** *(list) --* Indices and gain values for each input channel
                that should be remixed into this output channel.

                  - *(dict) --* Input Channel Level

                    - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values
                    are within the range from -60 (mute) and 6 dB.

                    - **InputChannel** *(integer) --* The index of the input channel used as a
                    source.

                - **OutputChannel** *(integer) --* The index of the output channel being produced.

            - **ChannelsIn** *(integer) --* Number of input channels to be used.

            - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
            values: 1, 2, 4, 6, 8

          - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
          name displayed by the player (eg. English, or Director Commentary).

      - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

        - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
        black. Only bmp and png images are supported.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **State** *(string) --* When set to enabled, causes video, audio and captions to be
        blanked when insertion metadata is added.

      - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.

        - **AvailSettings** *(dict) --* Ad avail settings.

          - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
            added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
            messages and does not apply to OOB messages.

            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
            noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
            webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

          - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
            added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
            messages and does not apply to OOB messages.

            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
            noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
            webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **BlackoutSlate** *(dict) --* Settings for blackout slate.

        - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid
        black. Only bmp and png images are supported.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
        the video, audio, and captions, and raise the "Network Blackout Image" slate when an
        SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted
        when the Network Start Segmentation Descriptor is encountered. The Network End and Network
        Start descriptors must contain a network ID that matches the value entered in "Network ID".

        - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout
        image. Image will be scaled to fill the entire output raster.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
        "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

        - **State** *(string) --* When set to enabled, causes video, audio and captions to be
        blanked when indicated by program metadata.

      - **CaptionDescriptions** *(list) --* Settings for caption decriptions

        - *(dict) --* Output groups for this Live Event. Output groups contain information about
        where streams should be distributed.

          - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use as
          a caption source when generating output captions. This field should match a
          captionSelector name.

          - **DestinationSettings** *(dict) --* Additional settings for captions destination that
          depend on the destination type.

            - **AribDestinationSettings** *(dict) --* Arib Destination Settings

            - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
              setting alignment to centered will place the captions at the bottom center of the
              output. Similarly, setting a left alignment will align captions to the bottom left of
              the output. If x and y positions are given in conjunction with the alignment
              parameter, the font will be justified (either left or centered) relative to those
              coordinates. Selecting "smart" justification will left-justify live subtitles and
              center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
              match.

              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
              captions. All burn-in and DVB-Sub font settings must match.

              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
              rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent
              to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.

              - **Font** *(dict) --* External font file used for caption burn-in. File extension
              must be 'ttf' or 'tte'. Although the user can select output fonts for many different
              types of input captions, embedded, STL and teletext sources use a strict grid system.
              Using external fonts with these caption sources could cause unexpected display of
              proportional fonts. All burn-in and DVB-Sub font settings must match.

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                file accessible to the Live system (eg. a http:// URI) depending on the output
                type. For example, a RTMP destination should have a uri simliar to:
                "rtmp://fmsserver/live".

                - **Username** *(string) --* Documentation update needed

              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
              option is not valid for source captions that are STL, 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255
              is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
              is 96 dpi. All burn-in and DVB-Sub font settings must match.

              - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the
              size of the output. Giving a positive integer will specify the exact font size in
              points. All burn-in and DVB-Sub font settings must match.

              - **OutlineColor** *(string) --* Specifies font outline color. This option is not
              valid for source captions that are either 608/embedded or teletext. These source
              settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
              settings must match.

              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
              is not valid for source captions that are either 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
              captions. All burn-in and DVB-Sub font settings must match.

              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
              opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0
              (transparent). All burn-in and DVB-Sub font settings must match.

              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels to the left. All burn-in and DVB-Sub font settings must match.

              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels above the text. All burn-in and DVB-Sub font settings must match.

              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
              used to generate the output subtitles bitmap. Only applicable for Teletext inputs and
              DVB-Sub/Burn-in outputs.

              - **XPosition** *(integer) --* Specifies the horizontal position of the caption
              relative to the left side of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the left of the output. If no explicit xPosition is
              provided, the horizontal caption position will be determined by the alignment
              parameter. All burn-in and DVB-Sub font settings must match.

              - **YPosition** *(integer) --* Specifies the vertical position of the caption
              relative to the top of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the top of the output. If no explicit yPosition is
              provided, the caption will be positioned towards the bottom of the output. All
              burn-in and DVB-Sub font settings must match.

            - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
              setting alignment to centered will place the captions at the bottom center of the
              output. Similarly, setting a left alignment will align captions to the bottom left of
              the output. If x and y positions are given in conjunction with the alignment
              parameter, the font will be justified (either left or centered) relative to those
              coordinates. Selecting "smart" justification will left-justify live subtitles and
              center-justify pre-recorded subtitles. This option is not valid for source captions
              that are STL or 608/embedded. These source settings are already pre-defined by the
              caption stream. All burn-in and DVB-Sub font settings must match.

              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
              captions. All burn-in and DVB-Sub font settings must match.

              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
              rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
              equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
              must match.

              - **Font** *(dict) --* External font file used for caption burn-in. File extension
              must be 'ttf' or 'tte'. Although the user can select output fonts for many different
              types of input captions, embedded, STL and teletext sources use a strict grid system.
              Using external fonts with these caption sources could cause unexpected display of
              proportional fonts. All burn-in and DVB-Sub font settings must match.

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                file accessible to the Live system (eg. a http:// URI) depending on the output
                type. For example, a RTMP destination should have a uri simliar to:
                "rtmp://fmsserver/live".

                - **Username** *(string) --* Documentation update needed

              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
              option is not valid for source captions that are STL, 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255
              is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
              is 96 dpi. All burn-in and DVB-Sub font settings must match.

              - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
              size of the output. Giving a positive integer will specify the exact font size in
              points. All burn-in and DVB-Sub font settings must match.

              - **OutlineColor** *(string) --* Specifies font outline color. This option is not
              valid for source captions that are either 608/embedded or teletext. These source
              settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
              settings must match.

              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
              is not valid for source captions that are either 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
              captions. All burn-in and DVB-Sub font settings must match.

              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
              opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to
              0 (transparent). All burn-in and DVB-Sub font settings must match.

              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels to the left. All burn-in and DVB-Sub font settings must match.

              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels above the text. All burn-in and DVB-Sub font settings must match.

              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
              used to generate the output subtitles bitmap. Only applicable for Teletext inputs and
              DVB-Sub/Burn-in outputs.

              - **XPosition** *(integer) --* Specifies the horizontal position of the caption
              relative to the left side of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the left of the output. If no explicit xPosition is
              provided, the horizontal caption position will be determined by the alignment
              parameter. This option is not valid for source captions that are STL, 608/embedded or
              teletext. These source settings are already pre-defined by the caption stream. All
              burn-in and DVB-Sub font settings must match.

              - **YPosition** *(integer) --* Specifies the vertical position of the caption
              relative to the top of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the top of the output. If no explicit yPosition is
              provided, the caption will be positioned towards the bottom of the output. This
              option is not valid for source captions that are STL, 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

            - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

            - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
            Destination Settings

            - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
            Settings

            - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
            Destination Settings

            - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

            - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

            - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

            - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

              - **StyleControl** *(string) --* When set to passthrough, passes through style and
              position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
              CFF-TT output or TTML output.

            - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

          - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
          http://www.loc.gov/standards/iso639-2/

          - **LanguageDescription** *(string) --* Human readable information to indicate captions
          available for players (eg. English, or Spanish).

          - **Name** *(string) --* Name of the caption description. Used to associate a caption
          description with an output. Names must be unique within an event.

      - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
      whole.

        - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
        Event.

        - **InputEndAction** *(string) --* Indicates the action to take when the current input
        completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
        restart at the beginning of the first input. When "none" is configured the encoder will
        transcode either black, a solid color, or a user specified slate images per the "Input Loss
        Behavior" configuration until the next input switch occurs (which is controlled through the
        Channel Schedule API).

        - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

          - **BlackFrameMsec** *(integer) --* Documentation update needed

          - **InputLossImageColor** *(string) --* When input loss image type is "color" this field
          specifies the color to use. Value: 6 hex characters representing the values of RGB.

          - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields
          specify the parameters for accessing the slate.

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
            accessible to the Live system (eg. a http:// URI) depending on the output type. For
            example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            - **Username** *(string) --* Documentation update needed

          - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a
          slate into the output after input loss exceeds blackFrameMsec.

          - **RepeatFrameMsec** *(integer) --* Documentation update needed

        - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
        PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to the
        other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each pipeline to
        the Unix epoch.

        - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the
        Live encoder should be paced by its system clock (which optionally may be locked to another
        source via NTP) or should be locked to the clock of the source that is providing the input
        stream.

        - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
        very low video framerates. This is commonly set to enabled for music channels with less
        than one video frame per second.

      - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

        - *(dict) --* Output groups for this Live Event. Output groups contain information about
        where streams should be distributed.

          - **Name** *(string) --* Custom output group name optionally defined by the user. Only
          letters, numbers, and the underscore character allowed; only 32 characters allowed.

          - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

            - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

              - **Destination** *(dict) --* A directory and base filename where archive files
              should be written.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
              before closing and starting a new one.

            - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

              - **Destination** *(dict) --* The destination for the frame capture files. Either the
              URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
              s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
              container, plus a file name prefix (for example,
              mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
              the prefix from the destination field (for example, "curling_") + name modifier + the
              counter (5 digits, starting from 00001) + extension (which is always .jpg). For
              example, curlingLow.00001.jpg

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **HlsGroupSettings** *(dict) --* Hls Group Settings

              - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals
              through to this group of Apple HLS outputs.

                - *(string) --* Hls Ad Markers

              - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
              each output in the media .m3u8 file. Can be used if base manifest is delivered from a
              different URL than the main .m3u8 file.

              - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
              each output in the media .m3u8 file. Can be used if base manifest is delivered from a
              different URL than the main .m3u8 file.

              - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
              caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

                - *(dict) --* Maps a caption channel to an ISO 693-2 language code
                (http://www.loc.gov/standards/iso639-2), with an optional description.

                  - **CaptionChannel** *(integer) --* The closed caption channel being described by
                  this CaptionLanguageMapping. Each channel mapping must have a unique channel
                  number (maximum of 4)

                  - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                  http://www.loc.gov/standards/iso639-2)

                  - **LanguageDescription** *(string) --* Textual description of language

              - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
              captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one
              language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each
              Language Code you specify. Make sure to specify the languages in the order in which
              they appear in the original source (if the source is embedded format) or the order of
              the caption selectors (if the source is other than embedded). Otherwise, languages in
              the manifest will not match up properly with the output captions. none: Include
              CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from
              the manifest.

              - **ClientCache** *(string) --* When set to "disabled", sets the
              #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
              segments for later replay.

              - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default
              RFC-4281) during m3u8 playlist generation.

              - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
              16-byte hex value represented by a 32-character text string. If ivSource is set to
              "explicit" then this parameter is required and is used as the IV for encryption.

              - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
              manifest files, and encryption keys (if enabled).

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **DirectoryStructure** *(string) --* Place segments in subdirectories.

              - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
              scheme. Exclude this parameter if no encryption is desired.

              - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

                - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                  transfer encoding to Akamai. User should contact Akamai to enable this feature.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                  the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                  to wait until a restart is initiated. A value of 0 means never restart.

                  - **Salt** *(string) --* Salt for authenticated Akamai.

                  - **Token** *(string) --* Token parameter for authenticated akamai. If not
                  specified, _gda_ is used.

                - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                  the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                  to wait until a restart is initiated. A value of 0 means never restart.

                - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are
                  stored in non-persistent memory for faster reading and writing.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                  the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                  to wait until a restart is initiated. A value of 0 means never restart.

                - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                  transfer encoding to WebDAV.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                  the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                  to wait until a restart is initiated. A value of 0 means never restart.

              - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
              manifest, but do create the master and media manifests (according to the Output
              Selection field). STANDARD: Create an I-frame-only manifest for each output that
              contains video, as well as the other manifests (according to the Output Selection
              field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
              I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
              position. For example, #EXT-X-BYTERANGE:160364@1461888"

              - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
              maximum number of segments in the media manifest file. After this maximum, older
              segments are removed from the media manifest. This number must be less than or equal
              to the Keep Segments field.

              - **InputLossAction** *(string) --* Parameter that control output group behavior on
              input loss.

              - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization
              Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
              If set to "include", IV is listed in the manifest, otherwise the IV is not in the
              manifest.

              - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
              Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
              If this setting is "followsSegmentNumber", it will cause the IV to change every
              segment (to match the segment number). If this is set to "explicit", you must enter a
              constantIv value.

              - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
              number of media segments (.ts files) to retain in the destination directory.

              - **KeyFormat** *(string) --* The value specifies how the key is represented in the
              resource identified by the URI. If parameter is absent, an implicit value of
              "identity" is used. A reverse DNS string can also be given.

              - **KeyFormatVersions** *(string) --* Either a single positive integer version value
              or a slash delimited list of version values (1/2/3).

              - **KeyProviderSettings** *(dict) --* The key provider settings.

                - **StaticKeySettings** *(dict) --* Static Key Settings

                  - **KeyProviderServer** *(dict) --* The URL of the license server used for
                  protecting content.

                    - **PasswordParam** *(string) --* key used to extract the password from EC2
                    Parameter store

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to
                    a file accessible to the Live system (eg. a http:// URI) depending on the
                    output type. For example, a RTMP destination should have a uri simliar to:
                    "rtmp://fmsserver/live".

                    - **Username** *(string) --* Documentation update needed

                  - **StaticKeyValue** *(string) --* Static key value as a 32 character hexadecimal
                  string.

              - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

              - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
              should use floating point or integer values for segment duration.

              - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
              looking ahead and back within the specified range for a nearby avail and extending
              the segment size if needed.

              - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
              the destination and manifest. If "live", only the number segments specified in
              keepSegments and indexNSegments are kept; newer segments replace older segments,
              which may prevent players from rewinding all the way to the beginning of the event.
              VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
              converting it to a "VOD" type manifest on completion of the stream.

              - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests (master
              manifest, if applicable, and media manifests) for this output group. SEGMENTSONLY:
              Does not generate any manifests for this output group.

              - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag
              in .m3u8 manifest files. The value is calculated as follows: either the program date
              and time are initialized using the input timecode source, or the time is initialized
              using the input timecode source and the date is initialized using the timestampOffset.

              - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
              EXT-X-PROGRAM-DATE-TIME entry, in seconds.

              - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
              each pipeline includes information about both pipelines: first its own media files,
              then the media files of the other pipeline. This feature allows playout device that
              support stale manifest detection to switch from one manifest to the other, when the
              current manifest seems to be stale. There are still two destinations and two master
              manifests, but both master manifests reference the media files from both pipelines.
              DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
              about its own pipeline only. For an HLS output group with MediaPackage as the
              destination, the DISABLED behavior is always followed. MediaPackage regenerates the
              manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

              - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
              create (in seconds). Note that segments will end on the next keyframe after this
              number of seconds, so actual segment length may be longer.

              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
              configured segment size is always used.

              - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
              subdirectory before starting a new one. directoryStructure must be
              subdirectoryPerStream for this setting to have an effect.

              - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
              video in EXT-X-STREAM-INF tag of variant manifest.

              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

              - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
              offset to fine tune the timestamps.

              - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
              multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
              program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags
              to index segments for playback. A typical use for this value is when sending the
              output to AWS Elemental MediaConvert, which can accept only a single media file.
              Playback while the channel is running is not guaranteed due to HTTP server caching.

            - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

              - **Destination** *(dict) --* MediaPackage channel destination.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

              - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point Identity"
              element used in each message placed in the sparse track. Only enabled if
              sparseTrackType is not "none".

              - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only
              MS Smooth output, the fragment absolute time will be set to the current timecode.
              This option does not write timecodes to the audio elementary stream.

              - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
              certificate chain to a trusted Certificate Authority (CA). This will cause https
              outputs to self-signed certificates to fail.

              - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
              retrying connection to the IIS server if the connection is lost. Content will be
              cached during this time and the cache will be be delivered to the IIS server once the
              connection is re-established.

              - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
              Elemental Live acts as a "Push" encoder to IIS.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
              only be specified if eventIdMode is set to useConfigured.

              - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
              IIS server. If no event ID is sent and the same Live Event is used without changing
              the publishing point, clients might see cached video from the previous run. Options:
              - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and
              send an event ID based on the current timestamp - "noEventId" - do not send an event
              ID to the IIS server.

              - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
              server when stopping the event

              - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
              outputs.

              - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds).
              Fragment length must be compatible with GOP size and framerate.

              - **InputLossAction** *(string) --* Parameter that control output group behavior on
              input loss.

              - **NumRetries** *(integer) --* Number of retry attempts.

              - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
              to output failure, due to exhausting the numRetries on one segment, or exceeding
              filecacheDuration.

              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
              configured segment size is always used.

              - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the
              second pipeline.

              - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
              to generate a sparse track in this group of MS-Smooth outputs.

              - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so
              publishing point doesn't start until all streams start.

              - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
              timestampOffsetMode is set to useConfiguredOffset.

              - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
              useEventStartDate: Use the date the event was started as the offset -
              useConfiguredOffset: Use an explicitly configured date as the offset

            - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

              - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting
              with CDN

              - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up.
              If remote origin server stalls the RTMP connection and does not accept content fast
              enough the 'Media Cache' will fill up. When the cache reaches the duration specified
              by cacheLength the cache will stop accepting new content. If set to
              disconnectImmediately, the RTMP output will force a disconnect. Clear the media
              cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
              output will wait up to 5 minutes to allow the origin server to begin accepting data
              again.

              - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
              buffer size.

              - **CaptionData** *(string) --* Controls the types of data that passes to
              onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
              passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608
              data from both fields will be passed. If set to 'field1608' then only the data
              carried in 608 from field 1 video will be passed.

              - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input
              becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput:
              Stop transmitting data until input returns. This does not close the underlying RTMP
              connection.

              - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
              wait until a restart is initiated. A value of 0 means never restart.

            - **UdpGroupSettings** *(dict) --* Udp Group Settings

              - **InputLossAction** *(string) --* Specifies behavior of last resort when input
              video is lost, and no more backup inputs are available. When dropTs is selected the
              entire transport stream will stop being emitted. When dropProgram is selected the
              program can be dropped from the transport stream (and replaced with null packets to
              meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream
              will continue to be produced normally with repeat frames, black frames, or slate
              frames substituted for the absent input video.

              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

          - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

            - *(dict) --* Output settings. There can be multiple outputs within a group.

              - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
              audio sources for this output.

                - *(string) --* Placeholder documentation for __string

              - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
              as caption sources for this output.

                - *(string) --* Placeholder documentation for __string

              - **OutputName** *(string) --* The name used to identify an output.

              - **OutputSettings** *(dict) --* Output type-specific settings.

                - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                  - **ContainerSettings** *(dict) --* Settings specific to the container type of
                  the file.

                    - **M2tsSettings** *(dict) --* M2ts Settings

                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                      streams will be removed from the program if the selected input audio stream
                      is removed from the input. This allows the output audio configuration to
                      dynamically change based on input configuration. If this is set to
                      encodeSilence, all output audio streams will output encoded silence when not
                      connected to an active input stream.

                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                      muxing and removes video descriptor.

                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                      for ARIB Captions will be auto-selected from unused pids. If set to
                      useConfigured, ARIB Captions will be on the configured pid number.

                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                      for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                      stream(s) in the transport stream. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81
                      for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type =
                      0x06.

                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                      bits per second. Setting to 0 lets the muxer automatically determine the
                      appropriate bitrate.

                      - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                      model for accurate interleaving. Setting to bufferModel to none can lead to
                      lower latency, but low-memory devices may not be able to play back the stream
                      without interruptions.

                      - **CcDescriptor** *(string) --* When set to enabled, generates
                      captionServiceDescriptor in PMT.

                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT)
                      at the specified table repetition interval.

                        - **NetworkId** *(integer) --* The numeric value placed in the Network
                        Information Table (NIT).

                        - **NetworkName** *(string) --* The network name text placed in the
                        networkNameDescriptor inside the Network Information Table. Maximum length
                        is 256 characters.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT)
                      at the specified table repetition interval.

                        - **OutputSdt** *(string) --* Selects method of inserting SDT information
                        into output stream. The sdtFollow setting copies SDT information from input
                        stream to output stream. The sdtFollowIfPresent setting copies SDT
                        information from input stream to output stream if SDT information is
                        present in the input, otherwise it will fall back on the user-defined
                        values. The sdtManual setting means user will enter the SDT information.
                        The sdtNone setting means output stream will not contain SDT information.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                        - **ServiceName** *(string) --* The service name placed in the
                        serviceDescriptor in the Service Description Table. Maximum length is 256
                        characters.

                        - **ServiceProviderName** *(string) --* The service provider name placed in
                        the serviceDescriptor in the Service Description Table. Maximum length is
                        256 characters.

                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                      Subtitle data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                      specified table repetition interval.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                      DVB Teletext data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                      input source to this output.

                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                      audio EBP markers will be added to partitions 3 and 4. The interval between
                      these additional markers will be fixed, and will be slightly shorter than the
                      video EBP marker interval. Only available when EBP Cablelabs segmentation
                      markers are selected. Partitions 1 and 2 will always follow the video
                      interval.

                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                      Points do not come within the specified time interval of each other by
                      looking ahead at input video. If another EBP is going to come in within the
                      specified time interval, the current EBP is not emitted, and the segment is
                      "stretched" to the next marker. The lookahead value does not add latency to
                      the system. The Live Event must be configured elsewhere to create sufficient
                      latency to make the lookahead accurate.

                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If
                      set to videoAndAudioPids, EBP markers will be placed on the video PID and all
                      audio PIDs. If set to videoPid, EBP markers will be placed on only the video
                      PID.

                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                      PES header.

                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Platform data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                      Signal data to this output. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **FragmentTime** *(float) --* The length in seconds of each fragment. Only
                      used with EBP markers.

                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                      input source to this output.

                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV
                      data to this output. Multiple values are accepted, and can be entered in
                      ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                      values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or
                      0x1ff6).

                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                      packets to insert into the transport stream. This can be used if a downstream
                      encryption system requires periodic null packets.

                      - **PatInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. Valid values are 0, 10..1000.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                      Reference value is inserted for every Packetized Elementary Stream (PES)
                      header. This parameter is effective only when the PCR PID is the same as the
                      video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock Reference (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the encoder
                      will assign the same value as the Video PID. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **PmtInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. Valid values are 0, 10..1000.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                      (PMT) in the transport stream. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **ProgramNum** *(integer) --* The value of the program number field in the
                      Program Map Table.

                      - **RateMode** *(string) --* When vbr, does not insert null packets into
                      transport stream to fill specified bitrate. The bitrate setting acts as the
                      maximum bitrate when vbr is set.

                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                      SCTE-27 data to this output. Multiple values are accepted, and can be entered
                      in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                      input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                      segmentationTime period. raiSegstart sets the Random Access Indicator bit in
                      the adaptation field. raiAdapt sets the RAI bit and adds the current timecode
                      in the private data bytes. psiSegstart inserts PAT and PMT tables at the
                      start of segments. ebp adds Encoder Boundary Point information to the
                      adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                      ebpLegacy adds Encoder Boundary Point information to the adaptation field
                      using a legacy proprietary format.

                      - **SegmentationStyle** *(string) --* The segmentation style parameter
                      controls how segmentation markers are inserted into the transport stream.
                      With avails, it is possible that segments may be truncated, which can
                      influence where future segmentation markers are inserted. When a segmentation
                      style of "resetCadence" is selected and a segment is truncated due to an
                      avail, we will reset the segmentation cadence. This means the subsequent
                      segment will have a duration of $segmentationTime seconds. When a
                      segmentation style of "maintainCadence" is selected and a segment is
                      truncated due to an avail, we will not reset the segmentation cadence. This
                      means the subsequent segment will likely be truncated as well. However, all
                      segments after that will have a duration of $segmentationTime seconds. Note
                      that EBP lookahead is a slight exception to this rule.

                      - **SegmentationTime** *(float) --* The length in seconds of each segment.
                      Required unless markers is set to None_.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata will be passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                      stream in the transport stream. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                  - **Extension** *(string) --* Output file extension. If excluded, this will be
                  auto-selected from the container type.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Required for multiple outputs of the same type.

                - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                  - **NameModifier** *(string) --* Required if the output group contains more than
                  one output. This modifier forms part of the output file name.

                - **HlsOutputSettings** *(dict) --* Hls Output Settings

                  - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                  settings are different for audio-only outputs.

                    - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                      - **AudioGroupId** *(string) --* Specifies the group to which the audio
                      Rendition belongs.

                      - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                      to use as the cover art for an audio-only output. We recommend a low bit-size
                      file because the image increases the output audio bandwidth. The image is
                      attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as
                      per the "ID3 tag version 2.4.0 - Native Frames" standard.

                        - **PasswordParam** *(string) --* key used to extract the password from EC2
                        Parameter store

                        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                        to a file accessible to the Live system (eg. a http:// URI) depending on
                        the output type. For example, a RTMP destination should have a uri simliar
                        to: "rtmp://fmsserver/live".

                        - **Username** *(string) --* Documentation update needed

                      - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                      supported: Audio-Only Variant Stream The client can play back this audio-only
                      stream instead of video in low-bandwidth scenarios. Represented as an
                      EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default
                      Alternate rendition that the client should try to play back by default.
                      Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES,
                      AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition
                      that the client may try to play back by default. Represented as an
                      EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate
                      Audio, not Auto Select Alternate rendition that the client will not try to
                      play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with
                      DEFAULT=NO, AUTOSELECT=NO

                    - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                      - **AudioRenditionSets** *(string) --* List all the audio groups that are
                      used with the video output stream. Input all the audio GROUP-IDs that are
                      associated to the video, separate by ','.

                      - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                        - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                        for each PES packet.

                        - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                        audio stream(s) in the transport stream. Multiple values are accepted, and
                        can be entered in ranges and/or by comma separation. Can be entered as
                        decimal or hexadecimal values.

                        - **EcmPid** *(string) --* This parameter is unused and deprecated.

                        - **PatInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. A value of \\"0\\"
                        writes out the PMT once per segment file.

                        - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                        Clock Reference value is inserted for every Packetized Elementary Stream
                        (PES) header. This parameter is effective only when the PCR PID is the same
                        as the video or audio elementary stream.

                        - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                        Clock References (PCRs) inserted into the transport stream.

                        - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                        Reference (PCR) in the transport stream. When no value is given, the
                        encoder will assign the same value as the Video PID. Can be entered as a
                        decimal or hexadecimal value.

                        - **PmtInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. A value of \\"0\\"
                        writes out the PMT once per segment file.

                        - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                        Table (PMT) in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                        - **ProgramNum** *(integer) --* The value of the program number field in
                        the Program Map Table.

                        - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                        SCTE-35 signals from the input source to this output.

                        - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                        in the transport stream. Can be entered as a decimal or hexadecimal value.

                        - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                        metadata is passed through from input to output.

                        - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                        metadata stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **TransportStreamId** *(integer) --* The value of the transport stream ID
                        field in the Program Map Table.

                        - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                        video stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Accepts \\"Format
                  Identifiers\\":#formatIdentifierParameters.

                  - **SegmentModifier** *(string) --* String concatenated to end of segment
                  filenames.

                - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

                - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                  - **H265PackagingType** *(string) --* Only applicable when this output is
                  referencing an H.265 video description. Specifies whether MP4 segments should be
                  packaged as HEV1 or HVC1.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Required for multiple outputs of the same type.

                - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                  - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls
                  certificate chain to a trusted Certificate Authority (CA). This will cause rtmps
                  outputs with self-signed certificates to fail.

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying a connection to the Flash Media server if the connection is lost.

                  - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                  rtmp://host/appname). For connection to Akamai, a username and password must be
                  supplied. URI fields accept format identifiers.

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                  - **NumRetries** *(integer) --* Number of retry attempts.

                - **UdpOutputSettings** *(dict) --* Udp Output Settings

                  - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                  values increase latency through the transcoder but simultaneously assist the
                  transcoder in maintaining a constant, low-jitter UDP/RTP output while
                  accommodating clock recovery, input switching, input disruptions, picture
                  reordering, etc.

                  - **ContainerSettings** *(dict) --* Udp Container Settings

                    - **M2tsSettings** *(dict) --* M2ts Settings

                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                      streams will be removed from the program if the selected input audio stream
                      is removed from the input. This allows the output audio configuration to
                      dynamically change based on input configuration. If this is set to
                      encodeSilence, all output audio streams will output encoded silence when not
                      connected to an active input stream.

                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                      muxing and removes video descriptor.

                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                      for ARIB Captions will be auto-selected from unused pids. If set to
                      useConfigured, ARIB Captions will be on the configured pid number.

                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                      for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                      stream(s) in the transport stream. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81
                      for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type =
                      0x06.

                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                      bits per second. Setting to 0 lets the muxer automatically determine the
                      appropriate bitrate.

                      - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                      model for accurate interleaving. Setting to bufferModel to none can lead to
                      lower latency, but low-memory devices may not be able to play back the stream
                      without interruptions.

                      - **CcDescriptor** *(string) --* When set to enabled, generates
                      captionServiceDescriptor in PMT.

                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT)
                      at the specified table repetition interval.

                        - **NetworkId** *(integer) --* The numeric value placed in the Network
                        Information Table (NIT).

                        - **NetworkName** *(string) --* The network name text placed in the
                        networkNameDescriptor inside the Network Information Table. Maximum length
                        is 256 characters.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT)
                      at the specified table repetition interval.

                        - **OutputSdt** *(string) --* Selects method of inserting SDT information
                        into output stream. The sdtFollow setting copies SDT information from input
                        stream to output stream. The sdtFollowIfPresent setting copies SDT
                        information from input stream to output stream if SDT information is
                        present in the input, otherwise it will fall back on the user-defined
                        values. The sdtManual setting means user will enter the SDT information.
                        The sdtNone setting means output stream will not contain SDT information.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                        - **ServiceName** *(string) --* The service name placed in the
                        serviceDescriptor in the Service Description Table. Maximum length is 256
                        characters.

                        - **ServiceProviderName** *(string) --* The service provider name placed in
                        the serviceDescriptor in the Service Description Table. Maximum length is
                        256 characters.

                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                      Subtitle data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                      specified table repetition interval.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                      DVB Teletext data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                      input source to this output.

                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                      audio EBP markers will be added to partitions 3 and 4. The interval between
                      these additional markers will be fixed, and will be slightly shorter than the
                      video EBP marker interval. Only available when EBP Cablelabs segmentation
                      markers are selected. Partitions 1 and 2 will always follow the video
                      interval.

                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                      Points do not come within the specified time interval of each other by
                      looking ahead at input video. If another EBP is going to come in within the
                      specified time interval, the current EBP is not emitted, and the segment is
                      "stretched" to the next marker. The lookahead value does not add latency to
                      the system. The Live Event must be configured elsewhere to create sufficient
                      latency to make the lookahead accurate.

                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If
                      set to videoAndAudioPids, EBP markers will be placed on the video PID and all
                      audio PIDs. If set to videoPid, EBP markers will be placed on only the video
                      PID.

                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                      PES header.

                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Platform data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                      Signal data to this output. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **FragmentTime** *(float) --* The length in seconds of each fragment. Only
                      used with EBP markers.

                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                      input source to this output.

                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV
                      data to this output. Multiple values are accepted, and can be entered in
                      ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                      values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or
                      0x1ff6).

                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                      packets to insert into the transport stream. This can be used if a downstream
                      encryption system requires periodic null packets.

                      - **PatInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. Valid values are 0, 10..1000.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                      Reference value is inserted for every Packetized Elementary Stream (PES)
                      header. This parameter is effective only when the PCR PID is the same as the
                      video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock Reference (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the encoder
                      will assign the same value as the Video PID. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **PmtInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. Valid values are 0, 10..1000.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                      (PMT) in the transport stream. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **ProgramNum** *(integer) --* The value of the program number field in the
                      Program Map Table.

                      - **RateMode** *(string) --* When vbr, does not insert null packets into
                      transport stream to fill specified bitrate. The bitrate setting acts as the
                      maximum bitrate when vbr is set.

                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                      SCTE-27 data to this output. Multiple values are accepted, and can be entered
                      in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                      input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                      segmentationTime period. raiSegstart sets the Random Access Indicator bit in
                      the adaptation field. raiAdapt sets the RAI bit and adds the current timecode
                      in the private data bytes. psiSegstart inserts PAT and PMT tables at the
                      start of segments. ebp adds Encoder Boundary Point information to the
                      adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                      ebpLegacy adds Encoder Boundary Point information to the adaptation field
                      using a legacy proprietary format.

                      - **SegmentationStyle** *(string) --* The segmentation style parameter
                      controls how segmentation markers are inserted into the transport stream.
                      With avails, it is possible that segments may be truncated, which can
                      influence where future segmentation markers are inserted. When a segmentation
                      style of "resetCadence" is selected and a segment is truncated due to an
                      avail, we will reset the segmentation cadence. This means the subsequent
                      segment will have a duration of $segmentationTime seconds. When a
                      segmentation style of "maintainCadence" is selected and a segment is
                      truncated due to an avail, we will not reset the segmentation cadence. This
                      means the subsequent segment will likely be truncated as well. However, all
                      segments after that will have a duration of $segmentationTime seconds. Note
                      that EBP lookahead is a slight exception to this rule.

                      - **SegmentationTime** *(float) --* The length in seconds of each segment.
                      Required unless markers is set to None_.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata will be passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                      stream in the transport stream. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                  - **Destination** *(dict) --* Destination address and port number for RTP or UDP
                  packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or
                  udp://10.100.100.100:5002).

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                  - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                  Error Correction on UDP outputs.

                    - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                    the FEC protection matrix. The number of transport stream packets per column
                    error correction packet. Must be between 4 and 20, inclusive.

                    - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                    - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the
                    FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC
                    is used, then larger values increase robustness. If Row FEC is used, then this
                    is the number of transport stream packets per row error correction packet, and
                    the value must be between 4 and 20, inclusive, if includeFec is columnAndRow.
                    If includeFec is column, this value must be 1 to 20, inclusive.

              - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the
              source for this output.

      - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
      information from inputs.

        - **Source** *(string) --* Identifies the source for the timecode that will be associated
        with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode
        from the the source. If no embedded timecode is detected in the source, the system falls
        back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time.
        -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.

        - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
        resynchronized to the input timecode. Discrepancies below this threshold are permitted to
        avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not
        specified.

      - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

        - *(dict) --* Video settings for this stream.

          - **CodecSettings** *(dict) --* Video codec settings.

            - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

              - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
              for inclusion in the output. For example, "10" means capture a frame every 10 seconds.

            - **H264Settings** *(dict) --* H264 Settings

              - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
              quantizers to vary to improve visual quality.

              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
              output stream. If afdSignaling is "auto", the system will try to preserve the input
              AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
              value will be the value configured in the fixedAfd parameter.

              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
              control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
              output must have a unique value when its bitrate is rounded down to the nearest
              multiple of 1000.

              - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
              filled (HRD buffer model).

              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              - **ColorSpaceSettings** *(dict) --* Color Space settings

                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
                conversion to the output

                - **Rec601Settings** *(dict) --* Rec601 Settings

                - **Rec709Settings** *(dict) --* Rec709 Settings

              - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
              or High profile) or cavlc.

              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
              the output stream. Only valid when afdSignaling is set to 'Fixed'.

              - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
              frame to reduce flicker or 'pop' on I-frames.

              - **FramerateControl** *(string) --* This field indicates how the output video frame
              rate is specified. If "specified" is selected then the output video frame rate is
              determined by framerateNumerator and framerateDenominator, else if
              "initializeFromSource" is selected then the output video frame rate will be set equal
              to the input video frame rate of the first input.

              - **FramerateDenominator** *(integer) --* Framerate denominator.

              - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
              fraction, e.g. 24000 / 1001 = 23.976 fps.

              - **GopBReference** *(string) --* Documentation update needed

              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
              applications, it is recommended that this be set to 1 so a decoder joining mid-stream
              will receive an IDR frame as quickly as possible. Setting this value to 0 will break
              output segmenting.

              - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
              seconds per gopSizeUnits. Must be greater than zero.

              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
              seconds. If seconds the system will convert the gopSize into a frame count at run
              time.

              - **Level** *(string) --* H.264 Level.

              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
              decrease latency and memory usage, while high can produce better quality for certain
              content.

              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
              Set the maximum bitrate in order to accommodate expected spikes in the complexity of
              the video.

              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
              enabled. Enforces separation between repeated (cadence) I-frames and I-frames
              inserted by Scene Change Detection. If a scene change I-frame is within I-interval
              frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
              I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
              normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
              Min-I-interval - 1

              - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
              use more than requested if using B-frames and/or interlaced encoding.

              - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
              is specified. If "specified" is selected then the output video pixel aspect ratio is
              determined by parNumerator and parDenominator, else if "initializeFromSource" is
              selected then the output pixsel aspect ratio will be set equal to the input video
              pixel aspect ratio of the first input.

              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              - **Profile** *(string) --* H.264 Profile.

              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
              encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
              quality level field and Max bitrate field that suit your most important viewing
              devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
              bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
              Quality level: 6. Max bitrate: 1M to 1.5M

              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
              specified quality level except when it is constrained by the maximum bitrate.
              Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
              depending on the video complexity. Recommended instead of QVBR if you want to
              maintain a specific average bitrate over the duration of the channel. CBR: Quality
              varies, depending on the video complexity. Recommended only if you distribute your
              assets to devices that cannot handle variable bitrates.

              - **ScanType** *(string) --* Sets the scan type of the output to progressive or
              top-field-first interlaced.

              - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
              when scene change is detected. - Off: does not force an I-frame when scene change is
              detected.

              - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
              to the number of macroblock rows for progressive pictures, and less than or equal to
              half the number of macroblock rows for interlaced pictures. This field is optional;
              when no value is specified the encoder will choose the number of slices based on
              encode resolution.

              - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
              reduce high-frequency content in the encoded image.

              - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
              frame based on spatial variation of content complexity.

              - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
              sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
              improve visual quality.

              - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

              - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
              frame based on temporal variation of content complexity.

              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
              into the video elementary stream. - 'disabled': Do not include timecodes -
              'picTimingSei': Pass through picture timing SEI messages from the source specified in
              Timecode Config

            - **H265Settings** *(dict) --* H265 Settings

              - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
              quantizers to vary to improve visual quality.

              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
              output stream. If afdSignaling is "auto", the system will try to preserve the input
              AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
              value will be the value configured in the fixedAfd parameter.

              - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
              Alternative Transfer Function SEI message to support backwards compatibility with
              non-HDR decoders and displays.

              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
              control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
              output must have a unique value when its bitrate is rounded down to the nearest
              multiple of 1000.

              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              - **ColorSpaceSettings** *(dict) --* Color Space settings

                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
                conversion to the output

                - **Hdr10Settings** *(dict) --* Hdr10 Settings

                  - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
                  defining the maximum light level, in nits, of any single pixel within an encoded
                  HDR video stream or file.

                  - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                  metadata value defining the maximum average light level, in nits, for any single
                  frame within an encoded HDR video stream or file.

                - **Rec601Settings** *(dict) --* Rec601 Settings

                - **Rec709Settings** *(dict) --* Rec709 Settings

              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
              the output stream. Only valid when afdSignaling is set to 'Fixed'.

              - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
              frame to reduce flicker or 'pop' on I-frames.

              - **FramerateDenominator** *(integer) --* Framerate denominator.

              - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
              fraction, e.g. 24000 / 1001 = 23.976 fps.

              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
              applications, it is recommended that this be set to 1 so a decoder joining mid-stream
              will receive an IDR frame as quickly as possible. Setting this value to 0 will break
              output segmenting.

              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
              seconds per gopSizeUnits. Must be greater than zero.

              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
              seconds. If seconds the system will convert the gopSize into a frame count at run
              time.

              - **Level** *(string) --* H.265 Level.

              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
              decrease latency and memory usage, while high can produce better quality for certain
              content.

              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
              enabled. Enforces separation between repeated (cadence) I-frames and I-frames
              inserted by Scene Change Detection. If a scene change I-frame is within I-interval
              frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
              I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
              normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
              Min-I-interval - 1

              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              - **Profile** *(string) --* H.265 Profile.

              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
              encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
              quality level field and Max bitrate field that suit your most important viewing
              devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
              bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
              Quality level: 6. Max bitrate: 1M to 1.5M

              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
              specified quality level except when it is constrained by the maximum bitrate.
              Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
              on the video complexity. Recommended only if you distribute your assets to devices
              that cannot handle variable bitrates.

              - **ScanType** *(string) --* Sets the scan type of the output to progressive or
              top-field-first interlaced.

              - **SceneChangeDetect** *(string) --* Scene change detection.

              - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
              to the number of macroblock rows for progressive pictures, and less than or equal to
              half the number of macroblock rows for interlaced pictures. This field is optional;
              when no value is specified the encoder will choose the number of slices based on
              encode resolution.

              - **Tier** *(string) --* H.265 Tier.

              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
              into the video elementary stream. - 'disabled': Do not include timecodes -
              'picTimingSei': Pass through picture timing SEI messages from the source specified in
              Timecode Config

          - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
          most codecs, you can leave this field and width blank in order to use the height and
          width (resolution) from the source. Note, however, that leaving blank is not recommended.
          For the Frame Capture codec, height and width are required.

          - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to
          uniquely identify this Description. Description names should be unique within this Live
          Event.

          - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the input
          stream. RESPOND causes input video to be clipped, depending on the AFD value, input
          display aspect ratio, and output display aspect ratio, and (except for FRAMECAPTURE
          codec) includes the values in the output. PASSTHROUGH (does not apply to FRAMECAPTURE
          codec) ignores the AFD values and includes the values in the output, so input video is
          not clipped. NONE ignores the AFD values and does not include the values through to the
          output, so input video is not clipped.

          - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
          stretch the video to the specified output resolution (height and width). This option will
          override any position value. DEFAULT may insert black boxes (pillar boxes or letter
          boxes) around the video to provide the specified output resolution.

          - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
          scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
          for most content.

          - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
          most codecs, you can leave this field and height blank in order to use the height and
          width (resolution) from the source. Note, however, that leaving blank is not recommended.
          For the Frame Capture codec, height and width are required.

    - **Id** *(string) --* The unique id of the channel.

    - **InputAttachments** *(list) --* List of input attachments for channel.

      - *(dict) --* Placeholder documentation for InputAttachment

        - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
        required if the user wants to use this input in an input switch action.

        - **InputId** *(string) --* The ID of the input

        - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

          - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
          that have multiple available.

            - *(dict) --* Audio Selector

              - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
              this name to uniquely identify this Selector. Selector names should be unique per
              input.

              - **SelectorSettings** *(dict) --* The audio selector settings.

                - **AudioLanguageSelection** *(dict) --* Audio Language Selection

                  - **LanguageCode** *(string) --* Selects a specific three-letter language code
                  from within an audio source.

                  - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
                  stream demux strictly identifies audio streams by their language descriptor. If a
                  PMT update occurs such that an audio stream matching the initially selected
                  language is no longer present then mute will be encoded until the language
                  returns. If "loose", then on a PMT update the demux will choose another audio
                  stream in the program with the same stream type if it can't find one with the
                  same language.

                - **AudioPidSelection** *(dict) --* Audio Pid Selection

                  - **Pid** *(integer) --* Selects a specific PID from within a source.

          - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
          that have multiple available.

            - *(dict) --* Output groups for this Live Event. Output groups contain information
            about where streams should be distributed.

              - **LanguageCode** *(string) --* When specified this field indicates the three letter
              language code of the caption track to extract from the source.

              - **Name** *(string) --* Name identifier for a caption selector. This name is used to
              associate this caption selector with one or more caption descriptions. Names must be
              unique within an event.

              - **SelectorSettings** *(dict) --* Caption selector settings.

                - **AribSourceSettings** *(dict) --* Arib Source Settings

                - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

                  - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
                  PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
                  is passed through, regardless of selectors.

                - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
                  via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
                  into 708. 708 data present in the source content will be discarded.

                  - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
                  intermittent and/or non-aligned SCTE-20 and Embedded captions.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
                  within the video track from which to extract captions. Unused for passthrough.

                  - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

                - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
                  via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
                  into 708. 708 data present in the source content will be discarded.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
                  within the video track from which to extract captions. Unused for passthrough.

                - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

                  - **Pid** *(integer) --* The pid field is used in conjunction with the caption
                  selector languageCode field as follows: - Specify PID and Language: Extracts
                  captions from that PID; the language is "informational". - Specify PID and omit
                  Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
                  the specified language, whichever PID that happens to be. - Omit PID and omit
                  Language: Valid only if source is DVB-Sub that is being passed through; all
                  languages will be passed through.

                - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

                  - **PageNumber** *(string) --* Specifies the teletext page number within the data
                  stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303).
                  Unused for passthrough. Should be specified as a hexadecimal string with no "0x"
                  prefix.

          - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

          - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

          - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
          to 5 (strongest).

          - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
          the deblocking filter enabled by default. 1) auto - filtering will be applied depending
          on input type/quality 2) disabled - no filtering will be applied to the input 3) forced -
          filtering will be applied regardless of input type

          - **NetworkInputSettings** *(dict) --* Input settings.

            - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
            HLS manifest.

              - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH
              that most closely matches this value will be chosen, otherwise the highest bandwidth
              stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in
              an HLS manifest.

              - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
              begin this many buffer segments from the end (most recently written segment). When
              not specified, the HLS input will begin with the first segment specified in the m3u8.

              - **Retries** *(integer) --* The number of consecutive times that attempts to read a
              manifest or segment must fail before the input is considered unavailable.

              - **RetryInterval** *(integer) --* The number of seconds between retries when an
              attempt to read a manifest or segment fails.

            - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
            checkCryptographyOnly, cryptography in the certificate will be checked, but not the
            server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name)
            do not strictly match the corresponding certificate's wildcard pattern and would
            otherwise cause the event to error. This setting is ignored for protocols that do not
            use https.

          - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
          input to be streamed indefinitely.

          - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input
          types that have multiple available.

            - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
            works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice
            to determine if any conversion will be performed.

            - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
            follow. This field controls how the value in the colorSpace field will be used.
            fallback means that when the input does include color space data, that data will be
            used, but when the input has no color space data, the value in colorSpace will be used.
            Choose fallback if your input is sometimes missing color space data, but when it does
            have color space data, that data is correct. force means to always use the value in
            colorSpace. Choose force if your input usually has no color space data or might have
            unreliable color space data.

            - **SelectorSettings** *(dict) --* The video selector settings.

              - **VideoSelectorPid** *(dict) --* Video Selector Pid

                - **Pid** *(integer) --* Selects a specific PID from within a video source.

              - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

                - **ProgramId** *(integer) --* Selects a specific program from within a
                multi-program transport stream. If the program doesn't exist, the first program
                within the transport stream will be selected by default.

    - **InputSpecification** *(dict) --* Placeholder documentation for InputSpecification

      - **Codec** *(string) --* Input codec

      - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

      - **Resolution** *(string) --* Input resolution, categorized coarsely

    - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.

    - **Name** *(string) --* The name of the channel. (user-mutable)

    - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.

      - *(dict) --* Runtime details of a pipeline when a channel is running.

        - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
        currently being ingested by this pipeline.

        - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
        action that occurred most recently and that resulted in the switch to the current input
        attachment for this pipeline.

        - **PipelineId** *(string) --* Pipeline ID

    - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.

    - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running the
    Channel.

    - **State** *(string) --* Placeholder documentation for ChannelState

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string
    """


_ClientDeleteReservationResponseResourceSpecificationTypeDef = TypedDict(
    "_ClientDeleteReservationResponseResourceSpecificationTypeDef",
    {
        "ChannelClass": str,
        "Codec": str,
        "MaximumBitrate": str,
        "MaximumFramerate": str,
        "Resolution": str,
        "ResourceType": str,
        "SpecialFeature": str,
        "VideoQuality": str,
    },
    total=False,
)


class ClientDeleteReservationResponseResourceSpecificationTypeDef(
    _ClientDeleteReservationResponseResourceSpecificationTypeDef
):
    """
    Type definition for `ClientDeleteReservationResponse` `ResourceSpecification`

    - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

    - **Codec** *(string) --* Codec, e.g. 'AVC'

    - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

    - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

    - **Resolution** *(string) --* Resolution, e.g. 'HD'

    - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

    - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)

    - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
    """


_ClientDeleteReservationResponseTypeDef = TypedDict(
    "_ClientDeleteReservationResponseTypeDef",
    {
        "Arn": str,
        "Count": int,
        "CurrencyCode": str,
        "Duration": int,
        "DurationUnits": str,
        "End": str,
        "FixedPrice": float,
        "Name": str,
        "OfferingDescription": str,
        "OfferingId": str,
        "OfferingType": str,
        "Region": str,
        "ReservationId": str,
        "ResourceSpecification": ClientDeleteReservationResponseResourceSpecificationTypeDef,
        "Start": str,
        "State": str,
        "Tags": Dict[str, str],
        "UsagePrice": float,
    },
    total=False,
)


class ClientDeleteReservationResponseTypeDef(_ClientDeleteReservationResponseTypeDef):
    """
    Type definition for `ClientDeleteReservation` `Response`

    - **Arn** *(string) --* Unique reservation ARN, e.g.
    'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'

    - **Count** *(integer) --* Number of reserved resources

    - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217
    format, e.g. 'USD'

    - **Duration** *(integer) --* Lease duration, e.g. '12'

    - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'

    - **End** *(string) --* Reservation UTC end date and time in ISO-8601 format, e.g.
    '2019-03-01T00:00:00'

    - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a
    NO_UPFRONT offering

    - **Name** *(string) --* User specified reservation name

    - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20
    Mbps, 30 fps, and standard VQ in US West (Oregon)'

    - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'

    - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'

    - **Region** *(string) --* AWS region, e.g. 'us-west-2'

    - **ReservationId** *(string) --* Unique reservation ID, e.g. '1234567'

    - **ResourceSpecification** *(dict) --* Resource configuration details

      - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

      - **Codec** *(string) --* Codec, e.g. 'AVC'

      - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

      - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

      - **Resolution** *(string) --* Resolution, e.g. 'HD'

      - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

      - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)

      - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)

    - **Start** *(string) --* Reservation UTC start date and time in ISO-8601 format, e.g.
    '2018-03-01T00:00:00'

    - **State** *(string) --* Current state of reservation, e.g. 'ACTIVE'

    - **Tags** *(dict) --* A collection of key-value pairs

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string

    - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g. '157.0'
    """


_ClientDescribeChannelResponseEgressEndpointsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEgressEndpointsTypeDef",
    {"SourceIp": str},
    total=False,
)


class ClientDescribeChannelResponseEgressEndpointsTypeDef(
    _ClientDescribeChannelResponseEgressEndpointsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponse` `EgressEndpoints`

    - **SourceIp** *(string) --* Public IP of where a channel's output comes from
    """


_ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef",
    {"Algorithm": str, "AlgorithmControl": str, "TargetLkfs": float},
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettingsAudioDescriptions` `AudioNormalizationSettings`

    - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
    to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

    - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
    corrected using the chosen algorithm. If set to measureOnly, the audio will be measured
    but not adjusted.

    - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
    entered, a default value will be used according to the chosen algorithm. The CALM Act
    (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
    recommends a target of -23 LKFS.
    """


_ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef",
    {
        "Bitrate": float,
        "CodingMode": str,
        "InputType": str,
        "Profile": str,
        "RateControlMode": str,
        "RawFormat": str,
        "SampleRate": float,
        "Spec": str,
        "VbrQuality": str,
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettings` `AacSettings`

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
    rate control mode and profile.

    - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
    depend on rate control mode and profile. The adReceiverMix setting receives a stereo
    description plus control track and emits a mono AAC encode of the description track,
    with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

    - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
    pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
    (audioType) will be set to 3, which signals to downstream systems that this stream
    contains "broadcaster mixed AD". Note that the input received by the encoder must
    contain pre-mixed audio; the encoder does not perform the mixing. The values in
    audioTypeControl and audioType (in AudioDescription) are ignored when set to
    broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
    + AD.

    - **Profile** *(string) --* AAC Profile.

    - **RateControlMode** *(string) --* Rate Control Mode.

    - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

    - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
    mode and profile.

    - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
    MPEG-2 Transport Stream containers.

    - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
    VBR.
    """


_ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef",
    {
        "Bitrate": float,
        "BitstreamMode": str,
        "CodingMode": str,
        "Dialnorm": int,
        "DrcProfile": str,
        "LfeFilter": str,
        "MetadataControl": str,
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettings` `Ac3Settings`

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
    the coding mode.

    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
    emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

    - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
    channels.

    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
    audio is Dolby Digital, dialnorm will be passed through.

    - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
    signaling to the output bitstream as defined in the Dolby Digital specification.

    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
    the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

    - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
    be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
    audio was not supplied from one of these streams, then the static metadata settings
    will be used.
    """


_ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef",
    {
        "AttenuationControl": str,
        "Bitrate": float,
        "BitstreamMode": str,
        "CodingMode": str,
        "DcFilter": str,
        "Dialnorm": int,
        "DrcLine": str,
        "DrcRf": str,
        "LfeControl": str,
        "LfeFilter": str,
        "LoRoCenterMixLevel": float,
        "LoRoSurroundMixLevel": float,
        "LtRtCenterMixLevel": float,
        "LtRtSurroundMixLevel": float,
        "MetadataControl": str,
        "PassthroughControl": str,
        "PhaseControl": str,
        "StereoDownmix": str,
        "SurroundExMode": str,
        "SurroundMode": str,
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettings` `Eac3Settings`

    - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
    attenuation to the surround channels. Only used for 3/2 coding mode.

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
    the coding mode.

    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
    emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

    - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
    channels.

    - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
    all input channels.

    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
    audio is Dolby Digital Plus, dialnorm will be passed through.

    - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

    - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
    ensures that the instantaneous signal peaks do not exceed specified levels.

    - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
    LFE channel

    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
    the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

    - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
    used for 3/2 coding mode.

    - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
    used for 3/2 coding mode.

    - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
    used for 3/2 coding mode.

    - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
    Only used for 3/2 coding mode.

    - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
    sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
    was not supplied from one of these streams, then the static metadata settings will be
    used.

    - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
    be passed through if it is present on the input. This detection is dynamic over the
    life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
    have a consistent DD+ output as the system alternates between passthrough and
    encoding.

    - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
    phase shift to the surround channels. Only used for 3/2 coding mode.

    - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
    mode.

    - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
    center back surround channel is matrix encoded into the left and right surround
    channels.

    - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
    is matrix encoded into the two channels.
    """


_ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef",
    {"Bitrate": float, "CodingMode": str, "SampleRate": float},
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettings` `Mp2Settings`

    - **Bitrate** *(float) --* Average bitrate in bits/second.

    - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
    codingMode10 (for mono) or codingMode20 (for stereo).

    - **SampleRate** *(float) --* Sample rate in Hz.
    """


_ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef",
    {
        "AacSettings": ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef,
        "Ac3Settings": ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef,
        "Eac3Settings": ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef,
        "Mp2Settings": ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef,
        "PassThroughSettings": Dict[str, Any],
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettingsAudioDescriptions` `CodecSettings`

    - **AacSettings** *(dict) --* Aac Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
      rate control mode and profile.

      - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
      depend on rate control mode and profile. The adReceiverMix setting receives a stereo
      description plus control track and emits a mono AAC encode of the description track,
      with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

      - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
      pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
      (audioType) will be set to 3, which signals to downstream systems that this stream
      contains "broadcaster mixed AD". Note that the input received by the encoder must
      contain pre-mixed audio; the encoder does not perform the mixing. The values in
      audioTypeControl and audioType (in AudioDescription) are ignored when set to
      broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
      + AD.

      - **Profile** *(string) --* AAC Profile.

      - **RateControlMode** *(string) --* Rate Control Mode.

      - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

      - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
      mode and profile.

      - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
      MPEG-2 Transport Stream containers.

      - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
      VBR.

    - **Ac3Settings** *(dict) --* Ac3 Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
      the coding mode.

      - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
      emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

      - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
      channels.

      - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
      audio is Dolby Digital, dialnorm will be passed through.

      - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
      signaling to the output bitstream as defined in the Dolby Digital specification.

      - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
      the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

      - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
      be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
      audio was not supplied from one of these streams, then the static metadata settings
      will be used.

    - **Eac3Settings** *(dict) --* Eac3 Settings

      - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
      attenuation to the surround channels. Only used for 3/2 coding mode.

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
      the coding mode.

      - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
      emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

      - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
      channels.

      - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
      all input channels.

      - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
      audio is Dolby Digital Plus, dialnorm will be passed through.

      - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

      - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
      ensures that the instantaneous signal peaks do not exceed specified levels.

      - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
      LFE channel

      - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
      the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

      - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
      used for 3/2 coding mode.

      - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
      used for 3/2 coding mode.

      - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
      used for 3/2 coding mode.

      - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
      Only used for 3/2 coding mode.

      - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
      sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
      was not supplied from one of these streams, then the static metadata settings will be
      used.

      - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
      be passed through if it is present on the input. This detection is dynamic over the
      life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
      have a consistent DD+ output as the system alternates between passthrough and
      encoding.

      - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
      phase shift to the surround channels. Only used for 3/2 coding mode.

      - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
      mode.

      - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
      center back surround channel is matrix encoded into the left and right surround
      channels.

      - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
      is matrix encoded into the two channels.

    - **Mp2Settings** *(dict) --* Mp2 Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second.

      - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
      codingMode10 (for mono) or codingMode20 (for stereo).

      - **SampleRate** *(float) --* Sample rate in Hz.

    - **PassThroughSettings** *(dict) --* Pass Through Settings
    """


_ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsTypeDef",
    {
        "AudioNormalizationSettings": ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef,
        "AudioSelectorName": str,
        "AudioType": str,
        "AudioTypeControl": str,
        "CodecSettings": ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef,
        "LanguageCode": str,
        "LanguageCodeControl": str,
        "Name": str,
        "RemixSettings": Dict[str, Any],
        "StreamName": str,
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettings` `AudioDescriptions`

    - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

      - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
      to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

      - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
      corrected using the chosen algorithm. If set to measureOnly, the audio will be measured
      but not adjusted.

      - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
      entered, a default value will be used according to the chosen algorithm. The CALM Act
      (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
      recommends a target of -23 LKFS.

    - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
    for this AudioDescription.

    - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
    values for audioType are defined in ISO-IEC 13818-1.

    - **AudioTypeControl** *(string) --* Determines how audio type is determined.
    followInput: If the input contains an ISO 639 audioType, then that value is passed
    through to the output. If the input contains no ISO 639 audioType, the value in Audio
    Type is included in the output. useConfigured: The value in Audio Type is included in the
    output. Note that this field and audioType are both ignored if inputType is
    broadcasterMixedAd.

    - **CodecSettings** *(dict) --* Audio codec settings.

      - **AacSettings** *(dict) --* Aac Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
        rate control mode and profile.

        - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
        depend on rate control mode and profile. The adReceiverMix setting receives a stereo
        description plus control track and emits a mono AAC encode of the description track,
        with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

        - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
        pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
        (audioType) will be set to 3, which signals to downstream systems that this stream
        contains "broadcaster mixed AD". Note that the input received by the encoder must
        contain pre-mixed audio; the encoder does not perform the mixing. The values in
        audioTypeControl and audioType (in AudioDescription) are ignored when set to
        broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
        + AD.

        - **Profile** *(string) --* AAC Profile.

        - **RateControlMode** *(string) --* Rate Control Mode.

        - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

        - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
        mode and profile.

        - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
        MPEG-2 Transport Stream containers.

        - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
        VBR.

      - **Ac3Settings** *(dict) --* Ac3 Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
        the coding mode.

        - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
        emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

        - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
        channels.

        - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
        audio is Dolby Digital, dialnorm will be passed through.

        - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
        signaling to the output bitstream as defined in the Dolby Digital specification.

        - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
        the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

        - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
        be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
        audio was not supplied from one of these streams, then the static metadata settings
        will be used.

      - **Eac3Settings** *(dict) --* Eac3 Settings

        - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
        attenuation to the surround channels. Only used for 3/2 coding mode.

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
        the coding mode.

        - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
        emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

        - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
        channels.

        - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
        all input channels.

        - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
        audio is Dolby Digital Plus, dialnorm will be passed through.

        - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

        - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
        ensures that the instantaneous signal peaks do not exceed specified levels.

        - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
        LFE channel

        - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
        the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

        - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
        used for 3/2 coding mode.

        - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
        used for 3/2 coding mode.

        - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
        used for 3/2 coding mode.

        - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
        Only used for 3/2 coding mode.

        - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
        sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
        was not supplied from one of these streams, then the static metadata settings will be
        used.

        - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
        be passed through if it is present on the input. This detection is dynamic over the
        life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
        have a consistent DD+ output as the system alternates between passthrough and
        encoding.

        - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
        phase shift to the surround channels. Only used for 3/2 coding mode.

        - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
        mode.

        - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
        center back surround channel is matrix encoded into the left and right surround
        channels.

        - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
        is matrix encoded into the two channels.

      - **Mp2Settings** *(dict) --* Mp2 Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second.

        - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
        codingMode10 (for mono) or codingMode20 (for stereo).

        - **SampleRate** *(float) --* Sample rate in Hz.

      - **PassThroughSettings** *(dict) --* Pass Through Settings

    - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
    used if languageControlMode is useConfigured, or there is no ISO 639 language code
    specified in the input.

    - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
    language code of the output to follow the ISO 639 language code of the input. The
    languageCode will be used when useConfigured is set, or when followInput is selected but
    there is no ISO 639 language code specified by the input.

    - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to
    uniquely identify this AudioDescription. Description names should be unique within this
    Live Event.

    - **RemixSettings** *(dict) --* Settings that control how input audio channels are
    remixed into the output audio channels.

      - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
      appropriate gain adjustments.

        - *(dict) --* Audio Channel Mapping

          - **InputChannelLevels** *(list) --* Indices and gain values for each input channel
          that should be remixed into this output channel.

            - *(dict) --* Input Channel Level

              - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values
              are within the range from -60 (mute) and 6 dB.

              - **InputChannel** *(integer) --* The index of the input channel used as a
              source.

          - **OutputChannel** *(integer) --* The index of the output channel being produced.

      - **ChannelsIn** *(integer) --* Number of input channels to be used.

      - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
      values: 1, 2, 4, 6, 8

    - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
    name displayed by the player (eg. English, or Director Commentary).
    """


_ClientDescribeChannelResponseEncoderSettingsAvailBlankingTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsAvailBlankingTypeDef",
    {"AvailBlankingImage": Dict[str, Any], "State": str},
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsAvailBlankingTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsAvailBlankingTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettings` `AvailBlanking`

    - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
    black. Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be
    blanked when insertion metadata is added.
    """


_ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef",
    {
        "AdAvailOffset": int,
        "NoRegionalBlackoutFlag": str,
        "WebDeliveryAllowedFlag": str,
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettings` `Scte35SpliceInsert`

    - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
    added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
    messages and does not apply to OOB messages.

    - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
    noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
    webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef",
    {
        "AdAvailOffset": int,
        "NoRegionalBlackoutFlag": str,
        "WebDeliveryAllowedFlag": str,
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettings` `Scte35TimeSignalApos`

    - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
    added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
    messages and does not apply to OOB messages.

    - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
    noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
    webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef",
    {
        "Scte35SpliceInsert": ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef,
        "Scte35TimeSignalApos": ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef,
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettingsAvailConfiguration` `AvailSettings`

    - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

      - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
      added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
      messages and does not apply to OOB messages.

      - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
      noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
      webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

      - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
      added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
      messages and does not apply to OOB messages.

      - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
      noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
      webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientDescribeChannelResponseEncoderSettingsAvailConfigurationTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsAvailConfigurationTypeDef",
    {
        "AvailSettings": ClientDescribeChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsAvailConfigurationTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsAvailConfigurationTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettings` `AvailConfiguration`

    - **AvailSettings** *(dict) --* Ad avail settings.

      - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

        - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
        added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
        messages and does not apply to OOB messages.

        - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
        noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
        webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

        - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
        added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
        messages and does not apply to OOB messages.

        - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
        noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
        webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientDescribeChannelResponseEncoderSettingsBlackoutSlateTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsBlackoutSlateTypeDef",
    {
        "BlackoutSlateImage": Dict[str, Any],
        "NetworkEndBlackout": str,
        "NetworkEndBlackoutImage": Dict[str, Any],
        "NetworkId": str,
        "State": str,
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsBlackoutSlateTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsBlackoutSlateTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettings` `BlackoutSlate`

    - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid
    black. Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
    the video, audio, and captions, and raise the "Network Blackout Image" slate when an
    SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted
    when the Network Start Segmentation Descriptor is encountered. The Network End and Network
    Start descriptors must contain a network ID that matches the value entered in "Network ID".

    - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout
    image. Image will be scaled to fill the entire output raster.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
    "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be
    blanked when indicated by program metadata.
    """


_ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef",
    {"CaptureInterval": int},
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettings` `FrameCaptureSettings`

    - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
    for inclusion in the output. For example, "10" means capture a frame every 10 seconds.
    """


_ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef",
    {
        "ColorSpacePassthroughSettings": Dict[str, Any],
        "Rec601Settings": Dict,
        "Rec709Settings": Dict[str, Any],
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264Settings` `ColorSpaceSettings`

    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
    conversion to the output

    - **Rec601Settings** *(dict) --* Rec601 Settings

    - **Rec709Settings** *(dict) --* Rec709 Settings
    """


_ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef",
    {
        "AdaptiveQuantization": str,
        "AfdSignaling": str,
        "Bitrate": int,
        "BufFillPct": int,
        "BufSize": int,
        "ColorMetadata": str,
        "ColorSpaceSettings": ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef,
        "EntropyEncoding": str,
        "FixedAfd": str,
        "FlickerAq": str,
        "FramerateControl": str,
        "FramerateDenominator": int,
        "FramerateNumerator": int,
        "GopBReference": str,
        "GopClosedCadence": int,
        "GopNumBFrames": int,
        "GopSize": float,
        "GopSizeUnits": str,
        "Level": str,
        "LookAheadRateControl": str,
        "MaxBitrate": int,
        "MinIInterval": int,
        "NumRefFrames": int,
        "ParControl": str,
        "ParDenominator": int,
        "ParNumerator": int,
        "Profile": str,
        "QvbrQualityLevel": int,
        "RateControlMode": str,
        "ScanType": str,
        "SceneChangeDetect": str,
        "Slices": int,
        "Softness": int,
        "SpatialAq": str,
        "SubgopLength": str,
        "Syntax": str,
        "TemporalAq": str,
        "TimecodeInsertion": str,
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettings` `H264Settings`

    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
    quantizers to vary to improve visual quality.

    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
    output stream. If afdSignaling is "auto", the system will try to preserve the input
    AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
    value will be the value configured in the fixedAfd parameter.

    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
    control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
    output must have a unique value when its bitrate is rounded down to the nearest
    multiple of 1000.

    - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
    filled (HRD buffer model).

    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

    - **ColorSpaceSettings** *(dict) --* Color Space settings

      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
      conversion to the output

      - **Rec601Settings** *(dict) --* Rec601 Settings

      - **Rec709Settings** *(dict) --* Rec709 Settings

    - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
    or High profile) or cavlc.

    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
    the output stream. Only valid when afdSignaling is set to 'Fixed'.

    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
    frame to reduce flicker or 'pop' on I-frames.

    - **FramerateControl** *(string) --* This field indicates how the output video frame
    rate is specified. If "specified" is selected then the output video frame rate is
    determined by framerateNumerator and framerateDenominator, else if
    "initializeFromSource" is selected then the output video frame rate will be set equal
    to the input video frame rate of the first input.

    - **FramerateDenominator** *(integer) --* Framerate denominator.

    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
    fraction, e.g. 24000 / 1001 = 23.976 fps.

    - **GopBReference** *(string) --* Documentation update needed

    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
    applications, it is recommended that this be set to 1 so a decoder joining mid-stream
    will receive an IDR frame as quickly as possible. Setting this value to 0 will break
    output segmenting.

    - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
    seconds per gopSizeUnits. Must be greater than zero.

    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
    seconds. If seconds the system will convert the gopSize into a frame count at run
    time.

    - **Level** *(string) --* H.264 Level.

    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
    decrease latency and memory usage, while high can produce better quality for certain
    content.

    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
    Set the maximum bitrate in order to accommodate expected spikes in the complexity of
    the video.

    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
    enabled. Enforces separation between repeated (cadence) I-frames and I-frames
    inserted by Scene Change Detection. If a scene change I-frame is within I-interval
    frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
    I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
    normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
    Min-I-interval - 1

    - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
    use more than requested if using B-frames and/or interlaced encoding.

    - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
    is specified. If "specified" is selected then the output video pixel aspect ratio is
    determined by parNumerator and parDenominator, else if "initializeFromSource" is
    selected then the output pixsel aspect ratio will be set equal to the input video
    pixel aspect ratio of the first input.

    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

    - **Profile** *(string) --* H.264 Profile.

    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
    encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
    quality level field and Max bitrate field that suit your most important viewing
    devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
    bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
    Quality level: 6. Max bitrate: 1M to 1.5M

    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
    specified quality level except when it is constrained by the maximum bitrate.
    Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
    depending on the video complexity. Recommended instead of QVBR if you want to
    maintain a specific average bitrate over the duration of the channel. CBR: Quality
    varies, depending on the video complexity. Recommended only if you distribute your
    assets to devices that cannot handle variable bitrates.

    - **ScanType** *(string) --* Sets the scan type of the output to progressive or
    top-field-first interlaced.

    - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
    when scene change is detected. - Off: does not force an I-frame when scene change is
    detected.

    - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
    to the number of macroblock rows for progressive pictures, and less than or equal to
    half the number of macroblock rows for interlaced pictures. This field is optional;
    when no value is specified the encoder will choose the number of slices based on
    encode resolution.

    - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
    reduce high-frequency content in the encoded image.

    - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
    frame based on spatial variation of content complexity.

    - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
    sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
    improve visual quality.

    - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

    - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
    frame based on temporal variation of content complexity.

    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
    into the video elementary stream. - 'disabled': Do not include timecodes -
    'picTimingSei': Pass through picture timing SEI messages from the source specified in
    Timecode Config
    """


_ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef",
    {"MaxCll": int, "MaxFall": int},
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings` `Hdr10Settings`

    - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
    defining the maximum light level, in nits, of any single pixel within an encoded
    HDR video stream or file.

    - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
    metadata value defining the maximum average light level, in nits, for any single
    frame within an encoded HDR video stream or file.
    """


_ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef",
    {
        "ColorSpacePassthroughSettings": Dict[str, Any],
        "Hdr10Settings": ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef,
        "Rec601Settings": Dict,
        "Rec709Settings": Dict[str, Any],
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265Settings` `ColorSpaceSettings`

    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
    conversion to the output

    - **Hdr10Settings** *(dict) --* Hdr10 Settings

      - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
      defining the maximum light level, in nits, of any single pixel within an encoded
      HDR video stream or file.

      - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
      metadata value defining the maximum average light level, in nits, for any single
      frame within an encoded HDR video stream or file.

    - **Rec601Settings** *(dict) --* Rec601 Settings

    - **Rec709Settings** *(dict) --* Rec709 Settings
    """


_ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef",
    {
        "AdaptiveQuantization": str,
        "AfdSignaling": str,
        "AlternativeTransferFunction": str,
        "Bitrate": int,
        "BufSize": int,
        "ColorMetadata": str,
        "ColorSpaceSettings": ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef,
        "FixedAfd": str,
        "FlickerAq": str,
        "FramerateDenominator": int,
        "FramerateNumerator": int,
        "GopClosedCadence": int,
        "GopSize": float,
        "GopSizeUnits": str,
        "Level": str,
        "LookAheadRateControl": str,
        "MaxBitrate": int,
        "MinIInterval": int,
        "ParDenominator": int,
        "ParNumerator": int,
        "Profile": str,
        "QvbrQualityLevel": int,
        "RateControlMode": str,
        "ScanType": str,
        "SceneChangeDetect": str,
        "Slices": int,
        "Tier": str,
        "TimecodeInsertion": str,
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettings` `H265Settings`

    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
    quantizers to vary to improve visual quality.

    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
    output stream. If afdSignaling is "auto", the system will try to preserve the input
    AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
    value will be the value configured in the fixedAfd parameter.

    - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
    Alternative Transfer Function SEI message to support backwards compatibility with
    non-HDR decoders and displays.

    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
    control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
    output must have a unique value when its bitrate is rounded down to the nearest
    multiple of 1000.

    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

    - **ColorSpaceSettings** *(dict) --* Color Space settings

      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
      conversion to the output

      - **Hdr10Settings** *(dict) --* Hdr10 Settings

        - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
        defining the maximum light level, in nits, of any single pixel within an encoded
        HDR video stream or file.

        - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
        metadata value defining the maximum average light level, in nits, for any single
        frame within an encoded HDR video stream or file.

      - **Rec601Settings** *(dict) --* Rec601 Settings

      - **Rec709Settings** *(dict) --* Rec709 Settings

    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
    the output stream. Only valid when afdSignaling is set to 'Fixed'.

    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
    frame to reduce flicker or 'pop' on I-frames.

    - **FramerateDenominator** *(integer) --* Framerate denominator.

    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
    fraction, e.g. 24000 / 1001 = 23.976 fps.

    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
    applications, it is recommended that this be set to 1 so a decoder joining mid-stream
    will receive an IDR frame as quickly as possible. Setting this value to 0 will break
    output segmenting.

    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
    seconds per gopSizeUnits. Must be greater than zero.

    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
    seconds. If seconds the system will convert the gopSize into a frame count at run
    time.

    - **Level** *(string) --* H.265 Level.

    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
    decrease latency and memory usage, while high can produce better quality for certain
    content.

    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
    enabled. Enforces separation between repeated (cadence) I-frames and I-frames
    inserted by Scene Change Detection. If a scene change I-frame is within I-interval
    frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
    I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
    normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
    Min-I-interval - 1

    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

    - **Profile** *(string) --* H.265 Profile.

    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
    encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
    quality level field and Max bitrate field that suit your most important viewing
    devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
    bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
    Quality level: 6. Max bitrate: 1M to 1.5M

    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
    specified quality level except when it is constrained by the maximum bitrate.
    Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
    on the video complexity. Recommended only if you distribute your assets to devices
    that cannot handle variable bitrates.

    - **ScanType** *(string) --* Sets the scan type of the output to progressive or
    top-field-first interlaced.

    - **SceneChangeDetect** *(string) --* Scene change detection.

    - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
    to the number of macroblock rows for progressive pictures, and less than or equal to
    half the number of macroblock rows for interlaced pictures. This field is optional;
    when no value is specified the encoder will choose the number of slices based on
    encode resolution.

    - **Tier** *(string) --* H.265 Tier.

    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
    into the video elementary stream. - 'disabled': Do not include timecodes -
    'picTimingSei': Pass through picture timing SEI messages from the source specified in
    Timecode Config
    """


_ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef",
    {
        "FrameCaptureSettings": ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef,
        "H264Settings": ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef,
        "H265Settings": ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef,
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettingsVideoDescriptions` `CodecSettings`

    - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

      - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
      for inclusion in the output. For example, "10" means capture a frame every 10 seconds.

    - **H264Settings** *(dict) --* H264 Settings

      - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
      quantizers to vary to improve visual quality.

      - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
      output stream. If afdSignaling is "auto", the system will try to preserve the input
      AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
      value will be the value configured in the fixedAfd parameter.

      - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
      control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
      output must have a unique value when its bitrate is rounded down to the nearest
      multiple of 1000.

      - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
      filled (HRD buffer model).

      - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

      - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

      - **ColorSpaceSettings** *(dict) --* Color Space settings

        - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
        conversion to the output

        - **Rec601Settings** *(dict) --* Rec601 Settings

        - **Rec709Settings** *(dict) --* Rec709 Settings

      - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
      or High profile) or cavlc.

      - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
      the output stream. Only valid when afdSignaling is set to 'Fixed'.

      - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
      frame to reduce flicker or 'pop' on I-frames.

      - **FramerateControl** *(string) --* This field indicates how the output video frame
      rate is specified. If "specified" is selected then the output video frame rate is
      determined by framerateNumerator and framerateDenominator, else if
      "initializeFromSource" is selected then the output video frame rate will be set equal
      to the input video frame rate of the first input.

      - **FramerateDenominator** *(integer) --* Framerate denominator.

      - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
      fraction, e.g. 24000 / 1001 = 23.976 fps.

      - **GopBReference** *(string) --* Documentation update needed

      - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
      applications, it is recommended that this be set to 1 so a decoder joining mid-stream
      will receive an IDR frame as quickly as possible. Setting this value to 0 will break
      output segmenting.

      - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

      - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
      seconds per gopSizeUnits. Must be greater than zero.

      - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
      seconds. If seconds the system will convert the gopSize into a frame count at run
      time.

      - **Level** *(string) --* H.264 Level.

      - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
      decrease latency and memory usage, while high can produce better quality for certain
      content.

      - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
      Set the maximum bitrate in order to accommodate expected spikes in the complexity of
      the video.

      - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
      enabled. Enforces separation between repeated (cadence) I-frames and I-frames
      inserted by Scene Change Detection. If a scene change I-frame is within I-interval
      frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
      I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
      normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
      Min-I-interval - 1

      - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
      use more than requested if using B-frames and/or interlaced encoding.

      - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
      is specified. If "specified" is selected then the output video pixel aspect ratio is
      determined by parNumerator and parDenominator, else if "initializeFromSource" is
      selected then the output pixsel aspect ratio will be set equal to the input video
      pixel aspect ratio of the first input.

      - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

      - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

      - **Profile** *(string) --* H.264 Profile.

      - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
      encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
      quality level field and Max bitrate field that suit your most important viewing
      devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
      bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
      Quality level: 6. Max bitrate: 1M to 1.5M

      - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
      specified quality level except when it is constrained by the maximum bitrate.
      Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
      depending on the video complexity. Recommended instead of QVBR if you want to
      maintain a specific average bitrate over the duration of the channel. CBR: Quality
      varies, depending on the video complexity. Recommended only if you distribute your
      assets to devices that cannot handle variable bitrates.

      - **ScanType** *(string) --* Sets the scan type of the output to progressive or
      top-field-first interlaced.

      - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
      when scene change is detected. - Off: does not force an I-frame when scene change is
      detected.

      - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
      to the number of macroblock rows for progressive pictures, and less than or equal to
      half the number of macroblock rows for interlaced pictures. This field is optional;
      when no value is specified the encoder will choose the number of slices based on
      encode resolution.

      - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
      reduce high-frequency content in the encoded image.

      - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
      frame based on spatial variation of content complexity.

      - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
      sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
      improve visual quality.

      - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

      - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
      frame based on temporal variation of content complexity.

      - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
      into the video elementary stream. - 'disabled': Do not include timecodes -
      'picTimingSei': Pass through picture timing SEI messages from the source specified in
      Timecode Config

    - **H265Settings** *(dict) --* H265 Settings

      - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
      quantizers to vary to improve visual quality.

      - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
      output stream. If afdSignaling is "auto", the system will try to preserve the input
      AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
      value will be the value configured in the fixedAfd parameter.

      - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
      Alternative Transfer Function SEI message to support backwards compatibility with
      non-HDR decoders and displays.

      - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
      control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
      output must have a unique value when its bitrate is rounded down to the nearest
      multiple of 1000.

      - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

      - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

      - **ColorSpaceSettings** *(dict) --* Color Space settings

        - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
        conversion to the output

        - **Hdr10Settings** *(dict) --* Hdr10 Settings

          - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
          defining the maximum light level, in nits, of any single pixel within an encoded
          HDR video stream or file.

          - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
          metadata value defining the maximum average light level, in nits, for any single
          frame within an encoded HDR video stream or file.

        - **Rec601Settings** *(dict) --* Rec601 Settings

        - **Rec709Settings** *(dict) --* Rec709 Settings

      - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
      the output stream. Only valid when afdSignaling is set to 'Fixed'.

      - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
      frame to reduce flicker or 'pop' on I-frames.

      - **FramerateDenominator** *(integer) --* Framerate denominator.

      - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
      fraction, e.g. 24000 / 1001 = 23.976 fps.

      - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
      applications, it is recommended that this be set to 1 so a decoder joining mid-stream
      will receive an IDR frame as quickly as possible. Setting this value to 0 will break
      output segmenting.

      - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
      seconds per gopSizeUnits. Must be greater than zero.

      - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
      seconds. If seconds the system will convert the gopSize into a frame count at run
      time.

      - **Level** *(string) --* H.265 Level.

      - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
      decrease latency and memory usage, while high can produce better quality for certain
      content.

      - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

      - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
      enabled. Enforces separation between repeated (cadence) I-frames and I-frames
      inserted by Scene Change Detection. If a scene change I-frame is within I-interval
      frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
      I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
      normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
      Min-I-interval - 1

      - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

      - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

      - **Profile** *(string) --* H.265 Profile.

      - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
      encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
      quality level field and Max bitrate field that suit your most important viewing
      devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
      bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
      Quality level: 6. Max bitrate: 1M to 1.5M

      - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
      specified quality level except when it is constrained by the maximum bitrate.
      Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
      on the video complexity. Recommended only if you distribute your assets to devices
      that cannot handle variable bitrates.

      - **ScanType** *(string) --* Sets the scan type of the output to progressive or
      top-field-first interlaced.

      - **SceneChangeDetect** *(string) --* Scene change detection.

      - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
      to the number of macroblock rows for progressive pictures, and less than or equal to
      half the number of macroblock rows for interlaced pictures. This field is optional;
      when no value is specified the encoder will choose the number of slices based on
      encode resolution.

      - **Tier** *(string) --* H.265 Tier.

      - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
      into the video elementary stream. - 'disabled': Do not include timecodes -
      'picTimingSei': Pass through picture timing SEI messages from the source specified in
      Timecode Config
    """


_ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsTypeDef",
    {
        "CodecSettings": ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef,
        "Height": int,
        "Name": str,
        "RespondToAfd": str,
        "ScalingBehavior": str,
        "Sharpness": int,
        "Width": int,
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseEncoderSettings` `VideoDescriptions`

    - **CodecSettings** *(dict) --* Video codec settings.

      - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

        - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
        for inclusion in the output. For example, "10" means capture a frame every 10 seconds.

      - **H264Settings** *(dict) --* H264 Settings

        - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
        quantizers to vary to improve visual quality.

        - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
        output stream. If afdSignaling is "auto", the system will try to preserve the input
        AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
        value will be the value configured in the fixedAfd parameter.

        - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
        control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
        output must have a unique value when its bitrate is rounded down to the nearest
        multiple of 1000.

        - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
        filled (HRD buffer model).

        - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

        - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

        - **ColorSpaceSettings** *(dict) --* Color Space settings

          - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
          conversion to the output

          - **Rec601Settings** *(dict) --* Rec601 Settings

          - **Rec709Settings** *(dict) --* Rec709 Settings

        - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
        or High profile) or cavlc.

        - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
        the output stream. Only valid when afdSignaling is set to 'Fixed'.

        - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
        frame to reduce flicker or 'pop' on I-frames.

        - **FramerateControl** *(string) --* This field indicates how the output video frame
        rate is specified. If "specified" is selected then the output video frame rate is
        determined by framerateNumerator and framerateDenominator, else if
        "initializeFromSource" is selected then the output video frame rate will be set equal
        to the input video frame rate of the first input.

        - **FramerateDenominator** *(integer) --* Framerate denominator.

        - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
        fraction, e.g. 24000 / 1001 = 23.976 fps.

        - **GopBReference** *(string) --* Documentation update needed

        - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
        applications, it is recommended that this be set to 1 so a decoder joining mid-stream
        will receive an IDR frame as quickly as possible. Setting this value to 0 will break
        output segmenting.

        - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

        - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
        seconds per gopSizeUnits. Must be greater than zero.

        - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
        seconds. If seconds the system will convert the gopSize into a frame count at run
        time.

        - **Level** *(string) --* H.264 Level.

        - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
        decrease latency and memory usage, while high can produce better quality for certain
        content.

        - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
        Set the maximum bitrate in order to accommodate expected spikes in the complexity of
        the video.

        - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
        enabled. Enforces separation between repeated (cadence) I-frames and I-frames
        inserted by Scene Change Detection. If a scene change I-frame is within I-interval
        frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
        I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
        normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
        Min-I-interval - 1

        - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
        use more than requested if using B-frames and/or interlaced encoding.

        - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
        is specified. If "specified" is selected then the output video pixel aspect ratio is
        determined by parNumerator and parDenominator, else if "initializeFromSource" is
        selected then the output pixsel aspect ratio will be set equal to the input video
        pixel aspect ratio of the first input.

        - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

        - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

        - **Profile** *(string) --* H.264 Profile.

        - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
        encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
        quality level field and Max bitrate field that suit your most important viewing
        devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
        bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
        Quality level: 6. Max bitrate: 1M to 1.5M

        - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
        specified quality level except when it is constrained by the maximum bitrate.
        Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
        depending on the video complexity. Recommended instead of QVBR if you want to
        maintain a specific average bitrate over the duration of the channel. CBR: Quality
        varies, depending on the video complexity. Recommended only if you distribute your
        assets to devices that cannot handle variable bitrates.

        - **ScanType** *(string) --* Sets the scan type of the output to progressive or
        top-field-first interlaced.

        - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
        when scene change is detected. - Off: does not force an I-frame when scene change is
        detected.

        - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
        to the number of macroblock rows for progressive pictures, and less than or equal to
        half the number of macroblock rows for interlaced pictures. This field is optional;
        when no value is specified the encoder will choose the number of slices based on
        encode resolution.

        - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
        reduce high-frequency content in the encoded image.

        - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
        frame based on spatial variation of content complexity.

        - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
        sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
        improve visual quality.

        - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

        - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
        frame based on temporal variation of content complexity.

        - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
        into the video elementary stream. - 'disabled': Do not include timecodes -
        'picTimingSei': Pass through picture timing SEI messages from the source specified in
        Timecode Config

      - **H265Settings** *(dict) --* H265 Settings

        - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
        quantizers to vary to improve visual quality.

        - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
        output stream. If afdSignaling is "auto", the system will try to preserve the input
        AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
        value will be the value configured in the fixedAfd parameter.

        - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
        Alternative Transfer Function SEI message to support backwards compatibility with
        non-HDR decoders and displays.

        - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
        control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
        output must have a unique value when its bitrate is rounded down to the nearest
        multiple of 1000.

        - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

        - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

        - **ColorSpaceSettings** *(dict) --* Color Space settings

          - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
          conversion to the output

          - **Hdr10Settings** *(dict) --* Hdr10 Settings

            - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
            defining the maximum light level, in nits, of any single pixel within an encoded
            HDR video stream or file.

            - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
            metadata value defining the maximum average light level, in nits, for any single
            frame within an encoded HDR video stream or file.

          - **Rec601Settings** *(dict) --* Rec601 Settings

          - **Rec709Settings** *(dict) --* Rec709 Settings

        - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
        the output stream. Only valid when afdSignaling is set to 'Fixed'.

        - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
        frame to reduce flicker or 'pop' on I-frames.

        - **FramerateDenominator** *(integer) --* Framerate denominator.

        - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
        fraction, e.g. 24000 / 1001 = 23.976 fps.

        - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
        applications, it is recommended that this be set to 1 so a decoder joining mid-stream
        will receive an IDR frame as quickly as possible. Setting this value to 0 will break
        output segmenting.

        - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
        seconds per gopSizeUnits. Must be greater than zero.

        - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
        seconds. If seconds the system will convert the gopSize into a frame count at run
        time.

        - **Level** *(string) --* H.265 Level.

        - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
        decrease latency and memory usage, while high can produce better quality for certain
        content.

        - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

        - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
        enabled. Enforces separation between repeated (cadence) I-frames and I-frames
        inserted by Scene Change Detection. If a scene change I-frame is within I-interval
        frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
        I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
        normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
        Min-I-interval - 1

        - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

        - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

        - **Profile** *(string) --* H.265 Profile.

        - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
        encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
        quality level field and Max bitrate field that suit your most important viewing
        devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
        bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
        Quality level: 6. Max bitrate: 1M to 1.5M

        - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
        specified quality level except when it is constrained by the maximum bitrate.
        Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
        on the video complexity. Recommended only if you distribute your assets to devices
        that cannot handle variable bitrates.

        - **ScanType** *(string) --* Sets the scan type of the output to progressive or
        top-field-first interlaced.

        - **SceneChangeDetect** *(string) --* Scene change detection.

        - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
        to the number of macroblock rows for progressive pictures, and less than or equal to
        half the number of macroblock rows for interlaced pictures. This field is optional;
        when no value is specified the encoder will choose the number of slices based on
        encode resolution.

        - **Tier** *(string) --* H.265 Tier.

        - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
        into the video elementary stream. - 'disabled': Do not include timecodes -
        'picTimingSei': Pass through picture timing SEI messages from the source specified in
        Timecode Config

    - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
    most codecs, you can leave this field and width blank in order to use the height and
    width (resolution) from the source. Note, however, that leaving blank is not recommended.
    For the Frame Capture codec, height and width are required.

    - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to
    uniquely identify this Description. Description names should be unique within this Live
    Event.

    - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the input
    stream. RESPOND causes input video to be clipped, depending on the AFD value, input
    display aspect ratio, and output display aspect ratio, and (except for FRAMECAPTURE
    codec) includes the values in the output. PASSTHROUGH (does not apply to FRAMECAPTURE
    codec) ignores the AFD values and includes the values in the output, so input video is
    not clipped. NONE ignores the AFD values and does not include the values through to the
    output, so input video is not clipped.

    - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
    stretch the video to the specified output resolution (height and width). This option will
    override any position value. DEFAULT may insert black boxes (pillar boxes or letter
    boxes) around the video to provide the specified output resolution.

    - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
    scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
    for most content.

    - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
    most codecs, you can leave this field and height blank in order to use the height and
    width (resolution) from the source. Note, however, that leaving blank is not recommended.
    For the Frame Capture codec, height and width are required.
    """


_ClientDescribeChannelResponseEncoderSettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseEncoderSettingsTypeDef",
    {
        "AudioDescriptions": List[
            ClientDescribeChannelResponseEncoderSettingsAudioDescriptionsTypeDef
        ],
        "AvailBlanking": ClientDescribeChannelResponseEncoderSettingsAvailBlankingTypeDef,
        "AvailConfiguration": ClientDescribeChannelResponseEncoderSettingsAvailConfigurationTypeDef,
        "BlackoutSlate": ClientDescribeChannelResponseEncoderSettingsBlackoutSlateTypeDef,
        "CaptionDescriptions": List[Dict],
        "GlobalConfiguration": Dict[str, Any],
        "OutputGroups": List[Dict],
        "TimecodeConfig": Dict[str, Any],
        "VideoDescriptions": List[
            ClientDescribeChannelResponseEncoderSettingsVideoDescriptionsTypeDef
        ],
    },
    total=False,
)


class ClientDescribeChannelResponseEncoderSettingsTypeDef(
    _ClientDescribeChannelResponseEncoderSettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponse` `EncoderSettings`

    - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

      - *(dict) --* Audio Description

        - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

          - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
          to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

          - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
          corrected using the chosen algorithm. If set to measureOnly, the audio will be measured
          but not adjusted.

          - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
          entered, a default value will be used according to the chosen algorithm. The CALM Act
          (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
          recommends a target of -23 LKFS.

        - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
        for this AudioDescription.

        - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
        values for audioType are defined in ISO-IEC 13818-1.

        - **AudioTypeControl** *(string) --* Determines how audio type is determined.
        followInput: If the input contains an ISO 639 audioType, then that value is passed
        through to the output. If the input contains no ISO 639 audioType, the value in Audio
        Type is included in the output. useConfigured: The value in Audio Type is included in the
        output. Note that this field and audioType are both ignored if inputType is
        broadcasterMixedAd.

        - **CodecSettings** *(dict) --* Audio codec settings.

          - **AacSettings** *(dict) --* Aac Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
            rate control mode and profile.

            - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
            depend on rate control mode and profile. The adReceiverMix setting receives a stereo
            description plus control track and emits a mono AAC encode of the description track,
            with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

            - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
            pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
            (audioType) will be set to 3, which signals to downstream systems that this stream
            contains "broadcaster mixed AD". Note that the input received by the encoder must
            contain pre-mixed audio; the encoder does not perform the mixing. The values in
            audioTypeControl and audioType (in AudioDescription) are ignored when set to
            broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
            + AD.

            - **Profile** *(string) --* AAC Profile.

            - **RateControlMode** *(string) --* Rate Control Mode.

            - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

            - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
            mode and profile.

            - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
            MPEG-2 Transport Stream containers.

            - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
            VBR.

          - **Ac3Settings** *(dict) --* Ac3 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
            the coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
            emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

            - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
            channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
            audio is Dolby Digital, dialnorm will be passed through.

            - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
            signaling to the output bitstream as defined in the Dolby Digital specification.

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
            the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

            - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
            be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
            audio was not supplied from one of these streams, then the static metadata settings
            will be used.

          - **Eac3Settings** *(dict) --* Eac3 Settings

            - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
            attenuation to the surround channels. Only used for 3/2 coding mode.

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
            the coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
            emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

            - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
            channels.

            - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
            all input channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
            audio is Dolby Digital Plus, dialnorm will be passed through.

            - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

            - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
            ensures that the instantaneous signal peaks do not exceed specified levels.

            - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
            LFE channel

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
            the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

            - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
            used for 3/2 coding mode.

            - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
            used for 3/2 coding mode.

            - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
            used for 3/2 coding mode.

            - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
            Only used for 3/2 coding mode.

            - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
            sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
            was not supplied from one of these streams, then the static metadata settings will be
            used.

            - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
            be passed through if it is present on the input. This detection is dynamic over the
            life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
            have a consistent DD+ output as the system alternates between passthrough and
            encoding.

            - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
            phase shift to the surround channels. Only used for 3/2 coding mode.

            - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
            mode.

            - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
            center back surround channel is matrix encoded into the left and right surround
            channels.

            - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
            is matrix encoded into the two channels.

          - **Mp2Settings** *(dict) --* Mp2 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second.

            - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
            codingMode10 (for mono) or codingMode20 (for stereo).

            - **SampleRate** *(float) --* Sample rate in Hz.

          - **PassThroughSettings** *(dict) --* Pass Through Settings

        - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
        used if languageControlMode is useConfigured, or there is no ISO 639 language code
        specified in the input.

        - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
        language code of the output to follow the ISO 639 language code of the input. The
        languageCode will be used when useConfigured is set, or when followInput is selected but
        there is no ISO 639 language code specified by the input.

        - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to
        uniquely identify this AudioDescription. Description names should be unique within this
        Live Event.

        - **RemixSettings** *(dict) --* Settings that control how input audio channels are
        remixed into the output audio channels.

          - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
          appropriate gain adjustments.

            - *(dict) --* Audio Channel Mapping

              - **InputChannelLevels** *(list) --* Indices and gain values for each input channel
              that should be remixed into this output channel.

                - *(dict) --* Input Channel Level

                  - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values
                  are within the range from -60 (mute) and 6 dB.

                  - **InputChannel** *(integer) --* The index of the input channel used as a
                  source.

              - **OutputChannel** *(integer) --* The index of the output channel being produced.

          - **ChannelsIn** *(integer) --* Number of input channels to be used.

          - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
          values: 1, 2, 4, 6, 8

        - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
        name displayed by the player (eg. English, or Director Commentary).

    - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

      - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
      black. Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be
      blanked when insertion metadata is added.

    - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.

      - **AvailSettings** *(dict) --* Ad avail settings.

        - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
          added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
          messages and does not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
          noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
          webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
          added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
          messages and does not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
          noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
          webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **BlackoutSlate** *(dict) --* Settings for blackout slate.

      - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid
      black. Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
      the video, audio, and captions, and raise the "Network Blackout Image" slate when an
      SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted
      when the Network Start Segmentation Descriptor is encountered. The Network End and Network
      Start descriptors must contain a network ID that matches the value entered in "Network ID".

      - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout
      image. Image will be scaled to fill the entire output raster.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
      "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be
      blanked when indicated by program metadata.

    - **CaptionDescriptions** *(list) --* Settings for caption decriptions

      - *(dict) --* Output groups for this Live Event. Output groups contain information about
      where streams should be distributed.

        - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use as
        a caption source when generating output captions. This field should match a
        captionSelector name.

        - **DestinationSettings** *(dict) --* Additional settings for captions destination that
        depend on the destination type.

          - **AribDestinationSettings** *(dict) --* Arib Destination Settings

          - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
            setting alignment to centered will place the captions at the bottom center of the
            output. Similarly, setting a left alignment will align captions to the bottom left of
            the output. If x and y positions are given in conjunction with the alignment
            parameter, the font will be justified (either left or centered) relative to those
            coordinates. Selecting "smart" justification will left-justify live subtitles and
            center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
            match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
            rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent
            to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension
            must be 'ttf' or 'tte'. Although the user can select output fonts for many different
            types of input captions, embedded, STL and teletext sources use a strict grid system.
            Using external fonts with these caption sources could cause unexpected display of
            proportional fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2
              Parameter store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
              file accessible to the Live system (eg. a http:// URI) depending on the output
              type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
            option is not valid for source captions that are STL, 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255
            is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
            is 96 dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the
            size of the output. Giving a positive integer will specify the exact font size in
            points. All burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not
            valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
            is not valid for source captions that are either 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
            captions. All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
            opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0
            (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels to the left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels above the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
            used to generate the output subtitles bitmap. Only applicable for Teletext inputs and
            DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption
            relative to the left side of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the left of the output. If no explicit xPosition is
            provided, the horizontal caption position will be determined by the alignment
            parameter. All burn-in and DVB-Sub font settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption
            relative to the top of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the top of the output. If no explicit yPosition is
            provided, the caption will be positioned towards the bottom of the output. All
            burn-in and DVB-Sub font settings must match.

          - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
            setting alignment to centered will place the captions at the bottom center of the
            output. Similarly, setting a left alignment will align captions to the bottom left of
            the output. If x and y positions are given in conjunction with the alignment
            parameter, the font will be justified (either left or centered) relative to those
            coordinates. Selecting "smart" justification will left-justify live subtitles and
            center-justify pre-recorded subtitles. This option is not valid for source captions
            that are STL or 608/embedded. These source settings are already pre-defined by the
            caption stream. All burn-in and DVB-Sub font settings must match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
            rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
            equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
            must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension
            must be 'ttf' or 'tte'. Although the user can select output fonts for many different
            types of input captions, embedded, STL and teletext sources use a strict grid system.
            Using external fonts with these caption sources could cause unexpected display of
            proportional fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2
              Parameter store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
              file accessible to the Live system (eg. a http:// URI) depending on the output
              type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
            option is not valid for source captions that are STL, 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255
            is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
            is 96 dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
            size of the output. Giving a positive integer will specify the exact font size in
            points. All burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not
            valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
            is not valid for source captions that are either 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
            captions. All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
            opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to
            0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels to the left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels above the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
            used to generate the output subtitles bitmap. Only applicable for Teletext inputs and
            DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption
            relative to the left side of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the left of the output. If no explicit xPosition is
            provided, the horizontal caption position will be determined by the alignment
            parameter. This option is not valid for source captions that are STL, 608/embedded or
            teletext. These source settings are already pre-defined by the caption stream. All
            burn-in and DVB-Sub font settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption
            relative to the top of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the top of the output. If no explicit yPosition is
            provided, the caption will be positioned towards the bottom of the output. This
            option is not valid for source captions that are STL, 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

          - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

          - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
          Destination Settings

          - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
          Settings

          - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
          Destination Settings

          - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

          - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

          - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

          - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

            - **StyleControl** *(string) --* When set to passthrough, passes through style and
            position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
            CFF-TT output or TTML output.

          - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

        - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
        http://www.loc.gov/standards/iso639-2/

        - **LanguageDescription** *(string) --* Human readable information to indicate captions
        available for players (eg. English, or Spanish).

        - **Name** *(string) --* Name of the caption description. Used to associate a caption
        description with an output. Names must be unique within an event.

    - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
    whole.

      - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
      Event.

      - **InputEndAction** *(string) --* Indicates the action to take when the current input
      completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
      restart at the beginning of the first input. When "none" is configured the encoder will
      transcode either black, a solid color, or a user specified slate images per the "Input Loss
      Behavior" configuration until the next input switch occurs (which is controlled through the
      Channel Schedule API).

      - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

        - **BlackFrameMsec** *(integer) --* Documentation update needed

        - **InputLossImageColor** *(string) --* When input loss image type is "color" this field
        specifies the color to use. Value: 6 hex characters representing the values of RGB.

        - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields
        specify the parameters for accessing the slate.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a
        slate into the output after input loss exceeds blackFrameMsec.

        - **RepeatFrameMsec** *(integer) --* Documentation update needed

      - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
      PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to the
      other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each pipeline to
      the Unix epoch.

      - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the
      Live encoder should be paced by its system clock (which optionally may be locked to another
      source via NTP) or should be locked to the clock of the source that is providing the input
      stream.

      - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
      very low video framerates. This is commonly set to enabled for music channels with less
      than one video frame per second.

    - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

      - *(dict) --* Output groups for this Live Event. Output groups contain information about
      where streams should be distributed.

        - **Name** *(string) --* Custom output group name optionally defined by the user. Only
        letters, numbers, and the underscore character allowed; only 32 characters allowed.

        - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

          - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

            - **Destination** *(dict) --* A directory and base filename where archive files
            should be written.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
            before closing and starting a new one.

          - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

            - **Destination** *(dict) --* The destination for the frame capture files. Either the
            URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
            s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
            container, plus a file name prefix (for example,
            mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
            the prefix from the destination field (for example, "curling_") + name modifier + the
            counter (5 digits, starting from 00001) + extension (which is always .jpg). For
            example, curlingLow.00001.jpg

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **HlsGroupSettings** *(dict) --* Hls Group Settings

            - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals
            through to this group of Apple HLS outputs.

              - *(string) --* Hls Ad Markers

            - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
            each output in the media .m3u8 file. Can be used if base manifest is delivered from a
            different URL than the main .m3u8 file.

            - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
            each output in the media .m3u8 file. Can be used if base manifest is delivered from a
            different URL than the main .m3u8 file.

            - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
            caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

              - *(dict) --* Maps a caption channel to an ISO 693-2 language code
              (http://www.loc.gov/standards/iso639-2), with an optional description.

                - **CaptionChannel** *(integer) --* The closed caption channel being described by
                this CaptionLanguageMapping. Each channel mapping must have a unique channel
                number (maximum of 4)

                - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                http://www.loc.gov/standards/iso639-2)

                - **LanguageDescription** *(string) --* Textual description of language

            - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
            captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one
            language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each
            Language Code you specify. Make sure to specify the languages in the order in which
            they appear in the original source (if the source is embedded format) or the order of
            the caption selectors (if the source is other than embedded). Otherwise, languages in
            the manifest will not match up properly with the output captions. none: Include
            CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from
            the manifest.

            - **ClientCache** *(string) --* When set to "disabled", sets the
            #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
            segments for later replay.

            - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default
            RFC-4281) during m3u8 playlist generation.

            - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
            16-byte hex value represented by a 32-character text string. If ivSource is set to
            "explicit" then this parameter is required and is used as the IV for encryption.

            - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
            manifest files, and encryption keys (if enabled).

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **DirectoryStructure** *(string) --* Place segments in subdirectories.

            - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
            scheme. Exclude this parameter if no encryption is desired.

            - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

              - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                transfer encoding to Akamai. User should contact Akamai to enable this feature.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                to wait until a restart is initiated. A value of 0 means never restart.

                - **Salt** *(string) --* Salt for authenticated Akamai.

                - **Token** *(string) --* Token parameter for authenticated akamai. If not
                specified, _gda_ is used.

              - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                to wait until a restart is initiated. A value of 0 means never restart.

              - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are
                stored in non-persistent memory for faster reading and writing.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                to wait until a restart is initiated. A value of 0 means never restart.

              - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                transfer encoding to WebDAV.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                to wait until a restart is initiated. A value of 0 means never restart.

            - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
            manifest, but do create the master and media manifests (according to the Output
            Selection field). STANDARD: Create an I-frame-only manifest for each output that
            contains video, as well as the other manifests (according to the Output Selection
            field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
            I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
            position. For example, #EXT-X-BYTERANGE:160364@1461888"

            - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
            maximum number of segments in the media manifest file. After this maximum, older
            segments are removed from the media manifest. This number must be less than or equal
            to the Keep Segments field.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on
            input loss.

            - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization
            Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
            If set to "include", IV is listed in the manifest, otherwise the IV is not in the
            manifest.

            - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
            Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
            If this setting is "followsSegmentNumber", it will cause the IV to change every
            segment (to match the segment number). If this is set to "explicit", you must enter a
            constantIv value.

            - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
            number of media segments (.ts files) to retain in the destination directory.

            - **KeyFormat** *(string) --* The value specifies how the key is represented in the
            resource identified by the URI. If parameter is absent, an implicit value of
            "identity" is used. A reverse DNS string can also be given.

            - **KeyFormatVersions** *(string) --* Either a single positive integer version value
            or a slash delimited list of version values (1/2/3).

            - **KeyProviderSettings** *(dict) --* The key provider settings.

              - **StaticKeySettings** *(dict) --* Static Key Settings

                - **KeyProviderServer** *(dict) --* The URL of the license server used for
                protecting content.

                  - **PasswordParam** *(string) --* key used to extract the password from EC2
                  Parameter store

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to
                  a file accessible to the Live system (eg. a http:// URI) depending on the
                  output type. For example, a RTMP destination should have a uri simliar to:
                  "rtmp://fmsserver/live".

                  - **Username** *(string) --* Documentation update needed

                - **StaticKeyValue** *(string) --* Static key value as a 32 character hexadecimal
                string.

            - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

            - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
            should use floating point or integer values for segment duration.

            - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
            looking ahead and back within the specified range for a nearby avail and extending
            the segment size if needed.

            - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
            the destination and manifest. If "live", only the number segments specified in
            keepSegments and indexNSegments are kept; newer segments replace older segments,
            which may prevent players from rewinding all the way to the beginning of the event.
            VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
            converting it to a "VOD" type manifest on completion of the stream.

            - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests (master
            manifest, if applicable, and media manifests) for this output group. SEGMENTSONLY:
            Does not generate any manifests for this output group.

            - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag
            in .m3u8 manifest files. The value is calculated as follows: either the program date
            and time are initialized using the input timecode source, or the time is initialized
            using the input timecode source and the date is initialized using the timestampOffset.

            - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
            EXT-X-PROGRAM-DATE-TIME entry, in seconds.

            - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
            each pipeline includes information about both pipelines: first its own media files,
            then the media files of the other pipeline. This feature allows playout device that
            support stale manifest detection to switch from one manifest to the other, when the
            current manifest seems to be stale. There are still two destinations and two master
            manifests, but both master manifests reference the media files from both pipelines.
            DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
            about its own pipeline only. For an HLS output group with MediaPackage as the
            destination, the DISABLED behavior is always followed. MediaPackage regenerates the
            manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

            - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
            create (in seconds). Note that segments will end on the next keyframe after this
            number of seconds, so actual segment length may be longer.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
            subdirectory before starting a new one. directoryStructure must be
            subdirectoryPerStream for this setting to have an effect.

            - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
            video in EXT-X-STREAM-INF tag of variant manifest.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

            - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
            offset to fine tune the timestamps.

            - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
            multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
            program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags
            to index segments for playback. A typical use for this value is when sending the
            output to AWS Elemental MediaConvert, which can accept only a single media file.
            Playback while the channel is running is not guaranteed due to HTTP server caching.

          - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

            - **Destination** *(dict) --* MediaPackage channel destination.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

            - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point Identity"
            element used in each message placed in the sparse track. Only enabled if
            sparseTrackType is not "none".

            - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only
            MS Smooth output, the fragment absolute time will be set to the current timecode.
            This option does not write timecodes to the audio elementary stream.

            - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
            certificate chain to a trusted Certificate Authority (CA). This will cause https
            outputs to self-signed certificates to fail.

            - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
            retrying connection to the IIS server if the connection is lost. Content will be
            cached during this time and the cache will be be delivered to the IIS server once the
            connection is re-established.

            - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
            Elemental Live acts as a "Push" encoder to IIS.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
            only be specified if eventIdMode is set to useConfigured.

            - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
            IIS server. If no event ID is sent and the same Live Event is used without changing
            the publishing point, clients might see cached video from the previous run. Options:
            - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and
            send an event ID based on the current timestamp - "noEventId" - do not send an event
            ID to the IIS server.

            - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
            server when stopping the event

            - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
            outputs.

            - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds).
            Fragment length must be compatible with GOP size and framerate.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on
            input loss.

            - **NumRetries** *(integer) --* Number of retry attempts.

            - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
            to output failure, due to exhausting the numRetries on one segment, or exceeding
            filecacheDuration.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the
            second pipeline.

            - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
            to generate a sparse track in this group of MS-Smooth outputs.

            - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so
            publishing point doesn't start until all streams start.

            - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
            timestampOffsetMode is set to useConfiguredOffset.

            - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
            useEventStartDate: Use the date the event was started as the offset -
            useConfiguredOffset: Use an explicitly configured date as the offset

          - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

            - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting
            with CDN

            - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up.
            If remote origin server stalls the RTMP connection and does not accept content fast
            enough the 'Media Cache' will fill up. When the cache reaches the duration specified
            by cacheLength the cache will stop accepting new content. If set to
            disconnectImmediately, the RTMP output will force a disconnect. Clear the media
            cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
            output will wait up to 5 minutes to allow the origin server to begin accepting data
            again.

            - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
            buffer size.

            - **CaptionData** *(string) --* Controls the types of data that passes to
            onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
            passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608
            data from both fields will be passed. If set to 'field1608' then only the data
            carried in 608 from field 1 video will be passed.

            - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input
            becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput:
            Stop transmitting data until input returns. This does not close the underlying RTMP
            connection.

            - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
            wait until a restart is initiated. A value of 0 means never restart.

          - **UdpGroupSettings** *(dict) --* Udp Group Settings

            - **InputLossAction** *(string) --* Specifies behavior of last resort when input
            video is lost, and no more backup inputs are available. When dropTs is selected the
            entire transport stream will stop being emitted. When dropProgram is selected the
            program can be dropped from the transport stream (and replaced with null packets to
            meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream
            will continue to be produced normally with repeat frames, black frames, or slate
            frames substituted for the absent input video.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

        - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

          - *(dict) --* Output settings. There can be multiple outputs within a group.

            - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
            audio sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
            as caption sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **OutputName** *(string) --* The name used to identify an output.

            - **OutputSettings** *(dict) --* Output type-specific settings.

              - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                - **ContainerSettings** *(dict) --* Settings specific to the container type of
                the file.

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream
                    is removed from the input. This allows the output audio configuration to
                    dynamically change based on input configuration. If this is set to
                    encodeSilence, all output audio streams will output encoded silence when not
                    connected to an active input stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                    muxing and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                    for ARIB Captions will be auto-selected from unused pids. If set to
                    useConfigured, ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                    for Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                    for each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                    stream(s) in the transport stream. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81
                    for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type =
                    0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                    bits per second. Setting to 0 lets the muxer automatically determine the
                    appropriate bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                    model for accurate interleaving. Setting to bufferModel to none can lead to
                    lower latency, but low-memory devices may not be able to play back the stream
                    without interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT)
                    at the specified table repetition interval.

                      - **NetworkId** *(integer) --* The numeric value placed in the Network
                      Information Table (NIT).

                      - **NetworkName** *(string) --* The network name text placed in the
                      networkNameDescriptor inside the Network Information Table. Maximum length
                      is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT)
                    at the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information
                      into output stream. The sdtFollow setting copies SDT information from input
                      stream to output stream. The sdtFollowIfPresent setting copies SDT
                      information from input stream to output stream if SDT information is
                      present in the input, otherwise it will fall back on the user-defined
                      values. The sdtManual setting means user will enter the SDT information.
                      The sdtNone setting means output stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed in
                      the serviceDescriptor in the Service Description Table. Maximum length is
                      256 characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                    specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                    DVB Teletext data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                    input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                    audio EBP markers will be added to partitions 3 and 4. The interval between
                    these additional markers will be fixed, and will be slightly shorter than the
                    video EBP marker interval. Only available when EBP Cablelabs segmentation
                    markers are selected. Partitions 1 and 2 will always follow the video
                    interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                    Points do not come within the specified time interval of each other by
                    looking ahead at input video. If another EBP is going to come in within the
                    specified time interval, the current EBP is not emitted, and the segment is
                    "stretched" to the next marker. The lookahead value does not add latency to
                    the system. The Live Event must be configured elsewhere to create sufficient
                    latency to make the lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If
                    set to videoAndAudioPids, EBP markers will be placed on the video PID and all
                    audio PIDs. If set to videoPid, EBP markers will be placed on only the video
                    PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                    PES header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Platform data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                    Signal data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment. Only
                    used with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                    input source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV
                    data to this output. Multiple values are accepted, and can be entered in
                    ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                    values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or
                    0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a downstream
                    encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between instances
                    of this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                    Reference value is inserted for every Packetized Elementary Stream (PES)
                    header. This parameter is effective only when the PCR PID is the same as the
                    video or audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                    Clock Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                    Reference (PCR) in the transport stream. When no value is given, the encoder
                    will assign the same value as the Video PID. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between instances
                    of this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                    (PMT) in the transport stream. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in the
                    Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                    SCTE-27 data to this output. Multiple values are accepted, and can be entered
                    in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                    input source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                    segmentationTime period. raiSegstart sets the Random Access Indicator bit in
                    the adaptation field. raiAdapt sets the RAI bit and adds the current timecode
                    in the private data bytes. psiSegstart inserts PAT and PMT tables at the
                    start of segments. ebp adds Encoder Boundary Point information to the
                    adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                    ebpLegacy adds Encoder Boundary Point information to the adaptation field
                    using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter
                    controls how segmentation markers are inserted into the transport stream.
                    With avails, it is possible that segments may be truncated, which can
                    influence where future segmentation markers are inserted. When a segmentation
                    style of "resetCadence" is selected and a segment is truncated due to an
                    avail, we will reset the segmentation cadence. This means the subsequent
                    segment will have a duration of $segmentationTime seconds. When a
                    segmentation style of "maintainCadence" is selected and a segment is
                    truncated due to an avail, we will not reset the segmentation cadence. This
                    means the subsequent segment will likely be truncated as well. However, all
                    segments after that will have a duration of $segmentationTime seconds. Note
                    that EBP lookahead is a slight exception to this rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                    metadata will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID
                    field in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                    stream in the transport stream. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Extension** *(string) --* Output file extension. If excluded, this will be
                auto-selected from the container type.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Required for multiple outputs of the same type.

              - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                - **NameModifier** *(string) --* Required if the output group contains more than
                one output. This modifier forms part of the output file name.

              - **HlsOutputSettings** *(dict) --* Hls Output Settings

                - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                settings are different for audio-only outputs.

                  - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                    - **AudioGroupId** *(string) --* Specifies the group to which the audio
                    Rendition belongs.

                    - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                    to use as the cover art for an audio-only output. We recommend a low bit-size
                    file because the image increases the output audio bandwidth. The image is
                    attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as
                    per the "ID3 tag version 2.4.0 - Native Frames" standard.

                      - **PasswordParam** *(string) --* key used to extract the password from EC2
                      Parameter store

                      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                      to a file accessible to the Live system (eg. a http:// URI) depending on
                      the output type. For example, a RTMP destination should have a uri simliar
                      to: "rtmp://fmsserver/live".

                      - **Username** *(string) --* Documentation update needed

                    - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                    supported: Audio-Only Variant Stream The client can play back this audio-only
                    stream instead of video in low-bandwidth scenarios. Represented as an
                    EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default
                    Alternate rendition that the client should try to play back by default.
                    Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES,
                    AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition
                    that the client may try to play back by default. Represented as an
                    EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate
                    Audio, not Auto Select Alternate rendition that the client will not try to
                    play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with
                    DEFAULT=NO, AUTOSELECT=NO

                  - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                    - **AudioRenditionSets** *(string) --* List all the audio groups that are
                    used with the video output stream. Input all the audio GROUP-IDs that are
                    associated to the video, separate by ','.

                    - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                      audio stream(s) in the transport stream. Multiple values are accepted, and
                      can be entered in ranges and/or by comma separation. Can be entered as
                      decimal or hexadecimal values.

                      - **EcmPid** *(string) --* This parameter is unused and deprecated.

                      - **PatInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. A value of \\"0\\"
                      writes out the PMT once per segment file.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                      Clock Reference value is inserted for every Packetized Elementary Stream
                      (PES) header. This parameter is effective only when the PCR PID is the same
                      as the video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock References (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the
                      encoder will assign the same value as the Video PID. Can be entered as a
                      decimal or hexadecimal value.

                      - **PmtInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. A value of \\"0\\"
                      writes out the PMT once per segment file.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                      Table (PMT) in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                      - **ProgramNum** *(integer) --* The value of the program number field in
                      the Program Map Table.

                      - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                      SCTE-35 signals from the input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata is passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                      video stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Accepts \\"Format
                Identifiers\\":#formatIdentifierParameters.

                - **SegmentModifier** *(string) --* String concatenated to end of segment
                filenames.

              - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

              - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                - **H265PackagingType** *(string) --* Only applicable when this output is
                referencing an H.265 video description. Specifies whether MP4 segments should be
                packaged as HEV1 or HVC1.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Required for multiple outputs of the same type.

              - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls
                certificate chain to a trusted Certificate Authority (CA). This will cause rtmps
                outputs with self-signed certificates to fail.

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying a connection to the Flash Media server if the connection is lost.

                - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                rtmp://host/appname). For connection to Akamai, a username and password must be
                supplied. URI fields accept format identifiers.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **NumRetries** *(integer) --* Number of retry attempts.

              - **UdpOutputSettings** *(dict) --* Udp Output Settings

                - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                values increase latency through the transcoder but simultaneously assist the
                transcoder in maintaining a constant, low-jitter UDP/RTP output while
                accommodating clock recovery, input switching, input disruptions, picture
                reordering, etc.

                - **ContainerSettings** *(dict) --* Udp Container Settings

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream
                    is removed from the input. This allows the output audio configuration to
                    dynamically change based on input configuration. If this is set to
                    encodeSilence, all output audio streams will output encoded silence when not
                    connected to an active input stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                    muxing and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                    for ARIB Captions will be auto-selected from unused pids. If set to
                    useConfigured, ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                    for Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                    for each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                    stream(s) in the transport stream. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81
                    for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type =
                    0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                    bits per second. Setting to 0 lets the muxer automatically determine the
                    appropriate bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                    model for accurate interleaving. Setting to bufferModel to none can lead to
                    lower latency, but low-memory devices may not be able to play back the stream
                    without interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT)
                    at the specified table repetition interval.

                      - **NetworkId** *(integer) --* The numeric value placed in the Network
                      Information Table (NIT).

                      - **NetworkName** *(string) --* The network name text placed in the
                      networkNameDescriptor inside the Network Information Table. Maximum length
                      is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT)
                    at the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information
                      into output stream. The sdtFollow setting copies SDT information from input
                      stream to output stream. The sdtFollowIfPresent setting copies SDT
                      information from input stream to output stream if SDT information is
                      present in the input, otherwise it will fall back on the user-defined
                      values. The sdtManual setting means user will enter the SDT information.
                      The sdtNone setting means output stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed in
                      the serviceDescriptor in the Service Description Table. Maximum length is
                      256 characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                    specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                    DVB Teletext data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                    input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                    audio EBP markers will be added to partitions 3 and 4. The interval between
                    these additional markers will be fixed, and will be slightly shorter than the
                    video EBP marker interval. Only available when EBP Cablelabs segmentation
                    markers are selected. Partitions 1 and 2 will always follow the video
                    interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                    Points do not come within the specified time interval of each other by
                    looking ahead at input video. If another EBP is going to come in within the
                    specified time interval, the current EBP is not emitted, and the segment is
                    "stretched" to the next marker. The lookahead value does not add latency to
                    the system. The Live Event must be configured elsewhere to create sufficient
                    latency to make the lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If
                    set to videoAndAudioPids, EBP markers will be placed on the video PID and all
                    audio PIDs. If set to videoPid, EBP markers will be placed on only the video
                    PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                    PES header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Platform data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                    Signal data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment. Only
                    used with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                    input source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV
                    data to this output. Multiple values are accepted, and can be entered in
                    ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                    values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or
                    0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a downstream
                    encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between instances
                    of this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                    Reference value is inserted for every Packetized Elementary Stream (PES)
                    header. This parameter is effective only when the PCR PID is the same as the
                    video or audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                    Clock Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                    Reference (PCR) in the transport stream. When no value is given, the encoder
                    will assign the same value as the Video PID. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between instances
                    of this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                    (PMT) in the transport stream. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in the
                    Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                    SCTE-27 data to this output. Multiple values are accepted, and can be entered
                    in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                    input source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                    segmentationTime period. raiSegstart sets the Random Access Indicator bit in
                    the adaptation field. raiAdapt sets the RAI bit and adds the current timecode
                    in the private data bytes. psiSegstart inserts PAT and PMT tables at the
                    start of segments. ebp adds Encoder Boundary Point information to the
                    adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                    ebpLegacy adds Encoder Boundary Point information to the adaptation field
                    using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter
                    controls how segmentation markers are inserted into the transport stream.
                    With avails, it is possible that segments may be truncated, which can
                    influence where future segmentation markers are inserted. When a segmentation
                    style of "resetCadence" is selected and a segment is truncated due to an
                    avail, we will reset the segmentation cadence. This means the subsequent
                    segment will have a duration of $segmentationTime seconds. When a
                    segmentation style of "maintainCadence" is selected and a segment is
                    truncated due to an avail, we will not reset the segmentation cadence. This
                    means the subsequent segment will likely be truncated as well. However, all
                    segments after that will have a duration of $segmentationTime seconds. Note
                    that EBP lookahead is a slight exception to this rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                    metadata will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID
                    field in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                    stream in the transport stream. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Destination** *(dict) --* Destination address and port number for RTP or UDP
                packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or
                udp://10.100.100.100:5002).

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                Error Correction on UDP outputs.

                  - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                  the FEC protection matrix. The number of transport stream packets per column
                  error correction packet. Must be between 4 and 20, inclusive.

                  - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                  - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the
                  FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC
                  is used, then larger values increase robustness. If Row FEC is used, then this
                  is the number of transport stream packets per row error correction packet, and
                  the value must be between 4 and 20, inclusive, if includeFec is columnAndRow.
                  If includeFec is column, this value must be 1 to 20, inclusive.

            - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the
            source for this output.

    - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
    information from inputs.

      - **Source** *(string) --* Identifies the source for the timecode that will be associated
      with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode
      from the the source. If no embedded timecode is detected in the source, the system falls
      back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time.
      -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.

      - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
      resynchronized to the input timecode. Discrepancies below this threshold are permitted to
      avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not
      specified.

    - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

      - *(dict) --* Video settings for this stream.

        - **CodecSettings** *(dict) --* Video codec settings.

          - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

            - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
            for inclusion in the output. For example, "10" means capture a frame every 10 seconds.

          - **H264Settings** *(dict) --* H264 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input
            AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
            value will be the value configured in the fixedAfd parameter.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
            output must have a unique value when its bitrate is rounded down to the nearest
            multiple of 1000.

            - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
            filled (HRD buffer model).

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
              conversion to the output

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
            or High profile) or cavlc.

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
            the output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
            frame to reduce flicker or 'pop' on I-frames.

            - **FramerateControl** *(string) --* This field indicates how the output video frame
            rate is specified. If "specified" is selected then the output video frame rate is
            determined by framerateNumerator and framerateDenominator, else if
            "initializeFromSource" is selected then the output video frame rate will be set equal
            to the input video frame rate of the first input.

            - **FramerateDenominator** *(integer) --* Framerate denominator.

            - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
            fraction, e.g. 24000 / 1001 = 23.976 fps.

            - **GopBReference** *(string) --* Documentation update needed

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining mid-stream
            will receive an IDR frame as quickly as possible. Setting this value to 0 will break
            output segmenting.

            - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
            seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run
            time.

            - **Level** *(string) --* H.264 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
            decrease latency and memory usage, while high can produce better quality for certain
            content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
            Set the maximum bitrate in order to accommodate expected spikes in the complexity of
            the video.

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
            enabled. Enforces separation between repeated (cadence) I-frames and I-frames
            inserted by Scene Change Detection. If a scene change I-frame is within I-interval
            frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
            I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
            normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
            Min-I-interval - 1

            - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
            use more than requested if using B-frames and/or interlaced encoding.

            - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
            is specified. If "specified" is selected then the output video pixel aspect ratio is
            determined by parNumerator and parDenominator, else if "initializeFromSource" is
            selected then the output pixsel aspect ratio will be set equal to the input video
            pixel aspect ratio of the first input.

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.264 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
            encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
            quality level field and Max bitrate field that suit your most important viewing
            devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
            bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
            Quality level: 6. Max bitrate: 1M to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate.
            Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
            depending on the video complexity. Recommended instead of QVBR if you want to
            maintain a specific average bitrate over the duration of the channel. CBR: Quality
            varies, depending on the video complexity. Recommended only if you distribute your
            assets to devices that cannot handle variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
            when scene change is detected. - Off: does not force an I-frame when scene change is
            detected.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
            to the number of macroblock rows for progressive pictures, and less than or equal to
            half the number of macroblock rows for interlaced pictures. This field is optional;
            when no value is specified the encoder will choose the number of slices based on
            encode resolution.

            - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
            reduce high-frequency content in the encoded image.

            - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
            frame based on spatial variation of content complexity.

            - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
            sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
            improve visual quality.

            - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

            - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
            frame based on temporal variation of content complexity.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
            into the video elementary stream. - 'disabled': Do not include timecodes -
            'picTimingSei': Pass through picture timing SEI messages from the source specified in
            Timecode Config

          - **H265Settings** *(dict) --* H265 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input
            AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
            value will be the value configured in the fixedAfd parameter.

            - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
            Alternative Transfer Function SEI message to support backwards compatibility with
            non-HDR decoders and displays.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
            output must have a unique value when its bitrate is rounded down to the nearest
            multiple of 1000.

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
              conversion to the output

              - **Hdr10Settings** *(dict) --* Hdr10 Settings

                - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
                defining the maximum light level, in nits, of any single pixel within an encoded
                HDR video stream or file.

                - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                metadata value defining the maximum average light level, in nits, for any single
                frame within an encoded HDR video stream or file.

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
            the output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
            frame to reduce flicker or 'pop' on I-frames.

            - **FramerateDenominator** *(integer) --* Framerate denominator.

            - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
            fraction, e.g. 24000 / 1001 = 23.976 fps.

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining mid-stream
            will receive an IDR frame as quickly as possible. Setting this value to 0 will break
            output segmenting.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
            seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run
            time.

            - **Level** *(string) --* H.265 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
            decrease latency and memory usage, while high can produce better quality for certain
            content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
            enabled. Enforces separation between repeated (cadence) I-frames and I-frames
            inserted by Scene Change Detection. If a scene change I-frame is within I-interval
            frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
            I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
            normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
            Min-I-interval - 1

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.265 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
            encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
            quality level field and Max bitrate field that suit your most important viewing
            devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
            bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
            Quality level: 6. Max bitrate: 1M to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate.
            Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
            on the video complexity. Recommended only if you distribute your assets to devices
            that cannot handle variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
            to the number of macroblock rows for progressive pictures, and less than or equal to
            half the number of macroblock rows for interlaced pictures. This field is optional;
            when no value is specified the encoder will choose the number of slices based on
            encode resolution.

            - **Tier** *(string) --* H.265 Tier.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
            into the video elementary stream. - 'disabled': Do not include timecodes -
            'picTimingSei': Pass through picture timing SEI messages from the source specified in
            Timecode Config

        - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
        most codecs, you can leave this field and width blank in order to use the height and
        width (resolution) from the source. Note, however, that leaving blank is not recommended.
        For the Frame Capture codec, height and width are required.

        - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to
        uniquely identify this Description. Description names should be unique within this Live
        Event.

        - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the input
        stream. RESPOND causes input video to be clipped, depending on the AFD value, input
        display aspect ratio, and output display aspect ratio, and (except for FRAMECAPTURE
        codec) includes the values in the output. PASSTHROUGH (does not apply to FRAMECAPTURE
        codec) ignores the AFD values and includes the values in the output, so input video is
        not clipped. NONE ignores the AFD values and does not include the values through to the
        output, so input video is not clipped.

        - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
        stretch the video to the specified output resolution (height and width). This option will
        override any position value. DEFAULT may insert black boxes (pillar boxes or letter
        boxes) around the video to provide the specified output resolution.

        - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
        scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
        for most content.

        - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
        most codecs, you can leave this field and height blank in order to use the height and
        width (resolution) from the source. Note, however, that leaving blank is not recommended.
        For the Frame Capture codec, height and width are required.
    """


_ClientDescribeChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    {"HlsInputSettings": Dict[str, Any], "ServerValidation": str},
    total=False,
)


class ClientDescribeChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef(
    _ClientDescribeChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseInputAttachmentsInputSettings` `NetworkInputSettings`

    - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
    HLS manifest.

      - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH
      that most closely matches this value will be chosen, otherwise the highest bandwidth
      stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in
      an HLS manifest.

      - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
      begin this many buffer segments from the end (most recently written segment). When
      not specified, the HLS input will begin with the first segment specified in the m3u8.

      - **Retries** *(integer) --* The number of consecutive times that attempts to read a
      manifest or segment must fail before the input is considered unavailable.

      - **RetryInterval** *(integer) --* The number of seconds between retries when an
      attempt to read a manifest or segment fails.

    - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
    checkCryptographyOnly, cryptography in the certificate will be checked, but not the
    server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name)
    do not strictly match the corresponding certificate's wildcard pattern and would
    otherwise cause the event to error. This setting is ignored for protocols that do not
    use https.
    """


_ClientDescribeChannelResponseInputAttachmentsInputSettingsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseInputAttachmentsInputSettingsTypeDef",
    {
        "AudioSelectors": List[Any],
        "CaptionSelectors": List[Any],
        "DeblockFilter": str,
        "DenoiseFilter": str,
        "FilterStrength": int,
        "InputFilter": str,
        "NetworkInputSettings": ClientDescribeChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef,
        "SourceEndBehavior": str,
        "VideoSelector": Dict[str, Any],
    },
    total=False,
)


class ClientDescribeChannelResponseInputAttachmentsInputSettingsTypeDef(
    _ClientDescribeChannelResponseInputAttachmentsInputSettingsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponseInputAttachments` `InputSettings`

    - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
    that have multiple available.

      - *(dict) --* Audio Selector

        - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
        this name to uniquely identify this Selector. Selector names should be unique per
        input.

        - **SelectorSettings** *(dict) --* The audio selector settings.

          - **AudioLanguageSelection** *(dict) --* Audio Language Selection

            - **LanguageCode** *(string) --* Selects a specific three-letter language code
            from within an audio source.

            - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
            stream demux strictly identifies audio streams by their language descriptor. If a
            PMT update occurs such that an audio stream matching the initially selected
            language is no longer present then mute will be encoded until the language
            returns. If "loose", then on a PMT update the demux will choose another audio
            stream in the program with the same stream type if it can't find one with the
            same language.

          - **AudioPidSelection** *(dict) --* Audio Pid Selection

            - **Pid** *(integer) --* Selects a specific PID from within a source.

    - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
    that have multiple available.

      - *(dict) --* Output groups for this Live Event. Output groups contain information
      about where streams should be distributed.

        - **LanguageCode** *(string) --* When specified this field indicates the three letter
        language code of the caption track to extract from the source.

        - **Name** *(string) --* Name identifier for a caption selector. This name is used to
        associate this caption selector with one or more caption descriptions. Names must be
        unique within an event.

        - **SelectorSettings** *(dict) --* Caption selector settings.

          - **AribSourceSettings** *(dict) --* Arib Source Settings

          - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

            - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
            PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
            is passed through, regardless of selectors.

          - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
            via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
            into 708. 708 data present in the source content will be discarded.

            - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
            intermittent and/or non-aligned SCTE-20 and Embedded captions.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
            within the video track from which to extract captions. Unused for passthrough.

            - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

          - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
            via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
            into 708. 708 data present in the source content will be discarded.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
            within the video track from which to extract captions. Unused for passthrough.

          - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

            - **Pid** *(integer) --* The pid field is used in conjunction with the caption
            selector languageCode field as follows: - Specify PID and Language: Extracts
            captions from that PID; the language is "informational". - Specify PID and omit
            Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
            the specified language, whichever PID that happens to be. - Omit PID and omit
            Language: Valid only if source is DVB-Sub that is being passed through; all
            languages will be passed through.

          - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

            - **PageNumber** *(string) --* Specifies the teletext page number within the data
            stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303).
            Unused for passthrough. Should be specified as a hexadecimal string with no "0x"
            prefix.

    - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

    - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

    - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
    to 5 (strongest).

    - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
    the deblocking filter enabled by default. 1) auto - filtering will be applied depending
    on input type/quality 2) disabled - no filtering will be applied to the input 3) forced -
    filtering will be applied regardless of input type

    - **NetworkInputSettings** *(dict) --* Input settings.

      - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
      HLS manifest.

        - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH
        that most closely matches this value will be chosen, otherwise the highest bandwidth
        stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in
        an HLS manifest.

        - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
        begin this many buffer segments from the end (most recently written segment). When
        not specified, the HLS input will begin with the first segment specified in the m3u8.

        - **Retries** *(integer) --* The number of consecutive times that attempts to read a
        manifest or segment must fail before the input is considered unavailable.

        - **RetryInterval** *(integer) --* The number of seconds between retries when an
        attempt to read a manifest or segment fails.

      - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
      checkCryptographyOnly, cryptography in the certificate will be checked, but not the
      server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name)
      do not strictly match the corresponding certificate's wildcard pattern and would
      otherwise cause the event to error. This setting is ignored for protocols that do not
      use https.

    - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
    input to be streamed indefinitely.

    - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input
    types that have multiple available.

      - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
      works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice
      to determine if any conversion will be performed.

      - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
      follow. This field controls how the value in the colorSpace field will be used.
      fallback means that when the input does include color space data, that data will be
      used, but when the input has no color space data, the value in colorSpace will be used.
      Choose fallback if your input is sometimes missing color space data, but when it does
      have color space data, that data is correct. force means to always use the value in
      colorSpace. Choose force if your input usually has no color space data or might have
      unreliable color space data.

      - **SelectorSettings** *(dict) --* The video selector settings.

        - **VideoSelectorPid** *(dict) --* Video Selector Pid

          - **Pid** *(integer) --* Selects a specific PID from within a video source.

        - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

          - **ProgramId** *(integer) --* Selects a specific program from within a
          multi-program transport stream. If the program doesn't exist, the first program
          within the transport stream will be selected by default.
    """


_ClientDescribeChannelResponseInputAttachmentsTypeDef = TypedDict(
    "_ClientDescribeChannelResponseInputAttachmentsTypeDef",
    {
        "InputAttachmentName": str,
        "InputId": str,
        "InputSettings": ClientDescribeChannelResponseInputAttachmentsInputSettingsTypeDef,
    },
    total=False,
)


class ClientDescribeChannelResponseInputAttachmentsTypeDef(
    _ClientDescribeChannelResponseInputAttachmentsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponse` `InputAttachments`

    - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
    required if the user wants to use this input in an input switch action.

    - **InputId** *(string) --* The ID of the input

    - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

      - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
      that have multiple available.

        - *(dict) --* Audio Selector

          - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
          this name to uniquely identify this Selector. Selector names should be unique per
          input.

          - **SelectorSettings** *(dict) --* The audio selector settings.

            - **AudioLanguageSelection** *(dict) --* Audio Language Selection

              - **LanguageCode** *(string) --* Selects a specific three-letter language code
              from within an audio source.

              - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
              stream demux strictly identifies audio streams by their language descriptor. If a
              PMT update occurs such that an audio stream matching the initially selected
              language is no longer present then mute will be encoded until the language
              returns. If "loose", then on a PMT update the demux will choose another audio
              stream in the program with the same stream type if it can't find one with the
              same language.

            - **AudioPidSelection** *(dict) --* Audio Pid Selection

              - **Pid** *(integer) --* Selects a specific PID from within a source.

      - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
      that have multiple available.

        - *(dict) --* Output groups for this Live Event. Output groups contain information
        about where streams should be distributed.

          - **LanguageCode** *(string) --* When specified this field indicates the three letter
          language code of the caption track to extract from the source.

          - **Name** *(string) --* Name identifier for a caption selector. This name is used to
          associate this caption selector with one or more caption descriptions. Names must be
          unique within an event.

          - **SelectorSettings** *(dict) --* Caption selector settings.

            - **AribSourceSettings** *(dict) --* Arib Source Settings

            - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

              - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
              PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
              is passed through, regardless of selectors.

            - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
              via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
              into 708. 708 data present in the source content will be discarded.

              - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
              intermittent and/or non-aligned SCTE-20 and Embedded captions.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
              within the video track from which to extract captions. Unused for passthrough.

              - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

            - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
              via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
              into 708. 708 data present in the source content will be discarded.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
              within the video track from which to extract captions. Unused for passthrough.

            - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

              - **Pid** *(integer) --* The pid field is used in conjunction with the caption
              selector languageCode field as follows: - Specify PID and Language: Extracts
              captions from that PID; the language is "informational". - Specify PID and omit
              Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
              the specified language, whichever PID that happens to be. - Omit PID and omit
              Language: Valid only if source is DVB-Sub that is being passed through; all
              languages will be passed through.

            - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

              - **PageNumber** *(string) --* Specifies the teletext page number within the data
              stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303).
              Unused for passthrough. Should be specified as a hexadecimal string with no "0x"
              prefix.

      - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

      - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

      - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
      to 5 (strongest).

      - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
      the deblocking filter enabled by default. 1) auto - filtering will be applied depending
      on input type/quality 2) disabled - no filtering will be applied to the input 3) forced -
      filtering will be applied regardless of input type

      - **NetworkInputSettings** *(dict) --* Input settings.

        - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
        HLS manifest.

          - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH
          that most closely matches this value will be chosen, otherwise the highest bandwidth
          stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in
          an HLS manifest.

          - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
          begin this many buffer segments from the end (most recently written segment). When
          not specified, the HLS input will begin with the first segment specified in the m3u8.

          - **Retries** *(integer) --* The number of consecutive times that attempts to read a
          manifest or segment must fail before the input is considered unavailable.

          - **RetryInterval** *(integer) --* The number of seconds between retries when an
          attempt to read a manifest or segment fails.

        - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
        checkCryptographyOnly, cryptography in the certificate will be checked, but not the
        server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name)
        do not strictly match the corresponding certificate's wildcard pattern and would
        otherwise cause the event to error. This setting is ignored for protocols that do not
        use https.

      - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
      input to be streamed indefinitely.

      - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input
      types that have multiple available.

        - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
        works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice
        to determine if any conversion will be performed.

        - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
        follow. This field controls how the value in the colorSpace field will be used.
        fallback means that when the input does include color space data, that data will be
        used, but when the input has no color space data, the value in colorSpace will be used.
        Choose fallback if your input is sometimes missing color space data, but when it does
        have color space data, that data is correct. force means to always use the value in
        colorSpace. Choose force if your input usually has no color space data or might have
        unreliable color space data.

        - **SelectorSettings** *(dict) --* The video selector settings.

          - **VideoSelectorPid** *(dict) --* Video Selector Pid

            - **Pid** *(integer) --* Selects a specific PID from within a video source.

          - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

            - **ProgramId** *(integer) --* Selects a specific program from within a
            multi-program transport stream. If the program doesn't exist, the first program
            within the transport stream will be selected by default.
    """


_ClientDescribeChannelResponseInputSpecificationTypeDef = TypedDict(
    "_ClientDescribeChannelResponseInputSpecificationTypeDef",
    {"Codec": str, "MaximumBitrate": str, "Resolution": str},
    total=False,
)


class ClientDescribeChannelResponseInputSpecificationTypeDef(
    _ClientDescribeChannelResponseInputSpecificationTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponse` `InputSpecification`

    - **Codec** *(string) --* Input codec

    - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

    - **Resolution** *(string) --* Input resolution, categorized coarsely
    """


_ClientDescribeChannelResponsePipelineDetailsTypeDef = TypedDict(
    "_ClientDescribeChannelResponsePipelineDetailsTypeDef",
    {
        "ActiveInputAttachmentName": str,
        "ActiveInputSwitchActionName": str,
        "PipelineId": str,
    },
    total=False,
)


class ClientDescribeChannelResponsePipelineDetailsTypeDef(
    _ClientDescribeChannelResponsePipelineDetailsTypeDef
):
    """
    Type definition for `ClientDescribeChannelResponse` `PipelineDetails`

    - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
    currently being ingested by this pipeline.

    - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
    action that occurred most recently and that resulted in the switch to the current input
    attachment for this pipeline.

    - **PipelineId** *(string) --* Pipeline ID
    """


_ClientDescribeChannelResponseTypeDef = TypedDict(
    "_ClientDescribeChannelResponseTypeDef",
    {
        "Arn": str,
        "ChannelClass": str,
        "Destinations": List[Any],
        "EgressEndpoints": List[ClientDescribeChannelResponseEgressEndpointsTypeDef],
        "EncoderSettings": ClientDescribeChannelResponseEncoderSettingsTypeDef,
        "Id": str,
        "InputAttachments": List[ClientDescribeChannelResponseInputAttachmentsTypeDef],
        "InputSpecification": ClientDescribeChannelResponseInputSpecificationTypeDef,
        "LogLevel": str,
        "Name": str,
        "PipelineDetails": List[ClientDescribeChannelResponsePipelineDetailsTypeDef],
        "PipelinesRunningCount": int,
        "RoleArn": str,
        "State": str,
        "Tags": Dict[str, str],
    },
    total=False,
)


class ClientDescribeChannelResponseTypeDef(_ClientDescribeChannelResponseTypeDef):
    """
    Type definition for `ClientDescribeChannel` `Response`

    - **Arn** *(string) --* The unique arn of the channel.

    - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two
    pipelines or SINGLE_PIPELINE for a channel with one pipeline.

    - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there is
    one destination per output. For other types (HLS, for example), there is one destination per
    packager.

      - *(dict) --* Placeholder documentation for OutputDestination

        - **Id** *(string) --* User-specified id. This is used in an output group or an output.

        - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one
        destination for both encoders.

          - *(dict) --* MediaPackage Output Destination Settings

            - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination
            for this output group. You do not need to specify the individual inputs in
            MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to
            the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in
            the same region.

        - **Settings** *(list) --* Destination settings for a standard output; one destination for
        each redundant encoder.

          - *(dict) --* Placeholder documentation for OutputDestinationSettings

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)

            - **Url** *(string) --* A URL specifying a destination

            - **Username** *(string) --* username for destination

    - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from

      - *(dict) --* Placeholder documentation for ChannelEgressEndpoint

        - **SourceIp** *(string) --* Public IP of where a channel's output comes from

    - **EncoderSettings** *(dict) --* Encoder Settings

      - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

        - *(dict) --* Audio Description

          - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

            - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
            to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

            - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
            corrected using the chosen algorithm. If set to measureOnly, the audio will be measured
            but not adjusted.

            - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
            entered, a default value will be used according to the chosen algorithm. The CALM Act
            (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
            recommends a target of -23 LKFS.

          - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
          for this AudioDescription.

          - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
          values for audioType are defined in ISO-IEC 13818-1.

          - **AudioTypeControl** *(string) --* Determines how audio type is determined.
          followInput: If the input contains an ISO 639 audioType, then that value is passed
          through to the output. If the input contains no ISO 639 audioType, the value in Audio
          Type is included in the output. useConfigured: The value in Audio Type is included in the
          output. Note that this field and audioType are both ignored if inputType is
          broadcasterMixedAd.

          - **CodecSettings** *(dict) --* Audio codec settings.

            - **AacSettings** *(dict) --* Aac Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
              rate control mode and profile.

              - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
              depend on rate control mode and profile. The adReceiverMix setting receives a stereo
              description plus control track and emits a mono AAC encode of the description track,
              with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

              - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
              pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
              (audioType) will be set to 3, which signals to downstream systems that this stream
              contains "broadcaster mixed AD". Note that the input received by the encoder must
              contain pre-mixed audio; the encoder does not perform the mixing. The values in
              audioTypeControl and audioType (in AudioDescription) are ignored when set to
              broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
              + AD.

              - **Profile** *(string) --* AAC Profile.

              - **RateControlMode** *(string) --* Rate Control Mode.

              - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

              - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
              mode and profile.

              - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
              MPEG-2 Transport Stream containers.

              - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
              VBR.

            - **Ac3Settings** *(dict) --* Ac3 Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
              the coding mode.

              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
              emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

              - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
              channels.

              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
              audio is Dolby Digital, dialnorm will be passed through.

              - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
              signaling to the output bitstream as defined in the Dolby Digital specification.

              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
              the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

              - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
              be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
              audio was not supplied from one of these streams, then the static metadata settings
              will be used.

            - **Eac3Settings** *(dict) --* Eac3 Settings

              - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
              attenuation to the surround channels. Only used for 3/2 coding mode.

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
              the coding mode.

              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
              emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

              - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
              channels.

              - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
              all input channels.

              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
              audio is Dolby Digital Plus, dialnorm will be passed through.

              - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

              - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
              ensures that the instantaneous signal peaks do not exceed specified levels.

              - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
              LFE channel

              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
              the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

              - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
              used for 3/2 coding mode.

              - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
              used for 3/2 coding mode.

              - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
              used for 3/2 coding mode.

              - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
              Only used for 3/2 coding mode.

              - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
              sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
              was not supplied from one of these streams, then the static metadata settings will be
              used.

              - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
              be passed through if it is present on the input. This detection is dynamic over the
              life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
              have a consistent DD+ output as the system alternates between passthrough and
              encoding.

              - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
              phase shift to the surround channels. Only used for 3/2 coding mode.

              - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
              mode.

              - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
              center back surround channel is matrix encoded into the left and right surround
              channels.

              - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
              is matrix encoded into the two channels.

            - **Mp2Settings** *(dict) --* Mp2 Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second.

              - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
              codingMode10 (for mono) or codingMode20 (for stereo).

              - **SampleRate** *(float) --* Sample rate in Hz.

            - **PassThroughSettings** *(dict) --* Pass Through Settings

          - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
          used if languageControlMode is useConfigured, or there is no ISO 639 language code
          specified in the input.

          - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
          language code of the output to follow the ISO 639 language code of the input. The
          languageCode will be used when useConfigured is set, or when followInput is selected but
          there is no ISO 639 language code specified by the input.

          - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to
          uniquely identify this AudioDescription. Description names should be unique within this
          Live Event.

          - **RemixSettings** *(dict) --* Settings that control how input audio channels are
          remixed into the output audio channels.

            - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
            appropriate gain adjustments.

              - *(dict) --* Audio Channel Mapping

                - **InputChannelLevels** *(list) --* Indices and gain values for each input channel
                that should be remixed into this output channel.

                  - *(dict) --* Input Channel Level

                    - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values
                    are within the range from -60 (mute) and 6 dB.

                    - **InputChannel** *(integer) --* The index of the input channel used as a
                    source.

                - **OutputChannel** *(integer) --* The index of the output channel being produced.

            - **ChannelsIn** *(integer) --* Number of input channels to be used.

            - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
            values: 1, 2, 4, 6, 8

          - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
          name displayed by the player (eg. English, or Director Commentary).

      - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

        - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
        black. Only bmp and png images are supported.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **State** *(string) --* When set to enabled, causes video, audio and captions to be
        blanked when insertion metadata is added.

      - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.

        - **AvailSettings** *(dict) --* Ad avail settings.

          - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
            added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
            messages and does not apply to OOB messages.

            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
            noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
            webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

          - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
            added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
            messages and does not apply to OOB messages.

            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
            noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
            webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **BlackoutSlate** *(dict) --* Settings for blackout slate.

        - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid
        black. Only bmp and png images are supported.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
        the video, audio, and captions, and raise the "Network Blackout Image" slate when an
        SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted
        when the Network Start Segmentation Descriptor is encountered. The Network End and Network
        Start descriptors must contain a network ID that matches the value entered in "Network ID".

        - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout
        image. Image will be scaled to fill the entire output raster.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
        "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

        - **State** *(string) --* When set to enabled, causes video, audio and captions to be
        blanked when indicated by program metadata.

      - **CaptionDescriptions** *(list) --* Settings for caption decriptions

        - *(dict) --* Output groups for this Live Event. Output groups contain information about
        where streams should be distributed.

          - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use as
          a caption source when generating output captions. This field should match a
          captionSelector name.

          - **DestinationSettings** *(dict) --* Additional settings for captions destination that
          depend on the destination type.

            - **AribDestinationSettings** *(dict) --* Arib Destination Settings

            - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
              setting alignment to centered will place the captions at the bottom center of the
              output. Similarly, setting a left alignment will align captions to the bottom left of
              the output. If x and y positions are given in conjunction with the alignment
              parameter, the font will be justified (either left or centered) relative to those
              coordinates. Selecting "smart" justification will left-justify live subtitles and
              center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
              match.

              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
              captions. All burn-in and DVB-Sub font settings must match.

              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
              rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent
              to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.

              - **Font** *(dict) --* External font file used for caption burn-in. File extension
              must be 'ttf' or 'tte'. Although the user can select output fonts for many different
              types of input captions, embedded, STL and teletext sources use a strict grid system.
              Using external fonts with these caption sources could cause unexpected display of
              proportional fonts. All burn-in and DVB-Sub font settings must match.

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                file accessible to the Live system (eg. a http:// URI) depending on the output
                type. For example, a RTMP destination should have a uri simliar to:
                "rtmp://fmsserver/live".

                - **Username** *(string) --* Documentation update needed

              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
              option is not valid for source captions that are STL, 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255
              is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
              is 96 dpi. All burn-in and DVB-Sub font settings must match.

              - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the
              size of the output. Giving a positive integer will specify the exact font size in
              points. All burn-in and DVB-Sub font settings must match.

              - **OutlineColor** *(string) --* Specifies font outline color. This option is not
              valid for source captions that are either 608/embedded or teletext. These source
              settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
              settings must match.

              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
              is not valid for source captions that are either 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
              captions. All burn-in and DVB-Sub font settings must match.

              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
              opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0
              (transparent). All burn-in and DVB-Sub font settings must match.

              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels to the left. All burn-in and DVB-Sub font settings must match.

              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels above the text. All burn-in and DVB-Sub font settings must match.

              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
              used to generate the output subtitles bitmap. Only applicable for Teletext inputs and
              DVB-Sub/Burn-in outputs.

              - **XPosition** *(integer) --* Specifies the horizontal position of the caption
              relative to the left side of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the left of the output. If no explicit xPosition is
              provided, the horizontal caption position will be determined by the alignment
              parameter. All burn-in and DVB-Sub font settings must match.

              - **YPosition** *(integer) --* Specifies the vertical position of the caption
              relative to the top of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the top of the output. If no explicit yPosition is
              provided, the caption will be positioned towards the bottom of the output. All
              burn-in and DVB-Sub font settings must match.

            - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
              setting alignment to centered will place the captions at the bottom center of the
              output. Similarly, setting a left alignment will align captions to the bottom left of
              the output. If x and y positions are given in conjunction with the alignment
              parameter, the font will be justified (either left or centered) relative to those
              coordinates. Selecting "smart" justification will left-justify live subtitles and
              center-justify pre-recorded subtitles. This option is not valid for source captions
              that are STL or 608/embedded. These source settings are already pre-defined by the
              caption stream. All burn-in and DVB-Sub font settings must match.

              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
              captions. All burn-in and DVB-Sub font settings must match.

              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
              rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
              equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
              must match.

              - **Font** *(dict) --* External font file used for caption burn-in. File extension
              must be 'ttf' or 'tte'. Although the user can select output fonts for many different
              types of input captions, embedded, STL and teletext sources use a strict grid system.
              Using external fonts with these caption sources could cause unexpected display of
              proportional fonts. All burn-in and DVB-Sub font settings must match.

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                file accessible to the Live system (eg. a http:// URI) depending on the output
                type. For example, a RTMP destination should have a uri simliar to:
                "rtmp://fmsserver/live".

                - **Username** *(string) --* Documentation update needed

              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
              option is not valid for source captions that are STL, 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255
              is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
              is 96 dpi. All burn-in and DVB-Sub font settings must match.

              - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
              size of the output. Giving a positive integer will specify the exact font size in
              points. All burn-in and DVB-Sub font settings must match.

              - **OutlineColor** *(string) --* Specifies font outline color. This option is not
              valid for source captions that are either 608/embedded or teletext. These source
              settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
              settings must match.

              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
              is not valid for source captions that are either 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
              captions. All burn-in and DVB-Sub font settings must match.

              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
              opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to
              0 (transparent). All burn-in and DVB-Sub font settings must match.

              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels to the left. All burn-in and DVB-Sub font settings must match.

              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels above the text. All burn-in and DVB-Sub font settings must match.

              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
              used to generate the output subtitles bitmap. Only applicable for Teletext inputs and
              DVB-Sub/Burn-in outputs.

              - **XPosition** *(integer) --* Specifies the horizontal position of the caption
              relative to the left side of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the left of the output. If no explicit xPosition is
              provided, the horizontal caption position will be determined by the alignment
              parameter. This option is not valid for source captions that are STL, 608/embedded or
              teletext. These source settings are already pre-defined by the caption stream. All
              burn-in and DVB-Sub font settings must match.

              - **YPosition** *(integer) --* Specifies the vertical position of the caption
              relative to the top of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the top of the output. If no explicit yPosition is
              provided, the caption will be positioned towards the bottom of the output. This
              option is not valid for source captions that are STL, 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

            - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

            - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
            Destination Settings

            - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
            Settings

            - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
            Destination Settings

            - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

            - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

            - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

            - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

              - **StyleControl** *(string) --* When set to passthrough, passes through style and
              position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
              CFF-TT output or TTML output.

            - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

          - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
          http://www.loc.gov/standards/iso639-2/

          - **LanguageDescription** *(string) --* Human readable information to indicate captions
          available for players (eg. English, or Spanish).

          - **Name** *(string) --* Name of the caption description. Used to associate a caption
          description with an output. Names must be unique within an event.

      - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
      whole.

        - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
        Event.

        - **InputEndAction** *(string) --* Indicates the action to take when the current input
        completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
        restart at the beginning of the first input. When "none" is configured the encoder will
        transcode either black, a solid color, or a user specified slate images per the "Input Loss
        Behavior" configuration until the next input switch occurs (which is controlled through the
        Channel Schedule API).

        - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

          - **BlackFrameMsec** *(integer) --* Documentation update needed

          - **InputLossImageColor** *(string) --* When input loss image type is "color" this field
          specifies the color to use. Value: 6 hex characters representing the values of RGB.

          - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields
          specify the parameters for accessing the slate.

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
            accessible to the Live system (eg. a http:// URI) depending on the output type. For
            example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            - **Username** *(string) --* Documentation update needed

          - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a
          slate into the output after input loss exceeds blackFrameMsec.

          - **RepeatFrameMsec** *(integer) --* Documentation update needed

        - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
        PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to the
        other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each pipeline to
        the Unix epoch.

        - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the
        Live encoder should be paced by its system clock (which optionally may be locked to another
        source via NTP) or should be locked to the clock of the source that is providing the input
        stream.

        - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
        very low video framerates. This is commonly set to enabled for music channels with less
        than one video frame per second.

      - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

        - *(dict) --* Output groups for this Live Event. Output groups contain information about
        where streams should be distributed.

          - **Name** *(string) --* Custom output group name optionally defined by the user. Only
          letters, numbers, and the underscore character allowed; only 32 characters allowed.

          - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

            - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

              - **Destination** *(dict) --* A directory and base filename where archive files
              should be written.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
              before closing and starting a new one.

            - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

              - **Destination** *(dict) --* The destination for the frame capture files. Either the
              URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
              s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
              container, plus a file name prefix (for example,
              mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
              the prefix from the destination field (for example, "curling_") + name modifier + the
              counter (5 digits, starting from 00001) + extension (which is always .jpg). For
              example, curlingLow.00001.jpg

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **HlsGroupSettings** *(dict) --* Hls Group Settings

              - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals
              through to this group of Apple HLS outputs.

                - *(string) --* Hls Ad Markers

              - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
              each output in the media .m3u8 file. Can be used if base manifest is delivered from a
              different URL than the main .m3u8 file.

              - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
              each output in the media .m3u8 file. Can be used if base manifest is delivered from a
              different URL than the main .m3u8 file.

              - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
              caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

                - *(dict) --* Maps a caption channel to an ISO 693-2 language code
                (http://www.loc.gov/standards/iso639-2), with an optional description.

                  - **CaptionChannel** *(integer) --* The closed caption channel being described by
                  this CaptionLanguageMapping. Each channel mapping must have a unique channel
                  number (maximum of 4)

                  - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                  http://www.loc.gov/standards/iso639-2)

                  - **LanguageDescription** *(string) --* Textual description of language

              - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
              captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one
              language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each
              Language Code you specify. Make sure to specify the languages in the order in which
              they appear in the original source (if the source is embedded format) or the order of
              the caption selectors (if the source is other than embedded). Otherwise, languages in
              the manifest will not match up properly with the output captions. none: Include
              CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from
              the manifest.

              - **ClientCache** *(string) --* When set to "disabled", sets the
              #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
              segments for later replay.

              - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default
              RFC-4281) during m3u8 playlist generation.

              - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
              16-byte hex value represented by a 32-character text string. If ivSource is set to
              "explicit" then this parameter is required and is used as the IV for encryption.

              - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
              manifest files, and encryption keys (if enabled).

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **DirectoryStructure** *(string) --* Place segments in subdirectories.

              - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
              scheme. Exclude this parameter if no encryption is desired.

              - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

                - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                  transfer encoding to Akamai. User should contact Akamai to enable this feature.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                  the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                  to wait until a restart is initiated. A value of 0 means never restart.

                  - **Salt** *(string) --* Salt for authenticated Akamai.

                  - **Token** *(string) --* Token parameter for authenticated akamai. If not
                  specified, _gda_ is used.

                - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                  the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                  to wait until a restart is initiated. A value of 0 means never restart.

                - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are
                  stored in non-persistent memory for faster reading and writing.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                  the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                  to wait until a restart is initiated. A value of 0 means never restart.

                - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                  transfer encoding to WebDAV.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                  the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                  to wait until a restart is initiated. A value of 0 means never restart.

              - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
              manifest, but do create the master and media manifests (according to the Output
              Selection field). STANDARD: Create an I-frame-only manifest for each output that
              contains video, as well as the other manifests (according to the Output Selection
              field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
              I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
              position. For example, #EXT-X-BYTERANGE:160364@1461888"

              - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
              maximum number of segments in the media manifest file. After this maximum, older
              segments are removed from the media manifest. This number must be less than or equal
              to the Keep Segments field.

              - **InputLossAction** *(string) --* Parameter that control output group behavior on
              input loss.

              - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization
              Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
              If set to "include", IV is listed in the manifest, otherwise the IV is not in the
              manifest.

              - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
              Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
              If this setting is "followsSegmentNumber", it will cause the IV to change every
              segment (to match the segment number). If this is set to "explicit", you must enter a
              constantIv value.

              - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
              number of media segments (.ts files) to retain in the destination directory.

              - **KeyFormat** *(string) --* The value specifies how the key is represented in the
              resource identified by the URI. If parameter is absent, an implicit value of
              "identity" is used. A reverse DNS string can also be given.

              - **KeyFormatVersions** *(string) --* Either a single positive integer version value
              or a slash delimited list of version values (1/2/3).

              - **KeyProviderSettings** *(dict) --* The key provider settings.

                - **StaticKeySettings** *(dict) --* Static Key Settings

                  - **KeyProviderServer** *(dict) --* The URL of the license server used for
                  protecting content.

                    - **PasswordParam** *(string) --* key used to extract the password from EC2
                    Parameter store

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to
                    a file accessible to the Live system (eg. a http:// URI) depending on the
                    output type. For example, a RTMP destination should have a uri simliar to:
                    "rtmp://fmsserver/live".

                    - **Username** *(string) --* Documentation update needed

                  - **StaticKeyValue** *(string) --* Static key value as a 32 character hexadecimal
                  string.

              - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

              - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
              should use floating point or integer values for segment duration.

              - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
              looking ahead and back within the specified range for a nearby avail and extending
              the segment size if needed.

              - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
              the destination and manifest. If "live", only the number segments specified in
              keepSegments and indexNSegments are kept; newer segments replace older segments,
              which may prevent players from rewinding all the way to the beginning of the event.
              VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
              converting it to a "VOD" type manifest on completion of the stream.

              - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests (master
              manifest, if applicable, and media manifests) for this output group. SEGMENTSONLY:
              Does not generate any manifests for this output group.

              - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag
              in .m3u8 manifest files. The value is calculated as follows: either the program date
              and time are initialized using the input timecode source, or the time is initialized
              using the input timecode source and the date is initialized using the timestampOffset.

              - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
              EXT-X-PROGRAM-DATE-TIME entry, in seconds.

              - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
              each pipeline includes information about both pipelines: first its own media files,
              then the media files of the other pipeline. This feature allows playout device that
              support stale manifest detection to switch from one manifest to the other, when the
              current manifest seems to be stale. There are still two destinations and two master
              manifests, but both master manifests reference the media files from both pipelines.
              DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
              about its own pipeline only. For an HLS output group with MediaPackage as the
              destination, the DISABLED behavior is always followed. MediaPackage regenerates the
              manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

              - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
              create (in seconds). Note that segments will end on the next keyframe after this
              number of seconds, so actual segment length may be longer.

              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
              configured segment size is always used.

              - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
              subdirectory before starting a new one. directoryStructure must be
              subdirectoryPerStream for this setting to have an effect.

              - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
              video in EXT-X-STREAM-INF tag of variant manifest.

              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

              - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
              offset to fine tune the timestamps.

              - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
              multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
              program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags
              to index segments for playback. A typical use for this value is when sending the
              output to AWS Elemental MediaConvert, which can accept only a single media file.
              Playback while the channel is running is not guaranteed due to HTTP server caching.

            - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

              - **Destination** *(dict) --* MediaPackage channel destination.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

              - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point Identity"
              element used in each message placed in the sparse track. Only enabled if
              sparseTrackType is not "none".

              - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only
              MS Smooth output, the fragment absolute time will be set to the current timecode.
              This option does not write timecodes to the audio elementary stream.

              - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
              certificate chain to a trusted Certificate Authority (CA). This will cause https
              outputs to self-signed certificates to fail.

              - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
              retrying connection to the IIS server if the connection is lost. Content will be
              cached during this time and the cache will be be delivered to the IIS server once the
              connection is re-established.

              - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
              Elemental Live acts as a "Push" encoder to IIS.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
              only be specified if eventIdMode is set to useConfigured.

              - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
              IIS server. If no event ID is sent and the same Live Event is used without changing
              the publishing point, clients might see cached video from the previous run. Options:
              - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and
              send an event ID based on the current timestamp - "noEventId" - do not send an event
              ID to the IIS server.

              - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
              server when stopping the event

              - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
              outputs.

              - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds).
              Fragment length must be compatible with GOP size and framerate.

              - **InputLossAction** *(string) --* Parameter that control output group behavior on
              input loss.

              - **NumRetries** *(integer) --* Number of retry attempts.

              - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
              to output failure, due to exhausting the numRetries on one segment, or exceeding
              filecacheDuration.

              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
              configured segment size is always used.

              - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the
              second pipeline.

              - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
              to generate a sparse track in this group of MS-Smooth outputs.

              - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so
              publishing point doesn't start until all streams start.

              - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
              timestampOffsetMode is set to useConfiguredOffset.

              - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
              useEventStartDate: Use the date the event was started as the offset -
              useConfiguredOffset: Use an explicitly configured date as the offset

            - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

              - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting
              with CDN

              - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up.
              If remote origin server stalls the RTMP connection and does not accept content fast
              enough the 'Media Cache' will fill up. When the cache reaches the duration specified
              by cacheLength the cache will stop accepting new content. If set to
              disconnectImmediately, the RTMP output will force a disconnect. Clear the media
              cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
              output will wait up to 5 minutes to allow the origin server to begin accepting data
              again.

              - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
              buffer size.

              - **CaptionData** *(string) --* Controls the types of data that passes to
              onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
              passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608
              data from both fields will be passed. If set to 'field1608' then only the data
              carried in 608 from field 1 video will be passed.

              - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input
              becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput:
              Stop transmitting data until input returns. This does not close the underlying RTMP
              connection.

              - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
              wait until a restart is initiated. A value of 0 means never restart.

            - **UdpGroupSettings** *(dict) --* Udp Group Settings

              - **InputLossAction** *(string) --* Specifies behavior of last resort when input
              video is lost, and no more backup inputs are available. When dropTs is selected the
              entire transport stream will stop being emitted. When dropProgram is selected the
              program can be dropped from the transport stream (and replaced with null packets to
              meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream
              will continue to be produced normally with repeat frames, black frames, or slate
              frames substituted for the absent input video.

              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

          - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

            - *(dict) --* Output settings. There can be multiple outputs within a group.

              - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
              audio sources for this output.

                - *(string) --* Placeholder documentation for __string

              - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
              as caption sources for this output.

                - *(string) --* Placeholder documentation for __string

              - **OutputName** *(string) --* The name used to identify an output.

              - **OutputSettings** *(dict) --* Output type-specific settings.

                - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                  - **ContainerSettings** *(dict) --* Settings specific to the container type of
                  the file.

                    - **M2tsSettings** *(dict) --* M2ts Settings

                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                      streams will be removed from the program if the selected input audio stream
                      is removed from the input. This allows the output audio configuration to
                      dynamically change based on input configuration. If this is set to
                      encodeSilence, all output audio streams will output encoded silence when not
                      connected to an active input stream.

                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                      muxing and removes video descriptor.

                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                      for ARIB Captions will be auto-selected from unused pids. If set to
                      useConfigured, ARIB Captions will be on the configured pid number.

                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                      for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                      stream(s) in the transport stream. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81
                      for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type =
                      0x06.

                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                      bits per second. Setting to 0 lets the muxer automatically determine the
                      appropriate bitrate.

                      - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                      model for accurate interleaving. Setting to bufferModel to none can lead to
                      lower latency, but low-memory devices may not be able to play back the stream
                      without interruptions.

                      - **CcDescriptor** *(string) --* When set to enabled, generates
                      captionServiceDescriptor in PMT.

                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT)
                      at the specified table repetition interval.

                        - **NetworkId** *(integer) --* The numeric value placed in the Network
                        Information Table (NIT).

                        - **NetworkName** *(string) --* The network name text placed in the
                        networkNameDescriptor inside the Network Information Table. Maximum length
                        is 256 characters.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT)
                      at the specified table repetition interval.

                        - **OutputSdt** *(string) --* Selects method of inserting SDT information
                        into output stream. The sdtFollow setting copies SDT information from input
                        stream to output stream. The sdtFollowIfPresent setting copies SDT
                        information from input stream to output stream if SDT information is
                        present in the input, otherwise it will fall back on the user-defined
                        values. The sdtManual setting means user will enter the SDT information.
                        The sdtNone setting means output stream will not contain SDT information.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                        - **ServiceName** *(string) --* The service name placed in the
                        serviceDescriptor in the Service Description Table. Maximum length is 256
                        characters.

                        - **ServiceProviderName** *(string) --* The service provider name placed in
                        the serviceDescriptor in the Service Description Table. Maximum length is
                        256 characters.

                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                      Subtitle data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                      specified table repetition interval.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                      DVB Teletext data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                      input source to this output.

                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                      audio EBP markers will be added to partitions 3 and 4. The interval between
                      these additional markers will be fixed, and will be slightly shorter than the
                      video EBP marker interval. Only available when EBP Cablelabs segmentation
                      markers are selected. Partitions 1 and 2 will always follow the video
                      interval.

                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                      Points do not come within the specified time interval of each other by
                      looking ahead at input video. If another EBP is going to come in within the
                      specified time interval, the current EBP is not emitted, and the segment is
                      "stretched" to the next marker. The lookahead value does not add latency to
                      the system. The Live Event must be configured elsewhere to create sufficient
                      latency to make the lookahead accurate.

                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If
                      set to videoAndAudioPids, EBP markers will be placed on the video PID and all
                      audio PIDs. If set to videoPid, EBP markers will be placed on only the video
                      PID.

                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                      PES header.

                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Platform data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                      Signal data to this output. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **FragmentTime** *(float) --* The length in seconds of each fragment. Only
                      used with EBP markers.

                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                      input source to this output.

                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV
                      data to this output. Multiple values are accepted, and can be entered in
                      ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                      values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or
                      0x1ff6).

                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                      packets to insert into the transport stream. This can be used if a downstream
                      encryption system requires periodic null packets.

                      - **PatInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. Valid values are 0, 10..1000.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                      Reference value is inserted for every Packetized Elementary Stream (PES)
                      header. This parameter is effective only when the PCR PID is the same as the
                      video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock Reference (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the encoder
                      will assign the same value as the Video PID. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **PmtInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. Valid values are 0, 10..1000.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                      (PMT) in the transport stream. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **ProgramNum** *(integer) --* The value of the program number field in the
                      Program Map Table.

                      - **RateMode** *(string) --* When vbr, does not insert null packets into
                      transport stream to fill specified bitrate. The bitrate setting acts as the
                      maximum bitrate when vbr is set.

                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                      SCTE-27 data to this output. Multiple values are accepted, and can be entered
                      in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                      input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                      segmentationTime period. raiSegstart sets the Random Access Indicator bit in
                      the adaptation field. raiAdapt sets the RAI bit and adds the current timecode
                      in the private data bytes. psiSegstart inserts PAT and PMT tables at the
                      start of segments. ebp adds Encoder Boundary Point information to the
                      adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                      ebpLegacy adds Encoder Boundary Point information to the adaptation field
                      using a legacy proprietary format.

                      - **SegmentationStyle** *(string) --* The segmentation style parameter
                      controls how segmentation markers are inserted into the transport stream.
                      With avails, it is possible that segments may be truncated, which can
                      influence where future segmentation markers are inserted. When a segmentation
                      style of "resetCadence" is selected and a segment is truncated due to an
                      avail, we will reset the segmentation cadence. This means the subsequent
                      segment will have a duration of $segmentationTime seconds. When a
                      segmentation style of "maintainCadence" is selected and a segment is
                      truncated due to an avail, we will not reset the segmentation cadence. This
                      means the subsequent segment will likely be truncated as well. However, all
                      segments after that will have a duration of $segmentationTime seconds. Note
                      that EBP lookahead is a slight exception to this rule.

                      - **SegmentationTime** *(float) --* The length in seconds of each segment.
                      Required unless markers is set to None_.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata will be passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                      stream in the transport stream. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                  - **Extension** *(string) --* Output file extension. If excluded, this will be
                  auto-selected from the container type.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Required for multiple outputs of the same type.

                - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                  - **NameModifier** *(string) --* Required if the output group contains more than
                  one output. This modifier forms part of the output file name.

                - **HlsOutputSettings** *(dict) --* Hls Output Settings

                  - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                  settings are different for audio-only outputs.

                    - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                      - **AudioGroupId** *(string) --* Specifies the group to which the audio
                      Rendition belongs.

                      - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                      to use as the cover art for an audio-only output. We recommend a low bit-size
                      file because the image increases the output audio bandwidth. The image is
                      attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as
                      per the "ID3 tag version 2.4.0 - Native Frames" standard.

                        - **PasswordParam** *(string) --* key used to extract the password from EC2
                        Parameter store

                        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                        to a file accessible to the Live system (eg. a http:// URI) depending on
                        the output type. For example, a RTMP destination should have a uri simliar
                        to: "rtmp://fmsserver/live".

                        - **Username** *(string) --* Documentation update needed

                      - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                      supported: Audio-Only Variant Stream The client can play back this audio-only
                      stream instead of video in low-bandwidth scenarios. Represented as an
                      EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default
                      Alternate rendition that the client should try to play back by default.
                      Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES,
                      AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition
                      that the client may try to play back by default. Represented as an
                      EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate
                      Audio, not Auto Select Alternate rendition that the client will not try to
                      play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with
                      DEFAULT=NO, AUTOSELECT=NO

                    - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                      - **AudioRenditionSets** *(string) --* List all the audio groups that are
                      used with the video output stream. Input all the audio GROUP-IDs that are
                      associated to the video, separate by ','.

                      - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                        - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                        for each PES packet.

                        - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                        audio stream(s) in the transport stream. Multiple values are accepted, and
                        can be entered in ranges and/or by comma separation. Can be entered as
                        decimal or hexadecimal values.

                        - **EcmPid** *(string) --* This parameter is unused and deprecated.

                        - **PatInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. A value of \\"0\\"
                        writes out the PMT once per segment file.

                        - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                        Clock Reference value is inserted for every Packetized Elementary Stream
                        (PES) header. This parameter is effective only when the PCR PID is the same
                        as the video or audio elementary stream.

                        - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                        Clock References (PCRs) inserted into the transport stream.

                        - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                        Reference (PCR) in the transport stream. When no value is given, the
                        encoder will assign the same value as the Video PID. Can be entered as a
                        decimal or hexadecimal value.

                        - **PmtInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. A value of \\"0\\"
                        writes out the PMT once per segment file.

                        - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                        Table (PMT) in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                        - **ProgramNum** *(integer) --* The value of the program number field in
                        the Program Map Table.

                        - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                        SCTE-35 signals from the input source to this output.

                        - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                        in the transport stream. Can be entered as a decimal or hexadecimal value.

                        - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                        metadata is passed through from input to output.

                        - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                        metadata stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **TransportStreamId** *(integer) --* The value of the transport stream ID
                        field in the Program Map Table.

                        - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                        video stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Accepts \\"Format
                  Identifiers\\":#formatIdentifierParameters.

                  - **SegmentModifier** *(string) --* String concatenated to end of segment
                  filenames.

                - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

                - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                  - **H265PackagingType** *(string) --* Only applicable when this output is
                  referencing an H.265 video description. Specifies whether MP4 segments should be
                  packaged as HEV1 or HVC1.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Required for multiple outputs of the same type.

                - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                  - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls
                  certificate chain to a trusted Certificate Authority (CA). This will cause rtmps
                  outputs with self-signed certificates to fail.

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying a connection to the Flash Media server if the connection is lost.

                  - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                  rtmp://host/appname). For connection to Akamai, a username and password must be
                  supplied. URI fields accept format identifiers.

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                  - **NumRetries** *(integer) --* Number of retry attempts.

                - **UdpOutputSettings** *(dict) --* Udp Output Settings

                  - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                  values increase latency through the transcoder but simultaneously assist the
                  transcoder in maintaining a constant, low-jitter UDP/RTP output while
                  accommodating clock recovery, input switching, input disruptions, picture
                  reordering, etc.

                  - **ContainerSettings** *(dict) --* Udp Container Settings

                    - **M2tsSettings** *(dict) --* M2ts Settings

                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                      streams will be removed from the program if the selected input audio stream
                      is removed from the input. This allows the output audio configuration to
                      dynamically change based on input configuration. If this is set to
                      encodeSilence, all output audio streams will output encoded silence when not
                      connected to an active input stream.

                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                      muxing and removes video descriptor.

                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                      for ARIB Captions will be auto-selected from unused pids. If set to
                      useConfigured, ARIB Captions will be on the configured pid number.

                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                      for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                      stream(s) in the transport stream. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81
                      for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type =
                      0x06.

                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                      bits per second. Setting to 0 lets the muxer automatically determine the
                      appropriate bitrate.

                      - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                      model for accurate interleaving. Setting to bufferModel to none can lead to
                      lower latency, but low-memory devices may not be able to play back the stream
                      without interruptions.

                      - **CcDescriptor** *(string) --* When set to enabled, generates
                      captionServiceDescriptor in PMT.

                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT)
                      at the specified table repetition interval.

                        - **NetworkId** *(integer) --* The numeric value placed in the Network
                        Information Table (NIT).

                        - **NetworkName** *(string) --* The network name text placed in the
                        networkNameDescriptor inside the Network Information Table. Maximum length
                        is 256 characters.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT)
                      at the specified table repetition interval.

                        - **OutputSdt** *(string) --* Selects method of inserting SDT information
                        into output stream. The sdtFollow setting copies SDT information from input
                        stream to output stream. The sdtFollowIfPresent setting copies SDT
                        information from input stream to output stream if SDT information is
                        present in the input, otherwise it will fall back on the user-defined
                        values. The sdtManual setting means user will enter the SDT information.
                        The sdtNone setting means output stream will not contain SDT information.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                        - **ServiceName** *(string) --* The service name placed in the
                        serviceDescriptor in the Service Description Table. Maximum length is 256
                        characters.

                        - **ServiceProviderName** *(string) --* The service provider name placed in
                        the serviceDescriptor in the Service Description Table. Maximum length is
                        256 characters.

                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                      Subtitle data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                      specified table repetition interval.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                      DVB Teletext data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                      input source to this output.

                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                      audio EBP markers will be added to partitions 3 and 4. The interval between
                      these additional markers will be fixed, and will be slightly shorter than the
                      video EBP marker interval. Only available when EBP Cablelabs segmentation
                      markers are selected. Partitions 1 and 2 will always follow the video
                      interval.

                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                      Points do not come within the specified time interval of each other by
                      looking ahead at input video. If another EBP is going to come in within the
                      specified time interval, the current EBP is not emitted, and the segment is
                      "stretched" to the next marker. The lookahead value does not add latency to
                      the system. The Live Event must be configured elsewhere to create sufficient
                      latency to make the lookahead accurate.

                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If
                      set to videoAndAudioPids, EBP markers will be placed on the video PID and all
                      audio PIDs. If set to videoPid, EBP markers will be placed on only the video
                      PID.

                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                      PES header.

                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Platform data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                      Signal data to this output. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **FragmentTime** *(float) --* The length in seconds of each fragment. Only
                      used with EBP markers.

                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                      input source to this output.

                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV
                      data to this output. Multiple values are accepted, and can be entered in
                      ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                      values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or
                      0x1ff6).

                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                      packets to insert into the transport stream. This can be used if a downstream
                      encryption system requires periodic null packets.

                      - **PatInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. Valid values are 0, 10..1000.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                      Reference value is inserted for every Packetized Elementary Stream (PES)
                      header. This parameter is effective only when the PCR PID is the same as the
                      video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock Reference (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the encoder
                      will assign the same value as the Video PID. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **PmtInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. Valid values are 0, 10..1000.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                      (PMT) in the transport stream. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **ProgramNum** *(integer) --* The value of the program number field in the
                      Program Map Table.

                      - **RateMode** *(string) --* When vbr, does not insert null packets into
                      transport stream to fill specified bitrate. The bitrate setting acts as the
                      maximum bitrate when vbr is set.

                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                      SCTE-27 data to this output. Multiple values are accepted, and can be entered
                      in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                      input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                      segmentationTime period. raiSegstart sets the Random Access Indicator bit in
                      the adaptation field. raiAdapt sets the RAI bit and adds the current timecode
                      in the private data bytes. psiSegstart inserts PAT and PMT tables at the
                      start of segments. ebp adds Encoder Boundary Point information to the
                      adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                      ebpLegacy adds Encoder Boundary Point information to the adaptation field
                      using a legacy proprietary format.

                      - **SegmentationStyle** *(string) --* The segmentation style parameter
                      controls how segmentation markers are inserted into the transport stream.
                      With avails, it is possible that segments may be truncated, which can
                      influence where future segmentation markers are inserted. When a segmentation
                      style of "resetCadence" is selected and a segment is truncated due to an
                      avail, we will reset the segmentation cadence. This means the subsequent
                      segment will have a duration of $segmentationTime seconds. When a
                      segmentation style of "maintainCadence" is selected and a segment is
                      truncated due to an avail, we will not reset the segmentation cadence. This
                      means the subsequent segment will likely be truncated as well. However, all
                      segments after that will have a duration of $segmentationTime seconds. Note
                      that EBP lookahead is a slight exception to this rule.

                      - **SegmentationTime** *(float) --* The length in seconds of each segment.
                      Required unless markers is set to None_.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata will be passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                      stream in the transport stream. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                  - **Destination** *(dict) --* Destination address and port number for RTP or UDP
                  packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or
                  udp://10.100.100.100:5002).

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                  - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                  Error Correction on UDP outputs.

                    - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                    the FEC protection matrix. The number of transport stream packets per column
                    error correction packet. Must be between 4 and 20, inclusive.

                    - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                    - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the
                    FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC
                    is used, then larger values increase robustness. If Row FEC is used, then this
                    is the number of transport stream packets per row error correction packet, and
                    the value must be between 4 and 20, inclusive, if includeFec is columnAndRow.
                    If includeFec is column, this value must be 1 to 20, inclusive.

              - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the
              source for this output.

      - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
      information from inputs.

        - **Source** *(string) --* Identifies the source for the timecode that will be associated
        with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode
        from the the source. If no embedded timecode is detected in the source, the system falls
        back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time.
        -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.

        - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
        resynchronized to the input timecode. Discrepancies below this threshold are permitted to
        avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not
        specified.

      - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

        - *(dict) --* Video settings for this stream.

          - **CodecSettings** *(dict) --* Video codec settings.

            - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

              - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
              for inclusion in the output. For example, "10" means capture a frame every 10 seconds.

            - **H264Settings** *(dict) --* H264 Settings

              - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
              quantizers to vary to improve visual quality.

              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
              output stream. If afdSignaling is "auto", the system will try to preserve the input
              AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
              value will be the value configured in the fixedAfd parameter.

              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
              control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
              output must have a unique value when its bitrate is rounded down to the nearest
              multiple of 1000.

              - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
              filled (HRD buffer model).

              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              - **ColorSpaceSettings** *(dict) --* Color Space settings

                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
                conversion to the output

                - **Rec601Settings** *(dict) --* Rec601 Settings

                - **Rec709Settings** *(dict) --* Rec709 Settings

              - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
              or High profile) or cavlc.

              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
              the output stream. Only valid when afdSignaling is set to 'Fixed'.

              - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
              frame to reduce flicker or 'pop' on I-frames.

              - **FramerateControl** *(string) --* This field indicates how the output video frame
              rate is specified. If "specified" is selected then the output video frame rate is
              determined by framerateNumerator and framerateDenominator, else if
              "initializeFromSource" is selected then the output video frame rate will be set equal
              to the input video frame rate of the first input.

              - **FramerateDenominator** *(integer) --* Framerate denominator.

              - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
              fraction, e.g. 24000 / 1001 = 23.976 fps.

              - **GopBReference** *(string) --* Documentation update needed

              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
              applications, it is recommended that this be set to 1 so a decoder joining mid-stream
              will receive an IDR frame as quickly as possible. Setting this value to 0 will break
              output segmenting.

              - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
              seconds per gopSizeUnits. Must be greater than zero.

              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
              seconds. If seconds the system will convert the gopSize into a frame count at run
              time.

              - **Level** *(string) --* H.264 Level.

              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
              decrease latency and memory usage, while high can produce better quality for certain
              content.

              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
              Set the maximum bitrate in order to accommodate expected spikes in the complexity of
              the video.

              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
              enabled. Enforces separation between repeated (cadence) I-frames and I-frames
              inserted by Scene Change Detection. If a scene change I-frame is within I-interval
              frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
              I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
              normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
              Min-I-interval - 1

              - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
              use more than requested if using B-frames and/or interlaced encoding.

              - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
              is specified. If "specified" is selected then the output video pixel aspect ratio is
              determined by parNumerator and parDenominator, else if "initializeFromSource" is
              selected then the output pixsel aspect ratio will be set equal to the input video
              pixel aspect ratio of the first input.

              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              - **Profile** *(string) --* H.264 Profile.

              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
              encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
              quality level field and Max bitrate field that suit your most important viewing
              devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
              bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
              Quality level: 6. Max bitrate: 1M to 1.5M

              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
              specified quality level except when it is constrained by the maximum bitrate.
              Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
              depending on the video complexity. Recommended instead of QVBR if you want to
              maintain a specific average bitrate over the duration of the channel. CBR: Quality
              varies, depending on the video complexity. Recommended only if you distribute your
              assets to devices that cannot handle variable bitrates.

              - **ScanType** *(string) --* Sets the scan type of the output to progressive or
              top-field-first interlaced.

              - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
              when scene change is detected. - Off: does not force an I-frame when scene change is
              detected.

              - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
              to the number of macroblock rows for progressive pictures, and less than or equal to
              half the number of macroblock rows for interlaced pictures. This field is optional;
              when no value is specified the encoder will choose the number of slices based on
              encode resolution.

              - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
              reduce high-frequency content in the encoded image.

              - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
              frame based on spatial variation of content complexity.

              - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
              sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
              improve visual quality.

              - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

              - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
              frame based on temporal variation of content complexity.

              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
              into the video elementary stream. - 'disabled': Do not include timecodes -
              'picTimingSei': Pass through picture timing SEI messages from the source specified in
              Timecode Config

            - **H265Settings** *(dict) --* H265 Settings

              - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
              quantizers to vary to improve visual quality.

              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
              output stream. If afdSignaling is "auto", the system will try to preserve the input
              AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
              value will be the value configured in the fixedAfd parameter.

              - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
              Alternative Transfer Function SEI message to support backwards compatibility with
              non-HDR decoders and displays.

              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
              control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
              output must have a unique value when its bitrate is rounded down to the nearest
              multiple of 1000.

              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              - **ColorSpaceSettings** *(dict) --* Color Space settings

                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
                conversion to the output

                - **Hdr10Settings** *(dict) --* Hdr10 Settings

                  - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
                  defining the maximum light level, in nits, of any single pixel within an encoded
                  HDR video stream or file.

                  - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                  metadata value defining the maximum average light level, in nits, for any single
                  frame within an encoded HDR video stream or file.

                - **Rec601Settings** *(dict) --* Rec601 Settings

                - **Rec709Settings** *(dict) --* Rec709 Settings

              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
              the output stream. Only valid when afdSignaling is set to 'Fixed'.

              - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
              frame to reduce flicker or 'pop' on I-frames.

              - **FramerateDenominator** *(integer) --* Framerate denominator.

              - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
              fraction, e.g. 24000 / 1001 = 23.976 fps.

              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
              applications, it is recommended that this be set to 1 so a decoder joining mid-stream
              will receive an IDR frame as quickly as possible. Setting this value to 0 will break
              output segmenting.

              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
              seconds per gopSizeUnits. Must be greater than zero.

              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
              seconds. If seconds the system will convert the gopSize into a frame count at run
              time.

              - **Level** *(string) --* H.265 Level.

              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
              decrease latency and memory usage, while high can produce better quality for certain
              content.

              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
              enabled. Enforces separation between repeated (cadence) I-frames and I-frames
              inserted by Scene Change Detection. If a scene change I-frame is within I-interval
              frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
              I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
              normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
              Min-I-interval - 1

              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              - **Profile** *(string) --* H.265 Profile.

              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
              encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
              quality level field and Max bitrate field that suit your most important viewing
              devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
              bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
              Quality level: 6. Max bitrate: 1M to 1.5M

              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
              specified quality level except when it is constrained by the maximum bitrate.
              Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
              on the video complexity. Recommended only if you distribute your assets to devices
              that cannot handle variable bitrates.

              - **ScanType** *(string) --* Sets the scan type of the output to progressive or
              top-field-first interlaced.

              - **SceneChangeDetect** *(string) --* Scene change detection.

              - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
              to the number of macroblock rows for progressive pictures, and less than or equal to
              half the number of macroblock rows for interlaced pictures. This field is optional;
              when no value is specified the encoder will choose the number of slices based on
              encode resolution.

              - **Tier** *(string) --* H.265 Tier.

              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
              into the video elementary stream. - 'disabled': Do not include timecodes -
              'picTimingSei': Pass through picture timing SEI messages from the source specified in
              Timecode Config

          - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
          most codecs, you can leave this field and width blank in order to use the height and
          width (resolution) from the source. Note, however, that leaving blank is not recommended.
          For the Frame Capture codec, height and width are required.

          - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to
          uniquely identify this Description. Description names should be unique within this Live
          Event.

          - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the input
          stream. RESPOND causes input video to be clipped, depending on the AFD value, input
          display aspect ratio, and output display aspect ratio, and (except for FRAMECAPTURE
          codec) includes the values in the output. PASSTHROUGH (does not apply to FRAMECAPTURE
          codec) ignores the AFD values and includes the values in the output, so input video is
          not clipped. NONE ignores the AFD values and does not include the values through to the
          output, so input video is not clipped.

          - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
          stretch the video to the specified output resolution (height and width). This option will
          override any position value. DEFAULT may insert black boxes (pillar boxes or letter
          boxes) around the video to provide the specified output resolution.

          - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
          scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
          for most content.

          - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
          most codecs, you can leave this field and height blank in order to use the height and
          width (resolution) from the source. Note, however, that leaving blank is not recommended.
          For the Frame Capture codec, height and width are required.

    - **Id** *(string) --* The unique id of the channel.

    - **InputAttachments** *(list) --* List of input attachments for channel.

      - *(dict) --* Placeholder documentation for InputAttachment

        - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
        required if the user wants to use this input in an input switch action.

        - **InputId** *(string) --* The ID of the input

        - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

          - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
          that have multiple available.

            - *(dict) --* Audio Selector

              - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
              this name to uniquely identify this Selector. Selector names should be unique per
              input.

              - **SelectorSettings** *(dict) --* The audio selector settings.

                - **AudioLanguageSelection** *(dict) --* Audio Language Selection

                  - **LanguageCode** *(string) --* Selects a specific three-letter language code
                  from within an audio source.

                  - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
                  stream demux strictly identifies audio streams by their language descriptor. If a
                  PMT update occurs such that an audio stream matching the initially selected
                  language is no longer present then mute will be encoded until the language
                  returns. If "loose", then on a PMT update the demux will choose another audio
                  stream in the program with the same stream type if it can't find one with the
                  same language.

                - **AudioPidSelection** *(dict) --* Audio Pid Selection

                  - **Pid** *(integer) --* Selects a specific PID from within a source.

          - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
          that have multiple available.

            - *(dict) --* Output groups for this Live Event. Output groups contain information
            about where streams should be distributed.

              - **LanguageCode** *(string) --* When specified this field indicates the three letter
              language code of the caption track to extract from the source.

              - **Name** *(string) --* Name identifier for a caption selector. This name is used to
              associate this caption selector with one or more caption descriptions. Names must be
              unique within an event.

              - **SelectorSettings** *(dict) --* Caption selector settings.

                - **AribSourceSettings** *(dict) --* Arib Source Settings

                - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

                  - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
                  PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
                  is passed through, regardless of selectors.

                - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
                  via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
                  into 708. 708 data present in the source content will be discarded.

                  - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
                  intermittent and/or non-aligned SCTE-20 and Embedded captions.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
                  within the video track from which to extract captions. Unused for passthrough.

                  - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

                - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
                  via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
                  into 708. 708 data present in the source content will be discarded.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
                  within the video track from which to extract captions. Unused for passthrough.

                - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

                  - **Pid** *(integer) --* The pid field is used in conjunction with the caption
                  selector languageCode field as follows: - Specify PID and Language: Extracts
                  captions from that PID; the language is "informational". - Specify PID and omit
                  Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
                  the specified language, whichever PID that happens to be. - Omit PID and omit
                  Language: Valid only if source is DVB-Sub that is being passed through; all
                  languages will be passed through.

                - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

                  - **PageNumber** *(string) --* Specifies the teletext page number within the data
                  stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303).
                  Unused for passthrough. Should be specified as a hexadecimal string with no "0x"
                  prefix.

          - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

          - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

          - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
          to 5 (strongest).

          - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
          the deblocking filter enabled by default. 1) auto - filtering will be applied depending
          on input type/quality 2) disabled - no filtering will be applied to the input 3) forced -
          filtering will be applied regardless of input type

          - **NetworkInputSettings** *(dict) --* Input settings.

            - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
            HLS manifest.

              - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH
              that most closely matches this value will be chosen, otherwise the highest bandwidth
              stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in
              an HLS manifest.

              - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
              begin this many buffer segments from the end (most recently written segment). When
              not specified, the HLS input will begin with the first segment specified in the m3u8.

              - **Retries** *(integer) --* The number of consecutive times that attempts to read a
              manifest or segment must fail before the input is considered unavailable.

              - **RetryInterval** *(integer) --* The number of seconds between retries when an
              attempt to read a manifest or segment fails.

            - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
            checkCryptographyOnly, cryptography in the certificate will be checked, but not the
            server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name)
            do not strictly match the corresponding certificate's wildcard pattern and would
            otherwise cause the event to error. This setting is ignored for protocols that do not
            use https.

          - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
          input to be streamed indefinitely.

          - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input
          types that have multiple available.

            - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
            works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice
            to determine if any conversion will be performed.

            - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
            follow. This field controls how the value in the colorSpace field will be used.
            fallback means that when the input does include color space data, that data will be
            used, but when the input has no color space data, the value in colorSpace will be used.
            Choose fallback if your input is sometimes missing color space data, but when it does
            have color space data, that data is correct. force means to always use the value in
            colorSpace. Choose force if your input usually has no color space data or might have
            unreliable color space data.

            - **SelectorSettings** *(dict) --* The video selector settings.

              - **VideoSelectorPid** *(dict) --* Video Selector Pid

                - **Pid** *(integer) --* Selects a specific PID from within a video source.

              - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

                - **ProgramId** *(integer) --* Selects a specific program from within a
                multi-program transport stream. If the program doesn't exist, the first program
                within the transport stream will be selected by default.

    - **InputSpecification** *(dict) --* Placeholder documentation for InputSpecification

      - **Codec** *(string) --* Input codec

      - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

      - **Resolution** *(string) --* Input resolution, categorized coarsely

    - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.

    - **Name** *(string) --* The name of the channel. (user-mutable)

    - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.

      - *(dict) --* Runtime details of a pipeline when a channel is running.

        - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
        currently being ingested by this pipeline.

        - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
        action that occurred most recently and that resulted in the switch to the current input
        attachment for this pipeline.

        - **PipelineId** *(string) --* Pipeline ID

    - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.

    - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running the
    Channel.

    - **State** *(string) --* Placeholder documentation for ChannelState

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string
    """


_ClientDescribeInputResponseDestinationsVpcTypeDef = TypedDict(
    "_ClientDescribeInputResponseDestinationsVpcTypeDef",
    {"AvailabilityZone": str, "NetworkInterfaceId": str},
    total=False,
)


class ClientDescribeInputResponseDestinationsVpcTypeDef(
    _ClientDescribeInputResponseDestinationsVpcTypeDef
):
    """
    Type definition for `ClientDescribeInputResponseDestinations` `Vpc`

    - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

    - **NetworkInterfaceId** *(string) --* The network interface ID of the Input destination
    in the VPC.
    """


_ClientDescribeInputResponseDestinationsTypeDef = TypedDict(
    "_ClientDescribeInputResponseDestinationsTypeDef",
    {
        "Ip": str,
        "Port": str,
        "Url": str,
        "Vpc": ClientDescribeInputResponseDestinationsVpcTypeDef,
    },
    total=False,
)


class ClientDescribeInputResponseDestinationsTypeDef(
    _ClientDescribeInputResponseDestinationsTypeDef
):
    """
    Type definition for `ClientDescribeInputResponse` `Destinations`

    - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains fixed
    for the lifetime of the input.

    - **Port** *(string) --* The port number for the input.

    - **Url** *(string) --* This represents the endpoint that the customer stream will be
    pushed to.

    - **Vpc** *(dict) --* The properties for a VPC type input destination.

      - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

      - **NetworkInterfaceId** *(string) --* The network interface ID of the Input destination
      in the VPC.
    """


_ClientDescribeInputResponseMediaConnectFlowsTypeDef = TypedDict(
    "_ClientDescribeInputResponseMediaConnectFlowsTypeDef",
    {"FlowArn": str},
    total=False,
)


class ClientDescribeInputResponseMediaConnectFlowsTypeDef(
    _ClientDescribeInputResponseMediaConnectFlowsTypeDef
):
    """
    Type definition for `ClientDescribeInputResponse` `MediaConnectFlows`

    - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a source.
    """


_ClientDescribeInputResponseSourcesTypeDef = TypedDict(
    "_ClientDescribeInputResponseSourcesTypeDef",
    {"PasswordParam": str, "Url": str, "Username": str},
    total=False,
)


class ClientDescribeInputResponseSourcesTypeDef(
    _ClientDescribeInputResponseSourcesTypeDef
):
    """
    Type definition for `ClientDescribeInputResponse` `Sources`

    - **PasswordParam** *(string) --* The key used to extract the password from EC2 Parameter
    store.

    - **Url** *(string) --* This represents the customer's source URL where stream is pulled
    from.

    - **Username** *(string) --* The username for the input source.
    """


_ClientDescribeInputResponseTypeDef = TypedDict(
    "_ClientDescribeInputResponseTypeDef",
    {
        "Arn": str,
        "AttachedChannels": List[Any],
        "Destinations": List[ClientDescribeInputResponseDestinationsTypeDef],
        "Id": str,
        "InputClass": str,
        "InputSourceType": str,
        "MediaConnectFlows": List[ClientDescribeInputResponseMediaConnectFlowsTypeDef],
        "Name": str,
        "RoleArn": str,
        "SecurityGroups": List[Any],
        "Sources": List[ClientDescribeInputResponseSourcesTypeDef],
        "State": str,
        "Tags": Dict[str, str],
        "Type": str,
    },
    total=False,
)


class ClientDescribeInputResponseTypeDef(_ClientDescribeInputResponseTypeDef):
    """
    Type definition for `ClientDescribeInput` `Response`

    - **Arn** *(string) --* The Unique ARN of the input (generated, immutable).

    - **AttachedChannels** *(list) --* A list of channel IDs that that input is attached to
    (currently an input can only be attached to one channel).

      - *(string) --* Placeholder documentation for __string

    - **Destinations** *(list) --* A list of the destinations of the input (PUSH-type).

      - *(dict) --* The settings for a PUSH type input.

        - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains fixed
        for the lifetime of the input.

        - **Port** *(string) --* The port number for the input.

        - **Url** *(string) --* This represents the endpoint that the customer stream will be
        pushed to.

        - **Vpc** *(dict) --* The properties for a VPC type input destination.

          - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

          - **NetworkInterfaceId** *(string) --* The network interface ID of the Input destination
          in the VPC.

    - **Id** *(string) --* The generated ID of the input (unique for user account, immutable).

    - **InputClass** *(string) --* STANDARD - MediaLive expects two sources to be connected to this
    input. If the channel is also STANDARD, both sources will be ingested. If the channel is
    SINGLE_PIPELINE, only the first source will be ingested; the second source will always be
    ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one source to
    this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If the
    ChannelClass is STANDARD, this value is not valid because the channel requires two sources in
    the input.

    - **InputSourceType** *(string) --* Certain pull input sources can be dynamic, meaning that
    they can have their URL's dynamically changes during input switch actions. Presently, this
    functionality only works with MP4_FILE inputs.

    - **MediaConnectFlows** *(list) --* A list of MediaConnect Flows for this input.

      - *(dict) --* The settings for a MediaConnect Flow.

        - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a source.

    - **Name** *(string) --* The user-assigned name (This is a mutable value).

    - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role this input assumes
    during and after creation.

    - **SecurityGroups** *(list) --* A list of IDs for all the Input Security Groups attached to
    the input.

      - *(string) --* Placeholder documentation for __string

    - **Sources** *(list) --* A list of the sources of the input (PULL-type).

      - *(dict) --* The settings for a PULL type input.

        - **PasswordParam** *(string) --* The key used to extract the password from EC2 Parameter
        store.

        - **Url** *(string) --* This represents the customer's source URL where stream is pulled
        from.

        - **Username** *(string) --* The username for the input source.

    - **State** *(string) --* Placeholder documentation for InputState

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string

    - **Type** *(string) --* Placeholder documentation for InputType
    """


_ClientDescribeInputSecurityGroupResponseWhitelistRulesTypeDef = TypedDict(
    "_ClientDescribeInputSecurityGroupResponseWhitelistRulesTypeDef",
    {"Cidr": str},
    total=False,
)


class ClientDescribeInputSecurityGroupResponseWhitelistRulesTypeDef(
    _ClientDescribeInputSecurityGroupResponseWhitelistRulesTypeDef
):
    """
    Type definition for `ClientDescribeInputSecurityGroupResponse` `WhitelistRules`

    - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
    """


_ClientDescribeInputSecurityGroupResponseTypeDef = TypedDict(
    "_ClientDescribeInputSecurityGroupResponseTypeDef",
    {
        "Arn": str,
        "Id": str,
        "Inputs": List[str],
        "State": str,
        "Tags": Dict[str, str],
        "WhitelistRules": List[
            ClientDescribeInputSecurityGroupResponseWhitelistRulesTypeDef
        ],
    },
    total=False,
)


class ClientDescribeInputSecurityGroupResponseTypeDef(
    _ClientDescribeInputSecurityGroupResponseTypeDef
):
    """
    Type definition for `ClientDescribeInputSecurityGroup` `Response`

    - **Arn** *(string) --* Unique ARN of Input Security Group

    - **Id** *(string) --* The Id of the Input Security Group

    - **Inputs** *(list) --* The list of inputs currently using this Input Security Group.

      - *(string) --* Placeholder documentation for __string

    - **State** *(string) --* The current state of the Input Security Group.

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string

    - **WhitelistRules** *(list) --* Whitelist rules and their sync status

      - *(dict) --* Whitelist rule

        - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
    """


_ClientDescribeOfferingResponseResourceSpecificationTypeDef = TypedDict(
    "_ClientDescribeOfferingResponseResourceSpecificationTypeDef",
    {
        "ChannelClass": str,
        "Codec": str,
        "MaximumBitrate": str,
        "MaximumFramerate": str,
        "Resolution": str,
        "ResourceType": str,
        "SpecialFeature": str,
        "VideoQuality": str,
    },
    total=False,
)


class ClientDescribeOfferingResponseResourceSpecificationTypeDef(
    _ClientDescribeOfferingResponseResourceSpecificationTypeDef
):
    """
    Type definition for `ClientDescribeOfferingResponse` `ResourceSpecification`

    - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

    - **Codec** *(string) --* Codec, e.g. 'AVC'

    - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

    - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

    - **Resolution** *(string) --* Resolution, e.g. 'HD'

    - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

    - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)

    - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
    """


_ClientDescribeOfferingResponseTypeDef = TypedDict(
    "_ClientDescribeOfferingResponseTypeDef",
    {
        "Arn": str,
        "CurrencyCode": str,
        "Duration": int,
        "DurationUnits": str,
        "FixedPrice": float,
        "OfferingDescription": str,
        "OfferingId": str,
        "OfferingType": str,
        "Region": str,
        "ResourceSpecification": ClientDescribeOfferingResponseResourceSpecificationTypeDef,
        "UsagePrice": float,
    },
    total=False,
)


class ClientDescribeOfferingResponseTypeDef(_ClientDescribeOfferingResponseTypeDef):
    """
    Type definition for `ClientDescribeOffering` `Response`

    - **Arn** *(string) --* Unique offering ARN, e.g.
    'arn:aws:medialive:us-west-2:123456789012:offering:87654321'

    - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217
    format, e.g. 'USD'

    - **Duration** *(integer) --* Lease duration, e.g. '12'

    - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'

    - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a
    NO_UPFRONT offering

    - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20
    Mbps, 30 fps, and standard VQ in US West (Oregon)'

    - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'

    - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'

    - **Region** *(string) --* AWS region, e.g. 'us-west-2'

    - **ResourceSpecification** *(dict) --* Resource configuration details

      - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

      - **Codec** *(string) --* Codec, e.g. 'AVC'

      - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

      - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

      - **Resolution** *(string) --* Resolution, e.g. 'HD'

      - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

      - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)

      - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)

    - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g. '157.0'
    """


_ClientDescribeReservationResponseResourceSpecificationTypeDef = TypedDict(
    "_ClientDescribeReservationResponseResourceSpecificationTypeDef",
    {
        "ChannelClass": str,
        "Codec": str,
        "MaximumBitrate": str,
        "MaximumFramerate": str,
        "Resolution": str,
        "ResourceType": str,
        "SpecialFeature": str,
        "VideoQuality": str,
    },
    total=False,
)


class ClientDescribeReservationResponseResourceSpecificationTypeDef(
    _ClientDescribeReservationResponseResourceSpecificationTypeDef
):
    """
    Type definition for `ClientDescribeReservationResponse` `ResourceSpecification`

    - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

    - **Codec** *(string) --* Codec, e.g. 'AVC'

    - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

    - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

    - **Resolution** *(string) --* Resolution, e.g. 'HD'

    - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

    - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)

    - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
    """


_ClientDescribeReservationResponseTypeDef = TypedDict(
    "_ClientDescribeReservationResponseTypeDef",
    {
        "Arn": str,
        "Count": int,
        "CurrencyCode": str,
        "Duration": int,
        "DurationUnits": str,
        "End": str,
        "FixedPrice": float,
        "Name": str,
        "OfferingDescription": str,
        "OfferingId": str,
        "OfferingType": str,
        "Region": str,
        "ReservationId": str,
        "ResourceSpecification": ClientDescribeReservationResponseResourceSpecificationTypeDef,
        "Start": str,
        "State": str,
        "Tags": Dict[str, str],
        "UsagePrice": float,
    },
    total=False,
)


class ClientDescribeReservationResponseTypeDef(
    _ClientDescribeReservationResponseTypeDef
):
    """
    Type definition for `ClientDescribeReservation` `Response`

    - **Arn** *(string) --* Unique reservation ARN, e.g.
    'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'

    - **Count** *(integer) --* Number of reserved resources

    - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217
    format, e.g. 'USD'

    - **Duration** *(integer) --* Lease duration, e.g. '12'

    - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'

    - **End** *(string) --* Reservation UTC end date and time in ISO-8601 format, e.g.
    '2019-03-01T00:00:00'

    - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a
    NO_UPFRONT offering

    - **Name** *(string) --* User specified reservation name

    - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20
    Mbps, 30 fps, and standard VQ in US West (Oregon)'

    - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'

    - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'

    - **Region** *(string) --* AWS region, e.g. 'us-west-2'

    - **ReservationId** *(string) --* Unique reservation ID, e.g. '1234567'

    - **ResourceSpecification** *(dict) --* Resource configuration details

      - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

      - **Codec** *(string) --* Codec, e.g. 'AVC'

      - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

      - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

      - **Resolution** *(string) --* Resolution, e.g. 'HD'

      - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

      - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels only)

      - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)

    - **Start** *(string) --* Reservation UTC start date and time in ISO-8601 format, e.g.
    '2018-03-01T00:00:00'

    - **State** *(string) --* Current state of reservation, e.g. 'ACTIVE'

    - **Tags** *(dict) --* A collection of key-value pairs

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string

    - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g. '157.0'
    """


_ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef = TypedDict(
    "_ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef",
    {"Id3": str},
    total=False,
)


class ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef(
    _ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef
):
    """
    Type definition for `ClientDescribeScheduleResponseScheduleActionsScheduleActionSettings` `HlsTimedMetadataSettings`

    - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
    http://id3.org/id3v2.4.0-structure
    """


_ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef = TypedDict(
    "_ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef",
    {
        "InputAttachmentNameReference": str,
        "InputClippingSettings": Dict[str, Any],
        "UrlPath": List[Any],
    },
    total=False,
)


class ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef(
    _ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef
):
    """
    Type definition for `ClientDescribeScheduleResponseScheduleActionsScheduleActionSettings` `InputSwitchSettings`

    - **InputAttachmentNameReference** *(string) --* The name of the input attachment (not
    the name of the input!) to switch to. The name is specified in the channel
    configuration.

    - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
    input, in order to set up the input to ingest only a portion of the file.

      - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
      being clipped.

      - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

        - **Timecode** *(string) --* The timecode for the frame where you want to start the
        clip. Optional; if not specified, the clip starts at first frame in the file. Enter
        the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

      - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

        - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
        input (in order to clip the file), you can specify if you want the clip to exclude
        (the default) or include the frame specified by the timecode.

        - **Timecode** *(string) --* The timecode for the frame where you want to stop the
        clip. Optional; if not specified, the clip continues to the end of the file. Enter
        the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

    - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic
    input, for this instance of the input. Each time you use the same dynamic input in an
    input switch action, you can provide a different value, in order to connect the input
    to a different content source.

      - *(string) --* Placeholder documentation for __string
    """


_ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef = TypedDict(
    "_ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef",
    {"Scte35Descriptors": List[Any]},
    total=False,
)


class ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef(
    _ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef
):
    """
    Type definition for `ClientDescribeScheduleResponseScheduleActionsScheduleActionSettings` `Scte35TimeSignalSettings`

    - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
    SCTE-35 time_signal.

      - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

        - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

          - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
          Segmentation Descriptor.

            - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
            restriction parameters.

              - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
              archive_allowed_flag.

              - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
              device_restrictions parameter.

              - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
              no_regional_blackout_flag parameter.

              - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
              web_delivery_allowed_flag parameter.

            - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
            that is valid for the specified segmentation_type_id.

            - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
            segmentation_event_cancel_indicator.

            - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
            segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
            ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time
            in 90 KHz clock ticks. If you do not enter a duration, the time_signal will
            continue until you insert a cancellation message.

            - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
            segmentation_event_id.

            - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
            segmentation_type_id. One of the segmentation_type_id values listed in the
            SCTE-35 specification. On the console, enter the ID in decimal (for example,
            "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or
            decimal (for example, "52").

            - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid.
            Enter a string containing the hexadecimal representation of the characters that
            make up the SCTE-35 segmentation_upid value. Must contain an even number of hex
            characters. Do not include spaces between each hex pair. For example, the ASCII
            "ADS Information" becomes hex "41445320496e666f726d6174696f6e.

            - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
            segmentation_upid_type. On the console, enter one of the types listed in the
            SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the
            specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the
            types listed in the SCTE-35 specification, in either hex (for example, "0x0C" )
            or in decimal (for example, "12").

            - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected.
            A value that is valid for the specified segmentation_type_id.

            - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
            value that is valid for the specified segmentation_type_id.

            - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
            sub_segments_expected. A value that is valid for the specified
            segmentation_type_id.
    """


_ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef = TypedDict(
    "_ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef",
    {
        "Duration": int,
        "FadeIn": int,
        "FadeOut": int,
        "Height": int,
        "Image": Dict[str, Any],
        "ImageX": int,
        "ImageY": int,
        "Layer": int,
        "Opacity": int,
        "Width": int,
    },
    total=False,
)


class ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef(
    _ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef
):
    """
    Type definition for `ClientDescribeScheduleResponseScheduleActionsScheduleActionSettings` `StaticImageActivateSettings`

    - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
    the video. If omitted or set to 0 the duration is unlimited and the image will remain
    until it is explicitly deactivated.

    - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
    fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

    - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
    milliseconds for the image to fade out. The fade-out starts when the duration time is
    hit, so it effectively extends the duration. Default is 0 (no fade-out).

    - **Height** *(integer) --* The height of the image when inserted into the video, in
    pixels. The overlay will be scaled up or down to the specified height. Leave blank to
    use the native height of the overlay.

    - **Image** *(dict) --* The location and filename of the image file to overlay on the
    video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
    pixels) than the input video.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
    left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame.
    If the placement causes the overlay to extend beyond the right edge of the underlying
    video, then the overlay is cropped on the right.

    - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
    top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
    If the placement causes the overlay to extend beyond the bottom edge of the underlying
    video, then the overlay is cropped on the bottom.

    - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can
    be overlaid on the video, each layer with a different image. The layers are in Z order,
    which means that overlays with higher values of layer are inserted on top of overlays
    with lower values of layer. Default is 0.

    - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
    opaque. Default is 100.

    - **Width** *(integer) --* The width of the image when inserted into the video, in
    pixels. The overlay will be scaled up or down to the specified width. Leave blank to
    use the native width of the overlay.
    """


_ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsTypeDef = TypedDict(
    "_ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsTypeDef",
    {
        "HlsTimedMetadataSettings": ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef,
        "InputSwitchSettings": ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef,
        "PauseStateSettings": Dict[str, Any],
        "Scte35ReturnToNetworkSettings": Dict[str, Any],
        "Scte35SpliceInsertSettings": Dict[str, Any],
        "Scte35TimeSignalSettings": ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef,
        "StaticImageActivateSettings": ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef,
        "StaticImageDeactivateSettings": Dict[str, Any],
    },
    total=False,
)


class ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsTypeDef(
    _ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsTypeDef
):
    """
    Type definition for `ClientDescribeScheduleResponseScheduleActions` `ScheduleActionSettings`

    - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

      - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
      http://id3.org/id3v2.4.0-structure

    - **InputSwitchSettings** *(dict) --* Action to switch the input

      - **InputAttachmentNameReference** *(string) --* The name of the input attachment (not
      the name of the input!) to switch to. The name is specified in the channel
      configuration.

      - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
      input, in order to set up the input to ingest only a portion of the file.

        - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
        being clipped.

        - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

          - **Timecode** *(string) --* The timecode for the frame where you want to start the
          clip. Optional; if not specified, the clip starts at first frame in the file. Enter
          the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

        - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

          - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
          input (in order to clip the file), you can specify if you want the clip to exclude
          (the default) or include the frame specified by the timecode.

          - **Timecode** *(string) --* The timecode for the frame where you want to stop the
          clip. Optional; if not specified, the clip continues to the end of the file. Enter
          the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

      - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic
      input, for this instance of the input. Each time you use the same dynamic input in an
      input switch action, you can provide a different value, in order to connect the input
      to a different content source.

        - *(string) --* Placeholder documentation for __string

    - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
    pipelines

      - **Pipelines** *(list) --* Placeholder documentation for
      __listOfPipelinePauseStateSettings

        - *(dict) --* Settings for pausing a pipeline.

          - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or "PIPELINE_1").

    - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35
    return_to_network message

      - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
      as defined in SCTE-35.

    - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert
    message

      - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
      ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
      duration, there is an expectation that the downstream system can read the duration and
      cue in at that time. If you do not enter a duration, the splice_insert will continue
      indefinitely and there is an expectation that you will enter a return_to_network to end
      the splice_insert at the appropriate time.

      - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
      as defined in SCTE-35.

    - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

      - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
      SCTE-35 time_signal.

        - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

          - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

            - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
            Segmentation Descriptor.

              - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
              restriction parameters.

                - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
                archive_allowed_flag.

                - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
                device_restrictions parameter.

                - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
                no_regional_blackout_flag parameter.

                - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
                web_delivery_allowed_flag parameter.

              - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
              that is valid for the specified segmentation_type_id.

              - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
              segmentation_event_cancel_indicator.

              - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
              segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
              ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time
              in 90 KHz clock ticks. If you do not enter a duration, the time_signal will
              continue until you insert a cancellation message.

              - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
              segmentation_event_id.

              - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
              segmentation_type_id. One of the segmentation_type_id values listed in the
              SCTE-35 specification. On the console, enter the ID in decimal (for example,
              "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or
              decimal (for example, "52").

              - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid.
              Enter a string containing the hexadecimal representation of the characters that
              make up the SCTE-35 segmentation_upid value. Must contain an even number of hex
              characters. Do not include spaces between each hex pair. For example, the ASCII
              "ADS Information" becomes hex "41445320496e666f726d6174696f6e.

              - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
              segmentation_upid_type. On the console, enter one of the types listed in the
              SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the
              specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the
              types listed in the SCTE-35 specification, in either hex (for example, "0x0C" )
              or in decimal (for example, "12").

              - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected.
              A value that is valid for the specified segmentation_type_id.

              - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
              value that is valid for the specified segmentation_type_id.

              - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
              sub_segments_expected. A value that is valid for the specified
              segmentation_type_id.

    - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

      - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
      the video. If omitted or set to 0 the duration is unlimited and the image will remain
      until it is explicitly deactivated.

      - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
      fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

      - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
      milliseconds for the image to fade out. The fade-out starts when the duration time is
      hit, so it effectively extends the duration. Default is 0 (no fade-out).

      - **Height** *(integer) --* The height of the image when inserted into the video, in
      pixels. The overlay will be scaled up or down to the specified height. Leave blank to
      use the native height of the overlay.

      - **Image** *(dict) --* The location and filename of the image file to overlay on the
      video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
      pixels) than the input video.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
      left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame.
      If the placement causes the overlay to extend beyond the right edge of the underlying
      video, then the overlay is cropped on the right.

      - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
      top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
      If the placement causes the overlay to extend beyond the bottom edge of the underlying
      video, then the overlay is cropped on the bottom.

      - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can
      be overlaid on the video, each layer with a different image. The layers are in Z order,
      which means that overlays with higher values of layer are inserted on top of overlays
      with lower values of layer. Default is 0.

      - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
      opaque. Default is 100.

      - **Width** *(integer) --* The width of the image when inserted into the video, in
      pixels. The overlay will be scaled up or down to the specified width. Leave blank to
      use the native width of the overlay.

    - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image
    overlay

      - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out.
      Default is 0 (no fade-out).

      - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is 0.
    """


_ClientDescribeScheduleResponseScheduleActionsTypeDef = TypedDict(
    "_ClientDescribeScheduleResponseScheduleActionsTypeDef",
    {
        "ActionName": str,
        "ScheduleActionSettings": ClientDescribeScheduleResponseScheduleActionsScheduleActionSettingsTypeDef,
        "ScheduleActionStartSettings": Dict[str, Any],
    },
    total=False,
)


class ClientDescribeScheduleResponseScheduleActionsTypeDef(
    _ClientDescribeScheduleResponseScheduleActionsTypeDef
):
    """
    Type definition for `ClientDescribeScheduleResponse` `ScheduleActions`

    - **ActionName** *(string) --* The name of the action, must be unique within the schedule.
    This name provides the main reference to an action once it is added to the schedule. A name
    is unique if it is no longer in the schedule. The schedule is automatically cleaned up to
    remove actions with a start time of more than 1 hour ago (approximately) so at that point a
    name can be reused.

    - **ScheduleActionSettings** *(dict) --* Settings for this schedule action.

      - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

        - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
        http://id3.org/id3v2.4.0-structure

      - **InputSwitchSettings** *(dict) --* Action to switch the input

        - **InputAttachmentNameReference** *(string) --* The name of the input attachment (not
        the name of the input!) to switch to. The name is specified in the channel
        configuration.

        - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
        input, in order to set up the input to ingest only a portion of the file.

          - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
          being clipped.

          - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

            - **Timecode** *(string) --* The timecode for the frame where you want to start the
            clip. Optional; if not specified, the clip starts at first frame in the file. Enter
            the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

          - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

            - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
            input (in order to clip the file), you can specify if you want the clip to exclude
            (the default) or include the frame specified by the timecode.

            - **Timecode** *(string) --* The timecode for the frame where you want to stop the
            clip. Optional; if not specified, the clip continues to the end of the file. Enter
            the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

        - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic
        input, for this instance of the input. Each time you use the same dynamic input in an
        input switch action, you can provide a different value, in order to connect the input
        to a different content source.

          - *(string) --* Placeholder documentation for __string

      - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
      pipelines

        - **Pipelines** *(list) --* Placeholder documentation for
        __listOfPipelinePauseStateSettings

          - *(dict) --* Settings for pausing a pipeline.

            - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or "PIPELINE_1").

      - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35
      return_to_network message

        - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
        as defined in SCTE-35.

      - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert
      message

        - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
        ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
        duration, there is an expectation that the downstream system can read the duration and
        cue in at that time. If you do not enter a duration, the splice_insert will continue
        indefinitely and there is an expectation that you will enter a return_to_network to end
        the splice_insert at the appropriate time.

        - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
        as defined in SCTE-35.

      - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

        - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
        SCTE-35 time_signal.

          - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

            - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

              - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
              Segmentation Descriptor.

                - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
                restriction parameters.

                  - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
                  archive_allowed_flag.

                  - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
                  device_restrictions parameter.

                  - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
                  no_regional_blackout_flag parameter.

                  - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
                  web_delivery_allowed_flag parameter.

                - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
                that is valid for the specified segmentation_type_id.

                - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
                segmentation_event_cancel_indicator.

                - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
                segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
                ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time
                in 90 KHz clock ticks. If you do not enter a duration, the time_signal will
                continue until you insert a cancellation message.

                - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
                segmentation_event_id.

                - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
                segmentation_type_id. One of the segmentation_type_id values listed in the
                SCTE-35 specification. On the console, enter the ID in decimal (for example,
                "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or
                decimal (for example, "52").

                - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid.
                Enter a string containing the hexadecimal representation of the characters that
                make up the SCTE-35 segmentation_upid value. Must contain an even number of hex
                characters. Do not include spaces between each hex pair. For example, the ASCII
                "ADS Information" becomes hex "41445320496e666f726d6174696f6e.

                - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
                segmentation_upid_type. On the console, enter one of the types listed in the
                SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the
                specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the
                types listed in the SCTE-35 specification, in either hex (for example, "0x0C" )
                or in decimal (for example, "12").

                - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected.
                A value that is valid for the specified segmentation_type_id.

                - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
                value that is valid for the specified segmentation_type_id.

                - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
                sub_segments_expected. A value that is valid for the specified
                segmentation_type_id.

      - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

        - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
        the video. If omitted or set to 0 the duration is unlimited and the image will remain
        until it is explicitly deactivated.

        - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
        fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

        - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
        milliseconds for the image to fade out. The fade-out starts when the duration time is
        hit, so it effectively extends the duration. Default is 0 (no fade-out).

        - **Height** *(integer) --* The height of the image when inserted into the video, in
        pixels. The overlay will be scaled up or down to the specified height. Leave blank to
        use the native height of the overlay.

        - **Image** *(dict) --* The location and filename of the image file to overlay on the
        video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
        pixels) than the input video.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
        left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame.
        If the placement causes the overlay to extend beyond the right edge of the underlying
        video, then the overlay is cropped on the right.

        - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
        top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
        If the placement causes the overlay to extend beyond the bottom edge of the underlying
        video, then the overlay is cropped on the bottom.

        - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can
        be overlaid on the video, each layer with a different image. The layers are in Z order,
        which means that overlays with higher values of layer are inserted on top of overlays
        with lower values of layer. Default is 0.

        - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
        opaque. Default is 100.

        - **Width** *(integer) --* The width of the image when inserted into the video, in
        pixels. The overlay will be scaled up or down to the specified width. Leave blank to
        use the native width of the overlay.

      - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image
      overlay

        - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out.
        Default is 0 (no fade-out).

        - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is 0.

    - **ScheduleActionStartSettings** *(dict) --* The time for the action to start in the
    channel.

      - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start
      time for an action.

        - **Time** *(string) --* Start time for the action to start in the channel. (Not the
        time for the action to be added to the schedule: actions are always added to the
        schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits
        (for example, mm might be 01) except for the two constants "T" for time and "Z" for
        "UTC format".

      - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action
      as relative to another action.

        - **FollowPoint** *(string) --* Identifies whether this action starts relative to the
        start or relative to the end of the reference action.

        - **ReferenceActionName** *(string) --* The action name of another action that this one
        refers to.

      - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an
      action that should be applied immediately.
    """


_ClientDescribeScheduleResponseTypeDef = TypedDict(
    "_ClientDescribeScheduleResponseTypeDef",
    {
        "NextToken": str,
        "ScheduleActions": List[ClientDescribeScheduleResponseScheduleActionsTypeDef],
    },
    total=False,
)


class ClientDescribeScheduleResponseTypeDef(_ClientDescribeScheduleResponseTypeDef):
    """
    Type definition for `ClientDescribeSchedule` `Response`

    - **NextToken** *(string) --* The next token; for use in pagination.

    - **ScheduleActions** *(list) --* The list of actions in the schedule.

      - *(dict) --* Contains information on a single schedule action.

        - **ActionName** *(string) --* The name of the action, must be unique within the schedule.
        This name provides the main reference to an action once it is added to the schedule. A name
        is unique if it is no longer in the schedule. The schedule is automatically cleaned up to
        remove actions with a start time of more than 1 hour ago (approximately) so at that point a
        name can be reused.

        - **ScheduleActionSettings** *(dict) --* Settings for this schedule action.

          - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

            - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
            http://id3.org/id3v2.4.0-structure

          - **InputSwitchSettings** *(dict) --* Action to switch the input

            - **InputAttachmentNameReference** *(string) --* The name of the input attachment (not
            the name of the input!) to switch to. The name is specified in the channel
            configuration.

            - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
            input, in order to set up the input to ingest only a portion of the file.

              - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
              being clipped.

              - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

                - **Timecode** *(string) --* The timecode for the frame where you want to start the
                clip. Optional; if not specified, the clip starts at first frame in the file. Enter
                the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

              - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

                - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
                input (in order to clip the file), you can specify if you want the clip to exclude
                (the default) or include the frame specified by the timecode.

                - **Timecode** *(string) --* The timecode for the frame where you want to stop the
                clip. Optional; if not specified, the clip continues to the end of the file. Enter
                the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

            - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic
            input, for this instance of the input. Each time you use the same dynamic input in an
            input switch action, you can provide a different value, in order to connect the input
            to a different content source.

              - *(string) --* Placeholder documentation for __string

          - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
          pipelines

            - **Pipelines** *(list) --* Placeholder documentation for
            __listOfPipelinePauseStateSettings

              - *(dict) --* Settings for pausing a pipeline.

                - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or "PIPELINE_1").

          - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35
          return_to_network message

            - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
            as defined in SCTE-35.

          - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert
          message

            - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
            ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
            duration, there is an expectation that the downstream system can read the duration and
            cue in at that time. If you do not enter a duration, the splice_insert will continue
            indefinitely and there is an expectation that you will enter a return_to_network to end
            the splice_insert at the appropriate time.

            - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
            as defined in SCTE-35.

          - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

            - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
            SCTE-35 time_signal.

              - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

                - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

                  - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
                  Segmentation Descriptor.

                    - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
                    restriction parameters.

                      - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
                      archive_allowed_flag.

                      - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
                      device_restrictions parameter.

                      - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
                      no_regional_blackout_flag parameter.

                      - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
                      web_delivery_allowed_flag parameter.

                    - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
                    that is valid for the specified segmentation_type_id.

                    - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
                    segmentation_event_cancel_indicator.

                    - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
                    segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
                    ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time
                    in 90 KHz clock ticks. If you do not enter a duration, the time_signal will
                    continue until you insert a cancellation message.

                    - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
                    segmentation_event_id.

                    - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
                    segmentation_type_id. One of the segmentation_type_id values listed in the
                    SCTE-35 specification. On the console, enter the ID in decimal (for example,
                    "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or
                    decimal (for example, "52").

                    - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid.
                    Enter a string containing the hexadecimal representation of the characters that
                    make up the SCTE-35 segmentation_upid value. Must contain an even number of hex
                    characters. Do not include spaces between each hex pair. For example, the ASCII
                    "ADS Information" becomes hex "41445320496e666f726d6174696f6e.

                    - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
                    segmentation_upid_type. On the console, enter one of the types listed in the
                    SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the
                    specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the
                    types listed in the SCTE-35 specification, in either hex (for example, "0x0C" )
                    or in decimal (for example, "12").

                    - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected.
                    A value that is valid for the specified segmentation_type_id.

                    - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
                    value that is valid for the specified segmentation_type_id.

                    - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
                    sub_segments_expected. A value that is valid for the specified
                    segmentation_type_id.

          - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

            - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
            the video. If omitted or set to 0 the duration is unlimited and the image will remain
            until it is explicitly deactivated.

            - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
            fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

            - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
            milliseconds for the image to fade out. The fade-out starts when the duration time is
            hit, so it effectively extends the duration. Default is 0 (no fade-out).

            - **Height** *(integer) --* The height of the image when inserted into the video, in
            pixels. The overlay will be scaled up or down to the specified height. Leave blank to
            use the native height of the overlay.

            - **Image** *(dict) --* The location and filename of the image file to overlay on the
            video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
            pixels) than the input video.

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
              store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
              accessible to the Live system (eg. a http:// URI) depending on the output type. For
              example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
            left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame.
            If the placement causes the overlay to extend beyond the right edge of the underlying
            video, then the overlay is cropped on the right.

            - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
            top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
            If the placement causes the overlay to extend beyond the bottom edge of the underlying
            video, then the overlay is cropped on the bottom.

            - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can
            be overlaid on the video, each layer with a different image. The layers are in Z order,
            which means that overlays with higher values of layer are inserted on top of overlays
            with lower values of layer. Default is 0.

            - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
            opaque. Default is 100.

            - **Width** *(integer) --* The width of the image when inserted into the video, in
            pixels. The overlay will be scaled up or down to the specified width. Leave blank to
            use the native width of the overlay.

          - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image
          overlay

            - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out.
            Default is 0 (no fade-out).

            - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is 0.

        - **ScheduleActionStartSettings** *(dict) --* The time for the action to start in the
        channel.

          - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start
          time for an action.

            - **Time** *(string) --* Start time for the action to start in the channel. (Not the
            time for the action to be added to the schedule: actions are always added to the
            schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits
            (for example, mm might be 01) except for the two constants "T" for time and "Z" for
            "UTC format".

          - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action
          as relative to another action.

            - **FollowPoint** *(string) --* Identifies whether this action starts relative to the
            start or relative to the end of the reference action.

            - **ReferenceActionName** *(string) --* The action name of another action that this one
            refers to.

          - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an
          action that should be applied immediately.
    """


_ClientListChannelsResponseChannelsEgressEndpointsTypeDef = TypedDict(
    "_ClientListChannelsResponseChannelsEgressEndpointsTypeDef",
    {"SourceIp": str},
    total=False,
)


class ClientListChannelsResponseChannelsEgressEndpointsTypeDef(
    _ClientListChannelsResponseChannelsEgressEndpointsTypeDef
):
    """
    Type definition for `ClientListChannelsResponseChannels` `EgressEndpoints`

    - **SourceIp** *(string) --* Public IP of where a channel's output comes from
    """


_ClientListChannelsResponseChannelsInputAttachmentsInputSettingsNetworkInputSettingsTypeDef = TypedDict(
    "_ClientListChannelsResponseChannelsInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    {"HlsInputSettings": Dict[str, Any], "ServerValidation": str},
    total=False,
)


class ClientListChannelsResponseChannelsInputAttachmentsInputSettingsNetworkInputSettingsTypeDef(
    _ClientListChannelsResponseChannelsInputAttachmentsInputSettingsNetworkInputSettingsTypeDef
):
    """
    Type definition for `ClientListChannelsResponseChannelsInputAttachmentsInputSettings` `NetworkInputSettings`

    - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for
    a HLS manifest.

      - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
      BANDWIDTH that most closely matches this value will be chosen, otherwise the
      highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
      bits per second, as in an HLS manifest.

      - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
      begin this many buffer segments from the end (most recently written segment).
      When not specified, the HLS input will begin with the first segment specified in
      the m3u8.

      - **Retries** *(integer) --* The number of consecutive times that attempts to
      read a manifest or segment must fail before the input is considered unavailable.

      - **RetryInterval** *(integer) --* The number of seconds between retries when an
      attempt to read a manifest or segment fails.

    - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
    checkCryptographyOnly, cryptography in the certificate will be checked, but not the
    server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
    name) do not strictly match the corresponding certificate's wildcard pattern and
    would otherwise cause the event to error. This setting is ignored for protocols
    that do not use https.
    """


_ClientListChannelsResponseChannelsInputAttachmentsInputSettingsTypeDef = TypedDict(
    "_ClientListChannelsResponseChannelsInputAttachmentsInputSettingsTypeDef",
    {
        "AudioSelectors": List[Any],
        "CaptionSelectors": List[Any],
        "DeblockFilter": str,
        "DenoiseFilter": str,
        "FilterStrength": int,
        "InputFilter": str,
        "NetworkInputSettings": ClientListChannelsResponseChannelsInputAttachmentsInputSettingsNetworkInputSettingsTypeDef,
        "SourceEndBehavior": str,
        "VideoSelector": Dict[str, Any],
    },
    total=False,
)


class ClientListChannelsResponseChannelsInputAttachmentsInputSettingsTypeDef(
    _ClientListChannelsResponseChannelsInputAttachmentsInputSettingsTypeDef
):
    """
    Type definition for `ClientListChannelsResponseChannelsInputAttachments` `InputSettings`

    - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
    that have multiple available.

      - *(dict) --* Audio Selector

        - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will
        use this name to uniquely identify this Selector. Selector names should be unique
        per input.

        - **SelectorSettings** *(dict) --* The audio selector settings.

          - **AudioLanguageSelection** *(dict) --* Audio Language Selection

            - **LanguageCode** *(string) --* Selects a specific three-letter language
            code from within an audio source.

            - **LanguageSelectionPolicy** *(string) --* When set to "strict", the
            transport stream demux strictly identifies audio streams by their language
            descriptor. If a PMT update occurs such that an audio stream matching the
            initially selected language is no longer present then mute will be encoded
            until the language returns. If "loose", then on a PMT update the demux will
            choose another audio stream in the program with the same stream type if it
            can't find one with the same language.

          - **AudioPidSelection** *(dict) --* Audio Pid Selection

            - **Pid** *(integer) --* Selects a specific PID from within a source.

    - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
    that have multiple available.

      - *(dict) --* Output groups for this Live Event. Output groups contain information
      about where streams should be distributed.

        - **LanguageCode** *(string) --* When specified this field indicates the three
        letter language code of the caption track to extract from the source.

        - **Name** *(string) --* Name identifier for a caption selector. This name is
        used to associate this caption selector with one or more caption descriptions.
        Names must be unique within an event.

        - **SelectorSettings** *(dict) --* Caption selector settings.

          - **AribSourceSettings** *(dict) --* Arib Source Settings

          - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

            - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use
            this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub
            content is passed through, regardless of selectors.

          - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
            through via the "608 compatibility bytes" fields of the 708 wrapper as well
            as translated into 708. 708 data present in the source content will be
            discarded.

            - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
            intermittent and/or non-aligned SCTE-20 and Embedded captions.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
            number within the video track from which to extract captions. Unused for
            passthrough.

            - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

          - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
            through via the "608 compatibility bytes" fields of the 708 wrapper as well
            as translated into 708. 708 data present in the source content will be
            discarded.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
            number within the video track from which to extract captions. Unused for
            passthrough.

          - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

            - **Pid** *(integer) --* The pid field is used in conjunction with the
            caption selector languageCode field as follows: - Specify PID and Language:
            Extracts captions from that PID; the language is "informational". - Specify
            PID and omit Language: Extracts the specified PID. - Omit PID and specify
            Language: Extracts the specified language, whichever PID that happens to be.
            - Omit PID and omit Language: Valid only if source is DVB-Sub that is being
            passed through; all languages will be passed through.

          - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

            - **PageNumber** *(string) --* Specifies the teletext page number within the
            data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
            (2303). Unused for passthrough. Should be specified as a hexadecimal string
            with no "0x" prefix.

    - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

    - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

    - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1
    (minimal) to 5 (strongest).

    - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs
    have the deblocking filter enabled by default. 1) auto - filtering will be applied
    depending on input type/quality 2) disabled - no filtering will be applied to the
    input 3) forced - filtering will be applied regardless of input type

    - **NetworkInputSettings** *(dict) --* Input settings.

      - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for
      a HLS manifest.

        - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
        BANDWIDTH that most closely matches this value will be chosen, otherwise the
        highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
        bits per second, as in an HLS manifest.

        - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
        begin this many buffer segments from the end (most recently written segment).
        When not specified, the HLS input will begin with the first segment specified in
        the m3u8.

        - **Retries** *(integer) --* The number of consecutive times that attempts to
        read a manifest or segment must fail before the input is considered unavailable.

        - **RetryInterval** *(integer) --* The number of seconds between retries when an
        attempt to read a manifest or segment fails.

      - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
      checkCryptographyOnly, cryptography in the certificate will be checked, but not the
      server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
      name) do not strictly match the corresponding certificate's wildcard pattern and
      would otherwise cause the event to error. This setting is ignored for protocols
      that do not use https.

    - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
    input to be streamed indefinitely.

    - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
    input types that have multiple available.

      - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
      works in tandem with colorSpaceUsage and a video description's
      colorSpaceSettingsChoice to determine if any conversion will be performed.

      - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other
      than follow. This field controls how the value in the colorSpace field will be
      used. fallback means that when the input does include color space data, that data
      will be used, but when the input has no color space data, the value in colorSpace
      will be used. Choose fallback if your input is sometimes missing color space data,
      but when it does have color space data, that data is correct. force means to always
      use the value in colorSpace. Choose force if your input usually has no color space
      data or might have unreliable color space data.

      - **SelectorSettings** *(dict) --* The video selector settings.

        - **VideoSelectorPid** *(dict) --* Video Selector Pid

          - **Pid** *(integer) --* Selects a specific PID from within a video source.

        - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

          - **ProgramId** *(integer) --* Selects a specific program from within a
          multi-program transport stream. If the program doesn't exist, the first program
          within the transport stream will be selected by default.
    """


_ClientListChannelsResponseChannelsInputAttachmentsTypeDef = TypedDict(
    "_ClientListChannelsResponseChannelsInputAttachmentsTypeDef",
    {
        "InputAttachmentName": str,
        "InputId": str,
        "InputSettings": ClientListChannelsResponseChannelsInputAttachmentsInputSettingsTypeDef,
    },
    total=False,
)


class ClientListChannelsResponseChannelsInputAttachmentsTypeDef(
    _ClientListChannelsResponseChannelsInputAttachmentsTypeDef
):
    """
    Type definition for `ClientListChannelsResponseChannels` `InputAttachments`

    - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
    required if the user wants to use this input in an input switch action.

    - **InputId** *(string) --* The ID of the input

    - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

      - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
      that have multiple available.

        - *(dict) --* Audio Selector

          - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will
          use this name to uniquely identify this Selector. Selector names should be unique
          per input.

          - **SelectorSettings** *(dict) --* The audio selector settings.

            - **AudioLanguageSelection** *(dict) --* Audio Language Selection

              - **LanguageCode** *(string) --* Selects a specific three-letter language
              code from within an audio source.

              - **LanguageSelectionPolicy** *(string) --* When set to "strict", the
              transport stream demux strictly identifies audio streams by their language
              descriptor. If a PMT update occurs such that an audio stream matching the
              initially selected language is no longer present then mute will be encoded
              until the language returns. If "loose", then on a PMT update the demux will
              choose another audio stream in the program with the same stream type if it
              can't find one with the same language.

            - **AudioPidSelection** *(dict) --* Audio Pid Selection

              - **Pid** *(integer) --* Selects a specific PID from within a source.

      - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
      that have multiple available.

        - *(dict) --* Output groups for this Live Event. Output groups contain information
        about where streams should be distributed.

          - **LanguageCode** *(string) --* When specified this field indicates the three
          letter language code of the caption track to extract from the source.

          - **Name** *(string) --* Name identifier for a caption selector. This name is
          used to associate this caption selector with one or more caption descriptions.
          Names must be unique within an event.

          - **SelectorSettings** *(dict) --* Caption selector settings.

            - **AribSourceSettings** *(dict) --* Arib Source Settings

            - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

              - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use
              this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub
              content is passed through, regardless of selectors.

            - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
              through via the "608 compatibility bytes" fields of the 708 wrapper as well
              as translated into 708. 708 data present in the source content will be
              discarded.

              - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
              intermittent and/or non-aligned SCTE-20 and Embedded captions.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
              number within the video track from which to extract captions. Unused for
              passthrough.

              - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

            - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
              through via the "608 compatibility bytes" fields of the 708 wrapper as well
              as translated into 708. 708 data present in the source content will be
              discarded.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
              number within the video track from which to extract captions. Unused for
              passthrough.

            - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

              - **Pid** *(integer) --* The pid field is used in conjunction with the
              caption selector languageCode field as follows: - Specify PID and Language:
              Extracts captions from that PID; the language is "informational". - Specify
              PID and omit Language: Extracts the specified PID. - Omit PID and specify
              Language: Extracts the specified language, whichever PID that happens to be.
              - Omit PID and omit Language: Valid only if source is DVB-Sub that is being
              passed through; all languages will be passed through.

            - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

              - **PageNumber** *(string) --* Specifies the teletext page number within the
              data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
              (2303). Unused for passthrough. Should be specified as a hexadecimal string
              with no "0x" prefix.

      - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

      - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

      - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1
      (minimal) to 5 (strongest).

      - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs
      have the deblocking filter enabled by default. 1) auto - filtering will be applied
      depending on input type/quality 2) disabled - no filtering will be applied to the
      input 3) forced - filtering will be applied regardless of input type

      - **NetworkInputSettings** *(dict) --* Input settings.

        - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for
        a HLS manifest.

          - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
          BANDWIDTH that most closely matches this value will be chosen, otherwise the
          highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
          bits per second, as in an HLS manifest.

          - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
          begin this many buffer segments from the end (most recently written segment).
          When not specified, the HLS input will begin with the first segment specified in
          the m3u8.

          - **Retries** *(integer) --* The number of consecutive times that attempts to
          read a manifest or segment must fail before the input is considered unavailable.

          - **RetryInterval** *(integer) --* The number of seconds between retries when an
          attempt to read a manifest or segment fails.

        - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
        checkCryptographyOnly, cryptography in the certificate will be checked, but not the
        server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
        name) do not strictly match the corresponding certificate's wildcard pattern and
        would otherwise cause the event to error. This setting is ignored for protocols
        that do not use https.

      - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
      input to be streamed indefinitely.

      - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
      input types that have multiple available.

        - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
        works in tandem with colorSpaceUsage and a video description's
        colorSpaceSettingsChoice to determine if any conversion will be performed.

        - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other
        than follow. This field controls how the value in the colorSpace field will be
        used. fallback means that when the input does include color space data, that data
        will be used, but when the input has no color space data, the value in colorSpace
        will be used. Choose fallback if your input is sometimes missing color space data,
        but when it does have color space data, that data is correct. force means to always
        use the value in colorSpace. Choose force if your input usually has no color space
        data or might have unreliable color space data.

        - **SelectorSettings** *(dict) --* The video selector settings.

          - **VideoSelectorPid** *(dict) --* Video Selector Pid

            - **Pid** *(integer) --* Selects a specific PID from within a video source.

          - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

            - **ProgramId** *(integer) --* Selects a specific program from within a
            multi-program transport stream. If the program doesn't exist, the first program
            within the transport stream will be selected by default.
    """


_ClientListChannelsResponseChannelsInputSpecificationTypeDef = TypedDict(
    "_ClientListChannelsResponseChannelsInputSpecificationTypeDef",
    {"Codec": str, "MaximumBitrate": str, "Resolution": str},
    total=False,
)


class ClientListChannelsResponseChannelsInputSpecificationTypeDef(
    _ClientListChannelsResponseChannelsInputSpecificationTypeDef
):
    """
    Type definition for `ClientListChannelsResponseChannels` `InputSpecification`

    - **Codec** *(string) --* Input codec

    - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

    - **Resolution** *(string) --* Input resolution, categorized coarsely
    """


_ClientListChannelsResponseChannelsTypeDef = TypedDict(
    "_ClientListChannelsResponseChannelsTypeDef",
    {
        "Arn": str,
        "ChannelClass": str,
        "Destinations": List[Any],
        "EgressEndpoints": List[
            ClientListChannelsResponseChannelsEgressEndpointsTypeDef
        ],
        "Id": str,
        "InputAttachments": List[
            ClientListChannelsResponseChannelsInputAttachmentsTypeDef
        ],
        "InputSpecification": ClientListChannelsResponseChannelsInputSpecificationTypeDef,
        "LogLevel": str,
        "Name": str,
        "PipelinesRunningCount": int,
        "RoleArn": str,
        "State": str,
        "Tags": Dict[str, str],
    },
    total=False,
)


class ClientListChannelsResponseChannelsTypeDef(
    _ClientListChannelsResponseChannelsTypeDef
):
    """
    Type definition for `ClientListChannelsResponse` `Channels`

    - **Arn** *(string) --* The unique arn of the channel.

    - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with
    two pipelines or SINGLE_PIPELINE for a channel with one pipeline.

    - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs,
    there is one destination per output. For other types (HLS, for example), there is one
    destination per packager.

      - *(dict) --* Placeholder documentation for OutputDestination

        - **Id** *(string) --* User-specified id. This is used in an output group or an output.

        - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output;
        one destination for both encoders.

          - *(dict) --* MediaPackage Output Destination Settings

            - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the
            destination for this output group. You do not need to specify the individual inputs
            in MediaPackage; MediaLive will handle the connection of the two MediaLive
            pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive
            channel must be in the same region.

        - **Settings** *(list) --* Destination settings for a standard output; one destination
        for each redundant encoder.

          - *(dict) --* Placeholder documentation for OutputDestinationSettings

            - **PasswordParam** *(string) --* key used to extract the password from EC2
            Parameter store

            - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type
            rtmp://)

            - **Url** *(string) --* A URL specifying a destination

            - **Username** *(string) --* username for destination

    - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from

      - *(dict) --* Placeholder documentation for ChannelEgressEndpoint

        - **SourceIp** *(string) --* Public IP of where a channel's output comes from

    - **Id** *(string) --* The unique id of the channel.

    - **InputAttachments** *(list) --* List of input attachments for channel.

      - *(dict) --* Placeholder documentation for InputAttachment

        - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
        required if the user wants to use this input in an input switch action.

        - **InputId** *(string) --* The ID of the input

        - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

          - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
          that have multiple available.

            - *(dict) --* Audio Selector

              - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will
              use this name to uniquely identify this Selector. Selector names should be unique
              per input.

              - **SelectorSettings** *(dict) --* The audio selector settings.

                - **AudioLanguageSelection** *(dict) --* Audio Language Selection

                  - **LanguageCode** *(string) --* Selects a specific three-letter language
                  code from within an audio source.

                  - **LanguageSelectionPolicy** *(string) --* When set to "strict", the
                  transport stream demux strictly identifies audio streams by their language
                  descriptor. If a PMT update occurs such that an audio stream matching the
                  initially selected language is no longer present then mute will be encoded
                  until the language returns. If "loose", then on a PMT update the demux will
                  choose another audio stream in the program with the same stream type if it
                  can't find one with the same language.

                - **AudioPidSelection** *(dict) --* Audio Pid Selection

                  - **Pid** *(integer) --* Selects a specific PID from within a source.

          - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
          that have multiple available.

            - *(dict) --* Output groups for this Live Event. Output groups contain information
            about where streams should be distributed.

              - **LanguageCode** *(string) --* When specified this field indicates the three
              letter language code of the caption track to extract from the source.

              - **Name** *(string) --* Name identifier for a caption selector. This name is
              used to associate this caption selector with one or more caption descriptions.
              Names must be unique within an event.

              - **SelectorSettings** *(dict) --* Caption selector settings.

                - **AribSourceSettings** *(dict) --* Arib Source Settings

                - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

                  - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use
                  this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub
                  content is passed through, regardless of selectors.

                - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                  through via the "608 compatibility bytes" fields of the 708 wrapper as well
                  as translated into 708. 708 data present in the source content will be
                  discarded.

                  - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
                  intermittent and/or non-aligned SCTE-20 and Embedded captions.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                  number within the video track from which to extract captions. Unused for
                  passthrough.

                  - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

                - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                  through via the "608 compatibility bytes" fields of the 708 wrapper as well
                  as translated into 708. 708 data present in the source content will be
                  discarded.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                  number within the video track from which to extract captions. Unused for
                  passthrough.

                - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

                  - **Pid** *(integer) --* The pid field is used in conjunction with the
                  caption selector languageCode field as follows: - Specify PID and Language:
                  Extracts captions from that PID; the language is "informational". - Specify
                  PID and omit Language: Extracts the specified PID. - Omit PID and specify
                  Language: Extracts the specified language, whichever PID that happens to be.
                  - Omit PID and omit Language: Valid only if source is DVB-Sub that is being
                  passed through; all languages will be passed through.

                - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

                  - **PageNumber** *(string) --* Specifies the teletext page number within the
                  data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
                  (2303). Unused for passthrough. Should be specified as a hexadecimal string
                  with no "0x" prefix.

          - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

          - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

          - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1
          (minimal) to 5 (strongest).

          - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs
          have the deblocking filter enabled by default. 1) auto - filtering will be applied
          depending on input type/quality 2) disabled - no filtering will be applied to the
          input 3) forced - filtering will be applied regardless of input type

          - **NetworkInputSettings** *(dict) --* Input settings.

            - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for
            a HLS manifest.

              - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
              BANDWIDTH that most closely matches this value will be chosen, otherwise the
              highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
              bits per second, as in an HLS manifest.

              - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
              begin this many buffer segments from the end (most recently written segment).
              When not specified, the HLS input will begin with the first segment specified in
              the m3u8.

              - **Retries** *(integer) --* The number of consecutive times that attempts to
              read a manifest or segment must fail before the input is considered unavailable.

              - **RetryInterval** *(integer) --* The number of seconds between retries when an
              attempt to read a manifest or segment fails.

            - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
            checkCryptographyOnly, cryptography in the certificate will be checked, but not the
            server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
            name) do not strictly match the corresponding certificate's wildcard pattern and
            would otherwise cause the event to error. This setting is ignored for protocols
            that do not use https.

          - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
          input to be streamed indefinitely.

          - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
          input types that have multiple available.

            - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
            works in tandem with colorSpaceUsage and a video description's
            colorSpaceSettingsChoice to determine if any conversion will be performed.

            - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other
            than follow. This field controls how the value in the colorSpace field will be
            used. fallback means that when the input does include color space data, that data
            will be used, but when the input has no color space data, the value in colorSpace
            will be used. Choose fallback if your input is sometimes missing color space data,
            but when it does have color space data, that data is correct. force means to always
            use the value in colorSpace. Choose force if your input usually has no color space
            data or might have unreliable color space data.

            - **SelectorSettings** *(dict) --* The video selector settings.

              - **VideoSelectorPid** *(dict) --* Video Selector Pid

                - **Pid** *(integer) --* Selects a specific PID from within a video source.

              - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

                - **ProgramId** *(integer) --* Selects a specific program from within a
                multi-program transport stream. If the program doesn't exist, the first program
                within the transport stream will be selected by default.

    - **InputSpecification** *(dict) --* Placeholder documentation for InputSpecification

      - **Codec** *(string) --* Input codec

      - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

      - **Resolution** *(string) --* Input resolution, categorized coarsely

    - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.

    - **Name** *(string) --* The name of the channel. (user-mutable)

    - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.

    - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running
    the Channel.

    - **State** *(string) --* Placeholder documentation for ChannelState

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string
    """


_ClientListChannelsResponseTypeDef = TypedDict(
    "_ClientListChannelsResponseTypeDef",
    {"Channels": List[ClientListChannelsResponseChannelsTypeDef], "NextToken": str},
    total=False,
)


class ClientListChannelsResponseTypeDef(_ClientListChannelsResponseTypeDef):
    """
    Type definition for `ClientListChannels` `Response`

    - **Channels** *(list) --* Placeholder documentation for __listOfChannelSummary

      - *(dict) --* Placeholder documentation for ChannelSummary

        - **Arn** *(string) --* The unique arn of the channel.

        - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with
        two pipelines or SINGLE_PIPELINE for a channel with one pipeline.

        - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs,
        there is one destination per output. For other types (HLS, for example), there is one
        destination per packager.

          - *(dict) --* Placeholder documentation for OutputDestination

            - **Id** *(string) --* User-specified id. This is used in an output group or an output.

            - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output;
            one destination for both encoders.

              - *(dict) --* MediaPackage Output Destination Settings

                - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the
                destination for this output group. You do not need to specify the individual inputs
                in MediaPackage; MediaLive will handle the connection of the two MediaLive
                pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive
                channel must be in the same region.

            - **Settings** *(list) --* Destination settings for a standard output; one destination
            for each redundant encoder.

              - *(dict) --* Placeholder documentation for OutputDestinationSettings

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type
                rtmp://)

                - **Url** *(string) --* A URL specifying a destination

                - **Username** *(string) --* username for destination

        - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from

          - *(dict) --* Placeholder documentation for ChannelEgressEndpoint

            - **SourceIp** *(string) --* Public IP of where a channel's output comes from

        - **Id** *(string) --* The unique id of the channel.

        - **InputAttachments** *(list) --* List of input attachments for channel.

          - *(dict) --* Placeholder documentation for InputAttachment

            - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
            required if the user wants to use this input in an input switch action.

            - **InputId** *(string) --* The ID of the input

            - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

              - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
              that have multiple available.

                - *(dict) --* Audio Selector

                  - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will
                  use this name to uniquely identify this Selector. Selector names should be unique
                  per input.

                  - **SelectorSettings** *(dict) --* The audio selector settings.

                    - **AudioLanguageSelection** *(dict) --* Audio Language Selection

                      - **LanguageCode** *(string) --* Selects a specific three-letter language
                      code from within an audio source.

                      - **LanguageSelectionPolicy** *(string) --* When set to "strict", the
                      transport stream demux strictly identifies audio streams by their language
                      descriptor. If a PMT update occurs such that an audio stream matching the
                      initially selected language is no longer present then mute will be encoded
                      until the language returns. If "loose", then on a PMT update the demux will
                      choose another audio stream in the program with the same stream type if it
                      can't find one with the same language.

                    - **AudioPidSelection** *(dict) --* Audio Pid Selection

                      - **Pid** *(integer) --* Selects a specific PID from within a source.

              - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
              that have multiple available.

                - *(dict) --* Output groups for this Live Event. Output groups contain information
                about where streams should be distributed.

                  - **LanguageCode** *(string) --* When specified this field indicates the three
                  letter language code of the caption track to extract from the source.

                  - **Name** *(string) --* Name identifier for a caption selector. This name is
                  used to associate this caption selector with one or more caption descriptions.
                  Names must be unique within an event.

                  - **SelectorSettings** *(dict) --* Caption selector settings.

                    - **AribSourceSettings** *(dict) --* Arib Source Settings

                    - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

                      - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use
                      this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub
                      content is passed through, regardless of selectors.

                    - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

                      - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                      through via the "608 compatibility bytes" fields of the 708 wrapper as well
                      as translated into 708. 708 data present in the source content will be
                      discarded.

                      - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
                      intermittent and/or non-aligned SCTE-20 and Embedded captions.

                      - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                      number within the video track from which to extract captions. Unused for
                      passthrough.

                      - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

                    - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

                      - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                      through via the "608 compatibility bytes" fields of the 708 wrapper as well
                      as translated into 708. 708 data present in the source content will be
                      discarded.

                      - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                      number within the video track from which to extract captions. Unused for
                      passthrough.

                    - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

                      - **Pid** *(integer) --* The pid field is used in conjunction with the
                      caption selector languageCode field as follows: - Specify PID and Language:
                      Extracts captions from that PID; the language is "informational". - Specify
                      PID and omit Language: Extracts the specified PID. - Omit PID and specify
                      Language: Extracts the specified language, whichever PID that happens to be.
                      - Omit PID and omit Language: Valid only if source is DVB-Sub that is being
                      passed through; all languages will be passed through.

                    - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

                      - **PageNumber** *(string) --* Specifies the teletext page number within the
                      data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
                      (2303). Unused for passthrough. Should be specified as a hexadecimal string
                      with no "0x" prefix.

              - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

              - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

              - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1
              (minimal) to 5 (strongest).

              - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs
              have the deblocking filter enabled by default. 1) auto - filtering will be applied
              depending on input type/quality 2) disabled - no filtering will be applied to the
              input 3) forced - filtering will be applied regardless of input type

              - **NetworkInputSettings** *(dict) --* Input settings.

                - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for
                a HLS manifest.

                  - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
                  BANDWIDTH that most closely matches this value will be chosen, otherwise the
                  highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
                  bits per second, as in an HLS manifest.

                  - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
                  begin this many buffer segments from the end (most recently written segment).
                  When not specified, the HLS input will begin with the first segment specified in
                  the m3u8.

                  - **Retries** *(integer) --* The number of consecutive times that attempts to
                  read a manifest or segment must fail before the input is considered unavailable.

                  - **RetryInterval** *(integer) --* The number of seconds between retries when an
                  attempt to read a manifest or segment fails.

                - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
                checkCryptographyOnly, cryptography in the certificate will be checked, but not the
                server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
                name) do not strictly match the corresponding certificate's wildcard pattern and
                would otherwise cause the event to error. This setting is ignored for protocols
                that do not use https.

              - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
              input to be streamed indefinitely.

              - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
              input types that have multiple available.

                - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
                works in tandem with colorSpaceUsage and a video description's
                colorSpaceSettingsChoice to determine if any conversion will be performed.

                - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other
                than follow. This field controls how the value in the colorSpace field will be
                used. fallback means that when the input does include color space data, that data
                will be used, but when the input has no color space data, the value in colorSpace
                will be used. Choose fallback if your input is sometimes missing color space data,
                but when it does have color space data, that data is correct. force means to always
                use the value in colorSpace. Choose force if your input usually has no color space
                data or might have unreliable color space data.

                - **SelectorSettings** *(dict) --* The video selector settings.

                  - **VideoSelectorPid** *(dict) --* Video Selector Pid

                    - **Pid** *(integer) --* Selects a specific PID from within a video source.

                  - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

                    - **ProgramId** *(integer) --* Selects a specific program from within a
                    multi-program transport stream. If the program doesn't exist, the first program
                    within the transport stream will be selected by default.

        - **InputSpecification** *(dict) --* Placeholder documentation for InputSpecification

          - **Codec** *(string) --* Input codec

          - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

          - **Resolution** *(string) --* Input resolution, categorized coarsely

        - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.

        - **Name** *(string) --* The name of the channel. (user-mutable)

        - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.

        - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running
        the Channel.

        - **State** *(string) --* Placeholder documentation for ChannelState

        - **Tags** *(dict) --* A collection of key-value pairs.

          - *(string) --* Placeholder documentation for __string

            - *(string) --* Placeholder documentation for __string

    - **NextToken** *(string) --* Placeholder documentation for __string
    """


_ClientListInputSecurityGroupsResponseInputSecurityGroupsWhitelistRulesTypeDef = TypedDict(
    "_ClientListInputSecurityGroupsResponseInputSecurityGroupsWhitelistRulesTypeDef",
    {"Cidr": str},
    total=False,
)


class ClientListInputSecurityGroupsResponseInputSecurityGroupsWhitelistRulesTypeDef(
    _ClientListInputSecurityGroupsResponseInputSecurityGroupsWhitelistRulesTypeDef
):
    """
    Type definition for `ClientListInputSecurityGroupsResponseInputSecurityGroups` `WhitelistRules`

    - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
    """


_ClientListInputSecurityGroupsResponseInputSecurityGroupsTypeDef = TypedDict(
    "_ClientListInputSecurityGroupsResponseInputSecurityGroupsTypeDef",
    {
        "Arn": str,
        "Id": str,
        "Inputs": List[str],
        "State": str,
        "Tags": Dict[str, str],
        "WhitelistRules": List[
            ClientListInputSecurityGroupsResponseInputSecurityGroupsWhitelistRulesTypeDef
        ],
    },
    total=False,
)


class ClientListInputSecurityGroupsResponseInputSecurityGroupsTypeDef(
    _ClientListInputSecurityGroupsResponseInputSecurityGroupsTypeDef
):
    """
    Type definition for `ClientListInputSecurityGroupsResponse` `InputSecurityGroups`

    - **Arn** *(string) --* Unique ARN of Input Security Group

    - **Id** *(string) --* The Id of the Input Security Group

    - **Inputs** *(list) --* The list of inputs currently using this Input Security Group.

      - *(string) --* Placeholder documentation for __string

    - **State** *(string) --* The current state of the Input Security Group.

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string

    - **WhitelistRules** *(list) --* Whitelist rules and their sync status

      - *(dict) --* Whitelist rule

        - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
    """


_ClientListInputSecurityGroupsResponseTypeDef = TypedDict(
    "_ClientListInputSecurityGroupsResponseTypeDef",
    {
        "InputSecurityGroups": List[
            ClientListInputSecurityGroupsResponseInputSecurityGroupsTypeDef
        ],
        "NextToken": str,
    },
    total=False,
)


class ClientListInputSecurityGroupsResponseTypeDef(
    _ClientListInputSecurityGroupsResponseTypeDef
):
    """
    Type definition for `ClientListInputSecurityGroups` `Response`

    - **InputSecurityGroups** *(list) --* List of input security groups

      - *(dict) --* An Input Security Group

        - **Arn** *(string) --* Unique ARN of Input Security Group

        - **Id** *(string) --* The Id of the Input Security Group

        - **Inputs** *(list) --* The list of inputs currently using this Input Security Group.

          - *(string) --* Placeholder documentation for __string

        - **State** *(string) --* The current state of the Input Security Group.

        - **Tags** *(dict) --* A collection of key-value pairs.

          - *(string) --* Placeholder documentation for __string

            - *(string) --* Placeholder documentation for __string

        - **WhitelistRules** *(list) --* Whitelist rules and their sync status

          - *(dict) --* Whitelist rule

            - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.

    - **NextToken** *(string) --* Placeholder documentation for __string
    """


_ClientListInputsResponseInputsDestinationsVpcTypeDef = TypedDict(
    "_ClientListInputsResponseInputsDestinationsVpcTypeDef",
    {"AvailabilityZone": str, "NetworkInterfaceId": str},
    total=False,
)


class ClientListInputsResponseInputsDestinationsVpcTypeDef(
    _ClientListInputsResponseInputsDestinationsVpcTypeDef
):
    """
    Type definition for `ClientListInputsResponseInputsDestinations` `Vpc`

    - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

    - **NetworkInterfaceId** *(string) --* The network interface ID of the Input
    destination in the VPC.
    """


_ClientListInputsResponseInputsDestinationsTypeDef = TypedDict(
    "_ClientListInputsResponseInputsDestinationsTypeDef",
    {
        "Ip": str,
        "Port": str,
        "Url": str,
        "Vpc": ClientListInputsResponseInputsDestinationsVpcTypeDef,
    },
    total=False,
)


class ClientListInputsResponseInputsDestinationsTypeDef(
    _ClientListInputsResponseInputsDestinationsTypeDef
):
    """
    Type definition for `ClientListInputsResponseInputs` `Destinations`

    - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains
    fixed for the lifetime of the input.

    - **Port** *(string) --* The port number for the input.

    - **Url** *(string) --* This represents the endpoint that the customer stream will be
    pushed to.

    - **Vpc** *(dict) --* The properties for a VPC type input destination.

      - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

      - **NetworkInterfaceId** *(string) --* The network interface ID of the Input
      destination in the VPC.
    """


_ClientListInputsResponseInputsMediaConnectFlowsTypeDef = TypedDict(
    "_ClientListInputsResponseInputsMediaConnectFlowsTypeDef",
    {"FlowArn": str},
    total=False,
)


class ClientListInputsResponseInputsMediaConnectFlowsTypeDef(
    _ClientListInputsResponseInputsMediaConnectFlowsTypeDef
):
    """
    Type definition for `ClientListInputsResponseInputs` `MediaConnectFlows`

    - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a
    source.
    """


_ClientListInputsResponseInputsSourcesTypeDef = TypedDict(
    "_ClientListInputsResponseInputsSourcesTypeDef",
    {"PasswordParam": str, "Url": str, "Username": str},
    total=False,
)


class ClientListInputsResponseInputsSourcesTypeDef(
    _ClientListInputsResponseInputsSourcesTypeDef
):
    """
    Type definition for `ClientListInputsResponseInputs` `Sources`

    - **PasswordParam** *(string) --* The key used to extract the password from EC2
    Parameter store.

    - **Url** *(string) --* This represents the customer's source URL where stream is
    pulled from.

    - **Username** *(string) --* The username for the input source.
    """


_ClientListInputsResponseInputsTypeDef = TypedDict(
    "_ClientListInputsResponseInputsTypeDef",
    {
        "Arn": str,
        "AttachedChannels": List[Any],
        "Destinations": List[ClientListInputsResponseInputsDestinationsTypeDef],
        "Id": str,
        "InputClass": str,
        "InputSourceType": str,
        "MediaConnectFlows": List[
            ClientListInputsResponseInputsMediaConnectFlowsTypeDef
        ],
        "Name": str,
        "RoleArn": str,
        "SecurityGroups": List[Any],
        "Sources": List[ClientListInputsResponseInputsSourcesTypeDef],
        "State": str,
        "Tags": Dict[str, str],
        "Type": str,
    },
    total=False,
)


class ClientListInputsResponseInputsTypeDef(_ClientListInputsResponseInputsTypeDef):
    """
    Type definition for `ClientListInputsResponse` `Inputs`

    - **Arn** *(string) --* The Unique ARN of the input (generated, immutable).

    - **AttachedChannels** *(list) --* A list of channel IDs that that input is attached to
    (currently an input can only be attached to one channel).

      - *(string) --* Placeholder documentation for __string

    - **Destinations** *(list) --* A list of the destinations of the input (PUSH-type).

      - *(dict) --* The settings for a PUSH type input.

        - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains
        fixed for the lifetime of the input.

        - **Port** *(string) --* The port number for the input.

        - **Url** *(string) --* This represents the endpoint that the customer stream will be
        pushed to.

        - **Vpc** *(dict) --* The properties for a VPC type input destination.

          - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

          - **NetworkInterfaceId** *(string) --* The network interface ID of the Input
          destination in the VPC.

    - **Id** *(string) --* The generated ID of the input (unique for user account, immutable).

    - **InputClass** *(string) --* STANDARD - MediaLive expects two sources to be connected to
    this input. If the channel is also STANDARD, both sources will be ingested. If the channel
    is SINGLE_PIPELINE, only the first source will be ingested; the second source will always
    be ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one
    source to this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If
    the ChannelClass is STANDARD, this value is not valid because the channel requires two
    sources in the input.

    - **InputSourceType** *(string) --* Certain pull input sources can be dynamic, meaning that
    they can have their URL's dynamically changes during input switch actions. Presently, this
    functionality only works with MP4_FILE inputs.

    - **MediaConnectFlows** *(list) --* A list of MediaConnect Flows for this input.

      - *(dict) --* The settings for a MediaConnect Flow.

        - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a
        source.

    - **Name** *(string) --* The user-assigned name (This is a mutable value).

    - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role this input assumes
    during and after creation.

    - **SecurityGroups** *(list) --* A list of IDs for all the Input Security Groups attached
    to the input.

      - *(string) --* Placeholder documentation for __string

    - **Sources** *(list) --* A list of the sources of the input (PULL-type).

      - *(dict) --* The settings for a PULL type input.

        - **PasswordParam** *(string) --* The key used to extract the password from EC2
        Parameter store.

        - **Url** *(string) --* This represents the customer's source URL where stream is
        pulled from.

        - **Username** *(string) --* The username for the input source.

    - **State** *(string) --* Placeholder documentation for InputState

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string

    - **Type** *(string) --* Placeholder documentation for InputType
    """


_ClientListInputsResponseTypeDef = TypedDict(
    "_ClientListInputsResponseTypeDef",
    {"Inputs": List[ClientListInputsResponseInputsTypeDef], "NextToken": str},
    total=False,
)


class ClientListInputsResponseTypeDef(_ClientListInputsResponseTypeDef):
    """
    Type definition for `ClientListInputs` `Response`

    - **Inputs** *(list) --* Placeholder documentation for __listOfInput

      - *(dict) --* Placeholder documentation for Input

        - **Arn** *(string) --* The Unique ARN of the input (generated, immutable).

        - **AttachedChannels** *(list) --* A list of channel IDs that that input is attached to
        (currently an input can only be attached to one channel).

          - *(string) --* Placeholder documentation for __string

        - **Destinations** *(list) --* A list of the destinations of the input (PUSH-type).

          - *(dict) --* The settings for a PUSH type input.

            - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains
            fixed for the lifetime of the input.

            - **Port** *(string) --* The port number for the input.

            - **Url** *(string) --* This represents the endpoint that the customer stream will be
            pushed to.

            - **Vpc** *(dict) --* The properties for a VPC type input destination.

              - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

              - **NetworkInterfaceId** *(string) --* The network interface ID of the Input
              destination in the VPC.

        - **Id** *(string) --* The generated ID of the input (unique for user account, immutable).

        - **InputClass** *(string) --* STANDARD - MediaLive expects two sources to be connected to
        this input. If the channel is also STANDARD, both sources will be ingested. If the channel
        is SINGLE_PIPELINE, only the first source will be ingested; the second source will always
        be ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one
        source to this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If
        the ChannelClass is STANDARD, this value is not valid because the channel requires two
        sources in the input.

        - **InputSourceType** *(string) --* Certain pull input sources can be dynamic, meaning that
        they can have their URL's dynamically changes during input switch actions. Presently, this
        functionality only works with MP4_FILE inputs.

        - **MediaConnectFlows** *(list) --* A list of MediaConnect Flows for this input.

          - *(dict) --* The settings for a MediaConnect Flow.

            - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a
            source.

        - **Name** *(string) --* The user-assigned name (This is a mutable value).

        - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role this input assumes
        during and after creation.

        - **SecurityGroups** *(list) --* A list of IDs for all the Input Security Groups attached
        to the input.

          - *(string) --* Placeholder documentation for __string

        - **Sources** *(list) --* A list of the sources of the input (PULL-type).

          - *(dict) --* The settings for a PULL type input.

            - **PasswordParam** *(string) --* The key used to extract the password from EC2
            Parameter store.

            - **Url** *(string) --* This represents the customer's source URL where stream is
            pulled from.

            - **Username** *(string) --* The username for the input source.

        - **State** *(string) --* Placeholder documentation for InputState

        - **Tags** *(dict) --* A collection of key-value pairs.

          - *(string) --* Placeholder documentation for __string

            - *(string) --* Placeholder documentation for __string

        - **Type** *(string) --* Placeholder documentation for InputType

    - **NextToken** *(string) --* Placeholder documentation for __string
    """


_ClientListOfferingsResponseOfferingsResourceSpecificationTypeDef = TypedDict(
    "_ClientListOfferingsResponseOfferingsResourceSpecificationTypeDef",
    {
        "ChannelClass": str,
        "Codec": str,
        "MaximumBitrate": str,
        "MaximumFramerate": str,
        "Resolution": str,
        "ResourceType": str,
        "SpecialFeature": str,
        "VideoQuality": str,
    },
    total=False,
)


class ClientListOfferingsResponseOfferingsResourceSpecificationTypeDef(
    _ClientListOfferingsResponseOfferingsResourceSpecificationTypeDef
):
    """
    Type definition for `ClientListOfferingsResponseOfferings` `ResourceSpecification`

    - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

    - **Codec** *(string) --* Codec, e.g. 'AVC'

    - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

    - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

    - **Resolution** *(string) --* Resolution, e.g. 'HD'

    - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

    - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
    only)

    - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
    """


_ClientListOfferingsResponseOfferingsTypeDef = TypedDict(
    "_ClientListOfferingsResponseOfferingsTypeDef",
    {
        "Arn": str,
        "CurrencyCode": str,
        "Duration": int,
        "DurationUnits": str,
        "FixedPrice": float,
        "OfferingDescription": str,
        "OfferingId": str,
        "OfferingType": str,
        "Region": str,
        "ResourceSpecification": ClientListOfferingsResponseOfferingsResourceSpecificationTypeDef,
        "UsagePrice": float,
    },
    total=False,
)


class ClientListOfferingsResponseOfferingsTypeDef(
    _ClientListOfferingsResponseOfferingsTypeDef
):
    """
    Type definition for `ClientListOfferingsResponse` `Offerings`

    - **Arn** *(string) --* Unique offering ARN, e.g.
    'arn:aws:medialive:us-west-2:123456789012:offering:87654321'

    - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217
    format, e.g. 'USD'

    - **Duration** *(integer) --* Lease duration, e.g. '12'

    - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'

    - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a
    NO_UPFRONT offering

    - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20
    Mbps, 30 fps, and standard VQ in US West (Oregon)'

    - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'

    - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'

    - **Region** *(string) --* AWS region, e.g. 'us-west-2'

    - **ResourceSpecification** *(dict) --* Resource configuration details

      - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

      - **Codec** *(string) --* Codec, e.g. 'AVC'

      - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

      - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

      - **Resolution** *(string) --* Resolution, e.g. 'HD'

      - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

      - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
      only)

      - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)

    - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g.
    '157.0'
    """


_ClientListOfferingsResponseTypeDef = TypedDict(
    "_ClientListOfferingsResponseTypeDef",
    {"NextToken": str, "Offerings": List[ClientListOfferingsResponseOfferingsTypeDef]},
    total=False,
)


class ClientListOfferingsResponseTypeDef(_ClientListOfferingsResponseTypeDef):
    """
    Type definition for `ClientListOfferings` `Response`

    - **NextToken** *(string) --* Token to retrieve the next page of results

    - **Offerings** *(list) --* List of offerings

      - *(dict) --* Reserved resources available for purchase

        - **Arn** *(string) --* Unique offering ARN, e.g.
        'arn:aws:medialive:us-west-2:123456789012:offering:87654321'

        - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217
        format, e.g. 'USD'

        - **Duration** *(integer) --* Lease duration, e.g. '12'

        - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'

        - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a
        NO_UPFRONT offering

        - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20
        Mbps, 30 fps, and standard VQ in US West (Oregon)'

        - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'

        - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'

        - **Region** *(string) --* AWS region, e.g. 'us-west-2'

        - **ResourceSpecification** *(dict) --* Resource configuration details

          - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

          - **Codec** *(string) --* Codec, e.g. 'AVC'

          - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

          - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

          - **Resolution** *(string) --* Resolution, e.g. 'HD'

          - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

          - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
          only)

          - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)

        - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g.
        '157.0'
    """


_ClientListReservationsResponseReservationsResourceSpecificationTypeDef = TypedDict(
    "_ClientListReservationsResponseReservationsResourceSpecificationTypeDef",
    {
        "ChannelClass": str,
        "Codec": str,
        "MaximumBitrate": str,
        "MaximumFramerate": str,
        "Resolution": str,
        "ResourceType": str,
        "SpecialFeature": str,
        "VideoQuality": str,
    },
    total=False,
)


class ClientListReservationsResponseReservationsResourceSpecificationTypeDef(
    _ClientListReservationsResponseReservationsResourceSpecificationTypeDef
):
    """
    Type definition for `ClientListReservationsResponseReservations` `ResourceSpecification`

    - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

    - **Codec** *(string) --* Codec, e.g. 'AVC'

    - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

    - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

    - **Resolution** *(string) --* Resolution, e.g. 'HD'

    - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

    - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
    only)

    - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
    """


_ClientListReservationsResponseReservationsTypeDef = TypedDict(
    "_ClientListReservationsResponseReservationsTypeDef",
    {
        "Arn": str,
        "Count": int,
        "CurrencyCode": str,
        "Duration": int,
        "DurationUnits": str,
        "End": str,
        "FixedPrice": float,
        "Name": str,
        "OfferingDescription": str,
        "OfferingId": str,
        "OfferingType": str,
        "Region": str,
        "ReservationId": str,
        "ResourceSpecification": ClientListReservationsResponseReservationsResourceSpecificationTypeDef,
        "Start": str,
        "State": str,
        "Tags": Dict[str, str],
        "UsagePrice": float,
    },
    total=False,
)


class ClientListReservationsResponseReservationsTypeDef(
    _ClientListReservationsResponseReservationsTypeDef
):
    """
    Type definition for `ClientListReservationsResponse` `Reservations`

    - **Arn** *(string) --* Unique reservation ARN, e.g.
    'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'

    - **Count** *(integer) --* Number of reserved resources

    - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217
    format, e.g. 'USD'

    - **Duration** *(integer) --* Lease duration, e.g. '12'

    - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'

    - **End** *(string) --* Reservation UTC end date and time in ISO-8601 format, e.g.
    '2019-03-01T00:00:00'

    - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a
    NO_UPFRONT offering

    - **Name** *(string) --* User specified reservation name

    - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20
    Mbps, 30 fps, and standard VQ in US West (Oregon)'

    - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'

    - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'

    - **Region** *(string) --* AWS region, e.g. 'us-west-2'

    - **ReservationId** *(string) --* Unique reservation ID, e.g. '1234567'

    - **ResourceSpecification** *(dict) --* Resource configuration details

      - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

      - **Codec** *(string) --* Codec, e.g. 'AVC'

      - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

      - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

      - **Resolution** *(string) --* Resolution, e.g. 'HD'

      - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

      - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
      only)

      - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)

    - **Start** *(string) --* Reservation UTC start date and time in ISO-8601 format, e.g.
    '2018-03-01T00:00:00'

    - **State** *(string) --* Current state of reservation, e.g. 'ACTIVE'

    - **Tags** *(dict) --* A collection of key-value pairs

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string

    - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g.
    '157.0'
    """


_ClientListReservationsResponseTypeDef = TypedDict(
    "_ClientListReservationsResponseTypeDef",
    {
        "NextToken": str,
        "Reservations": List[ClientListReservationsResponseReservationsTypeDef],
    },
    total=False,
)


class ClientListReservationsResponseTypeDef(_ClientListReservationsResponseTypeDef):
    """
    Type definition for `ClientListReservations` `Response`

    - **NextToken** *(string) --* Token to retrieve the next page of results

    - **Reservations** *(list) --* List of reservations

      - *(dict) --* Reserved resources available to use

        - **Arn** *(string) --* Unique reservation ARN, e.g.
        'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'

        - **Count** *(integer) --* Number of reserved resources

        - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217
        format, e.g. 'USD'

        - **Duration** *(integer) --* Lease duration, e.g. '12'

        - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'

        - **End** *(string) --* Reservation UTC end date and time in ISO-8601 format, e.g.
        '2019-03-01T00:00:00'

        - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a
        NO_UPFRONT offering

        - **Name** *(string) --* User specified reservation name

        - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20
        Mbps, 30 fps, and standard VQ in US West (Oregon)'

        - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'

        - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'

        - **Region** *(string) --* AWS region, e.g. 'us-west-2'

        - **ReservationId** *(string) --* Unique reservation ID, e.g. '1234567'

        - **ResourceSpecification** *(dict) --* Resource configuration details

          - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

          - **Codec** *(string) --* Codec, e.g. 'AVC'

          - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

          - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

          - **Resolution** *(string) --* Resolution, e.g. 'HD'

          - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

          - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
          only)

          - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)

        - **Start** *(string) --* Reservation UTC start date and time in ISO-8601 format, e.g.
        '2018-03-01T00:00:00'

        - **State** *(string) --* Current state of reservation, e.g. 'ACTIVE'

        - **Tags** *(dict) --* A collection of key-value pairs

          - *(string) --* Placeholder documentation for __string

            - *(string) --* Placeholder documentation for __string

        - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g.
        '157.0'
    """


_ClientListTagsForResourceResponseTypeDef = TypedDict(
    "_ClientListTagsForResourceResponseTypeDef", {"Tags": Dict[str, str]}, total=False
)


class ClientListTagsForResourceResponseTypeDef(
    _ClientListTagsForResourceResponseTypeDef
):
    """
    Type definition for `ClientListTagsForResource` `Response`

    - **Tags** *(dict) --* Placeholder documentation for Tags

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string
    """


_ClientPurchaseOfferingResponseReservationResourceSpecificationTypeDef = TypedDict(
    "_ClientPurchaseOfferingResponseReservationResourceSpecificationTypeDef",
    {
        "ChannelClass": str,
        "Codec": str,
        "MaximumBitrate": str,
        "MaximumFramerate": str,
        "Resolution": str,
        "ResourceType": str,
        "SpecialFeature": str,
        "VideoQuality": str,
    },
    total=False,
)


class ClientPurchaseOfferingResponseReservationResourceSpecificationTypeDef(
    _ClientPurchaseOfferingResponseReservationResourceSpecificationTypeDef
):
    """
    Type definition for `ClientPurchaseOfferingResponseReservation` `ResourceSpecification`

    - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

    - **Codec** *(string) --* Codec, e.g. 'AVC'

    - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

    - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

    - **Resolution** *(string) --* Resolution, e.g. 'HD'

    - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

    - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
    only)

    - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
    """


_ClientPurchaseOfferingResponseReservationTypeDef = TypedDict(
    "_ClientPurchaseOfferingResponseReservationTypeDef",
    {
        "Arn": str,
        "Count": int,
        "CurrencyCode": str,
        "Duration": int,
        "DurationUnits": str,
        "End": str,
        "FixedPrice": float,
        "Name": str,
        "OfferingDescription": str,
        "OfferingId": str,
        "OfferingType": str,
        "Region": str,
        "ReservationId": str,
        "ResourceSpecification": ClientPurchaseOfferingResponseReservationResourceSpecificationTypeDef,
        "Start": str,
        "State": str,
        "Tags": Dict[str, str],
        "UsagePrice": float,
    },
    total=False,
)


class ClientPurchaseOfferingResponseReservationTypeDef(
    _ClientPurchaseOfferingResponseReservationTypeDef
):
    """
    Type definition for `ClientPurchaseOfferingResponse` `Reservation`

    - **Arn** *(string) --* Unique reservation ARN, e.g.
    'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'

    - **Count** *(integer) --* Number of reserved resources

    - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217
    format, e.g. 'USD'

    - **Duration** *(integer) --* Lease duration, e.g. '12'

    - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'

    - **End** *(string) --* Reservation UTC end date and time in ISO-8601 format, e.g.
    '2019-03-01T00:00:00'

    - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a
    NO_UPFRONT offering

    - **Name** *(string) --* User specified reservation name

    - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20
    Mbps, 30 fps, and standard VQ in US West (Oregon)'

    - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'

    - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'

    - **Region** *(string) --* AWS region, e.g. 'us-west-2'

    - **ReservationId** *(string) --* Unique reservation ID, e.g. '1234567'

    - **ResourceSpecification** *(dict) --* Resource configuration details

      - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

      - **Codec** *(string) --* Codec, e.g. 'AVC'

      - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

      - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

      - **Resolution** *(string) --* Resolution, e.g. 'HD'

      - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

      - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
      only)

      - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)

    - **Start** *(string) --* Reservation UTC start date and time in ISO-8601 format, e.g.
    '2018-03-01T00:00:00'

    - **State** *(string) --* Current state of reservation, e.g. 'ACTIVE'

    - **Tags** *(dict) --* A collection of key-value pairs

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string

    - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g. '157.0'
    """


_ClientPurchaseOfferingResponseTypeDef = TypedDict(
    "_ClientPurchaseOfferingResponseTypeDef",
    {"Reservation": ClientPurchaseOfferingResponseReservationTypeDef},
    total=False,
)


class ClientPurchaseOfferingResponseTypeDef(_ClientPurchaseOfferingResponseTypeDef):
    """
    Type definition for `ClientPurchaseOffering` `Response`

    - **Reservation** *(dict) --* Reserved resources available to use

      - **Arn** *(string) --* Unique reservation ARN, e.g.
      'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'

      - **Count** *(integer) --* Number of reserved resources

      - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217
      format, e.g. 'USD'

      - **Duration** *(integer) --* Lease duration, e.g. '12'

      - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'

      - **End** *(string) --* Reservation UTC end date and time in ISO-8601 format, e.g.
      '2019-03-01T00:00:00'

      - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a
      NO_UPFRONT offering

      - **Name** *(string) --* User specified reservation name

      - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20
      Mbps, 30 fps, and standard VQ in US West (Oregon)'

      - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'

      - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'

      - **Region** *(string) --* AWS region, e.g. 'us-west-2'

      - **ReservationId** *(string) --* Unique reservation ID, e.g. '1234567'

      - **ResourceSpecification** *(dict) --* Resource configuration details

        - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

        - **Codec** *(string) --* Codec, e.g. 'AVC'

        - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

        - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

        - **Resolution** *(string) --* Resolution, e.g. 'HD'

        - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

        - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
        only)

        - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)

      - **Start** *(string) --* Reservation UTC start date and time in ISO-8601 format, e.g.
      '2018-03-01T00:00:00'

      - **State** *(string) --* Current state of reservation, e.g. 'ACTIVE'

      - **Tags** *(dict) --* A collection of key-value pairs

        - *(string) --* Placeholder documentation for __string

          - *(string) --* Placeholder documentation for __string

      - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g. '157.0'
    """


_ClientStartChannelResponseEgressEndpointsTypeDef = TypedDict(
    "_ClientStartChannelResponseEgressEndpointsTypeDef", {"SourceIp": str}, total=False
)


class ClientStartChannelResponseEgressEndpointsTypeDef(
    _ClientStartChannelResponseEgressEndpointsTypeDef
):
    """
    Type definition for `ClientStartChannelResponse` `EgressEndpoints`

    - **SourceIp** *(string) --* Public IP of where a channel's output comes from
    """


_ClientStartChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef",
    {"Algorithm": str, "AlgorithmControl": str, "TargetLkfs": float},
    total=False,
)


class ClientStartChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef(
    _ClientStartChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettingsAudioDescriptions` `AudioNormalizationSettings`

    - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
    to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

    - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
    corrected using the chosen algorithm. If set to measureOnly, the audio will be measured
    but not adjusted.

    - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
    entered, a default value will be used according to the chosen algorithm. The CALM Act
    (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
    recommends a target of -23 LKFS.
    """


_ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef",
    {
        "Bitrate": float,
        "CodingMode": str,
        "InputType": str,
        "Profile": str,
        "RateControlMode": str,
        "RawFormat": str,
        "SampleRate": float,
        "Spec": str,
        "VbrQuality": str,
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef(
    _ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettings` `AacSettings`

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
    rate control mode and profile.

    - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
    depend on rate control mode and profile. The adReceiverMix setting receives a stereo
    description plus control track and emits a mono AAC encode of the description track,
    with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

    - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
    pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
    (audioType) will be set to 3, which signals to downstream systems that this stream
    contains "broadcaster mixed AD". Note that the input received by the encoder must
    contain pre-mixed audio; the encoder does not perform the mixing. The values in
    audioTypeControl and audioType (in AudioDescription) are ignored when set to
    broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
    + AD.

    - **Profile** *(string) --* AAC Profile.

    - **RateControlMode** *(string) --* Rate Control Mode.

    - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

    - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
    mode and profile.

    - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
    MPEG-2 Transport Stream containers.

    - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
    VBR.
    """


_ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef",
    {
        "Bitrate": float,
        "BitstreamMode": str,
        "CodingMode": str,
        "Dialnorm": int,
        "DrcProfile": str,
        "LfeFilter": str,
        "MetadataControl": str,
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef(
    _ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettings` `Ac3Settings`

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
    the coding mode.

    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
    emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

    - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
    channels.

    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
    audio is Dolby Digital, dialnorm will be passed through.

    - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
    signaling to the output bitstream as defined in the Dolby Digital specification.

    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
    the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

    - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
    be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
    audio was not supplied from one of these streams, then the static metadata settings
    will be used.
    """


_ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef",
    {
        "AttenuationControl": str,
        "Bitrate": float,
        "BitstreamMode": str,
        "CodingMode": str,
        "DcFilter": str,
        "Dialnorm": int,
        "DrcLine": str,
        "DrcRf": str,
        "LfeControl": str,
        "LfeFilter": str,
        "LoRoCenterMixLevel": float,
        "LoRoSurroundMixLevel": float,
        "LtRtCenterMixLevel": float,
        "LtRtSurroundMixLevel": float,
        "MetadataControl": str,
        "PassthroughControl": str,
        "PhaseControl": str,
        "StereoDownmix": str,
        "SurroundExMode": str,
        "SurroundMode": str,
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef(
    _ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettings` `Eac3Settings`

    - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
    attenuation to the surround channels. Only used for 3/2 coding mode.

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
    the coding mode.

    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
    emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

    - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
    channels.

    - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
    all input channels.

    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
    audio is Dolby Digital Plus, dialnorm will be passed through.

    - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

    - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
    ensures that the instantaneous signal peaks do not exceed specified levels.

    - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
    LFE channel

    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
    the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

    - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
    used for 3/2 coding mode.

    - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
    used for 3/2 coding mode.

    - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
    used for 3/2 coding mode.

    - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
    Only used for 3/2 coding mode.

    - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
    sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
    was not supplied from one of these streams, then the static metadata settings will be
    used.

    - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
    be passed through if it is present on the input. This detection is dynamic over the
    life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
    have a consistent DD+ output as the system alternates between passthrough and
    encoding.

    - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
    phase shift to the surround channels. Only used for 3/2 coding mode.

    - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
    mode.

    - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
    center back surround channel is matrix encoded into the left and right surround
    channels.

    - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
    is matrix encoded into the two channels.
    """


_ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef",
    {"Bitrate": float, "CodingMode": str, "SampleRate": float},
    total=False,
)


class ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef(
    _ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettings` `Mp2Settings`

    - **Bitrate** *(float) --* Average bitrate in bits/second.

    - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
    codingMode10 (for mono) or codingMode20 (for stereo).

    - **SampleRate** *(float) --* Sample rate in Hz.
    """


_ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef",
    {
        "AacSettings": ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef,
        "Ac3Settings": ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef,
        "Eac3Settings": ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef,
        "Mp2Settings": ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef,
        "PassThroughSettings": Dict[str, Any],
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef(
    _ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettingsAudioDescriptions` `CodecSettings`

    - **AacSettings** *(dict) --* Aac Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
      rate control mode and profile.

      - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
      depend on rate control mode and profile. The adReceiverMix setting receives a stereo
      description plus control track and emits a mono AAC encode of the description track,
      with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

      - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
      pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
      (audioType) will be set to 3, which signals to downstream systems that this stream
      contains "broadcaster mixed AD". Note that the input received by the encoder must
      contain pre-mixed audio; the encoder does not perform the mixing. The values in
      audioTypeControl and audioType (in AudioDescription) are ignored when set to
      broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
      + AD.

      - **Profile** *(string) --* AAC Profile.

      - **RateControlMode** *(string) --* Rate Control Mode.

      - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

      - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
      mode and profile.

      - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
      MPEG-2 Transport Stream containers.

      - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
      VBR.

    - **Ac3Settings** *(dict) --* Ac3 Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
      the coding mode.

      - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
      emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

      - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
      channels.

      - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
      audio is Dolby Digital, dialnorm will be passed through.

      - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
      signaling to the output bitstream as defined in the Dolby Digital specification.

      - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
      the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

      - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
      be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
      audio was not supplied from one of these streams, then the static metadata settings
      will be used.

    - **Eac3Settings** *(dict) --* Eac3 Settings

      - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
      attenuation to the surround channels. Only used for 3/2 coding mode.

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
      the coding mode.

      - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
      emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

      - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
      channels.

      - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
      all input channels.

      - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
      audio is Dolby Digital Plus, dialnorm will be passed through.

      - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

      - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
      ensures that the instantaneous signal peaks do not exceed specified levels.

      - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
      LFE channel

      - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
      the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

      - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
      used for 3/2 coding mode.

      - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
      used for 3/2 coding mode.

      - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
      used for 3/2 coding mode.

      - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
      Only used for 3/2 coding mode.

      - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
      sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
      was not supplied from one of these streams, then the static metadata settings will be
      used.

      - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
      be passed through if it is present on the input. This detection is dynamic over the
      life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
      have a consistent DD+ output as the system alternates between passthrough and
      encoding.

      - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
      phase shift to the surround channels. Only used for 3/2 coding mode.

      - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
      mode.

      - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
      center back surround channel is matrix encoded into the left and right surround
      channels.

      - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
      is matrix encoded into the two channels.

    - **Mp2Settings** *(dict) --* Mp2 Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second.

      - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
      codingMode10 (for mono) or codingMode20 (for stereo).

      - **SampleRate** *(float) --* Sample rate in Hz.

    - **PassThroughSettings** *(dict) --* Pass Through Settings
    """


_ClientStartChannelResponseEncoderSettingsAudioDescriptionsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsAudioDescriptionsTypeDef",
    {
        "AudioNormalizationSettings": ClientStartChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef,
        "AudioSelectorName": str,
        "AudioType": str,
        "AudioTypeControl": str,
        "CodecSettings": ClientStartChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef,
        "LanguageCode": str,
        "LanguageCodeControl": str,
        "Name": str,
        "RemixSettings": Dict[str, Any],
        "StreamName": str,
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsAudioDescriptionsTypeDef(
    _ClientStartChannelResponseEncoderSettingsAudioDescriptionsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettings` `AudioDescriptions`

    - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

      - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
      to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

      - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
      corrected using the chosen algorithm. If set to measureOnly, the audio will be measured
      but not adjusted.

      - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
      entered, a default value will be used according to the chosen algorithm. The CALM Act
      (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
      recommends a target of -23 LKFS.

    - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
    for this AudioDescription.

    - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
    values for audioType are defined in ISO-IEC 13818-1.

    - **AudioTypeControl** *(string) --* Determines how audio type is determined.
    followInput: If the input contains an ISO 639 audioType, then that value is passed
    through to the output. If the input contains no ISO 639 audioType, the value in Audio
    Type is included in the output. useConfigured: The value in Audio Type is included in the
    output. Note that this field and audioType are both ignored if inputType is
    broadcasterMixedAd.

    - **CodecSettings** *(dict) --* Audio codec settings.

      - **AacSettings** *(dict) --* Aac Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
        rate control mode and profile.

        - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
        depend on rate control mode and profile. The adReceiverMix setting receives a stereo
        description plus control track and emits a mono AAC encode of the description track,
        with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

        - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
        pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
        (audioType) will be set to 3, which signals to downstream systems that this stream
        contains "broadcaster mixed AD". Note that the input received by the encoder must
        contain pre-mixed audio; the encoder does not perform the mixing. The values in
        audioTypeControl and audioType (in AudioDescription) are ignored when set to
        broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
        + AD.

        - **Profile** *(string) --* AAC Profile.

        - **RateControlMode** *(string) --* Rate Control Mode.

        - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

        - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
        mode and profile.

        - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
        MPEG-2 Transport Stream containers.

        - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
        VBR.

      - **Ac3Settings** *(dict) --* Ac3 Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
        the coding mode.

        - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
        emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

        - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
        channels.

        - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
        audio is Dolby Digital, dialnorm will be passed through.

        - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
        signaling to the output bitstream as defined in the Dolby Digital specification.

        - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
        the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

        - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
        be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
        audio was not supplied from one of these streams, then the static metadata settings
        will be used.

      - **Eac3Settings** *(dict) --* Eac3 Settings

        - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
        attenuation to the surround channels. Only used for 3/2 coding mode.

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
        the coding mode.

        - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
        emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

        - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
        channels.

        - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
        all input channels.

        - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
        audio is Dolby Digital Plus, dialnorm will be passed through.

        - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

        - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
        ensures that the instantaneous signal peaks do not exceed specified levels.

        - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
        LFE channel

        - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
        the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

        - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
        used for 3/2 coding mode.

        - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
        used for 3/2 coding mode.

        - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
        used for 3/2 coding mode.

        - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
        Only used for 3/2 coding mode.

        - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
        sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
        was not supplied from one of these streams, then the static metadata settings will be
        used.

        - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
        be passed through if it is present on the input. This detection is dynamic over the
        life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
        have a consistent DD+ output as the system alternates between passthrough and
        encoding.

        - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
        phase shift to the surround channels. Only used for 3/2 coding mode.

        - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
        mode.

        - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
        center back surround channel is matrix encoded into the left and right surround
        channels.

        - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
        is matrix encoded into the two channels.

      - **Mp2Settings** *(dict) --* Mp2 Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second.

        - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
        codingMode10 (for mono) or codingMode20 (for stereo).

        - **SampleRate** *(float) --* Sample rate in Hz.

      - **PassThroughSettings** *(dict) --* Pass Through Settings

    - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
    used if languageControlMode is useConfigured, or there is no ISO 639 language code
    specified in the input.

    - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
    language code of the output to follow the ISO 639 language code of the input. The
    languageCode will be used when useConfigured is set, or when followInput is selected but
    there is no ISO 639 language code specified by the input.

    - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to
    uniquely identify this AudioDescription. Description names should be unique within this
    Live Event.

    - **RemixSettings** *(dict) --* Settings that control how input audio channels are
    remixed into the output audio channels.

      - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
      appropriate gain adjustments.

        - *(dict) --* Audio Channel Mapping

          - **InputChannelLevels** *(list) --* Indices and gain values for each input channel
          that should be remixed into this output channel.

            - *(dict) --* Input Channel Level

              - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values
              are within the range from -60 (mute) and 6 dB.

              - **InputChannel** *(integer) --* The index of the input channel used as a
              source.

          - **OutputChannel** *(integer) --* The index of the output channel being produced.

      - **ChannelsIn** *(integer) --* Number of input channels to be used.

      - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
      values: 1, 2, 4, 6, 8

    - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
    name displayed by the player (eg. English, or Director Commentary).
    """


_ClientStartChannelResponseEncoderSettingsAvailBlankingTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsAvailBlankingTypeDef",
    {"AvailBlankingImage": Dict[str, Any], "State": str},
    total=False,
)


class ClientStartChannelResponseEncoderSettingsAvailBlankingTypeDef(
    _ClientStartChannelResponseEncoderSettingsAvailBlankingTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettings` `AvailBlanking`

    - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
    black. Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be
    blanked when insertion metadata is added.
    """


_ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef",
    {
        "AdAvailOffset": int,
        "NoRegionalBlackoutFlag": str,
        "WebDeliveryAllowedFlag": str,
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef(
    _ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettings` `Scte35SpliceInsert`

    - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
    added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
    messages and does not apply to OOB messages.

    - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
    noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
    webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef",
    {
        "AdAvailOffset": int,
        "NoRegionalBlackoutFlag": str,
        "WebDeliveryAllowedFlag": str,
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef(
    _ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettings` `Scte35TimeSignalApos`

    - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
    added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
    messages and does not apply to OOB messages.

    - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
    noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
    webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef",
    {
        "Scte35SpliceInsert": ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef,
        "Scte35TimeSignalApos": ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef,
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef(
    _ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettingsAvailConfiguration` `AvailSettings`

    - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

      - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
      added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
      messages and does not apply to OOB messages.

      - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
      noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
      webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

      - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
      added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
      messages and does not apply to OOB messages.

      - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
      noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
      webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientStartChannelResponseEncoderSettingsAvailConfigurationTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsAvailConfigurationTypeDef",
    {
        "AvailSettings": ClientStartChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsAvailConfigurationTypeDef(
    _ClientStartChannelResponseEncoderSettingsAvailConfigurationTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettings` `AvailConfiguration`

    - **AvailSettings** *(dict) --* Ad avail settings.

      - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

        - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
        added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
        messages and does not apply to OOB messages.

        - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
        noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
        webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

        - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
        added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
        messages and does not apply to OOB messages.

        - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
        noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
        webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientStartChannelResponseEncoderSettingsBlackoutSlateTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsBlackoutSlateTypeDef",
    {
        "BlackoutSlateImage": Dict[str, Any],
        "NetworkEndBlackout": str,
        "NetworkEndBlackoutImage": Dict[str, Any],
        "NetworkId": str,
        "State": str,
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsBlackoutSlateTypeDef(
    _ClientStartChannelResponseEncoderSettingsBlackoutSlateTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettings` `BlackoutSlate`

    - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid
    black. Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
    the video, audio, and captions, and raise the "Network Blackout Image" slate when an
    SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted
    when the Network Start Segmentation Descriptor is encountered. The Network End and Network
    Start descriptors must contain a network ID that matches the value entered in "Network ID".

    - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout
    image. Image will be scaled to fill the entire output raster.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
    "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be
    blanked when indicated by program metadata.
    """


_ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef",
    {"CaptureInterval": int},
    total=False,
)


class ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef(
    _ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettings` `FrameCaptureSettings`

    - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
    for inclusion in the output. For example, "10" means capture a frame every 10 seconds.
    """


_ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef",
    {
        "ColorSpacePassthroughSettings": Dict[str, Any],
        "Rec601Settings": Dict,
        "Rec709Settings": Dict[str, Any],
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef(
    _ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264Settings` `ColorSpaceSettings`

    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
    conversion to the output

    - **Rec601Settings** *(dict) --* Rec601 Settings

    - **Rec709Settings** *(dict) --* Rec709 Settings
    """


_ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef",
    {
        "AdaptiveQuantization": str,
        "AfdSignaling": str,
        "Bitrate": int,
        "BufFillPct": int,
        "BufSize": int,
        "ColorMetadata": str,
        "ColorSpaceSettings": ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef,
        "EntropyEncoding": str,
        "FixedAfd": str,
        "FlickerAq": str,
        "FramerateControl": str,
        "FramerateDenominator": int,
        "FramerateNumerator": int,
        "GopBReference": str,
        "GopClosedCadence": int,
        "GopNumBFrames": int,
        "GopSize": float,
        "GopSizeUnits": str,
        "Level": str,
        "LookAheadRateControl": str,
        "MaxBitrate": int,
        "MinIInterval": int,
        "NumRefFrames": int,
        "ParControl": str,
        "ParDenominator": int,
        "ParNumerator": int,
        "Profile": str,
        "QvbrQualityLevel": int,
        "RateControlMode": str,
        "ScanType": str,
        "SceneChangeDetect": str,
        "Slices": int,
        "Softness": int,
        "SpatialAq": str,
        "SubgopLength": str,
        "Syntax": str,
        "TemporalAq": str,
        "TimecodeInsertion": str,
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef(
    _ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettings` `H264Settings`

    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
    quantizers to vary to improve visual quality.

    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
    output stream. If afdSignaling is "auto", the system will try to preserve the input
    AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
    value will be the value configured in the fixedAfd parameter.

    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
    control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
    output must have a unique value when its bitrate is rounded down to the nearest
    multiple of 1000.

    - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
    filled (HRD buffer model).

    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

    - **ColorSpaceSettings** *(dict) --* Color Space settings

      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
      conversion to the output

      - **Rec601Settings** *(dict) --* Rec601 Settings

      - **Rec709Settings** *(dict) --* Rec709 Settings

    - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
    or High profile) or cavlc.

    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
    the output stream. Only valid when afdSignaling is set to 'Fixed'.

    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
    frame to reduce flicker or 'pop' on I-frames.

    - **FramerateControl** *(string) --* This field indicates how the output video frame
    rate is specified. If "specified" is selected then the output video frame rate is
    determined by framerateNumerator and framerateDenominator, else if
    "initializeFromSource" is selected then the output video frame rate will be set equal
    to the input video frame rate of the first input.

    - **FramerateDenominator** *(integer) --* Framerate denominator.

    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
    fraction, e.g. 24000 / 1001 = 23.976 fps.

    - **GopBReference** *(string) --* Documentation update needed

    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
    applications, it is recommended that this be set to 1 so a decoder joining mid-stream
    will receive an IDR frame as quickly as possible. Setting this value to 0 will break
    output segmenting.

    - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
    seconds per gopSizeUnits. Must be greater than zero.

    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
    seconds. If seconds the system will convert the gopSize into a frame count at run
    time.

    - **Level** *(string) --* H.264 Level.

    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
    decrease latency and memory usage, while high can produce better quality for certain
    content.

    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
    Set the maximum bitrate in order to accommodate expected spikes in the complexity of
    the video.

    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
    enabled. Enforces separation between repeated (cadence) I-frames and I-frames
    inserted by Scene Change Detection. If a scene change I-frame is within I-interval
    frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
    I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
    normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
    Min-I-interval - 1

    - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
    use more than requested if using B-frames and/or interlaced encoding.

    - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
    is specified. If "specified" is selected then the output video pixel aspect ratio is
    determined by parNumerator and parDenominator, else if "initializeFromSource" is
    selected then the output pixsel aspect ratio will be set equal to the input video
    pixel aspect ratio of the first input.

    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

    - **Profile** *(string) --* H.264 Profile.

    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
    encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
    quality level field and Max bitrate field that suit your most important viewing
    devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
    bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
    Quality level: 6. Max bitrate: 1M to 1.5M

    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
    specified quality level except when it is constrained by the maximum bitrate.
    Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
    depending on the video complexity. Recommended instead of QVBR if you want to
    maintain a specific average bitrate over the duration of the channel. CBR: Quality
    varies, depending on the video complexity. Recommended only if you distribute your
    assets to devices that cannot handle variable bitrates.

    - **ScanType** *(string) --* Sets the scan type of the output to progressive or
    top-field-first interlaced.

    - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
    when scene change is detected. - Off: does not force an I-frame when scene change is
    detected.

    - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
    to the number of macroblock rows for progressive pictures, and less than or equal to
    half the number of macroblock rows for interlaced pictures. This field is optional;
    when no value is specified the encoder will choose the number of slices based on
    encode resolution.

    - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
    reduce high-frequency content in the encoded image.

    - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
    frame based on spatial variation of content complexity.

    - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
    sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
    improve visual quality.

    - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

    - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
    frame based on temporal variation of content complexity.

    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
    into the video elementary stream. - 'disabled': Do not include timecodes -
    'picTimingSei': Pass through picture timing SEI messages from the source specified in
    Timecode Config
    """


_ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef",
    {"MaxCll": int, "MaxFall": int},
    total=False,
)


class ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef(
    _ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings` `Hdr10Settings`

    - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
    defining the maximum light level, in nits, of any single pixel within an encoded
    HDR video stream or file.

    - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
    metadata value defining the maximum average light level, in nits, for any single
    frame within an encoded HDR video stream or file.
    """


_ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef",
    {
        "ColorSpacePassthroughSettings": Dict[str, Any],
        "Hdr10Settings": ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef,
        "Rec601Settings": Dict,
        "Rec709Settings": Dict[str, Any],
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef(
    _ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265Settings` `ColorSpaceSettings`

    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
    conversion to the output

    - **Hdr10Settings** *(dict) --* Hdr10 Settings

      - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
      defining the maximum light level, in nits, of any single pixel within an encoded
      HDR video stream or file.

      - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
      metadata value defining the maximum average light level, in nits, for any single
      frame within an encoded HDR video stream or file.

    - **Rec601Settings** *(dict) --* Rec601 Settings

    - **Rec709Settings** *(dict) --* Rec709 Settings
    """


_ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef",
    {
        "AdaptiveQuantization": str,
        "AfdSignaling": str,
        "AlternativeTransferFunction": str,
        "Bitrate": int,
        "BufSize": int,
        "ColorMetadata": str,
        "ColorSpaceSettings": ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef,
        "FixedAfd": str,
        "FlickerAq": str,
        "FramerateDenominator": int,
        "FramerateNumerator": int,
        "GopClosedCadence": int,
        "GopSize": float,
        "GopSizeUnits": str,
        "Level": str,
        "LookAheadRateControl": str,
        "MaxBitrate": int,
        "MinIInterval": int,
        "ParDenominator": int,
        "ParNumerator": int,
        "Profile": str,
        "QvbrQualityLevel": int,
        "RateControlMode": str,
        "ScanType": str,
        "SceneChangeDetect": str,
        "Slices": int,
        "Tier": str,
        "TimecodeInsertion": str,
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef(
    _ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettings` `H265Settings`

    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
    quantizers to vary to improve visual quality.

    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
    output stream. If afdSignaling is "auto", the system will try to preserve the input
    AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
    value will be the value configured in the fixedAfd parameter.

    - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
    Alternative Transfer Function SEI message to support backwards compatibility with
    non-HDR decoders and displays.

    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
    control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
    output must have a unique value when its bitrate is rounded down to the nearest
    multiple of 1000.

    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

    - **ColorSpaceSettings** *(dict) --* Color Space settings

      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
      conversion to the output

      - **Hdr10Settings** *(dict) --* Hdr10 Settings

        - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
        defining the maximum light level, in nits, of any single pixel within an encoded
        HDR video stream or file.

        - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
        metadata value defining the maximum average light level, in nits, for any single
        frame within an encoded HDR video stream or file.

      - **Rec601Settings** *(dict) --* Rec601 Settings

      - **Rec709Settings** *(dict) --* Rec709 Settings

    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
    the output stream. Only valid when afdSignaling is set to 'Fixed'.

    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
    frame to reduce flicker or 'pop' on I-frames.

    - **FramerateDenominator** *(integer) --* Framerate denominator.

    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
    fraction, e.g. 24000 / 1001 = 23.976 fps.

    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
    applications, it is recommended that this be set to 1 so a decoder joining mid-stream
    will receive an IDR frame as quickly as possible. Setting this value to 0 will break
    output segmenting.

    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
    seconds per gopSizeUnits. Must be greater than zero.

    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
    seconds. If seconds the system will convert the gopSize into a frame count at run
    time.

    - **Level** *(string) --* H.265 Level.

    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
    decrease latency and memory usage, while high can produce better quality for certain
    content.

    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
    enabled. Enforces separation between repeated (cadence) I-frames and I-frames
    inserted by Scene Change Detection. If a scene change I-frame is within I-interval
    frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
    I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
    normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
    Min-I-interval - 1

    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

    - **Profile** *(string) --* H.265 Profile.

    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
    encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
    quality level field and Max bitrate field that suit your most important viewing
    devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
    bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
    Quality level: 6. Max bitrate: 1M to 1.5M

    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
    specified quality level except when it is constrained by the maximum bitrate.
    Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
    on the video complexity. Recommended only if you distribute your assets to devices
    that cannot handle variable bitrates.

    - **ScanType** *(string) --* Sets the scan type of the output to progressive or
    top-field-first interlaced.

    - **SceneChangeDetect** *(string) --* Scene change detection.

    - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
    to the number of macroblock rows for progressive pictures, and less than or equal to
    half the number of macroblock rows for interlaced pictures. This field is optional;
    when no value is specified the encoder will choose the number of slices based on
    encode resolution.

    - **Tier** *(string) --* H.265 Tier.

    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
    into the video elementary stream. - 'disabled': Do not include timecodes -
    'picTimingSei': Pass through picture timing SEI messages from the source specified in
    Timecode Config
    """


_ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef",
    {
        "FrameCaptureSettings": ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef,
        "H264Settings": ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef,
        "H265Settings": ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef,
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef(
    _ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettingsVideoDescriptions` `CodecSettings`

    - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

      - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
      for inclusion in the output. For example, "10" means capture a frame every 10 seconds.

    - **H264Settings** *(dict) --* H264 Settings

      - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
      quantizers to vary to improve visual quality.

      - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
      output stream. If afdSignaling is "auto", the system will try to preserve the input
      AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
      value will be the value configured in the fixedAfd parameter.

      - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
      control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
      output must have a unique value when its bitrate is rounded down to the nearest
      multiple of 1000.

      - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
      filled (HRD buffer model).

      - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

      - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

      - **ColorSpaceSettings** *(dict) --* Color Space settings

        - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
        conversion to the output

        - **Rec601Settings** *(dict) --* Rec601 Settings

        - **Rec709Settings** *(dict) --* Rec709 Settings

      - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
      or High profile) or cavlc.

      - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
      the output stream. Only valid when afdSignaling is set to 'Fixed'.

      - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
      frame to reduce flicker or 'pop' on I-frames.

      - **FramerateControl** *(string) --* This field indicates how the output video frame
      rate is specified. If "specified" is selected then the output video frame rate is
      determined by framerateNumerator and framerateDenominator, else if
      "initializeFromSource" is selected then the output video frame rate will be set equal
      to the input video frame rate of the first input.

      - **FramerateDenominator** *(integer) --* Framerate denominator.

      - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
      fraction, e.g. 24000 / 1001 = 23.976 fps.

      - **GopBReference** *(string) --* Documentation update needed

      - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
      applications, it is recommended that this be set to 1 so a decoder joining mid-stream
      will receive an IDR frame as quickly as possible. Setting this value to 0 will break
      output segmenting.

      - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

      - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
      seconds per gopSizeUnits. Must be greater than zero.

      - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
      seconds. If seconds the system will convert the gopSize into a frame count at run
      time.

      - **Level** *(string) --* H.264 Level.

      - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
      decrease latency and memory usage, while high can produce better quality for certain
      content.

      - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
      Set the maximum bitrate in order to accommodate expected spikes in the complexity of
      the video.

      - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
      enabled. Enforces separation between repeated (cadence) I-frames and I-frames
      inserted by Scene Change Detection. If a scene change I-frame is within I-interval
      frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
      I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
      normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
      Min-I-interval - 1

      - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
      use more than requested if using B-frames and/or interlaced encoding.

      - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
      is specified. If "specified" is selected then the output video pixel aspect ratio is
      determined by parNumerator and parDenominator, else if "initializeFromSource" is
      selected then the output pixsel aspect ratio will be set equal to the input video
      pixel aspect ratio of the first input.

      - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

      - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

      - **Profile** *(string) --* H.264 Profile.

      - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
      encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
      quality level field and Max bitrate field that suit your most important viewing
      devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
      bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
      Quality level: 6. Max bitrate: 1M to 1.5M

      - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
      specified quality level except when it is constrained by the maximum bitrate.
      Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
      depending on the video complexity. Recommended instead of QVBR if you want to
      maintain a specific average bitrate over the duration of the channel. CBR: Quality
      varies, depending on the video complexity. Recommended only if you distribute your
      assets to devices that cannot handle variable bitrates.

      - **ScanType** *(string) --* Sets the scan type of the output to progressive or
      top-field-first interlaced.

      - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
      when scene change is detected. - Off: does not force an I-frame when scene change is
      detected.

      - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
      to the number of macroblock rows for progressive pictures, and less than or equal to
      half the number of macroblock rows for interlaced pictures. This field is optional;
      when no value is specified the encoder will choose the number of slices based on
      encode resolution.

      - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
      reduce high-frequency content in the encoded image.

      - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
      frame based on spatial variation of content complexity.

      - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
      sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
      improve visual quality.

      - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

      - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
      frame based on temporal variation of content complexity.

      - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
      into the video elementary stream. - 'disabled': Do not include timecodes -
      'picTimingSei': Pass through picture timing SEI messages from the source specified in
      Timecode Config

    - **H265Settings** *(dict) --* H265 Settings

      - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
      quantizers to vary to improve visual quality.

      - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
      output stream. If afdSignaling is "auto", the system will try to preserve the input
      AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
      value will be the value configured in the fixedAfd parameter.

      - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
      Alternative Transfer Function SEI message to support backwards compatibility with
      non-HDR decoders and displays.

      - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
      control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
      output must have a unique value when its bitrate is rounded down to the nearest
      multiple of 1000.

      - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

      - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

      - **ColorSpaceSettings** *(dict) --* Color Space settings

        - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
        conversion to the output

        - **Hdr10Settings** *(dict) --* Hdr10 Settings

          - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
          defining the maximum light level, in nits, of any single pixel within an encoded
          HDR video stream or file.

          - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
          metadata value defining the maximum average light level, in nits, for any single
          frame within an encoded HDR video stream or file.

        - **Rec601Settings** *(dict) --* Rec601 Settings

        - **Rec709Settings** *(dict) --* Rec709 Settings

      - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
      the output stream. Only valid when afdSignaling is set to 'Fixed'.

      - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
      frame to reduce flicker or 'pop' on I-frames.

      - **FramerateDenominator** *(integer) --* Framerate denominator.

      - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
      fraction, e.g. 24000 / 1001 = 23.976 fps.

      - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
      applications, it is recommended that this be set to 1 so a decoder joining mid-stream
      will receive an IDR frame as quickly as possible. Setting this value to 0 will break
      output segmenting.

      - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
      seconds per gopSizeUnits. Must be greater than zero.

      - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
      seconds. If seconds the system will convert the gopSize into a frame count at run
      time.

      - **Level** *(string) --* H.265 Level.

      - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
      decrease latency and memory usage, while high can produce better quality for certain
      content.

      - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

      - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
      enabled. Enforces separation between repeated (cadence) I-frames and I-frames
      inserted by Scene Change Detection. If a scene change I-frame is within I-interval
      frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
      I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
      normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
      Min-I-interval - 1

      - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

      - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

      - **Profile** *(string) --* H.265 Profile.

      - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
      encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
      quality level field and Max bitrate field that suit your most important viewing
      devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
      bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
      Quality level: 6. Max bitrate: 1M to 1.5M

      - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
      specified quality level except when it is constrained by the maximum bitrate.
      Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
      on the video complexity. Recommended only if you distribute your assets to devices
      that cannot handle variable bitrates.

      - **ScanType** *(string) --* Sets the scan type of the output to progressive or
      top-field-first interlaced.

      - **SceneChangeDetect** *(string) --* Scene change detection.

      - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
      to the number of macroblock rows for progressive pictures, and less than or equal to
      half the number of macroblock rows for interlaced pictures. This field is optional;
      when no value is specified the encoder will choose the number of slices based on
      encode resolution.

      - **Tier** *(string) --* H.265 Tier.

      - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
      into the video elementary stream. - 'disabled': Do not include timecodes -
      'picTimingSei': Pass through picture timing SEI messages from the source specified in
      Timecode Config
    """


_ClientStartChannelResponseEncoderSettingsVideoDescriptionsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsVideoDescriptionsTypeDef",
    {
        "CodecSettings": ClientStartChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef,
        "Height": int,
        "Name": str,
        "RespondToAfd": str,
        "ScalingBehavior": str,
        "Sharpness": int,
        "Width": int,
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsVideoDescriptionsTypeDef(
    _ClientStartChannelResponseEncoderSettingsVideoDescriptionsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseEncoderSettings` `VideoDescriptions`

    - **CodecSettings** *(dict) --* Video codec settings.

      - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

        - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
        for inclusion in the output. For example, "10" means capture a frame every 10 seconds.

      - **H264Settings** *(dict) --* H264 Settings

        - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
        quantizers to vary to improve visual quality.

        - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
        output stream. If afdSignaling is "auto", the system will try to preserve the input
        AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
        value will be the value configured in the fixedAfd parameter.

        - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
        control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
        output must have a unique value when its bitrate is rounded down to the nearest
        multiple of 1000.

        - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
        filled (HRD buffer model).

        - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

        - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

        - **ColorSpaceSettings** *(dict) --* Color Space settings

          - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
          conversion to the output

          - **Rec601Settings** *(dict) --* Rec601 Settings

          - **Rec709Settings** *(dict) --* Rec709 Settings

        - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
        or High profile) or cavlc.

        - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
        the output stream. Only valid when afdSignaling is set to 'Fixed'.

        - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
        frame to reduce flicker or 'pop' on I-frames.

        - **FramerateControl** *(string) --* This field indicates how the output video frame
        rate is specified. If "specified" is selected then the output video frame rate is
        determined by framerateNumerator and framerateDenominator, else if
        "initializeFromSource" is selected then the output video frame rate will be set equal
        to the input video frame rate of the first input.

        - **FramerateDenominator** *(integer) --* Framerate denominator.

        - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
        fraction, e.g. 24000 / 1001 = 23.976 fps.

        - **GopBReference** *(string) --* Documentation update needed

        - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
        applications, it is recommended that this be set to 1 so a decoder joining mid-stream
        will receive an IDR frame as quickly as possible. Setting this value to 0 will break
        output segmenting.

        - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

        - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
        seconds per gopSizeUnits. Must be greater than zero.

        - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
        seconds. If seconds the system will convert the gopSize into a frame count at run
        time.

        - **Level** *(string) --* H.264 Level.

        - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
        decrease latency and memory usage, while high can produce better quality for certain
        content.

        - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
        Set the maximum bitrate in order to accommodate expected spikes in the complexity of
        the video.

        - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
        enabled. Enforces separation between repeated (cadence) I-frames and I-frames
        inserted by Scene Change Detection. If a scene change I-frame is within I-interval
        frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
        I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
        normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
        Min-I-interval - 1

        - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
        use more than requested if using B-frames and/or interlaced encoding.

        - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
        is specified. If "specified" is selected then the output video pixel aspect ratio is
        determined by parNumerator and parDenominator, else if "initializeFromSource" is
        selected then the output pixsel aspect ratio will be set equal to the input video
        pixel aspect ratio of the first input.

        - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

        - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

        - **Profile** *(string) --* H.264 Profile.

        - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
        encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
        quality level field and Max bitrate field that suit your most important viewing
        devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
        bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
        Quality level: 6. Max bitrate: 1M to 1.5M

        - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
        specified quality level except when it is constrained by the maximum bitrate.
        Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
        depending on the video complexity. Recommended instead of QVBR if you want to
        maintain a specific average bitrate over the duration of the channel. CBR: Quality
        varies, depending on the video complexity. Recommended only if you distribute your
        assets to devices that cannot handle variable bitrates.

        - **ScanType** *(string) --* Sets the scan type of the output to progressive or
        top-field-first interlaced.

        - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
        when scene change is detected. - Off: does not force an I-frame when scene change is
        detected.

        - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
        to the number of macroblock rows for progressive pictures, and less than or equal to
        half the number of macroblock rows for interlaced pictures. This field is optional;
        when no value is specified the encoder will choose the number of slices based on
        encode resolution.

        - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
        reduce high-frequency content in the encoded image.

        - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
        frame based on spatial variation of content complexity.

        - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
        sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
        improve visual quality.

        - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

        - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
        frame based on temporal variation of content complexity.

        - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
        into the video elementary stream. - 'disabled': Do not include timecodes -
        'picTimingSei': Pass through picture timing SEI messages from the source specified in
        Timecode Config

      - **H265Settings** *(dict) --* H265 Settings

        - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
        quantizers to vary to improve visual quality.

        - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
        output stream. If afdSignaling is "auto", the system will try to preserve the input
        AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
        value will be the value configured in the fixedAfd parameter.

        - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
        Alternative Transfer Function SEI message to support backwards compatibility with
        non-HDR decoders and displays.

        - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
        control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
        output must have a unique value when its bitrate is rounded down to the nearest
        multiple of 1000.

        - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

        - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

        - **ColorSpaceSettings** *(dict) --* Color Space settings

          - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
          conversion to the output

          - **Hdr10Settings** *(dict) --* Hdr10 Settings

            - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
            defining the maximum light level, in nits, of any single pixel within an encoded
            HDR video stream or file.

            - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
            metadata value defining the maximum average light level, in nits, for any single
            frame within an encoded HDR video stream or file.

          - **Rec601Settings** *(dict) --* Rec601 Settings

          - **Rec709Settings** *(dict) --* Rec709 Settings

        - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
        the output stream. Only valid when afdSignaling is set to 'Fixed'.

        - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
        frame to reduce flicker or 'pop' on I-frames.

        - **FramerateDenominator** *(integer) --* Framerate denominator.

        - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
        fraction, e.g. 24000 / 1001 = 23.976 fps.

        - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
        applications, it is recommended that this be set to 1 so a decoder joining mid-stream
        will receive an IDR frame as quickly as possible. Setting this value to 0 will break
        output segmenting.

        - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
        seconds per gopSizeUnits. Must be greater than zero.

        - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
        seconds. If seconds the system will convert the gopSize into a frame count at run
        time.

        - **Level** *(string) --* H.265 Level.

        - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
        decrease latency and memory usage, while high can produce better quality for certain
        content.

        - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

        - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
        enabled. Enforces separation between repeated (cadence) I-frames and I-frames
        inserted by Scene Change Detection. If a scene change I-frame is within I-interval
        frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
        I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
        normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
        Min-I-interval - 1

        - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

        - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

        - **Profile** *(string) --* H.265 Profile.

        - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
        encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
        quality level field and Max bitrate field that suit your most important viewing
        devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
        bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
        Quality level: 6. Max bitrate: 1M to 1.5M

        - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
        specified quality level except when it is constrained by the maximum bitrate.
        Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
        on the video complexity. Recommended only if you distribute your assets to devices
        that cannot handle variable bitrates.

        - **ScanType** *(string) --* Sets the scan type of the output to progressive or
        top-field-first interlaced.

        - **SceneChangeDetect** *(string) --* Scene change detection.

        - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
        to the number of macroblock rows for progressive pictures, and less than or equal to
        half the number of macroblock rows for interlaced pictures. This field is optional;
        when no value is specified the encoder will choose the number of slices based on
        encode resolution.

        - **Tier** *(string) --* H.265 Tier.

        - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
        into the video elementary stream. - 'disabled': Do not include timecodes -
        'picTimingSei': Pass through picture timing SEI messages from the source specified in
        Timecode Config

    - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
    most codecs, you can leave this field and width blank in order to use the height and
    width (resolution) from the source. Note, however, that leaving blank is not recommended.
    For the Frame Capture codec, height and width are required.

    - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to
    uniquely identify this Description. Description names should be unique within this Live
    Event.

    - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the input
    stream. RESPOND causes input video to be clipped, depending on the AFD value, input
    display aspect ratio, and output display aspect ratio, and (except for FRAMECAPTURE
    codec) includes the values in the output. PASSTHROUGH (does not apply to FRAMECAPTURE
    codec) ignores the AFD values and includes the values in the output, so input video is
    not clipped. NONE ignores the AFD values and does not include the values through to the
    output, so input video is not clipped.

    - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
    stretch the video to the specified output resolution (height and width). This option will
    override any position value. DEFAULT may insert black boxes (pillar boxes or letter
    boxes) around the video to provide the specified output resolution.

    - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
    scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
    for most content.

    - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
    most codecs, you can leave this field and height blank in order to use the height and
    width (resolution) from the source. Note, however, that leaving blank is not recommended.
    For the Frame Capture codec, height and width are required.
    """


_ClientStartChannelResponseEncoderSettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseEncoderSettingsTypeDef",
    {
        "AudioDescriptions": List[
            ClientStartChannelResponseEncoderSettingsAudioDescriptionsTypeDef
        ],
        "AvailBlanking": ClientStartChannelResponseEncoderSettingsAvailBlankingTypeDef,
        "AvailConfiguration": ClientStartChannelResponseEncoderSettingsAvailConfigurationTypeDef,
        "BlackoutSlate": ClientStartChannelResponseEncoderSettingsBlackoutSlateTypeDef,
        "CaptionDescriptions": List[Dict],
        "GlobalConfiguration": Dict[str, Any],
        "OutputGroups": List[Dict],
        "TimecodeConfig": Dict[str, Any],
        "VideoDescriptions": List[
            ClientStartChannelResponseEncoderSettingsVideoDescriptionsTypeDef
        ],
    },
    total=False,
)


class ClientStartChannelResponseEncoderSettingsTypeDef(
    _ClientStartChannelResponseEncoderSettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponse` `EncoderSettings`

    - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

      - *(dict) --* Audio Description

        - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

          - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
          to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

          - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
          corrected using the chosen algorithm. If set to measureOnly, the audio will be measured
          but not adjusted.

          - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
          entered, a default value will be used according to the chosen algorithm. The CALM Act
          (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
          recommends a target of -23 LKFS.

        - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
        for this AudioDescription.

        - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
        values for audioType are defined in ISO-IEC 13818-1.

        - **AudioTypeControl** *(string) --* Determines how audio type is determined.
        followInput: If the input contains an ISO 639 audioType, then that value is passed
        through to the output. If the input contains no ISO 639 audioType, the value in Audio
        Type is included in the output. useConfigured: The value in Audio Type is included in the
        output. Note that this field and audioType are both ignored if inputType is
        broadcasterMixedAd.

        - **CodecSettings** *(dict) --* Audio codec settings.

          - **AacSettings** *(dict) --* Aac Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
            rate control mode and profile.

            - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
            depend on rate control mode and profile. The adReceiverMix setting receives a stereo
            description plus control track and emits a mono AAC encode of the description track,
            with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

            - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
            pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
            (audioType) will be set to 3, which signals to downstream systems that this stream
            contains "broadcaster mixed AD". Note that the input received by the encoder must
            contain pre-mixed audio; the encoder does not perform the mixing. The values in
            audioTypeControl and audioType (in AudioDescription) are ignored when set to
            broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
            + AD.

            - **Profile** *(string) --* AAC Profile.

            - **RateControlMode** *(string) --* Rate Control Mode.

            - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

            - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
            mode and profile.

            - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
            MPEG-2 Transport Stream containers.

            - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
            VBR.

          - **Ac3Settings** *(dict) --* Ac3 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
            the coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
            emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

            - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
            channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
            audio is Dolby Digital, dialnorm will be passed through.

            - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
            signaling to the output bitstream as defined in the Dolby Digital specification.

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
            the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

            - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
            be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
            audio was not supplied from one of these streams, then the static metadata settings
            will be used.

          - **Eac3Settings** *(dict) --* Eac3 Settings

            - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
            attenuation to the surround channels. Only used for 3/2 coding mode.

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
            the coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
            emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

            - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
            channels.

            - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
            all input channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
            audio is Dolby Digital Plus, dialnorm will be passed through.

            - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

            - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
            ensures that the instantaneous signal peaks do not exceed specified levels.

            - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
            LFE channel

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
            the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

            - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
            used for 3/2 coding mode.

            - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
            used for 3/2 coding mode.

            - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
            used for 3/2 coding mode.

            - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
            Only used for 3/2 coding mode.

            - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
            sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
            was not supplied from one of these streams, then the static metadata settings will be
            used.

            - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
            be passed through if it is present on the input. This detection is dynamic over the
            life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
            have a consistent DD+ output as the system alternates between passthrough and
            encoding.

            - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
            phase shift to the surround channels. Only used for 3/2 coding mode.

            - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
            mode.

            - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
            center back surround channel is matrix encoded into the left and right surround
            channels.

            - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
            is matrix encoded into the two channels.

          - **Mp2Settings** *(dict) --* Mp2 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second.

            - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
            codingMode10 (for mono) or codingMode20 (for stereo).

            - **SampleRate** *(float) --* Sample rate in Hz.

          - **PassThroughSettings** *(dict) --* Pass Through Settings

        - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
        used if languageControlMode is useConfigured, or there is no ISO 639 language code
        specified in the input.

        - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
        language code of the output to follow the ISO 639 language code of the input. The
        languageCode will be used when useConfigured is set, or when followInput is selected but
        there is no ISO 639 language code specified by the input.

        - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to
        uniquely identify this AudioDescription. Description names should be unique within this
        Live Event.

        - **RemixSettings** *(dict) --* Settings that control how input audio channels are
        remixed into the output audio channels.

          - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
          appropriate gain adjustments.

            - *(dict) --* Audio Channel Mapping

              - **InputChannelLevels** *(list) --* Indices and gain values for each input channel
              that should be remixed into this output channel.

                - *(dict) --* Input Channel Level

                  - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values
                  are within the range from -60 (mute) and 6 dB.

                  - **InputChannel** *(integer) --* The index of the input channel used as a
                  source.

              - **OutputChannel** *(integer) --* The index of the output channel being produced.

          - **ChannelsIn** *(integer) --* Number of input channels to be used.

          - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
          values: 1, 2, 4, 6, 8

        - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
        name displayed by the player (eg. English, or Director Commentary).

    - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

      - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
      black. Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be
      blanked when insertion metadata is added.

    - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.

      - **AvailSettings** *(dict) --* Ad avail settings.

        - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
          added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
          messages and does not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
          noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
          webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
          added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
          messages and does not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
          noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
          webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **BlackoutSlate** *(dict) --* Settings for blackout slate.

      - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid
      black. Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
      the video, audio, and captions, and raise the "Network Blackout Image" slate when an
      SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted
      when the Network Start Segmentation Descriptor is encountered. The Network End and Network
      Start descriptors must contain a network ID that matches the value entered in "Network ID".

      - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout
      image. Image will be scaled to fill the entire output raster.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
      "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be
      blanked when indicated by program metadata.

    - **CaptionDescriptions** *(list) --* Settings for caption decriptions

      - *(dict) --* Output groups for this Live Event. Output groups contain information about
      where streams should be distributed.

        - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use as
        a caption source when generating output captions. This field should match a
        captionSelector name.

        - **DestinationSettings** *(dict) --* Additional settings for captions destination that
        depend on the destination type.

          - **AribDestinationSettings** *(dict) --* Arib Destination Settings

          - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
            setting alignment to centered will place the captions at the bottom center of the
            output. Similarly, setting a left alignment will align captions to the bottom left of
            the output. If x and y positions are given in conjunction with the alignment
            parameter, the font will be justified (either left or centered) relative to those
            coordinates. Selecting "smart" justification will left-justify live subtitles and
            center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
            match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
            rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent
            to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension
            must be 'ttf' or 'tte'. Although the user can select output fonts for many different
            types of input captions, embedded, STL and teletext sources use a strict grid system.
            Using external fonts with these caption sources could cause unexpected display of
            proportional fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2
              Parameter store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
              file accessible to the Live system (eg. a http:// URI) depending on the output
              type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
            option is not valid for source captions that are STL, 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255
            is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
            is 96 dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the
            size of the output. Giving a positive integer will specify the exact font size in
            points. All burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not
            valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
            is not valid for source captions that are either 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
            captions. All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
            opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0
            (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels to the left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels above the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
            used to generate the output subtitles bitmap. Only applicable for Teletext inputs and
            DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption
            relative to the left side of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the left of the output. If no explicit xPosition is
            provided, the horizontal caption position will be determined by the alignment
            parameter. All burn-in and DVB-Sub font settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption
            relative to the top of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the top of the output. If no explicit yPosition is
            provided, the caption will be positioned towards the bottom of the output. All
            burn-in and DVB-Sub font settings must match.

          - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
            setting alignment to centered will place the captions at the bottom center of the
            output. Similarly, setting a left alignment will align captions to the bottom left of
            the output. If x and y positions are given in conjunction with the alignment
            parameter, the font will be justified (either left or centered) relative to those
            coordinates. Selecting "smart" justification will left-justify live subtitles and
            center-justify pre-recorded subtitles. This option is not valid for source captions
            that are STL or 608/embedded. These source settings are already pre-defined by the
            caption stream. All burn-in and DVB-Sub font settings must match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
            rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
            equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
            must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension
            must be 'ttf' or 'tte'. Although the user can select output fonts for many different
            types of input captions, embedded, STL and teletext sources use a strict grid system.
            Using external fonts with these caption sources could cause unexpected display of
            proportional fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2
              Parameter store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
              file accessible to the Live system (eg. a http:// URI) depending on the output
              type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
            option is not valid for source captions that are STL, 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255
            is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
            is 96 dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
            size of the output. Giving a positive integer will specify the exact font size in
            points. All burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not
            valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
            is not valid for source captions that are either 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
            captions. All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
            opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to
            0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels to the left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels above the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
            used to generate the output subtitles bitmap. Only applicable for Teletext inputs and
            DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption
            relative to the left side of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the left of the output. If no explicit xPosition is
            provided, the horizontal caption position will be determined by the alignment
            parameter. This option is not valid for source captions that are STL, 608/embedded or
            teletext. These source settings are already pre-defined by the caption stream. All
            burn-in and DVB-Sub font settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption
            relative to the top of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the top of the output. If no explicit yPosition is
            provided, the caption will be positioned towards the bottom of the output. This
            option is not valid for source captions that are STL, 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

          - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

          - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
          Destination Settings

          - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
          Settings

          - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
          Destination Settings

          - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

          - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

          - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

          - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

            - **StyleControl** *(string) --* When set to passthrough, passes through style and
            position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
            CFF-TT output or TTML output.

          - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

        - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
        http://www.loc.gov/standards/iso639-2/

        - **LanguageDescription** *(string) --* Human readable information to indicate captions
        available for players (eg. English, or Spanish).

        - **Name** *(string) --* Name of the caption description. Used to associate a caption
        description with an output. Names must be unique within an event.

    - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
    whole.

      - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
      Event.

      - **InputEndAction** *(string) --* Indicates the action to take when the current input
      completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
      restart at the beginning of the first input. When "none" is configured the encoder will
      transcode either black, a solid color, or a user specified slate images per the "Input Loss
      Behavior" configuration until the next input switch occurs (which is controlled through the
      Channel Schedule API).

      - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

        - **BlackFrameMsec** *(integer) --* Documentation update needed

        - **InputLossImageColor** *(string) --* When input loss image type is "color" this field
        specifies the color to use. Value: 6 hex characters representing the values of RGB.

        - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields
        specify the parameters for accessing the slate.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a
        slate into the output after input loss exceeds blackFrameMsec.

        - **RepeatFrameMsec** *(integer) --* Documentation update needed

      - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
      PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to the
      other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each pipeline to
      the Unix epoch.

      - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the
      Live encoder should be paced by its system clock (which optionally may be locked to another
      source via NTP) or should be locked to the clock of the source that is providing the input
      stream.

      - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
      very low video framerates. This is commonly set to enabled for music channels with less
      than one video frame per second.

    - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

      - *(dict) --* Output groups for this Live Event. Output groups contain information about
      where streams should be distributed.

        - **Name** *(string) --* Custom output group name optionally defined by the user. Only
        letters, numbers, and the underscore character allowed; only 32 characters allowed.

        - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

          - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

            - **Destination** *(dict) --* A directory and base filename where archive files
            should be written.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
            before closing and starting a new one.

          - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

            - **Destination** *(dict) --* The destination for the frame capture files. Either the
            URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
            s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
            container, plus a file name prefix (for example,
            mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
            the prefix from the destination field (for example, "curling_") + name modifier + the
            counter (5 digits, starting from 00001) + extension (which is always .jpg). For
            example, curlingLow.00001.jpg

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **HlsGroupSettings** *(dict) --* Hls Group Settings

            - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals
            through to this group of Apple HLS outputs.

              - *(string) --* Hls Ad Markers

            - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
            each output in the media .m3u8 file. Can be used if base manifest is delivered from a
            different URL than the main .m3u8 file.

            - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
            each output in the media .m3u8 file. Can be used if base manifest is delivered from a
            different URL than the main .m3u8 file.

            - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
            caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

              - *(dict) --* Maps a caption channel to an ISO 693-2 language code
              (http://www.loc.gov/standards/iso639-2), with an optional description.

                - **CaptionChannel** *(integer) --* The closed caption channel being described by
                this CaptionLanguageMapping. Each channel mapping must have a unique channel
                number (maximum of 4)

                - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                http://www.loc.gov/standards/iso639-2)

                - **LanguageDescription** *(string) --* Textual description of language

            - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
            captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one
            language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each
            Language Code you specify. Make sure to specify the languages in the order in which
            they appear in the original source (if the source is embedded format) or the order of
            the caption selectors (if the source is other than embedded). Otherwise, languages in
            the manifest will not match up properly with the output captions. none: Include
            CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from
            the manifest.

            - **ClientCache** *(string) --* When set to "disabled", sets the
            #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
            segments for later replay.

            - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default
            RFC-4281) during m3u8 playlist generation.

            - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
            16-byte hex value represented by a 32-character text string. If ivSource is set to
            "explicit" then this parameter is required and is used as the IV for encryption.

            - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
            manifest files, and encryption keys (if enabled).

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **DirectoryStructure** *(string) --* Place segments in subdirectories.

            - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
            scheme. Exclude this parameter if no encryption is desired.

            - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

              - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                transfer encoding to Akamai. User should contact Akamai to enable this feature.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                to wait until a restart is initiated. A value of 0 means never restart.

                - **Salt** *(string) --* Salt for authenticated Akamai.

                - **Token** *(string) --* Token parameter for authenticated akamai. If not
                specified, _gda_ is used.

              - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                to wait until a restart is initiated. A value of 0 means never restart.

              - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are
                stored in non-persistent memory for faster reading and writing.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                to wait until a restart is initiated. A value of 0 means never restart.

              - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                transfer encoding to WebDAV.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                to wait until a restart is initiated. A value of 0 means never restart.

            - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
            manifest, but do create the master and media manifests (according to the Output
            Selection field). STANDARD: Create an I-frame-only manifest for each output that
            contains video, as well as the other manifests (according to the Output Selection
            field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
            I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
            position. For example, #EXT-X-BYTERANGE:160364@1461888"

            - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
            maximum number of segments in the media manifest file. After this maximum, older
            segments are removed from the media manifest. This number must be less than or equal
            to the Keep Segments field.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on
            input loss.

            - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization
            Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
            If set to "include", IV is listed in the manifest, otherwise the IV is not in the
            manifest.

            - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
            Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
            If this setting is "followsSegmentNumber", it will cause the IV to change every
            segment (to match the segment number). If this is set to "explicit", you must enter a
            constantIv value.

            - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
            number of media segments (.ts files) to retain in the destination directory.

            - **KeyFormat** *(string) --* The value specifies how the key is represented in the
            resource identified by the URI. If parameter is absent, an implicit value of
            "identity" is used. A reverse DNS string can also be given.

            - **KeyFormatVersions** *(string) --* Either a single positive integer version value
            or a slash delimited list of version values (1/2/3).

            - **KeyProviderSettings** *(dict) --* The key provider settings.

              - **StaticKeySettings** *(dict) --* Static Key Settings

                - **KeyProviderServer** *(dict) --* The URL of the license server used for
                protecting content.

                  - **PasswordParam** *(string) --* key used to extract the password from EC2
                  Parameter store

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to
                  a file accessible to the Live system (eg. a http:// URI) depending on the
                  output type. For example, a RTMP destination should have a uri simliar to:
                  "rtmp://fmsserver/live".

                  - **Username** *(string) --* Documentation update needed

                - **StaticKeyValue** *(string) --* Static key value as a 32 character hexadecimal
                string.

            - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

            - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
            should use floating point or integer values for segment duration.

            - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
            looking ahead and back within the specified range for a nearby avail and extending
            the segment size if needed.

            - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
            the destination and manifest. If "live", only the number segments specified in
            keepSegments and indexNSegments are kept; newer segments replace older segments,
            which may prevent players from rewinding all the way to the beginning of the event.
            VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
            converting it to a "VOD" type manifest on completion of the stream.

            - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests (master
            manifest, if applicable, and media manifests) for this output group. SEGMENTSONLY:
            Does not generate any manifests for this output group.

            - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag
            in .m3u8 manifest files. The value is calculated as follows: either the program date
            and time are initialized using the input timecode source, or the time is initialized
            using the input timecode source and the date is initialized using the timestampOffset.

            - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
            EXT-X-PROGRAM-DATE-TIME entry, in seconds.

            - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
            each pipeline includes information about both pipelines: first its own media files,
            then the media files of the other pipeline. This feature allows playout device that
            support stale manifest detection to switch from one manifest to the other, when the
            current manifest seems to be stale. There are still two destinations and two master
            manifests, but both master manifests reference the media files from both pipelines.
            DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
            about its own pipeline only. For an HLS output group with MediaPackage as the
            destination, the DISABLED behavior is always followed. MediaPackage regenerates the
            manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

            - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
            create (in seconds). Note that segments will end on the next keyframe after this
            number of seconds, so actual segment length may be longer.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
            subdirectory before starting a new one. directoryStructure must be
            subdirectoryPerStream for this setting to have an effect.

            - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
            video in EXT-X-STREAM-INF tag of variant manifest.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

            - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
            offset to fine tune the timestamps.

            - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
            multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
            program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags
            to index segments for playback. A typical use for this value is when sending the
            output to AWS Elemental MediaConvert, which can accept only a single media file.
            Playback while the channel is running is not guaranteed due to HTTP server caching.

          - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

            - **Destination** *(dict) --* MediaPackage channel destination.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

            - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point Identity"
            element used in each message placed in the sparse track. Only enabled if
            sparseTrackType is not "none".

            - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only
            MS Smooth output, the fragment absolute time will be set to the current timecode.
            This option does not write timecodes to the audio elementary stream.

            - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
            certificate chain to a trusted Certificate Authority (CA). This will cause https
            outputs to self-signed certificates to fail.

            - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
            retrying connection to the IIS server if the connection is lost. Content will be
            cached during this time and the cache will be be delivered to the IIS server once the
            connection is re-established.

            - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
            Elemental Live acts as a "Push" encoder to IIS.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
            only be specified if eventIdMode is set to useConfigured.

            - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
            IIS server. If no event ID is sent and the same Live Event is used without changing
            the publishing point, clients might see cached video from the previous run. Options:
            - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and
            send an event ID based on the current timestamp - "noEventId" - do not send an event
            ID to the IIS server.

            - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
            server when stopping the event

            - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
            outputs.

            - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds).
            Fragment length must be compatible with GOP size and framerate.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on
            input loss.

            - **NumRetries** *(integer) --* Number of retry attempts.

            - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
            to output failure, due to exhausting the numRetries on one segment, or exceeding
            filecacheDuration.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the
            second pipeline.

            - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
            to generate a sparse track in this group of MS-Smooth outputs.

            - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so
            publishing point doesn't start until all streams start.

            - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
            timestampOffsetMode is set to useConfiguredOffset.

            - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
            useEventStartDate: Use the date the event was started as the offset -
            useConfiguredOffset: Use an explicitly configured date as the offset

          - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

            - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting
            with CDN

            - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up.
            If remote origin server stalls the RTMP connection and does not accept content fast
            enough the 'Media Cache' will fill up. When the cache reaches the duration specified
            by cacheLength the cache will stop accepting new content. If set to
            disconnectImmediately, the RTMP output will force a disconnect. Clear the media
            cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
            output will wait up to 5 minutes to allow the origin server to begin accepting data
            again.

            - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
            buffer size.

            - **CaptionData** *(string) --* Controls the types of data that passes to
            onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
            passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608
            data from both fields will be passed. If set to 'field1608' then only the data
            carried in 608 from field 1 video will be passed.

            - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input
            becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput:
            Stop transmitting data until input returns. This does not close the underlying RTMP
            connection.

            - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
            wait until a restart is initiated. A value of 0 means never restart.

          - **UdpGroupSettings** *(dict) --* Udp Group Settings

            - **InputLossAction** *(string) --* Specifies behavior of last resort when input
            video is lost, and no more backup inputs are available. When dropTs is selected the
            entire transport stream will stop being emitted. When dropProgram is selected the
            program can be dropped from the transport stream (and replaced with null packets to
            meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream
            will continue to be produced normally with repeat frames, black frames, or slate
            frames substituted for the absent input video.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

        - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

          - *(dict) --* Output settings. There can be multiple outputs within a group.

            - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
            audio sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
            as caption sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **OutputName** *(string) --* The name used to identify an output.

            - **OutputSettings** *(dict) --* Output type-specific settings.

              - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                - **ContainerSettings** *(dict) --* Settings specific to the container type of
                the file.

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream
                    is removed from the input. This allows the output audio configuration to
                    dynamically change based on input configuration. If this is set to
                    encodeSilence, all output audio streams will output encoded silence when not
                    connected to an active input stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                    muxing and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                    for ARIB Captions will be auto-selected from unused pids. If set to
                    useConfigured, ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                    for Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                    for each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                    stream(s) in the transport stream. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81
                    for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type =
                    0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                    bits per second. Setting to 0 lets the muxer automatically determine the
                    appropriate bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                    model for accurate interleaving. Setting to bufferModel to none can lead to
                    lower latency, but low-memory devices may not be able to play back the stream
                    without interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT)
                    at the specified table repetition interval.

                      - **NetworkId** *(integer) --* The numeric value placed in the Network
                      Information Table (NIT).

                      - **NetworkName** *(string) --* The network name text placed in the
                      networkNameDescriptor inside the Network Information Table. Maximum length
                      is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT)
                    at the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information
                      into output stream. The sdtFollow setting copies SDT information from input
                      stream to output stream. The sdtFollowIfPresent setting copies SDT
                      information from input stream to output stream if SDT information is
                      present in the input, otherwise it will fall back on the user-defined
                      values. The sdtManual setting means user will enter the SDT information.
                      The sdtNone setting means output stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed in
                      the serviceDescriptor in the Service Description Table. Maximum length is
                      256 characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                    specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                    DVB Teletext data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                    input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                    audio EBP markers will be added to partitions 3 and 4. The interval between
                    these additional markers will be fixed, and will be slightly shorter than the
                    video EBP marker interval. Only available when EBP Cablelabs segmentation
                    markers are selected. Partitions 1 and 2 will always follow the video
                    interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                    Points do not come within the specified time interval of each other by
                    looking ahead at input video. If another EBP is going to come in within the
                    specified time interval, the current EBP is not emitted, and the segment is
                    "stretched" to the next marker. The lookahead value does not add latency to
                    the system. The Live Event must be configured elsewhere to create sufficient
                    latency to make the lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If
                    set to videoAndAudioPids, EBP markers will be placed on the video PID and all
                    audio PIDs. If set to videoPid, EBP markers will be placed on only the video
                    PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                    PES header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Platform data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                    Signal data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment. Only
                    used with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                    input source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV
                    data to this output. Multiple values are accepted, and can be entered in
                    ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                    values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or
                    0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a downstream
                    encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between instances
                    of this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                    Reference value is inserted for every Packetized Elementary Stream (PES)
                    header. This parameter is effective only when the PCR PID is the same as the
                    video or audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                    Clock Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                    Reference (PCR) in the transport stream. When no value is given, the encoder
                    will assign the same value as the Video PID. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between instances
                    of this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                    (PMT) in the transport stream. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in the
                    Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                    SCTE-27 data to this output. Multiple values are accepted, and can be entered
                    in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                    input source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                    segmentationTime period. raiSegstart sets the Random Access Indicator bit in
                    the adaptation field. raiAdapt sets the RAI bit and adds the current timecode
                    in the private data bytes. psiSegstart inserts PAT and PMT tables at the
                    start of segments. ebp adds Encoder Boundary Point information to the
                    adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                    ebpLegacy adds Encoder Boundary Point information to the adaptation field
                    using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter
                    controls how segmentation markers are inserted into the transport stream.
                    With avails, it is possible that segments may be truncated, which can
                    influence where future segmentation markers are inserted. When a segmentation
                    style of "resetCadence" is selected and a segment is truncated due to an
                    avail, we will reset the segmentation cadence. This means the subsequent
                    segment will have a duration of $segmentationTime seconds. When a
                    segmentation style of "maintainCadence" is selected and a segment is
                    truncated due to an avail, we will not reset the segmentation cadence. This
                    means the subsequent segment will likely be truncated as well. However, all
                    segments after that will have a duration of $segmentationTime seconds. Note
                    that EBP lookahead is a slight exception to this rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                    metadata will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID
                    field in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                    stream in the transport stream. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Extension** *(string) --* Output file extension. If excluded, this will be
                auto-selected from the container type.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Required for multiple outputs of the same type.

              - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                - **NameModifier** *(string) --* Required if the output group contains more than
                one output. This modifier forms part of the output file name.

              - **HlsOutputSettings** *(dict) --* Hls Output Settings

                - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                settings are different for audio-only outputs.

                  - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                    - **AudioGroupId** *(string) --* Specifies the group to which the audio
                    Rendition belongs.

                    - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                    to use as the cover art for an audio-only output. We recommend a low bit-size
                    file because the image increases the output audio bandwidth. The image is
                    attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as
                    per the "ID3 tag version 2.4.0 - Native Frames" standard.

                      - **PasswordParam** *(string) --* key used to extract the password from EC2
                      Parameter store

                      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                      to a file accessible to the Live system (eg. a http:// URI) depending on
                      the output type. For example, a RTMP destination should have a uri simliar
                      to: "rtmp://fmsserver/live".

                      - **Username** *(string) --* Documentation update needed

                    - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                    supported: Audio-Only Variant Stream The client can play back this audio-only
                    stream instead of video in low-bandwidth scenarios. Represented as an
                    EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default
                    Alternate rendition that the client should try to play back by default.
                    Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES,
                    AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition
                    that the client may try to play back by default. Represented as an
                    EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate
                    Audio, not Auto Select Alternate rendition that the client will not try to
                    play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with
                    DEFAULT=NO, AUTOSELECT=NO

                  - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                    - **AudioRenditionSets** *(string) --* List all the audio groups that are
                    used with the video output stream. Input all the audio GROUP-IDs that are
                    associated to the video, separate by ','.

                    - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                      audio stream(s) in the transport stream. Multiple values are accepted, and
                      can be entered in ranges and/or by comma separation. Can be entered as
                      decimal or hexadecimal values.

                      - **EcmPid** *(string) --* This parameter is unused and deprecated.

                      - **PatInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. A value of \\"0\\"
                      writes out the PMT once per segment file.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                      Clock Reference value is inserted for every Packetized Elementary Stream
                      (PES) header. This parameter is effective only when the PCR PID is the same
                      as the video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock References (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the
                      encoder will assign the same value as the Video PID. Can be entered as a
                      decimal or hexadecimal value.

                      - **PmtInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. A value of \\"0\\"
                      writes out the PMT once per segment file.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                      Table (PMT) in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                      - **ProgramNum** *(integer) --* The value of the program number field in
                      the Program Map Table.

                      - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                      SCTE-35 signals from the input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata is passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                      video stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Accepts \\"Format
                Identifiers\\":#formatIdentifierParameters.

                - **SegmentModifier** *(string) --* String concatenated to end of segment
                filenames.

              - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

              - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                - **H265PackagingType** *(string) --* Only applicable when this output is
                referencing an H.265 video description. Specifies whether MP4 segments should be
                packaged as HEV1 or HVC1.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Required for multiple outputs of the same type.

              - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls
                certificate chain to a trusted Certificate Authority (CA). This will cause rtmps
                outputs with self-signed certificates to fail.

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying a connection to the Flash Media server if the connection is lost.

                - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                rtmp://host/appname). For connection to Akamai, a username and password must be
                supplied. URI fields accept format identifiers.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **NumRetries** *(integer) --* Number of retry attempts.

              - **UdpOutputSettings** *(dict) --* Udp Output Settings

                - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                values increase latency through the transcoder but simultaneously assist the
                transcoder in maintaining a constant, low-jitter UDP/RTP output while
                accommodating clock recovery, input switching, input disruptions, picture
                reordering, etc.

                - **ContainerSettings** *(dict) --* Udp Container Settings

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream
                    is removed from the input. This allows the output audio configuration to
                    dynamically change based on input configuration. If this is set to
                    encodeSilence, all output audio streams will output encoded silence when not
                    connected to an active input stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                    muxing and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                    for ARIB Captions will be auto-selected from unused pids. If set to
                    useConfigured, ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                    for Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                    for each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                    stream(s) in the transport stream. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81
                    for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type =
                    0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                    bits per second. Setting to 0 lets the muxer automatically determine the
                    appropriate bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                    model for accurate interleaving. Setting to bufferModel to none can lead to
                    lower latency, but low-memory devices may not be able to play back the stream
                    without interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT)
                    at the specified table repetition interval.

                      - **NetworkId** *(integer) --* The numeric value placed in the Network
                      Information Table (NIT).

                      - **NetworkName** *(string) --* The network name text placed in the
                      networkNameDescriptor inside the Network Information Table. Maximum length
                      is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT)
                    at the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information
                      into output stream. The sdtFollow setting copies SDT information from input
                      stream to output stream. The sdtFollowIfPresent setting copies SDT
                      information from input stream to output stream if SDT information is
                      present in the input, otherwise it will fall back on the user-defined
                      values. The sdtManual setting means user will enter the SDT information.
                      The sdtNone setting means output stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed in
                      the serviceDescriptor in the Service Description Table. Maximum length is
                      256 characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                    specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                    DVB Teletext data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                    input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                    audio EBP markers will be added to partitions 3 and 4. The interval between
                    these additional markers will be fixed, and will be slightly shorter than the
                    video EBP marker interval. Only available when EBP Cablelabs segmentation
                    markers are selected. Partitions 1 and 2 will always follow the video
                    interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                    Points do not come within the specified time interval of each other by
                    looking ahead at input video. If another EBP is going to come in within the
                    specified time interval, the current EBP is not emitted, and the segment is
                    "stretched" to the next marker. The lookahead value does not add latency to
                    the system. The Live Event must be configured elsewhere to create sufficient
                    latency to make the lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If
                    set to videoAndAudioPids, EBP markers will be placed on the video PID and all
                    audio PIDs. If set to videoPid, EBP markers will be placed on only the video
                    PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                    PES header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Platform data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                    Signal data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment. Only
                    used with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                    input source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV
                    data to this output. Multiple values are accepted, and can be entered in
                    ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                    values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or
                    0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a downstream
                    encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between instances
                    of this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                    Reference value is inserted for every Packetized Elementary Stream (PES)
                    header. This parameter is effective only when the PCR PID is the same as the
                    video or audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                    Clock Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                    Reference (PCR) in the transport stream. When no value is given, the encoder
                    will assign the same value as the Video PID. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between instances
                    of this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                    (PMT) in the transport stream. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in the
                    Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                    SCTE-27 data to this output. Multiple values are accepted, and can be entered
                    in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                    input source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                    segmentationTime period. raiSegstart sets the Random Access Indicator bit in
                    the adaptation field. raiAdapt sets the RAI bit and adds the current timecode
                    in the private data bytes. psiSegstart inserts PAT and PMT tables at the
                    start of segments. ebp adds Encoder Boundary Point information to the
                    adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                    ebpLegacy adds Encoder Boundary Point information to the adaptation field
                    using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter
                    controls how segmentation markers are inserted into the transport stream.
                    With avails, it is possible that segments may be truncated, which can
                    influence where future segmentation markers are inserted. When a segmentation
                    style of "resetCadence" is selected and a segment is truncated due to an
                    avail, we will reset the segmentation cadence. This means the subsequent
                    segment will have a duration of $segmentationTime seconds. When a
                    segmentation style of "maintainCadence" is selected and a segment is
                    truncated due to an avail, we will not reset the segmentation cadence. This
                    means the subsequent segment will likely be truncated as well. However, all
                    segments after that will have a duration of $segmentationTime seconds. Note
                    that EBP lookahead is a slight exception to this rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                    metadata will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID
                    field in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                    stream in the transport stream. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Destination** *(dict) --* Destination address and port number for RTP or UDP
                packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or
                udp://10.100.100.100:5002).

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                Error Correction on UDP outputs.

                  - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                  the FEC protection matrix. The number of transport stream packets per column
                  error correction packet. Must be between 4 and 20, inclusive.

                  - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                  - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the
                  FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC
                  is used, then larger values increase robustness. If Row FEC is used, then this
                  is the number of transport stream packets per row error correction packet, and
                  the value must be between 4 and 20, inclusive, if includeFec is columnAndRow.
                  If includeFec is column, this value must be 1 to 20, inclusive.

            - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the
            source for this output.

    - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
    information from inputs.

      - **Source** *(string) --* Identifies the source for the timecode that will be associated
      with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode
      from the the source. If no embedded timecode is detected in the source, the system falls
      back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time.
      -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.

      - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
      resynchronized to the input timecode. Discrepancies below this threshold are permitted to
      avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not
      specified.

    - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

      - *(dict) --* Video settings for this stream.

        - **CodecSettings** *(dict) --* Video codec settings.

          - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

            - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
            for inclusion in the output. For example, "10" means capture a frame every 10 seconds.

          - **H264Settings** *(dict) --* H264 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input
            AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
            value will be the value configured in the fixedAfd parameter.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
            output must have a unique value when its bitrate is rounded down to the nearest
            multiple of 1000.

            - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
            filled (HRD buffer model).

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
              conversion to the output

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
            or High profile) or cavlc.

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
            the output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
            frame to reduce flicker or 'pop' on I-frames.

            - **FramerateControl** *(string) --* This field indicates how the output video frame
            rate is specified. If "specified" is selected then the output video frame rate is
            determined by framerateNumerator and framerateDenominator, else if
            "initializeFromSource" is selected then the output video frame rate will be set equal
            to the input video frame rate of the first input.

            - **FramerateDenominator** *(integer) --* Framerate denominator.

            - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
            fraction, e.g. 24000 / 1001 = 23.976 fps.

            - **GopBReference** *(string) --* Documentation update needed

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining mid-stream
            will receive an IDR frame as quickly as possible. Setting this value to 0 will break
            output segmenting.

            - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
            seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run
            time.

            - **Level** *(string) --* H.264 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
            decrease latency and memory usage, while high can produce better quality for certain
            content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
            Set the maximum bitrate in order to accommodate expected spikes in the complexity of
            the video.

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
            enabled. Enforces separation between repeated (cadence) I-frames and I-frames
            inserted by Scene Change Detection. If a scene change I-frame is within I-interval
            frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
            I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
            normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
            Min-I-interval - 1

            - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
            use more than requested if using B-frames and/or interlaced encoding.

            - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
            is specified. If "specified" is selected then the output video pixel aspect ratio is
            determined by parNumerator and parDenominator, else if "initializeFromSource" is
            selected then the output pixsel aspect ratio will be set equal to the input video
            pixel aspect ratio of the first input.

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.264 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
            encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
            quality level field and Max bitrate field that suit your most important viewing
            devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
            bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
            Quality level: 6. Max bitrate: 1M to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate.
            Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
            depending on the video complexity. Recommended instead of QVBR if you want to
            maintain a specific average bitrate over the duration of the channel. CBR: Quality
            varies, depending on the video complexity. Recommended only if you distribute your
            assets to devices that cannot handle variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
            when scene change is detected. - Off: does not force an I-frame when scene change is
            detected.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
            to the number of macroblock rows for progressive pictures, and less than or equal to
            half the number of macroblock rows for interlaced pictures. This field is optional;
            when no value is specified the encoder will choose the number of slices based on
            encode resolution.

            - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
            reduce high-frequency content in the encoded image.

            - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
            frame based on spatial variation of content complexity.

            - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
            sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
            improve visual quality.

            - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

            - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
            frame based on temporal variation of content complexity.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
            into the video elementary stream. - 'disabled': Do not include timecodes -
            'picTimingSei': Pass through picture timing SEI messages from the source specified in
            Timecode Config

          - **H265Settings** *(dict) --* H265 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input
            AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
            value will be the value configured in the fixedAfd parameter.

            - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
            Alternative Transfer Function SEI message to support backwards compatibility with
            non-HDR decoders and displays.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
            output must have a unique value when its bitrate is rounded down to the nearest
            multiple of 1000.

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
              conversion to the output

              - **Hdr10Settings** *(dict) --* Hdr10 Settings

                - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
                defining the maximum light level, in nits, of any single pixel within an encoded
                HDR video stream or file.

                - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                metadata value defining the maximum average light level, in nits, for any single
                frame within an encoded HDR video stream or file.

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
            the output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
            frame to reduce flicker or 'pop' on I-frames.

            - **FramerateDenominator** *(integer) --* Framerate denominator.

            - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
            fraction, e.g. 24000 / 1001 = 23.976 fps.

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining mid-stream
            will receive an IDR frame as quickly as possible. Setting this value to 0 will break
            output segmenting.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
            seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run
            time.

            - **Level** *(string) --* H.265 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
            decrease latency and memory usage, while high can produce better quality for certain
            content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
            enabled. Enforces separation between repeated (cadence) I-frames and I-frames
            inserted by Scene Change Detection. If a scene change I-frame is within I-interval
            frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
            I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
            normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
            Min-I-interval - 1

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.265 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
            encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
            quality level field and Max bitrate field that suit your most important viewing
            devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
            bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
            Quality level: 6. Max bitrate: 1M to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate.
            Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
            on the video complexity. Recommended only if you distribute your assets to devices
            that cannot handle variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
            to the number of macroblock rows for progressive pictures, and less than or equal to
            half the number of macroblock rows for interlaced pictures. This field is optional;
            when no value is specified the encoder will choose the number of slices based on
            encode resolution.

            - **Tier** *(string) --* H.265 Tier.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
            into the video elementary stream. - 'disabled': Do not include timecodes -
            'picTimingSei': Pass through picture timing SEI messages from the source specified in
            Timecode Config

        - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
        most codecs, you can leave this field and width blank in order to use the height and
        width (resolution) from the source. Note, however, that leaving blank is not recommended.
        For the Frame Capture codec, height and width are required.

        - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to
        uniquely identify this Description. Description names should be unique within this Live
        Event.

        - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the input
        stream. RESPOND causes input video to be clipped, depending on the AFD value, input
        display aspect ratio, and output display aspect ratio, and (except for FRAMECAPTURE
        codec) includes the values in the output. PASSTHROUGH (does not apply to FRAMECAPTURE
        codec) ignores the AFD values and includes the values in the output, so input video is
        not clipped. NONE ignores the AFD values and does not include the values through to the
        output, so input video is not clipped.

        - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
        stretch the video to the specified output resolution (height and width). This option will
        override any position value. DEFAULT may insert black boxes (pillar boxes or letter
        boxes) around the video to provide the specified output resolution.

        - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
        scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
        for most content.

        - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
        most codecs, you can leave this field and height blank in order to use the height and
        width (resolution) from the source. Note, however, that leaving blank is not recommended.
        For the Frame Capture codec, height and width are required.
    """


_ClientStartChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    {"HlsInputSettings": Dict[str, Any], "ServerValidation": str},
    total=False,
)


class ClientStartChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef(
    _ClientStartChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseInputAttachmentsInputSettings` `NetworkInputSettings`

    - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
    HLS manifest.

      - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH
      that most closely matches this value will be chosen, otherwise the highest bandwidth
      stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in
      an HLS manifest.

      - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
      begin this many buffer segments from the end (most recently written segment). When
      not specified, the HLS input will begin with the first segment specified in the m3u8.

      - **Retries** *(integer) --* The number of consecutive times that attempts to read a
      manifest or segment must fail before the input is considered unavailable.

      - **RetryInterval** *(integer) --* The number of seconds between retries when an
      attempt to read a manifest or segment fails.

    - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
    checkCryptographyOnly, cryptography in the certificate will be checked, but not the
    server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name)
    do not strictly match the corresponding certificate's wildcard pattern and would
    otherwise cause the event to error. This setting is ignored for protocols that do not
    use https.
    """


_ClientStartChannelResponseInputAttachmentsInputSettingsTypeDef = TypedDict(
    "_ClientStartChannelResponseInputAttachmentsInputSettingsTypeDef",
    {
        "AudioSelectors": List[Any],
        "CaptionSelectors": List[Any],
        "DeblockFilter": str,
        "DenoiseFilter": str,
        "FilterStrength": int,
        "InputFilter": str,
        "NetworkInputSettings": ClientStartChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef,
        "SourceEndBehavior": str,
        "VideoSelector": Dict[str, Any],
    },
    total=False,
)


class ClientStartChannelResponseInputAttachmentsInputSettingsTypeDef(
    _ClientStartChannelResponseInputAttachmentsInputSettingsTypeDef
):
    """
    Type definition for `ClientStartChannelResponseInputAttachments` `InputSettings`

    - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
    that have multiple available.

      - *(dict) --* Audio Selector

        - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
        this name to uniquely identify this Selector. Selector names should be unique per
        input.

        - **SelectorSettings** *(dict) --* The audio selector settings.

          - **AudioLanguageSelection** *(dict) --* Audio Language Selection

            - **LanguageCode** *(string) --* Selects a specific three-letter language code
            from within an audio source.

            - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
            stream demux strictly identifies audio streams by their language descriptor. If a
            PMT update occurs such that an audio stream matching the initially selected
            language is no longer present then mute will be encoded until the language
            returns. If "loose", then on a PMT update the demux will choose another audio
            stream in the program with the same stream type if it can't find one with the
            same language.

          - **AudioPidSelection** *(dict) --* Audio Pid Selection

            - **Pid** *(integer) --* Selects a specific PID from within a source.

    - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
    that have multiple available.

      - *(dict) --* Output groups for this Live Event. Output groups contain information
      about where streams should be distributed.

        - **LanguageCode** *(string) --* When specified this field indicates the three letter
        language code of the caption track to extract from the source.

        - **Name** *(string) --* Name identifier for a caption selector. This name is used to
        associate this caption selector with one or more caption descriptions. Names must be
        unique within an event.

        - **SelectorSettings** *(dict) --* Caption selector settings.

          - **AribSourceSettings** *(dict) --* Arib Source Settings

          - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

            - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
            PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
            is passed through, regardless of selectors.

          - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
            via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
            into 708. 708 data present in the source content will be discarded.

            - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
            intermittent and/or non-aligned SCTE-20 and Embedded captions.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
            within the video track from which to extract captions. Unused for passthrough.

            - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

          - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
            via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
            into 708. 708 data present in the source content will be discarded.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
            within the video track from which to extract captions. Unused for passthrough.

          - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

            - **Pid** *(integer) --* The pid field is used in conjunction with the caption
            selector languageCode field as follows: - Specify PID and Language: Extracts
            captions from that PID; the language is "informational". - Specify PID and omit
            Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
            the specified language, whichever PID that happens to be. - Omit PID and omit
            Language: Valid only if source is DVB-Sub that is being passed through; all
            languages will be passed through.

          - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

            - **PageNumber** *(string) --* Specifies the teletext page number within the data
            stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303).
            Unused for passthrough. Should be specified as a hexadecimal string with no "0x"
            prefix.

    - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

    - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

    - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
    to 5 (strongest).

    - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
    the deblocking filter enabled by default. 1) auto - filtering will be applied depending
    on input type/quality 2) disabled - no filtering will be applied to the input 3) forced -
    filtering will be applied regardless of input type

    - **NetworkInputSettings** *(dict) --* Input settings.

      - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
      HLS manifest.

        - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH
        that most closely matches this value will be chosen, otherwise the highest bandwidth
        stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in
        an HLS manifest.

        - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
        begin this many buffer segments from the end (most recently written segment). When
        not specified, the HLS input will begin with the first segment specified in the m3u8.

        - **Retries** *(integer) --* The number of consecutive times that attempts to read a
        manifest or segment must fail before the input is considered unavailable.

        - **RetryInterval** *(integer) --* The number of seconds between retries when an
        attempt to read a manifest or segment fails.

      - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
      checkCryptographyOnly, cryptography in the certificate will be checked, but not the
      server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name)
      do not strictly match the corresponding certificate's wildcard pattern and would
      otherwise cause the event to error. This setting is ignored for protocols that do not
      use https.

    - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
    input to be streamed indefinitely.

    - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input
    types that have multiple available.

      - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
      works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice
      to determine if any conversion will be performed.

      - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
      follow. This field controls how the value in the colorSpace field will be used.
      fallback means that when the input does include color space data, that data will be
      used, but when the input has no color space data, the value in colorSpace will be used.
      Choose fallback if your input is sometimes missing color space data, but when it does
      have color space data, that data is correct. force means to always use the value in
      colorSpace. Choose force if your input usually has no color space data or might have
      unreliable color space data.

      - **SelectorSettings** *(dict) --* The video selector settings.

        - **VideoSelectorPid** *(dict) --* Video Selector Pid

          - **Pid** *(integer) --* Selects a specific PID from within a video source.

        - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

          - **ProgramId** *(integer) --* Selects a specific program from within a
          multi-program transport stream. If the program doesn't exist, the first program
          within the transport stream will be selected by default.
    """


_ClientStartChannelResponseInputAttachmentsTypeDef = TypedDict(
    "_ClientStartChannelResponseInputAttachmentsTypeDef",
    {
        "InputAttachmentName": str,
        "InputId": str,
        "InputSettings": ClientStartChannelResponseInputAttachmentsInputSettingsTypeDef,
    },
    total=False,
)


class ClientStartChannelResponseInputAttachmentsTypeDef(
    _ClientStartChannelResponseInputAttachmentsTypeDef
):
    """
    Type definition for `ClientStartChannelResponse` `InputAttachments`

    - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
    required if the user wants to use this input in an input switch action.

    - **InputId** *(string) --* The ID of the input

    - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

      - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
      that have multiple available.

        - *(dict) --* Audio Selector

          - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
          this name to uniquely identify this Selector. Selector names should be unique per
          input.

          - **SelectorSettings** *(dict) --* The audio selector settings.

            - **AudioLanguageSelection** *(dict) --* Audio Language Selection

              - **LanguageCode** *(string) --* Selects a specific three-letter language code
              from within an audio source.

              - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
              stream demux strictly identifies audio streams by their language descriptor. If a
              PMT update occurs such that an audio stream matching the initially selected
              language is no longer present then mute will be encoded until the language
              returns. If "loose", then on a PMT update the demux will choose another audio
              stream in the program with the same stream type if it can't find one with the
              same language.

            - **AudioPidSelection** *(dict) --* Audio Pid Selection

              - **Pid** *(integer) --* Selects a specific PID from within a source.

      - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
      that have multiple available.

        - *(dict) --* Output groups for this Live Event. Output groups contain information
        about where streams should be distributed.

          - **LanguageCode** *(string) --* When specified this field indicates the three letter
          language code of the caption track to extract from the source.

          - **Name** *(string) --* Name identifier for a caption selector. This name is used to
          associate this caption selector with one or more caption descriptions. Names must be
          unique within an event.

          - **SelectorSettings** *(dict) --* Caption selector settings.

            - **AribSourceSettings** *(dict) --* Arib Source Settings

            - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

              - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
              PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
              is passed through, regardless of selectors.

            - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
              via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
              into 708. 708 data present in the source content will be discarded.

              - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
              intermittent and/or non-aligned SCTE-20 and Embedded captions.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
              within the video track from which to extract captions. Unused for passthrough.

              - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

            - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
              via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
              into 708. 708 data present in the source content will be discarded.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
              within the video track from which to extract captions. Unused for passthrough.

            - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

              - **Pid** *(integer) --* The pid field is used in conjunction with the caption
              selector languageCode field as follows: - Specify PID and Language: Extracts
              captions from that PID; the language is "informational". - Specify PID and omit
              Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
              the specified language, whichever PID that happens to be. - Omit PID and omit
              Language: Valid only if source is DVB-Sub that is being passed through; all
              languages will be passed through.

            - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

              - **PageNumber** *(string) --* Specifies the teletext page number within the data
              stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303).
              Unused for passthrough. Should be specified as a hexadecimal string with no "0x"
              prefix.

      - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

      - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

      - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
      to 5 (strongest).

      - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
      the deblocking filter enabled by default. 1) auto - filtering will be applied depending
      on input type/quality 2) disabled - no filtering will be applied to the input 3) forced -
      filtering will be applied regardless of input type

      - **NetworkInputSettings** *(dict) --* Input settings.

        - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
        HLS manifest.

          - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH
          that most closely matches this value will be chosen, otherwise the highest bandwidth
          stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in
          an HLS manifest.

          - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
          begin this many buffer segments from the end (most recently written segment). When
          not specified, the HLS input will begin with the first segment specified in the m3u8.

          - **Retries** *(integer) --* The number of consecutive times that attempts to read a
          manifest or segment must fail before the input is considered unavailable.

          - **RetryInterval** *(integer) --* The number of seconds between retries when an
          attempt to read a manifest or segment fails.

        - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
        checkCryptographyOnly, cryptography in the certificate will be checked, but not the
        server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name)
        do not strictly match the corresponding certificate's wildcard pattern and would
        otherwise cause the event to error. This setting is ignored for protocols that do not
        use https.

      - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
      input to be streamed indefinitely.

      - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input
      types that have multiple available.

        - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
        works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice
        to determine if any conversion will be performed.

        - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
        follow. This field controls how the value in the colorSpace field will be used.
        fallback means that when the input does include color space data, that data will be
        used, but when the input has no color space data, the value in colorSpace will be used.
        Choose fallback if your input is sometimes missing color space data, but when it does
        have color space data, that data is correct. force means to always use the value in
        colorSpace. Choose force if your input usually has no color space data or might have
        unreliable color space data.

        - **SelectorSettings** *(dict) --* The video selector settings.

          - **VideoSelectorPid** *(dict) --* Video Selector Pid

            - **Pid** *(integer) --* Selects a specific PID from within a video source.

          - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

            - **ProgramId** *(integer) --* Selects a specific program from within a
            multi-program transport stream. If the program doesn't exist, the first program
            within the transport stream will be selected by default.
    """


_ClientStartChannelResponseInputSpecificationTypeDef = TypedDict(
    "_ClientStartChannelResponseInputSpecificationTypeDef",
    {"Codec": str, "MaximumBitrate": str, "Resolution": str},
    total=False,
)


class ClientStartChannelResponseInputSpecificationTypeDef(
    _ClientStartChannelResponseInputSpecificationTypeDef
):
    """
    Type definition for `ClientStartChannelResponse` `InputSpecification`

    - **Codec** *(string) --* Input codec

    - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

    - **Resolution** *(string) --* Input resolution, categorized coarsely
    """


_ClientStartChannelResponsePipelineDetailsTypeDef = TypedDict(
    "_ClientStartChannelResponsePipelineDetailsTypeDef",
    {
        "ActiveInputAttachmentName": str,
        "ActiveInputSwitchActionName": str,
        "PipelineId": str,
    },
    total=False,
)


class ClientStartChannelResponsePipelineDetailsTypeDef(
    _ClientStartChannelResponsePipelineDetailsTypeDef
):
    """
    Type definition for `ClientStartChannelResponse` `PipelineDetails`

    - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
    currently being ingested by this pipeline.

    - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
    action that occurred most recently and that resulted in the switch to the current input
    attachment for this pipeline.

    - **PipelineId** *(string) --* Pipeline ID
    """


_ClientStartChannelResponseTypeDef = TypedDict(
    "_ClientStartChannelResponseTypeDef",
    {
        "Arn": str,
        "ChannelClass": str,
        "Destinations": List[Any],
        "EgressEndpoints": List[ClientStartChannelResponseEgressEndpointsTypeDef],
        "EncoderSettings": ClientStartChannelResponseEncoderSettingsTypeDef,
        "Id": str,
        "InputAttachments": List[ClientStartChannelResponseInputAttachmentsTypeDef],
        "InputSpecification": ClientStartChannelResponseInputSpecificationTypeDef,
        "LogLevel": str,
        "Name": str,
        "PipelineDetails": List[ClientStartChannelResponsePipelineDetailsTypeDef],
        "PipelinesRunningCount": int,
        "RoleArn": str,
        "State": str,
        "Tags": Dict[str, str],
    },
    total=False,
)


class ClientStartChannelResponseTypeDef(_ClientStartChannelResponseTypeDef):
    """
    Type definition for `ClientStartChannel` `Response`

    - **Arn** *(string) --* The unique arn of the channel.

    - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two
    pipelines or SINGLE_PIPELINE for a channel with one pipeline.

    - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there is
    one destination per output. For other types (HLS, for example), there is one destination per
    packager.

      - *(dict) --* Placeholder documentation for OutputDestination

        - **Id** *(string) --* User-specified id. This is used in an output group or an output.

        - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one
        destination for both encoders.

          - *(dict) --* MediaPackage Output Destination Settings

            - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination
            for this output group. You do not need to specify the individual inputs in
            MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to
            the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in
            the same region.

        - **Settings** *(list) --* Destination settings for a standard output; one destination for
        each redundant encoder.

          - *(dict) --* Placeholder documentation for OutputDestinationSettings

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)

            - **Url** *(string) --* A URL specifying a destination

            - **Username** *(string) --* username for destination

    - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from

      - *(dict) --* Placeholder documentation for ChannelEgressEndpoint

        - **SourceIp** *(string) --* Public IP of where a channel's output comes from

    - **EncoderSettings** *(dict) --* Encoder Settings

      - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

        - *(dict) --* Audio Description

          - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

            - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
            to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

            - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
            corrected using the chosen algorithm. If set to measureOnly, the audio will be measured
            but not adjusted.

            - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
            entered, a default value will be used according to the chosen algorithm. The CALM Act
            (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
            recommends a target of -23 LKFS.

          - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
          for this AudioDescription.

          - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
          values for audioType are defined in ISO-IEC 13818-1.

          - **AudioTypeControl** *(string) --* Determines how audio type is determined.
          followInput: If the input contains an ISO 639 audioType, then that value is passed
          through to the output. If the input contains no ISO 639 audioType, the value in Audio
          Type is included in the output. useConfigured: The value in Audio Type is included in the
          output. Note that this field and audioType are both ignored if inputType is
          broadcasterMixedAd.

          - **CodecSettings** *(dict) --* Audio codec settings.

            - **AacSettings** *(dict) --* Aac Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
              rate control mode and profile.

              - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
              depend on rate control mode and profile. The adReceiverMix setting receives a stereo
              description plus control track and emits a mono AAC encode of the description track,
              with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

              - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
              pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
              (audioType) will be set to 3, which signals to downstream systems that this stream
              contains "broadcaster mixed AD". Note that the input received by the encoder must
              contain pre-mixed audio; the encoder does not perform the mixing. The values in
              audioTypeControl and audioType (in AudioDescription) are ignored when set to
              broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
              + AD.

              - **Profile** *(string) --* AAC Profile.

              - **RateControlMode** *(string) --* Rate Control Mode.

              - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

              - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
              mode and profile.

              - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
              MPEG-2 Transport Stream containers.

              - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
              VBR.

            - **Ac3Settings** *(dict) --* Ac3 Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
              the coding mode.

              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
              emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

              - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
              channels.

              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
              audio is Dolby Digital, dialnorm will be passed through.

              - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
              signaling to the output bitstream as defined in the Dolby Digital specification.

              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
              the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

              - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
              be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
              audio was not supplied from one of these streams, then the static metadata settings
              will be used.

            - **Eac3Settings** *(dict) --* Eac3 Settings

              - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
              attenuation to the surround channels. Only used for 3/2 coding mode.

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
              the coding mode.

              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
              emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

              - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
              channels.

              - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
              all input channels.

              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
              audio is Dolby Digital Plus, dialnorm will be passed through.

              - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

              - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
              ensures that the instantaneous signal peaks do not exceed specified levels.

              - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
              LFE channel

              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
              the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

              - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
              used for 3/2 coding mode.

              - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
              used for 3/2 coding mode.

              - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
              used for 3/2 coding mode.

              - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
              Only used for 3/2 coding mode.

              - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
              sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
              was not supplied from one of these streams, then the static metadata settings will be
              used.

              - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
              be passed through if it is present on the input. This detection is dynamic over the
              life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
              have a consistent DD+ output as the system alternates between passthrough and
              encoding.

              - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
              phase shift to the surround channels. Only used for 3/2 coding mode.

              - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
              mode.

              - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
              center back surround channel is matrix encoded into the left and right surround
              channels.

              - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
              is matrix encoded into the two channels.

            - **Mp2Settings** *(dict) --* Mp2 Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second.

              - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
              codingMode10 (for mono) or codingMode20 (for stereo).

              - **SampleRate** *(float) --* Sample rate in Hz.

            - **PassThroughSettings** *(dict) --* Pass Through Settings

          - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
          used if languageControlMode is useConfigured, or there is no ISO 639 language code
          specified in the input.

          - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
          language code of the output to follow the ISO 639 language code of the input. The
          languageCode will be used when useConfigured is set, or when followInput is selected but
          there is no ISO 639 language code specified by the input.

          - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to
          uniquely identify this AudioDescription. Description names should be unique within this
          Live Event.

          - **RemixSettings** *(dict) --* Settings that control how input audio channels are
          remixed into the output audio channels.

            - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
            appropriate gain adjustments.

              - *(dict) --* Audio Channel Mapping

                - **InputChannelLevels** *(list) --* Indices and gain values for each input channel
                that should be remixed into this output channel.

                  - *(dict) --* Input Channel Level

                    - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values
                    are within the range from -60 (mute) and 6 dB.

                    - **InputChannel** *(integer) --* The index of the input channel used as a
                    source.

                - **OutputChannel** *(integer) --* The index of the output channel being produced.

            - **ChannelsIn** *(integer) --* Number of input channels to be used.

            - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
            values: 1, 2, 4, 6, 8

          - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
          name displayed by the player (eg. English, or Director Commentary).

      - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

        - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
        black. Only bmp and png images are supported.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **State** *(string) --* When set to enabled, causes video, audio and captions to be
        blanked when insertion metadata is added.

      - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.

        - **AvailSettings** *(dict) --* Ad avail settings.

          - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
            added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
            messages and does not apply to OOB messages.

            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
            noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
            webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

          - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
            added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
            messages and does not apply to OOB messages.

            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
            noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
            webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **BlackoutSlate** *(dict) --* Settings for blackout slate.

        - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid
        black. Only bmp and png images are supported.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
        the video, audio, and captions, and raise the "Network Blackout Image" slate when an
        SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted
        when the Network Start Segmentation Descriptor is encountered. The Network End and Network
        Start descriptors must contain a network ID that matches the value entered in "Network ID".

        - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout
        image. Image will be scaled to fill the entire output raster.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
        "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

        - **State** *(string) --* When set to enabled, causes video, audio and captions to be
        blanked when indicated by program metadata.

      - **CaptionDescriptions** *(list) --* Settings for caption decriptions

        - *(dict) --* Output groups for this Live Event. Output groups contain information about
        where streams should be distributed.

          - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use as
          a caption source when generating output captions. This field should match a
          captionSelector name.

          - **DestinationSettings** *(dict) --* Additional settings for captions destination that
          depend on the destination type.

            - **AribDestinationSettings** *(dict) --* Arib Destination Settings

            - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
              setting alignment to centered will place the captions at the bottom center of the
              output. Similarly, setting a left alignment will align captions to the bottom left of
              the output. If x and y positions are given in conjunction with the alignment
              parameter, the font will be justified (either left or centered) relative to those
              coordinates. Selecting "smart" justification will left-justify live subtitles and
              center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
              match.

              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
              captions. All burn-in and DVB-Sub font settings must match.

              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
              rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent
              to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.

              - **Font** *(dict) --* External font file used for caption burn-in. File extension
              must be 'ttf' or 'tte'. Although the user can select output fonts for many different
              types of input captions, embedded, STL and teletext sources use a strict grid system.
              Using external fonts with these caption sources could cause unexpected display of
              proportional fonts. All burn-in and DVB-Sub font settings must match.

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                file accessible to the Live system (eg. a http:// URI) depending on the output
                type. For example, a RTMP destination should have a uri simliar to:
                "rtmp://fmsserver/live".

                - **Username** *(string) --* Documentation update needed

              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
              option is not valid for source captions that are STL, 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255
              is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
              is 96 dpi. All burn-in and DVB-Sub font settings must match.

              - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the
              size of the output. Giving a positive integer will specify the exact font size in
              points. All burn-in and DVB-Sub font settings must match.

              - **OutlineColor** *(string) --* Specifies font outline color. This option is not
              valid for source captions that are either 608/embedded or teletext. These source
              settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
              settings must match.

              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
              is not valid for source captions that are either 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
              captions. All burn-in and DVB-Sub font settings must match.

              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
              opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0
              (transparent). All burn-in and DVB-Sub font settings must match.

              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels to the left. All burn-in and DVB-Sub font settings must match.

              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels above the text. All burn-in and DVB-Sub font settings must match.

              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
              used to generate the output subtitles bitmap. Only applicable for Teletext inputs and
              DVB-Sub/Burn-in outputs.

              - **XPosition** *(integer) --* Specifies the horizontal position of the caption
              relative to the left side of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the left of the output. If no explicit xPosition is
              provided, the horizontal caption position will be determined by the alignment
              parameter. All burn-in and DVB-Sub font settings must match.

              - **YPosition** *(integer) --* Specifies the vertical position of the caption
              relative to the top of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the top of the output. If no explicit yPosition is
              provided, the caption will be positioned towards the bottom of the output. All
              burn-in and DVB-Sub font settings must match.

            - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
              setting alignment to centered will place the captions at the bottom center of the
              output. Similarly, setting a left alignment will align captions to the bottom left of
              the output. If x and y positions are given in conjunction with the alignment
              parameter, the font will be justified (either left or centered) relative to those
              coordinates. Selecting "smart" justification will left-justify live subtitles and
              center-justify pre-recorded subtitles. This option is not valid for source captions
              that are STL or 608/embedded. These source settings are already pre-defined by the
              caption stream. All burn-in and DVB-Sub font settings must match.

              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
              captions. All burn-in and DVB-Sub font settings must match.

              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
              rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
              equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
              must match.

              - **Font** *(dict) --* External font file used for caption burn-in. File extension
              must be 'ttf' or 'tte'. Although the user can select output fonts for many different
              types of input captions, embedded, STL and teletext sources use a strict grid system.
              Using external fonts with these caption sources could cause unexpected display of
              proportional fonts. All burn-in and DVB-Sub font settings must match.

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                file accessible to the Live system (eg. a http:// URI) depending on the output
                type. For example, a RTMP destination should have a uri simliar to:
                "rtmp://fmsserver/live".

                - **Username** *(string) --* Documentation update needed

              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
              option is not valid for source captions that are STL, 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255
              is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
              is 96 dpi. All burn-in and DVB-Sub font settings must match.

              - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
              size of the output. Giving a positive integer will specify the exact font size in
              points. All burn-in and DVB-Sub font settings must match.

              - **OutlineColor** *(string) --* Specifies font outline color. This option is not
              valid for source captions that are either 608/embedded or teletext. These source
              settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
              settings must match.

              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
              is not valid for source captions that are either 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
              captions. All burn-in and DVB-Sub font settings must match.

              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
              opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to
              0 (transparent). All burn-in and DVB-Sub font settings must match.

              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels to the left. All burn-in and DVB-Sub font settings must match.

              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels above the text. All burn-in and DVB-Sub font settings must match.

              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
              used to generate the output subtitles bitmap. Only applicable for Teletext inputs and
              DVB-Sub/Burn-in outputs.

              - **XPosition** *(integer) --* Specifies the horizontal position of the caption
              relative to the left side of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the left of the output. If no explicit xPosition is
              provided, the horizontal caption position will be determined by the alignment
              parameter. This option is not valid for source captions that are STL, 608/embedded or
              teletext. These source settings are already pre-defined by the caption stream. All
              burn-in and DVB-Sub font settings must match.

              - **YPosition** *(integer) --* Specifies the vertical position of the caption
              relative to the top of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the top of the output. If no explicit yPosition is
              provided, the caption will be positioned towards the bottom of the output. This
              option is not valid for source captions that are STL, 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

            - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

            - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
            Destination Settings

            - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
            Settings

            - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
            Destination Settings

            - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

            - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

            - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

            - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

              - **StyleControl** *(string) --* When set to passthrough, passes through style and
              position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
              CFF-TT output or TTML output.

            - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

          - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
          http://www.loc.gov/standards/iso639-2/

          - **LanguageDescription** *(string) --* Human readable information to indicate captions
          available for players (eg. English, or Spanish).

          - **Name** *(string) --* Name of the caption description. Used to associate a caption
          description with an output. Names must be unique within an event.

      - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
      whole.

        - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
        Event.

        - **InputEndAction** *(string) --* Indicates the action to take when the current input
        completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
        restart at the beginning of the first input. When "none" is configured the encoder will
        transcode either black, a solid color, or a user specified slate images per the "Input Loss
        Behavior" configuration until the next input switch occurs (which is controlled through the
        Channel Schedule API).

        - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

          - **BlackFrameMsec** *(integer) --* Documentation update needed

          - **InputLossImageColor** *(string) --* When input loss image type is "color" this field
          specifies the color to use. Value: 6 hex characters representing the values of RGB.

          - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields
          specify the parameters for accessing the slate.

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
            accessible to the Live system (eg. a http:// URI) depending on the output type. For
            example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            - **Username** *(string) --* Documentation update needed

          - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a
          slate into the output after input loss exceeds blackFrameMsec.

          - **RepeatFrameMsec** *(integer) --* Documentation update needed

        - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
        PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to the
        other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each pipeline to
        the Unix epoch.

        - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the
        Live encoder should be paced by its system clock (which optionally may be locked to another
        source via NTP) or should be locked to the clock of the source that is providing the input
        stream.

        - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
        very low video framerates. This is commonly set to enabled for music channels with less
        than one video frame per second.

      - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

        - *(dict) --* Output groups for this Live Event. Output groups contain information about
        where streams should be distributed.

          - **Name** *(string) --* Custom output group name optionally defined by the user. Only
          letters, numbers, and the underscore character allowed; only 32 characters allowed.

          - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

            - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

              - **Destination** *(dict) --* A directory and base filename where archive files
              should be written.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
              before closing and starting a new one.

            - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

              - **Destination** *(dict) --* The destination for the frame capture files. Either the
              URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
              s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
              container, plus a file name prefix (for example,
              mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
              the prefix from the destination field (for example, "curling_") + name modifier + the
              counter (5 digits, starting from 00001) + extension (which is always .jpg). For
              example, curlingLow.00001.jpg

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **HlsGroupSettings** *(dict) --* Hls Group Settings

              - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals
              through to this group of Apple HLS outputs.

                - *(string) --* Hls Ad Markers

              - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
              each output in the media .m3u8 file. Can be used if base manifest is delivered from a
              different URL than the main .m3u8 file.

              - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
              each output in the media .m3u8 file. Can be used if base manifest is delivered from a
              different URL than the main .m3u8 file.

              - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
              caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

                - *(dict) --* Maps a caption channel to an ISO 693-2 language code
                (http://www.loc.gov/standards/iso639-2), with an optional description.

                  - **CaptionChannel** *(integer) --* The closed caption channel being described by
                  this CaptionLanguageMapping. Each channel mapping must have a unique channel
                  number (maximum of 4)

                  - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                  http://www.loc.gov/standards/iso639-2)

                  - **LanguageDescription** *(string) --* Textual description of language

              - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
              captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one
              language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each
              Language Code you specify. Make sure to specify the languages in the order in which
              they appear in the original source (if the source is embedded format) or the order of
              the caption selectors (if the source is other than embedded). Otherwise, languages in
              the manifest will not match up properly with the output captions. none: Include
              CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from
              the manifest.

              - **ClientCache** *(string) --* When set to "disabled", sets the
              #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
              segments for later replay.

              - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default
              RFC-4281) during m3u8 playlist generation.

              - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
              16-byte hex value represented by a 32-character text string. If ivSource is set to
              "explicit" then this parameter is required and is used as the IV for encryption.

              - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
              manifest files, and encryption keys (if enabled).

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **DirectoryStructure** *(string) --* Place segments in subdirectories.

              - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
              scheme. Exclude this parameter if no encryption is desired.

              - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

                - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                  transfer encoding to Akamai. User should contact Akamai to enable this feature.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                  the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                  to wait until a restart is initiated. A value of 0 means never restart.

                  - **Salt** *(string) --* Salt for authenticated Akamai.

                  - **Token** *(string) --* Token parameter for authenticated akamai. If not
                  specified, _gda_ is used.

                - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                  the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                  to wait until a restart is initiated. A value of 0 means never restart.

                - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are
                  stored in non-persistent memory for faster reading and writing.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                  the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                  to wait until a restart is initiated. A value of 0 means never restart.

                - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                  transfer encoding to WebDAV.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                  the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                  to wait until a restart is initiated. A value of 0 means never restart.

              - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
              manifest, but do create the master and media manifests (according to the Output
              Selection field). STANDARD: Create an I-frame-only manifest for each output that
              contains video, as well as the other manifests (according to the Output Selection
              field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
              I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
              position. For example, #EXT-X-BYTERANGE:160364@1461888"

              - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
              maximum number of segments in the media manifest file. After this maximum, older
              segments are removed from the media manifest. This number must be less than or equal
              to the Keep Segments field.

              - **InputLossAction** *(string) --* Parameter that control output group behavior on
              input loss.

              - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization
              Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
              If set to "include", IV is listed in the manifest, otherwise the IV is not in the
              manifest.

              - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
              Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
              If this setting is "followsSegmentNumber", it will cause the IV to change every
              segment (to match the segment number). If this is set to "explicit", you must enter a
              constantIv value.

              - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
              number of media segments (.ts files) to retain in the destination directory.

              - **KeyFormat** *(string) --* The value specifies how the key is represented in the
              resource identified by the URI. If parameter is absent, an implicit value of
              "identity" is used. A reverse DNS string can also be given.

              - **KeyFormatVersions** *(string) --* Either a single positive integer version value
              or a slash delimited list of version values (1/2/3).

              - **KeyProviderSettings** *(dict) --* The key provider settings.

                - **StaticKeySettings** *(dict) --* Static Key Settings

                  - **KeyProviderServer** *(dict) --* The URL of the license server used for
                  protecting content.

                    - **PasswordParam** *(string) --* key used to extract the password from EC2
                    Parameter store

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to
                    a file accessible to the Live system (eg. a http:// URI) depending on the
                    output type. For example, a RTMP destination should have a uri simliar to:
                    "rtmp://fmsserver/live".

                    - **Username** *(string) --* Documentation update needed

                  - **StaticKeyValue** *(string) --* Static key value as a 32 character hexadecimal
                  string.

              - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

              - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
              should use floating point or integer values for segment duration.

              - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
              looking ahead and back within the specified range for a nearby avail and extending
              the segment size if needed.

              - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
              the destination and manifest. If "live", only the number segments specified in
              keepSegments and indexNSegments are kept; newer segments replace older segments,
              which may prevent players from rewinding all the way to the beginning of the event.
              VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
              converting it to a "VOD" type manifest on completion of the stream.

              - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests (master
              manifest, if applicable, and media manifests) for this output group. SEGMENTSONLY:
              Does not generate any manifests for this output group.

              - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag
              in .m3u8 manifest files. The value is calculated as follows: either the program date
              and time are initialized using the input timecode source, or the time is initialized
              using the input timecode source and the date is initialized using the timestampOffset.

              - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
              EXT-X-PROGRAM-DATE-TIME entry, in seconds.

              - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
              each pipeline includes information about both pipelines: first its own media files,
              then the media files of the other pipeline. This feature allows playout device that
              support stale manifest detection to switch from one manifest to the other, when the
              current manifest seems to be stale. There are still two destinations and two master
              manifests, but both master manifests reference the media files from both pipelines.
              DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
              about its own pipeline only. For an HLS output group with MediaPackage as the
              destination, the DISABLED behavior is always followed. MediaPackage regenerates the
              manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

              - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
              create (in seconds). Note that segments will end on the next keyframe after this
              number of seconds, so actual segment length may be longer.

              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
              configured segment size is always used.

              - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
              subdirectory before starting a new one. directoryStructure must be
              subdirectoryPerStream for this setting to have an effect.

              - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
              video in EXT-X-STREAM-INF tag of variant manifest.

              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

              - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
              offset to fine tune the timestamps.

              - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
              multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
              program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags
              to index segments for playback. A typical use for this value is when sending the
              output to AWS Elemental MediaConvert, which can accept only a single media file.
              Playback while the channel is running is not guaranteed due to HTTP server caching.

            - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

              - **Destination** *(dict) --* MediaPackage channel destination.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

              - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point Identity"
              element used in each message placed in the sparse track. Only enabled if
              sparseTrackType is not "none".

              - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only
              MS Smooth output, the fragment absolute time will be set to the current timecode.
              This option does not write timecodes to the audio elementary stream.

              - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
              certificate chain to a trusted Certificate Authority (CA). This will cause https
              outputs to self-signed certificates to fail.

              - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
              retrying connection to the IIS server if the connection is lost. Content will be
              cached during this time and the cache will be be delivered to the IIS server once the
              connection is re-established.

              - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
              Elemental Live acts as a "Push" encoder to IIS.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
              only be specified if eventIdMode is set to useConfigured.

              - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
              IIS server. If no event ID is sent and the same Live Event is used without changing
              the publishing point, clients might see cached video from the previous run. Options:
              - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and
              send an event ID based on the current timestamp - "noEventId" - do not send an event
              ID to the IIS server.

              - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
              server when stopping the event

              - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
              outputs.

              - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds).
              Fragment length must be compatible with GOP size and framerate.

              - **InputLossAction** *(string) --* Parameter that control output group behavior on
              input loss.

              - **NumRetries** *(integer) --* Number of retry attempts.

              - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
              to output failure, due to exhausting the numRetries on one segment, or exceeding
              filecacheDuration.

              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
              configured segment size is always used.

              - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the
              second pipeline.

              - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
              to generate a sparse track in this group of MS-Smooth outputs.

              - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so
              publishing point doesn't start until all streams start.

              - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
              timestampOffsetMode is set to useConfiguredOffset.

              - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
              useEventStartDate: Use the date the event was started as the offset -
              useConfiguredOffset: Use an explicitly configured date as the offset

            - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

              - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting
              with CDN

              - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up.
              If remote origin server stalls the RTMP connection and does not accept content fast
              enough the 'Media Cache' will fill up. When the cache reaches the duration specified
              by cacheLength the cache will stop accepting new content. If set to
              disconnectImmediately, the RTMP output will force a disconnect. Clear the media
              cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
              output will wait up to 5 minutes to allow the origin server to begin accepting data
              again.

              - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
              buffer size.

              - **CaptionData** *(string) --* Controls the types of data that passes to
              onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
              passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608
              data from both fields will be passed. If set to 'field1608' then only the data
              carried in 608 from field 1 video will be passed.

              - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input
              becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput:
              Stop transmitting data until input returns. This does not close the underlying RTMP
              connection.

              - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
              wait until a restart is initiated. A value of 0 means never restart.

            - **UdpGroupSettings** *(dict) --* Udp Group Settings

              - **InputLossAction** *(string) --* Specifies behavior of last resort when input
              video is lost, and no more backup inputs are available. When dropTs is selected the
              entire transport stream will stop being emitted. When dropProgram is selected the
              program can be dropped from the transport stream (and replaced with null packets to
              meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream
              will continue to be produced normally with repeat frames, black frames, or slate
              frames substituted for the absent input video.

              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

          - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

            - *(dict) --* Output settings. There can be multiple outputs within a group.

              - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
              audio sources for this output.

                - *(string) --* Placeholder documentation for __string

              - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
              as caption sources for this output.

                - *(string) --* Placeholder documentation for __string

              - **OutputName** *(string) --* The name used to identify an output.

              - **OutputSettings** *(dict) --* Output type-specific settings.

                - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                  - **ContainerSettings** *(dict) --* Settings specific to the container type of
                  the file.

                    - **M2tsSettings** *(dict) --* M2ts Settings

                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                      streams will be removed from the program if the selected input audio stream
                      is removed from the input. This allows the output audio configuration to
                      dynamically change based on input configuration. If this is set to
                      encodeSilence, all output audio streams will output encoded silence when not
                      connected to an active input stream.

                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                      muxing and removes video descriptor.

                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                      for ARIB Captions will be auto-selected from unused pids. If set to
                      useConfigured, ARIB Captions will be on the configured pid number.

                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                      for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                      stream(s) in the transport stream. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81
                      for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type =
                      0x06.

                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                      bits per second. Setting to 0 lets the muxer automatically determine the
                      appropriate bitrate.

                      - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                      model for accurate interleaving. Setting to bufferModel to none can lead to
                      lower latency, but low-memory devices may not be able to play back the stream
                      without interruptions.

                      - **CcDescriptor** *(string) --* When set to enabled, generates
                      captionServiceDescriptor in PMT.

                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT)
                      at the specified table repetition interval.

                        - **NetworkId** *(integer) --* The numeric value placed in the Network
                        Information Table (NIT).

                        - **NetworkName** *(string) --* The network name text placed in the
                        networkNameDescriptor inside the Network Information Table. Maximum length
                        is 256 characters.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT)
                      at the specified table repetition interval.

                        - **OutputSdt** *(string) --* Selects method of inserting SDT information
                        into output stream. The sdtFollow setting copies SDT information from input
                        stream to output stream. The sdtFollowIfPresent setting copies SDT
                        information from input stream to output stream if SDT information is
                        present in the input, otherwise it will fall back on the user-defined
                        values. The sdtManual setting means user will enter the SDT information.
                        The sdtNone setting means output stream will not contain SDT information.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                        - **ServiceName** *(string) --* The service name placed in the
                        serviceDescriptor in the Service Description Table. Maximum length is 256
                        characters.

                        - **ServiceProviderName** *(string) --* The service provider name placed in
                        the serviceDescriptor in the Service Description Table. Maximum length is
                        256 characters.

                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                      Subtitle data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                      specified table repetition interval.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                      DVB Teletext data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                      input source to this output.

                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                      audio EBP markers will be added to partitions 3 and 4. The interval between
                      these additional markers will be fixed, and will be slightly shorter than the
                      video EBP marker interval. Only available when EBP Cablelabs segmentation
                      markers are selected. Partitions 1 and 2 will always follow the video
                      interval.

                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                      Points do not come within the specified time interval of each other by
                      looking ahead at input video. If another EBP is going to come in within the
                      specified time interval, the current EBP is not emitted, and the segment is
                      "stretched" to the next marker. The lookahead value does not add latency to
                      the system. The Live Event must be configured elsewhere to create sufficient
                      latency to make the lookahead accurate.

                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If
                      set to videoAndAudioPids, EBP markers will be placed on the video PID and all
                      audio PIDs. If set to videoPid, EBP markers will be placed on only the video
                      PID.

                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                      PES header.

                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Platform data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                      Signal data to this output. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **FragmentTime** *(float) --* The length in seconds of each fragment. Only
                      used with EBP markers.

                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                      input source to this output.

                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV
                      data to this output. Multiple values are accepted, and can be entered in
                      ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                      values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or
                      0x1ff6).

                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                      packets to insert into the transport stream. This can be used if a downstream
                      encryption system requires periodic null packets.

                      - **PatInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. Valid values are 0, 10..1000.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                      Reference value is inserted for every Packetized Elementary Stream (PES)
                      header. This parameter is effective only when the PCR PID is the same as the
                      video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock Reference (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the encoder
                      will assign the same value as the Video PID. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **PmtInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. Valid values are 0, 10..1000.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                      (PMT) in the transport stream. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **ProgramNum** *(integer) --* The value of the program number field in the
                      Program Map Table.

                      - **RateMode** *(string) --* When vbr, does not insert null packets into
                      transport stream to fill specified bitrate. The bitrate setting acts as the
                      maximum bitrate when vbr is set.

                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                      SCTE-27 data to this output. Multiple values are accepted, and can be entered
                      in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                      input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                      segmentationTime period. raiSegstart sets the Random Access Indicator bit in
                      the adaptation field. raiAdapt sets the RAI bit and adds the current timecode
                      in the private data bytes. psiSegstart inserts PAT and PMT tables at the
                      start of segments. ebp adds Encoder Boundary Point information to the
                      adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                      ebpLegacy adds Encoder Boundary Point information to the adaptation field
                      using a legacy proprietary format.

                      - **SegmentationStyle** *(string) --* The segmentation style parameter
                      controls how segmentation markers are inserted into the transport stream.
                      With avails, it is possible that segments may be truncated, which can
                      influence where future segmentation markers are inserted. When a segmentation
                      style of "resetCadence" is selected and a segment is truncated due to an
                      avail, we will reset the segmentation cadence. This means the subsequent
                      segment will have a duration of $segmentationTime seconds. When a
                      segmentation style of "maintainCadence" is selected and a segment is
                      truncated due to an avail, we will not reset the segmentation cadence. This
                      means the subsequent segment will likely be truncated as well. However, all
                      segments after that will have a duration of $segmentationTime seconds. Note
                      that EBP lookahead is a slight exception to this rule.

                      - **SegmentationTime** *(float) --* The length in seconds of each segment.
                      Required unless markers is set to None_.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata will be passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                      stream in the transport stream. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                  - **Extension** *(string) --* Output file extension. If excluded, this will be
                  auto-selected from the container type.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Required for multiple outputs of the same type.

                - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                  - **NameModifier** *(string) --* Required if the output group contains more than
                  one output. This modifier forms part of the output file name.

                - **HlsOutputSettings** *(dict) --* Hls Output Settings

                  - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                  settings are different for audio-only outputs.

                    - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                      - **AudioGroupId** *(string) --* Specifies the group to which the audio
                      Rendition belongs.

                      - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                      to use as the cover art for an audio-only output. We recommend a low bit-size
                      file because the image increases the output audio bandwidth. The image is
                      attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as
                      per the "ID3 tag version 2.4.0 - Native Frames" standard.

                        - **PasswordParam** *(string) --* key used to extract the password from EC2
                        Parameter store

                        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                        to a file accessible to the Live system (eg. a http:// URI) depending on
                        the output type. For example, a RTMP destination should have a uri simliar
                        to: "rtmp://fmsserver/live".

                        - **Username** *(string) --* Documentation update needed

                      - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                      supported: Audio-Only Variant Stream The client can play back this audio-only
                      stream instead of video in low-bandwidth scenarios. Represented as an
                      EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default
                      Alternate rendition that the client should try to play back by default.
                      Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES,
                      AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition
                      that the client may try to play back by default. Represented as an
                      EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate
                      Audio, not Auto Select Alternate rendition that the client will not try to
                      play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with
                      DEFAULT=NO, AUTOSELECT=NO

                    - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                      - **AudioRenditionSets** *(string) --* List all the audio groups that are
                      used with the video output stream. Input all the audio GROUP-IDs that are
                      associated to the video, separate by ','.

                      - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                        - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                        for each PES packet.

                        - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                        audio stream(s) in the transport stream. Multiple values are accepted, and
                        can be entered in ranges and/or by comma separation. Can be entered as
                        decimal or hexadecimal values.

                        - **EcmPid** *(string) --* This parameter is unused and deprecated.

                        - **PatInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. A value of \\"0\\"
                        writes out the PMT once per segment file.

                        - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                        Clock Reference value is inserted for every Packetized Elementary Stream
                        (PES) header. This parameter is effective only when the PCR PID is the same
                        as the video or audio elementary stream.

                        - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                        Clock References (PCRs) inserted into the transport stream.

                        - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                        Reference (PCR) in the transport stream. When no value is given, the
                        encoder will assign the same value as the Video PID. Can be entered as a
                        decimal or hexadecimal value.

                        - **PmtInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. A value of \\"0\\"
                        writes out the PMT once per segment file.

                        - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                        Table (PMT) in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                        - **ProgramNum** *(integer) --* The value of the program number field in
                        the Program Map Table.

                        - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                        SCTE-35 signals from the input source to this output.

                        - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                        in the transport stream. Can be entered as a decimal or hexadecimal value.

                        - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                        metadata is passed through from input to output.

                        - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                        metadata stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **TransportStreamId** *(integer) --* The value of the transport stream ID
                        field in the Program Map Table.

                        - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                        video stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Accepts \\"Format
                  Identifiers\\":#formatIdentifierParameters.

                  - **SegmentModifier** *(string) --* String concatenated to end of segment
                  filenames.

                - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

                - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                  - **H265PackagingType** *(string) --* Only applicable when this output is
                  referencing an H.265 video description. Specifies whether MP4 segments should be
                  packaged as HEV1 or HVC1.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Required for multiple outputs of the same type.

                - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                  - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls
                  certificate chain to a trusted Certificate Authority (CA). This will cause rtmps
                  outputs with self-signed certificates to fail.

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying a connection to the Flash Media server if the connection is lost.

                  - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                  rtmp://host/appname). For connection to Akamai, a username and password must be
                  supplied. URI fields accept format identifiers.

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                  - **NumRetries** *(integer) --* Number of retry attempts.

                - **UdpOutputSettings** *(dict) --* Udp Output Settings

                  - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                  values increase latency through the transcoder but simultaneously assist the
                  transcoder in maintaining a constant, low-jitter UDP/RTP output while
                  accommodating clock recovery, input switching, input disruptions, picture
                  reordering, etc.

                  - **ContainerSettings** *(dict) --* Udp Container Settings

                    - **M2tsSettings** *(dict) --* M2ts Settings

                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                      streams will be removed from the program if the selected input audio stream
                      is removed from the input. This allows the output audio configuration to
                      dynamically change based on input configuration. If this is set to
                      encodeSilence, all output audio streams will output encoded silence when not
                      connected to an active input stream.

                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                      muxing and removes video descriptor.

                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                      for ARIB Captions will be auto-selected from unused pids. If set to
                      useConfigured, ARIB Captions will be on the configured pid number.

                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                      for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                      stream(s) in the transport stream. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81
                      for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type =
                      0x06.

                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                      bits per second. Setting to 0 lets the muxer automatically determine the
                      appropriate bitrate.

                      - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                      model for accurate interleaving. Setting to bufferModel to none can lead to
                      lower latency, but low-memory devices may not be able to play back the stream
                      without interruptions.

                      - **CcDescriptor** *(string) --* When set to enabled, generates
                      captionServiceDescriptor in PMT.

                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT)
                      at the specified table repetition interval.

                        - **NetworkId** *(integer) --* The numeric value placed in the Network
                        Information Table (NIT).

                        - **NetworkName** *(string) --* The network name text placed in the
                        networkNameDescriptor inside the Network Information Table. Maximum length
                        is 256 characters.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT)
                      at the specified table repetition interval.

                        - **OutputSdt** *(string) --* Selects method of inserting SDT information
                        into output stream. The sdtFollow setting copies SDT information from input
                        stream to output stream. The sdtFollowIfPresent setting copies SDT
                        information from input stream to output stream if SDT information is
                        present in the input, otherwise it will fall back on the user-defined
                        values. The sdtManual setting means user will enter the SDT information.
                        The sdtNone setting means output stream will not contain SDT information.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                        - **ServiceName** *(string) --* The service name placed in the
                        serviceDescriptor in the Service Description Table. Maximum length is 256
                        characters.

                        - **ServiceProviderName** *(string) --* The service provider name placed in
                        the serviceDescriptor in the Service Description Table. Maximum length is
                        256 characters.

                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                      Subtitle data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                      specified table repetition interval.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                      DVB Teletext data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                      input source to this output.

                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                      audio EBP markers will be added to partitions 3 and 4. The interval between
                      these additional markers will be fixed, and will be slightly shorter than the
                      video EBP marker interval. Only available when EBP Cablelabs segmentation
                      markers are selected. Partitions 1 and 2 will always follow the video
                      interval.

                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                      Points do not come within the specified time interval of each other by
                      looking ahead at input video. If another EBP is going to come in within the
                      specified time interval, the current EBP is not emitted, and the segment is
                      "stretched" to the next marker. The lookahead value does not add latency to
                      the system. The Live Event must be configured elsewhere to create sufficient
                      latency to make the lookahead accurate.

                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If
                      set to videoAndAudioPids, EBP markers will be placed on the video PID and all
                      audio PIDs. If set to videoPid, EBP markers will be placed on only the video
                      PID.

                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                      PES header.

                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Platform data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                      Signal data to this output. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **FragmentTime** *(float) --* The length in seconds of each fragment. Only
                      used with EBP markers.

                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                      input source to this output.

                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV
                      data to this output. Multiple values are accepted, and can be entered in
                      ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                      values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or
                      0x1ff6).

                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                      packets to insert into the transport stream. This can be used if a downstream
                      encryption system requires periodic null packets.

                      - **PatInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. Valid values are 0, 10..1000.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                      Reference value is inserted for every Packetized Elementary Stream (PES)
                      header. This parameter is effective only when the PCR PID is the same as the
                      video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock Reference (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the encoder
                      will assign the same value as the Video PID. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **PmtInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. Valid values are 0, 10..1000.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                      (PMT) in the transport stream. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **ProgramNum** *(integer) --* The value of the program number field in the
                      Program Map Table.

                      - **RateMode** *(string) --* When vbr, does not insert null packets into
                      transport stream to fill specified bitrate. The bitrate setting acts as the
                      maximum bitrate when vbr is set.

                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                      SCTE-27 data to this output. Multiple values are accepted, and can be entered
                      in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                      input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                      segmentationTime period. raiSegstart sets the Random Access Indicator bit in
                      the adaptation field. raiAdapt sets the RAI bit and adds the current timecode
                      in the private data bytes. psiSegstart inserts PAT and PMT tables at the
                      start of segments. ebp adds Encoder Boundary Point information to the
                      adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                      ebpLegacy adds Encoder Boundary Point information to the adaptation field
                      using a legacy proprietary format.

                      - **SegmentationStyle** *(string) --* The segmentation style parameter
                      controls how segmentation markers are inserted into the transport stream.
                      With avails, it is possible that segments may be truncated, which can
                      influence where future segmentation markers are inserted. When a segmentation
                      style of "resetCadence" is selected and a segment is truncated due to an
                      avail, we will reset the segmentation cadence. This means the subsequent
                      segment will have a duration of $segmentationTime seconds. When a
                      segmentation style of "maintainCadence" is selected and a segment is
                      truncated due to an avail, we will not reset the segmentation cadence. This
                      means the subsequent segment will likely be truncated as well. However, all
                      segments after that will have a duration of $segmentationTime seconds. Note
                      that EBP lookahead is a slight exception to this rule.

                      - **SegmentationTime** *(float) --* The length in seconds of each segment.
                      Required unless markers is set to None_.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata will be passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                      stream in the transport stream. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                  - **Destination** *(dict) --* Destination address and port number for RTP or UDP
                  packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or
                  udp://10.100.100.100:5002).

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                  - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                  Error Correction on UDP outputs.

                    - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                    the FEC protection matrix. The number of transport stream packets per column
                    error correction packet. Must be between 4 and 20, inclusive.

                    - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                    - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the
                    FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC
                    is used, then larger values increase robustness. If Row FEC is used, then this
                    is the number of transport stream packets per row error correction packet, and
                    the value must be between 4 and 20, inclusive, if includeFec is columnAndRow.
                    If includeFec is column, this value must be 1 to 20, inclusive.

              - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the
              source for this output.

      - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
      information from inputs.

        - **Source** *(string) --* Identifies the source for the timecode that will be associated
        with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode
        from the the source. If no embedded timecode is detected in the source, the system falls
        back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time.
        -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.

        - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
        resynchronized to the input timecode. Discrepancies below this threshold are permitted to
        avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not
        specified.

      - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

        - *(dict) --* Video settings for this stream.

          - **CodecSettings** *(dict) --* Video codec settings.

            - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

              - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
              for inclusion in the output. For example, "10" means capture a frame every 10 seconds.

            - **H264Settings** *(dict) --* H264 Settings

              - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
              quantizers to vary to improve visual quality.

              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
              output stream. If afdSignaling is "auto", the system will try to preserve the input
              AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
              value will be the value configured in the fixedAfd parameter.

              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
              control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
              output must have a unique value when its bitrate is rounded down to the nearest
              multiple of 1000.

              - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
              filled (HRD buffer model).

              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              - **ColorSpaceSettings** *(dict) --* Color Space settings

                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
                conversion to the output

                - **Rec601Settings** *(dict) --* Rec601 Settings

                - **Rec709Settings** *(dict) --* Rec709 Settings

              - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
              or High profile) or cavlc.

              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
              the output stream. Only valid when afdSignaling is set to 'Fixed'.

              - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
              frame to reduce flicker or 'pop' on I-frames.

              - **FramerateControl** *(string) --* This field indicates how the output video frame
              rate is specified. If "specified" is selected then the output video frame rate is
              determined by framerateNumerator and framerateDenominator, else if
              "initializeFromSource" is selected then the output video frame rate will be set equal
              to the input video frame rate of the first input.

              - **FramerateDenominator** *(integer) --* Framerate denominator.

              - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
              fraction, e.g. 24000 / 1001 = 23.976 fps.

              - **GopBReference** *(string) --* Documentation update needed

              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
              applications, it is recommended that this be set to 1 so a decoder joining mid-stream
              will receive an IDR frame as quickly as possible. Setting this value to 0 will break
              output segmenting.

              - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
              seconds per gopSizeUnits. Must be greater than zero.

              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
              seconds. If seconds the system will convert the gopSize into a frame count at run
              time.

              - **Level** *(string) --* H.264 Level.

              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
              decrease latency and memory usage, while high can produce better quality for certain
              content.

              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
              Set the maximum bitrate in order to accommodate expected spikes in the complexity of
              the video.

              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
              enabled. Enforces separation between repeated (cadence) I-frames and I-frames
              inserted by Scene Change Detection. If a scene change I-frame is within I-interval
              frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
              I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
              normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
              Min-I-interval - 1

              - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
              use more than requested if using B-frames and/or interlaced encoding.

              - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
              is specified. If "specified" is selected then the output video pixel aspect ratio is
              determined by parNumerator and parDenominator, else if "initializeFromSource" is
              selected then the output pixsel aspect ratio will be set equal to the input video
              pixel aspect ratio of the first input.

              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              - **Profile** *(string) --* H.264 Profile.

              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
              encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
              quality level field and Max bitrate field that suit your most important viewing
              devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
              bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
              Quality level: 6. Max bitrate: 1M to 1.5M

              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
              specified quality level except when it is constrained by the maximum bitrate.
              Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
              depending on the video complexity. Recommended instead of QVBR if you want to
              maintain a specific average bitrate over the duration of the channel. CBR: Quality
              varies, depending on the video complexity. Recommended only if you distribute your
              assets to devices that cannot handle variable bitrates.

              - **ScanType** *(string) --* Sets the scan type of the output to progressive or
              top-field-first interlaced.

              - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
              when scene change is detected. - Off: does not force an I-frame when scene change is
              detected.

              - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
              to the number of macroblock rows for progressive pictures, and less than or equal to
              half the number of macroblock rows for interlaced pictures. This field is optional;
              when no value is specified the encoder will choose the number of slices based on
              encode resolution.

              - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
              reduce high-frequency content in the encoded image.

              - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
              frame based on spatial variation of content complexity.

              - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
              sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
              improve visual quality.

              - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

              - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
              frame based on temporal variation of content complexity.

              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
              into the video elementary stream. - 'disabled': Do not include timecodes -
              'picTimingSei': Pass through picture timing SEI messages from the source specified in
              Timecode Config

            - **H265Settings** *(dict) --* H265 Settings

              - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
              quantizers to vary to improve visual quality.

              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
              output stream. If afdSignaling is "auto", the system will try to preserve the input
              AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
              value will be the value configured in the fixedAfd parameter.

              - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
              Alternative Transfer Function SEI message to support backwards compatibility with
              non-HDR decoders and displays.

              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
              control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
              output must have a unique value when its bitrate is rounded down to the nearest
              multiple of 1000.

              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              - **ColorSpaceSettings** *(dict) --* Color Space settings

                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
                conversion to the output

                - **Hdr10Settings** *(dict) --* Hdr10 Settings

                  - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
                  defining the maximum light level, in nits, of any single pixel within an encoded
                  HDR video stream or file.

                  - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                  metadata value defining the maximum average light level, in nits, for any single
                  frame within an encoded HDR video stream or file.

                - **Rec601Settings** *(dict) --* Rec601 Settings

                - **Rec709Settings** *(dict) --* Rec709 Settings

              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
              the output stream. Only valid when afdSignaling is set to 'Fixed'.

              - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
              frame to reduce flicker or 'pop' on I-frames.

              - **FramerateDenominator** *(integer) --* Framerate denominator.

              - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
              fraction, e.g. 24000 / 1001 = 23.976 fps.

              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
              applications, it is recommended that this be set to 1 so a decoder joining mid-stream
              will receive an IDR frame as quickly as possible. Setting this value to 0 will break
              output segmenting.

              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
              seconds per gopSizeUnits. Must be greater than zero.

              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
              seconds. If seconds the system will convert the gopSize into a frame count at run
              time.

              - **Level** *(string) --* H.265 Level.

              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
              decrease latency and memory usage, while high can produce better quality for certain
              content.

              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
              enabled. Enforces separation between repeated (cadence) I-frames and I-frames
              inserted by Scene Change Detection. If a scene change I-frame is within I-interval
              frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
              I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
              normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
              Min-I-interval - 1

              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              - **Profile** *(string) --* H.265 Profile.

              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
              encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
              quality level field and Max bitrate field that suit your most important viewing
              devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
              bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
              Quality level: 6. Max bitrate: 1M to 1.5M

              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
              specified quality level except when it is constrained by the maximum bitrate.
              Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
              on the video complexity. Recommended only if you distribute your assets to devices
              that cannot handle variable bitrates.

              - **ScanType** *(string) --* Sets the scan type of the output to progressive or
              top-field-first interlaced.

              - **SceneChangeDetect** *(string) --* Scene change detection.

              - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
              to the number of macroblock rows for progressive pictures, and less than or equal to
              half the number of macroblock rows for interlaced pictures. This field is optional;
              when no value is specified the encoder will choose the number of slices based on
              encode resolution.

              - **Tier** *(string) --* H.265 Tier.

              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
              into the video elementary stream. - 'disabled': Do not include timecodes -
              'picTimingSei': Pass through picture timing SEI messages from the source specified in
              Timecode Config

          - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
          most codecs, you can leave this field and width blank in order to use the height and
          width (resolution) from the source. Note, however, that leaving blank is not recommended.
          For the Frame Capture codec, height and width are required.

          - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to
          uniquely identify this Description. Description names should be unique within this Live
          Event.

          - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the input
          stream. RESPOND causes input video to be clipped, depending on the AFD value, input
          display aspect ratio, and output display aspect ratio, and (except for FRAMECAPTURE
          codec) includes the values in the output. PASSTHROUGH (does not apply to FRAMECAPTURE
          codec) ignores the AFD values and includes the values in the output, so input video is
          not clipped. NONE ignores the AFD values and does not include the values through to the
          output, so input video is not clipped.

          - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
          stretch the video to the specified output resolution (height and width). This option will
          override any position value. DEFAULT may insert black boxes (pillar boxes or letter
          boxes) around the video to provide the specified output resolution.

          - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
          scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
          for most content.

          - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
          most codecs, you can leave this field and height blank in order to use the height and
          width (resolution) from the source. Note, however, that leaving blank is not recommended.
          For the Frame Capture codec, height and width are required.

    - **Id** *(string) --* The unique id of the channel.

    - **InputAttachments** *(list) --* List of input attachments for channel.

      - *(dict) --* Placeholder documentation for InputAttachment

        - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
        required if the user wants to use this input in an input switch action.

        - **InputId** *(string) --* The ID of the input

        - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

          - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
          that have multiple available.

            - *(dict) --* Audio Selector

              - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
              this name to uniquely identify this Selector. Selector names should be unique per
              input.

              - **SelectorSettings** *(dict) --* The audio selector settings.

                - **AudioLanguageSelection** *(dict) --* Audio Language Selection

                  - **LanguageCode** *(string) --* Selects a specific three-letter language code
                  from within an audio source.

                  - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
                  stream demux strictly identifies audio streams by their language descriptor. If a
                  PMT update occurs such that an audio stream matching the initially selected
                  language is no longer present then mute will be encoded until the language
                  returns. If "loose", then on a PMT update the demux will choose another audio
                  stream in the program with the same stream type if it can't find one with the
                  same language.

                - **AudioPidSelection** *(dict) --* Audio Pid Selection

                  - **Pid** *(integer) --* Selects a specific PID from within a source.

          - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
          that have multiple available.

            - *(dict) --* Output groups for this Live Event. Output groups contain information
            about where streams should be distributed.

              - **LanguageCode** *(string) --* When specified this field indicates the three letter
              language code of the caption track to extract from the source.

              - **Name** *(string) --* Name identifier for a caption selector. This name is used to
              associate this caption selector with one or more caption descriptions. Names must be
              unique within an event.

              - **SelectorSettings** *(dict) --* Caption selector settings.

                - **AribSourceSettings** *(dict) --* Arib Source Settings

                - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

                  - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
                  PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
                  is passed through, regardless of selectors.

                - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
                  via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
                  into 708. 708 data present in the source content will be discarded.

                  - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
                  intermittent and/or non-aligned SCTE-20 and Embedded captions.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
                  within the video track from which to extract captions. Unused for passthrough.

                  - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

                - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
                  via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
                  into 708. 708 data present in the source content will be discarded.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
                  within the video track from which to extract captions. Unused for passthrough.

                - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

                  - **Pid** *(integer) --* The pid field is used in conjunction with the caption
                  selector languageCode field as follows: - Specify PID and Language: Extracts
                  captions from that PID; the language is "informational". - Specify PID and omit
                  Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
                  the specified language, whichever PID that happens to be. - Omit PID and omit
                  Language: Valid only if source is DVB-Sub that is being passed through; all
                  languages will be passed through.

                - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

                  - **PageNumber** *(string) --* Specifies the teletext page number within the data
                  stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303).
                  Unused for passthrough. Should be specified as a hexadecimal string with no "0x"
                  prefix.

          - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

          - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

          - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
          to 5 (strongest).

          - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
          the deblocking filter enabled by default. 1) auto - filtering will be applied depending
          on input type/quality 2) disabled - no filtering will be applied to the input 3) forced -
          filtering will be applied regardless of input type

          - **NetworkInputSettings** *(dict) --* Input settings.

            - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
            HLS manifest.

              - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH
              that most closely matches this value will be chosen, otherwise the highest bandwidth
              stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in
              an HLS manifest.

              - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
              begin this many buffer segments from the end (most recently written segment). When
              not specified, the HLS input will begin with the first segment specified in the m3u8.

              - **Retries** *(integer) --* The number of consecutive times that attempts to read a
              manifest or segment must fail before the input is considered unavailable.

              - **RetryInterval** *(integer) --* The number of seconds between retries when an
              attempt to read a manifest or segment fails.

            - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
            checkCryptographyOnly, cryptography in the certificate will be checked, but not the
            server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name)
            do not strictly match the corresponding certificate's wildcard pattern and would
            otherwise cause the event to error. This setting is ignored for protocols that do not
            use https.

          - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
          input to be streamed indefinitely.

          - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input
          types that have multiple available.

            - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
            works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice
            to determine if any conversion will be performed.

            - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
            follow. This field controls how the value in the colorSpace field will be used.
            fallback means that when the input does include color space data, that data will be
            used, but when the input has no color space data, the value in colorSpace will be used.
            Choose fallback if your input is sometimes missing color space data, but when it does
            have color space data, that data is correct. force means to always use the value in
            colorSpace. Choose force if your input usually has no color space data or might have
            unreliable color space data.

            - **SelectorSettings** *(dict) --* The video selector settings.

              - **VideoSelectorPid** *(dict) --* Video Selector Pid

                - **Pid** *(integer) --* Selects a specific PID from within a video source.

              - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

                - **ProgramId** *(integer) --* Selects a specific program from within a
                multi-program transport stream. If the program doesn't exist, the first program
                within the transport stream will be selected by default.

    - **InputSpecification** *(dict) --* Placeholder documentation for InputSpecification

      - **Codec** *(string) --* Input codec

      - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

      - **Resolution** *(string) --* Input resolution, categorized coarsely

    - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.

    - **Name** *(string) --* The name of the channel. (user-mutable)

    - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.

      - *(dict) --* Runtime details of a pipeline when a channel is running.

        - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
        currently being ingested by this pipeline.

        - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
        action that occurred most recently and that resulted in the switch to the current input
        attachment for this pipeline.

        - **PipelineId** *(string) --* Pipeline ID

    - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.

    - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running the
    Channel.

    - **State** *(string) --* Placeholder documentation for ChannelState

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string
    """


_ClientStopChannelResponseEgressEndpointsTypeDef = TypedDict(
    "_ClientStopChannelResponseEgressEndpointsTypeDef", {"SourceIp": str}, total=False
)


class ClientStopChannelResponseEgressEndpointsTypeDef(
    _ClientStopChannelResponseEgressEndpointsTypeDef
):
    """
    Type definition for `ClientStopChannelResponse` `EgressEndpoints`

    - **SourceIp** *(string) --* Public IP of where a channel's output comes from
    """


_ClientStopChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef",
    {"Algorithm": str, "AlgorithmControl": str, "TargetLkfs": float},
    total=False,
)


class ClientStopChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef(
    _ClientStopChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettingsAudioDescriptions` `AudioNormalizationSettings`

    - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
    to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

    - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
    corrected using the chosen algorithm. If set to measureOnly, the audio will be measured
    but not adjusted.

    - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
    entered, a default value will be used according to the chosen algorithm. The CALM Act
    (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
    recommends a target of -23 LKFS.
    """


_ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef",
    {
        "Bitrate": float,
        "CodingMode": str,
        "InputType": str,
        "Profile": str,
        "RateControlMode": str,
        "RawFormat": str,
        "SampleRate": float,
        "Spec": str,
        "VbrQuality": str,
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef(
    _ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettings` `AacSettings`

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
    rate control mode and profile.

    - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
    depend on rate control mode and profile. The adReceiverMix setting receives a stereo
    description plus control track and emits a mono AAC encode of the description track,
    with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

    - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
    pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
    (audioType) will be set to 3, which signals to downstream systems that this stream
    contains "broadcaster mixed AD". Note that the input received by the encoder must
    contain pre-mixed audio; the encoder does not perform the mixing. The values in
    audioTypeControl and audioType (in AudioDescription) are ignored when set to
    broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
    + AD.

    - **Profile** *(string) --* AAC Profile.

    - **RateControlMode** *(string) --* Rate Control Mode.

    - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

    - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
    mode and profile.

    - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
    MPEG-2 Transport Stream containers.

    - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
    VBR.
    """


_ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef",
    {
        "Bitrate": float,
        "BitstreamMode": str,
        "CodingMode": str,
        "Dialnorm": int,
        "DrcProfile": str,
        "LfeFilter": str,
        "MetadataControl": str,
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef(
    _ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettings` `Ac3Settings`

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
    the coding mode.

    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
    emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

    - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
    channels.

    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
    audio is Dolby Digital, dialnorm will be passed through.

    - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
    signaling to the output bitstream as defined in the Dolby Digital specification.

    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
    the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

    - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
    be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
    audio was not supplied from one of these streams, then the static metadata settings
    will be used.
    """


_ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef",
    {
        "AttenuationControl": str,
        "Bitrate": float,
        "BitstreamMode": str,
        "CodingMode": str,
        "DcFilter": str,
        "Dialnorm": int,
        "DrcLine": str,
        "DrcRf": str,
        "LfeControl": str,
        "LfeFilter": str,
        "LoRoCenterMixLevel": float,
        "LoRoSurroundMixLevel": float,
        "LtRtCenterMixLevel": float,
        "LtRtSurroundMixLevel": float,
        "MetadataControl": str,
        "PassthroughControl": str,
        "PhaseControl": str,
        "StereoDownmix": str,
        "SurroundExMode": str,
        "SurroundMode": str,
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef(
    _ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettings` `Eac3Settings`

    - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
    attenuation to the surround channels. Only used for 3/2 coding mode.

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
    the coding mode.

    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
    emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

    - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
    channels.

    - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
    all input channels.

    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
    audio is Dolby Digital Plus, dialnorm will be passed through.

    - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

    - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
    ensures that the instantaneous signal peaks do not exceed specified levels.

    - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
    LFE channel

    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
    the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

    - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
    used for 3/2 coding mode.

    - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
    used for 3/2 coding mode.

    - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
    used for 3/2 coding mode.

    - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
    Only used for 3/2 coding mode.

    - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
    sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
    was not supplied from one of these streams, then the static metadata settings will be
    used.

    - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
    be passed through if it is present on the input. This detection is dynamic over the
    life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
    have a consistent DD+ output as the system alternates between passthrough and
    encoding.

    - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
    phase shift to the surround channels. Only used for 3/2 coding mode.

    - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
    mode.

    - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
    center back surround channel is matrix encoded into the left and right surround
    channels.

    - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
    is matrix encoded into the two channels.
    """


_ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef",
    {"Bitrate": float, "CodingMode": str, "SampleRate": float},
    total=False,
)


class ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef(
    _ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettings` `Mp2Settings`

    - **Bitrate** *(float) --* Average bitrate in bits/second.

    - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
    codingMode10 (for mono) or codingMode20 (for stereo).

    - **SampleRate** *(float) --* Sample rate in Hz.
    """


_ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef",
    {
        "AacSettings": ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef,
        "Ac3Settings": ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef,
        "Eac3Settings": ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef,
        "Mp2Settings": ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef,
        "PassThroughSettings": Dict[str, Any],
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef(
    _ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettingsAudioDescriptions` `CodecSettings`

    - **AacSettings** *(dict) --* Aac Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
      rate control mode and profile.

      - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
      depend on rate control mode and profile. The adReceiverMix setting receives a stereo
      description plus control track and emits a mono AAC encode of the description track,
      with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

      - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
      pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
      (audioType) will be set to 3, which signals to downstream systems that this stream
      contains "broadcaster mixed AD". Note that the input received by the encoder must
      contain pre-mixed audio; the encoder does not perform the mixing. The values in
      audioTypeControl and audioType (in AudioDescription) are ignored when set to
      broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
      + AD.

      - **Profile** *(string) --* AAC Profile.

      - **RateControlMode** *(string) --* Rate Control Mode.

      - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

      - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
      mode and profile.

      - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
      MPEG-2 Transport Stream containers.

      - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
      VBR.

    - **Ac3Settings** *(dict) --* Ac3 Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
      the coding mode.

      - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
      emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

      - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
      channels.

      - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
      audio is Dolby Digital, dialnorm will be passed through.

      - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
      signaling to the output bitstream as defined in the Dolby Digital specification.

      - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
      the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

      - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
      be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
      audio was not supplied from one of these streams, then the static metadata settings
      will be used.

    - **Eac3Settings** *(dict) --* Eac3 Settings

      - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
      attenuation to the surround channels. Only used for 3/2 coding mode.

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
      the coding mode.

      - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
      emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

      - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
      channels.

      - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
      all input channels.

      - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
      audio is Dolby Digital Plus, dialnorm will be passed through.

      - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

      - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
      ensures that the instantaneous signal peaks do not exceed specified levels.

      - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
      LFE channel

      - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
      the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

      - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
      used for 3/2 coding mode.

      - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
      used for 3/2 coding mode.

      - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
      used for 3/2 coding mode.

      - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
      Only used for 3/2 coding mode.

      - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
      sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
      was not supplied from one of these streams, then the static metadata settings will be
      used.

      - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
      be passed through if it is present on the input. This detection is dynamic over the
      life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
      have a consistent DD+ output as the system alternates between passthrough and
      encoding.

      - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
      phase shift to the surround channels. Only used for 3/2 coding mode.

      - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
      mode.

      - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
      center back surround channel is matrix encoded into the left and right surround
      channels.

      - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
      is matrix encoded into the two channels.

    - **Mp2Settings** *(dict) --* Mp2 Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second.

      - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
      codingMode10 (for mono) or codingMode20 (for stereo).

      - **SampleRate** *(float) --* Sample rate in Hz.

    - **PassThroughSettings** *(dict) --* Pass Through Settings
    """


_ClientStopChannelResponseEncoderSettingsAudioDescriptionsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsAudioDescriptionsTypeDef",
    {
        "AudioNormalizationSettings": ClientStopChannelResponseEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef,
        "AudioSelectorName": str,
        "AudioType": str,
        "AudioTypeControl": str,
        "CodecSettings": ClientStopChannelResponseEncoderSettingsAudioDescriptionsCodecSettingsTypeDef,
        "LanguageCode": str,
        "LanguageCodeControl": str,
        "Name": str,
        "RemixSettings": Dict[str, Any],
        "StreamName": str,
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsAudioDescriptionsTypeDef(
    _ClientStopChannelResponseEncoderSettingsAudioDescriptionsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettings` `AudioDescriptions`

    - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

      - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
      to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

      - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
      corrected using the chosen algorithm. If set to measureOnly, the audio will be measured
      but not adjusted.

      - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
      entered, a default value will be used according to the chosen algorithm. The CALM Act
      (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
      recommends a target of -23 LKFS.

    - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
    for this AudioDescription.

    - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
    values for audioType are defined in ISO-IEC 13818-1.

    - **AudioTypeControl** *(string) --* Determines how audio type is determined.
    followInput: If the input contains an ISO 639 audioType, then that value is passed
    through to the output. If the input contains no ISO 639 audioType, the value in Audio
    Type is included in the output. useConfigured: The value in Audio Type is included in the
    output. Note that this field and audioType are both ignored if inputType is
    broadcasterMixedAd.

    - **CodecSettings** *(dict) --* Audio codec settings.

      - **AacSettings** *(dict) --* Aac Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
        rate control mode and profile.

        - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
        depend on rate control mode and profile. The adReceiverMix setting receives a stereo
        description plus control track and emits a mono AAC encode of the description track,
        with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

        - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
        pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
        (audioType) will be set to 3, which signals to downstream systems that this stream
        contains "broadcaster mixed AD". Note that the input received by the encoder must
        contain pre-mixed audio; the encoder does not perform the mixing. The values in
        audioTypeControl and audioType (in AudioDescription) are ignored when set to
        broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
        + AD.

        - **Profile** *(string) --* AAC Profile.

        - **RateControlMode** *(string) --* Rate Control Mode.

        - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

        - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
        mode and profile.

        - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
        MPEG-2 Transport Stream containers.

        - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
        VBR.

      - **Ac3Settings** *(dict) --* Ac3 Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
        the coding mode.

        - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
        emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

        - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
        channels.

        - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
        audio is Dolby Digital, dialnorm will be passed through.

        - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
        signaling to the output bitstream as defined in the Dolby Digital specification.

        - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
        the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

        - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
        be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
        audio was not supplied from one of these streams, then the static metadata settings
        will be used.

      - **Eac3Settings** *(dict) --* Eac3 Settings

        - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
        attenuation to the surround channels. Only used for 3/2 coding mode.

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
        the coding mode.

        - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
        emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

        - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
        channels.

        - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
        all input channels.

        - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
        audio is Dolby Digital Plus, dialnorm will be passed through.

        - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

        - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
        ensures that the instantaneous signal peaks do not exceed specified levels.

        - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
        LFE channel

        - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
        the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

        - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
        used for 3/2 coding mode.

        - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
        used for 3/2 coding mode.

        - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
        used for 3/2 coding mode.

        - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
        Only used for 3/2 coding mode.

        - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
        sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
        was not supplied from one of these streams, then the static metadata settings will be
        used.

        - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
        be passed through if it is present on the input. This detection is dynamic over the
        life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
        have a consistent DD+ output as the system alternates between passthrough and
        encoding.

        - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
        phase shift to the surround channels. Only used for 3/2 coding mode.

        - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
        mode.

        - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
        center back surround channel is matrix encoded into the left and right surround
        channels.

        - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
        is matrix encoded into the two channels.

      - **Mp2Settings** *(dict) --* Mp2 Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second.

        - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
        codingMode10 (for mono) or codingMode20 (for stereo).

        - **SampleRate** *(float) --* Sample rate in Hz.

      - **PassThroughSettings** *(dict) --* Pass Through Settings

    - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
    used if languageControlMode is useConfigured, or there is no ISO 639 language code
    specified in the input.

    - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
    language code of the output to follow the ISO 639 language code of the input. The
    languageCode will be used when useConfigured is set, or when followInput is selected but
    there is no ISO 639 language code specified by the input.

    - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to
    uniquely identify this AudioDescription. Description names should be unique within this
    Live Event.

    - **RemixSettings** *(dict) --* Settings that control how input audio channels are
    remixed into the output audio channels.

      - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
      appropriate gain adjustments.

        - *(dict) --* Audio Channel Mapping

          - **InputChannelLevels** *(list) --* Indices and gain values for each input channel
          that should be remixed into this output channel.

            - *(dict) --* Input Channel Level

              - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values
              are within the range from -60 (mute) and 6 dB.

              - **InputChannel** *(integer) --* The index of the input channel used as a
              source.

          - **OutputChannel** *(integer) --* The index of the output channel being produced.

      - **ChannelsIn** *(integer) --* Number of input channels to be used.

      - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
      values: 1, 2, 4, 6, 8

    - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
    name displayed by the player (eg. English, or Director Commentary).
    """


_ClientStopChannelResponseEncoderSettingsAvailBlankingTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsAvailBlankingTypeDef",
    {"AvailBlankingImage": Dict[str, Any], "State": str},
    total=False,
)


class ClientStopChannelResponseEncoderSettingsAvailBlankingTypeDef(
    _ClientStopChannelResponseEncoderSettingsAvailBlankingTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettings` `AvailBlanking`

    - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
    black. Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be
    blanked when insertion metadata is added.
    """


_ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef",
    {
        "AdAvailOffset": int,
        "NoRegionalBlackoutFlag": str,
        "WebDeliveryAllowedFlag": str,
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef(
    _ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettings` `Scte35SpliceInsert`

    - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
    added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
    messages and does not apply to OOB messages.

    - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
    noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
    webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef",
    {
        "AdAvailOffset": int,
        "NoRegionalBlackoutFlag": str,
        "WebDeliveryAllowedFlag": str,
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef(
    _ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettings` `Scte35TimeSignalApos`

    - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
    added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
    messages and does not apply to OOB messages.

    - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
    noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
    webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef",
    {
        "Scte35SpliceInsert": ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef,
        "Scte35TimeSignalApos": ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef,
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef(
    _ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettingsAvailConfiguration` `AvailSettings`

    - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

      - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
      added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
      messages and does not apply to OOB messages.

      - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
      noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
      webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

      - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
      added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
      messages and does not apply to OOB messages.

      - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
      noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
      webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientStopChannelResponseEncoderSettingsAvailConfigurationTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsAvailConfigurationTypeDef",
    {
        "AvailSettings": ClientStopChannelResponseEncoderSettingsAvailConfigurationAvailSettingsTypeDef
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsAvailConfigurationTypeDef(
    _ClientStopChannelResponseEncoderSettingsAvailConfigurationTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettings` `AvailConfiguration`

    - **AvailSettings** *(dict) --* Ad avail settings.

      - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

        - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
        added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
        messages and does not apply to OOB messages.

        - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
        noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
        webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

        - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
        added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
        messages and does not apply to OOB messages.

        - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
        noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
        webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientStopChannelResponseEncoderSettingsBlackoutSlateTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsBlackoutSlateTypeDef",
    {
        "BlackoutSlateImage": Dict[str, Any],
        "NetworkEndBlackout": str,
        "NetworkEndBlackoutImage": Dict[str, Any],
        "NetworkId": str,
        "State": str,
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsBlackoutSlateTypeDef(
    _ClientStopChannelResponseEncoderSettingsBlackoutSlateTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettings` `BlackoutSlate`

    - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid
    black. Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
    the video, audio, and captions, and raise the "Network Blackout Image" slate when an
    SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted
    when the Network Start Segmentation Descriptor is encountered. The Network End and Network
    Start descriptors must contain a network ID that matches the value entered in "Network ID".

    - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout
    image. Image will be scaled to fill the entire output raster.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
    "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be
    blanked when indicated by program metadata.
    """


_ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef",
    {"CaptureInterval": int},
    total=False,
)


class ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef(
    _ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettings` `FrameCaptureSettings`

    - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
    for inclusion in the output. For example, "10" means capture a frame every 10 seconds.
    """


_ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef",
    {
        "ColorSpacePassthroughSettings": Dict[str, Any],
        "Rec601Settings": Dict,
        "Rec709Settings": Dict[str, Any],
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef(
    _ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264Settings` `ColorSpaceSettings`

    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
    conversion to the output

    - **Rec601Settings** *(dict) --* Rec601 Settings

    - **Rec709Settings** *(dict) --* Rec709 Settings
    """


_ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef",
    {
        "AdaptiveQuantization": str,
        "AfdSignaling": str,
        "Bitrate": int,
        "BufFillPct": int,
        "BufSize": int,
        "ColorMetadata": str,
        "ColorSpaceSettings": ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef,
        "EntropyEncoding": str,
        "FixedAfd": str,
        "FlickerAq": str,
        "FramerateControl": str,
        "FramerateDenominator": int,
        "FramerateNumerator": int,
        "GopBReference": str,
        "GopClosedCadence": int,
        "GopNumBFrames": int,
        "GopSize": float,
        "GopSizeUnits": str,
        "Level": str,
        "LookAheadRateControl": str,
        "MaxBitrate": int,
        "MinIInterval": int,
        "NumRefFrames": int,
        "ParControl": str,
        "ParDenominator": int,
        "ParNumerator": int,
        "Profile": str,
        "QvbrQualityLevel": int,
        "RateControlMode": str,
        "ScanType": str,
        "SceneChangeDetect": str,
        "Slices": int,
        "Softness": int,
        "SpatialAq": str,
        "SubgopLength": str,
        "Syntax": str,
        "TemporalAq": str,
        "TimecodeInsertion": str,
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef(
    _ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettings` `H264Settings`

    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
    quantizers to vary to improve visual quality.

    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
    output stream. If afdSignaling is "auto", the system will try to preserve the input
    AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
    value will be the value configured in the fixedAfd parameter.

    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
    control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
    output must have a unique value when its bitrate is rounded down to the nearest
    multiple of 1000.

    - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
    filled (HRD buffer model).

    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

    - **ColorSpaceSettings** *(dict) --* Color Space settings

      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
      conversion to the output

      - **Rec601Settings** *(dict) --* Rec601 Settings

      - **Rec709Settings** *(dict) --* Rec709 Settings

    - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
    or High profile) or cavlc.

    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
    the output stream. Only valid when afdSignaling is set to 'Fixed'.

    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
    frame to reduce flicker or 'pop' on I-frames.

    - **FramerateControl** *(string) --* This field indicates how the output video frame
    rate is specified. If "specified" is selected then the output video frame rate is
    determined by framerateNumerator and framerateDenominator, else if
    "initializeFromSource" is selected then the output video frame rate will be set equal
    to the input video frame rate of the first input.

    - **FramerateDenominator** *(integer) --* Framerate denominator.

    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
    fraction, e.g. 24000 / 1001 = 23.976 fps.

    - **GopBReference** *(string) --* Documentation update needed

    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
    applications, it is recommended that this be set to 1 so a decoder joining mid-stream
    will receive an IDR frame as quickly as possible. Setting this value to 0 will break
    output segmenting.

    - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
    seconds per gopSizeUnits. Must be greater than zero.

    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
    seconds. If seconds the system will convert the gopSize into a frame count at run
    time.

    - **Level** *(string) --* H.264 Level.

    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
    decrease latency and memory usage, while high can produce better quality for certain
    content.

    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
    Set the maximum bitrate in order to accommodate expected spikes in the complexity of
    the video.

    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
    enabled. Enforces separation between repeated (cadence) I-frames and I-frames
    inserted by Scene Change Detection. If a scene change I-frame is within I-interval
    frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
    I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
    normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
    Min-I-interval - 1

    - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
    use more than requested if using B-frames and/or interlaced encoding.

    - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
    is specified. If "specified" is selected then the output video pixel aspect ratio is
    determined by parNumerator and parDenominator, else if "initializeFromSource" is
    selected then the output pixsel aspect ratio will be set equal to the input video
    pixel aspect ratio of the first input.

    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

    - **Profile** *(string) --* H.264 Profile.

    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
    encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
    quality level field and Max bitrate field that suit your most important viewing
    devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
    bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
    Quality level: 6. Max bitrate: 1M to 1.5M

    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
    specified quality level except when it is constrained by the maximum bitrate.
    Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
    depending on the video complexity. Recommended instead of QVBR if you want to
    maintain a specific average bitrate over the duration of the channel. CBR: Quality
    varies, depending on the video complexity. Recommended only if you distribute your
    assets to devices that cannot handle variable bitrates.

    - **ScanType** *(string) --* Sets the scan type of the output to progressive or
    top-field-first interlaced.

    - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
    when scene change is detected. - Off: does not force an I-frame when scene change is
    detected.

    - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
    to the number of macroblock rows for progressive pictures, and less than or equal to
    half the number of macroblock rows for interlaced pictures. This field is optional;
    when no value is specified the encoder will choose the number of slices based on
    encode resolution.

    - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
    reduce high-frequency content in the encoded image.

    - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
    frame based on spatial variation of content complexity.

    - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
    sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
    improve visual quality.

    - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

    - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
    frame based on temporal variation of content complexity.

    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
    into the video elementary stream. - 'disabled': Do not include timecodes -
    'picTimingSei': Pass through picture timing SEI messages from the source specified in
    Timecode Config
    """


_ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef",
    {"MaxCll": int, "MaxFall": int},
    total=False,
)


class ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef(
    _ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings` `Hdr10Settings`

    - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
    defining the maximum light level, in nits, of any single pixel within an encoded
    HDR video stream or file.

    - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
    metadata value defining the maximum average light level, in nits, for any single
    frame within an encoded HDR video stream or file.
    """


_ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef",
    {
        "ColorSpacePassthroughSettings": Dict[str, Any],
        "Hdr10Settings": ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef,
        "Rec601Settings": Dict,
        "Rec709Settings": Dict[str, Any],
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef(
    _ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265Settings` `ColorSpaceSettings`

    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
    conversion to the output

    - **Hdr10Settings** *(dict) --* Hdr10 Settings

      - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
      defining the maximum light level, in nits, of any single pixel within an encoded
      HDR video stream or file.

      - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
      metadata value defining the maximum average light level, in nits, for any single
      frame within an encoded HDR video stream or file.

    - **Rec601Settings** *(dict) --* Rec601 Settings

    - **Rec709Settings** *(dict) --* Rec709 Settings
    """


_ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef",
    {
        "AdaptiveQuantization": str,
        "AfdSignaling": str,
        "AlternativeTransferFunction": str,
        "Bitrate": int,
        "BufSize": int,
        "ColorMetadata": str,
        "ColorSpaceSettings": ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef,
        "FixedAfd": str,
        "FlickerAq": str,
        "FramerateDenominator": int,
        "FramerateNumerator": int,
        "GopClosedCadence": int,
        "GopSize": float,
        "GopSizeUnits": str,
        "Level": str,
        "LookAheadRateControl": str,
        "MaxBitrate": int,
        "MinIInterval": int,
        "ParDenominator": int,
        "ParNumerator": int,
        "Profile": str,
        "QvbrQualityLevel": int,
        "RateControlMode": str,
        "ScanType": str,
        "SceneChangeDetect": str,
        "Slices": int,
        "Tier": str,
        "TimecodeInsertion": str,
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef(
    _ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettings` `H265Settings`

    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
    quantizers to vary to improve visual quality.

    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
    output stream. If afdSignaling is "auto", the system will try to preserve the input
    AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
    value will be the value configured in the fixedAfd parameter.

    - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
    Alternative Transfer Function SEI message to support backwards compatibility with
    non-HDR decoders and displays.

    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
    control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
    output must have a unique value when its bitrate is rounded down to the nearest
    multiple of 1000.

    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

    - **ColorSpaceSettings** *(dict) --* Color Space settings

      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
      conversion to the output

      - **Hdr10Settings** *(dict) --* Hdr10 Settings

        - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
        defining the maximum light level, in nits, of any single pixel within an encoded
        HDR video stream or file.

        - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
        metadata value defining the maximum average light level, in nits, for any single
        frame within an encoded HDR video stream or file.

      - **Rec601Settings** *(dict) --* Rec601 Settings

      - **Rec709Settings** *(dict) --* Rec709 Settings

    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
    the output stream. Only valid when afdSignaling is set to 'Fixed'.

    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
    frame to reduce flicker or 'pop' on I-frames.

    - **FramerateDenominator** *(integer) --* Framerate denominator.

    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
    fraction, e.g. 24000 / 1001 = 23.976 fps.

    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
    applications, it is recommended that this be set to 1 so a decoder joining mid-stream
    will receive an IDR frame as quickly as possible. Setting this value to 0 will break
    output segmenting.

    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
    seconds per gopSizeUnits. Must be greater than zero.

    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
    seconds. If seconds the system will convert the gopSize into a frame count at run
    time.

    - **Level** *(string) --* H.265 Level.

    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
    decrease latency and memory usage, while high can produce better quality for certain
    content.

    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
    enabled. Enforces separation between repeated (cadence) I-frames and I-frames
    inserted by Scene Change Detection. If a scene change I-frame is within I-interval
    frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
    I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
    normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
    Min-I-interval - 1

    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

    - **Profile** *(string) --* H.265 Profile.

    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
    encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
    quality level field and Max bitrate field that suit your most important viewing
    devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
    bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
    Quality level: 6. Max bitrate: 1M to 1.5M

    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
    specified quality level except when it is constrained by the maximum bitrate.
    Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
    on the video complexity. Recommended only if you distribute your assets to devices
    that cannot handle variable bitrates.

    - **ScanType** *(string) --* Sets the scan type of the output to progressive or
    top-field-first interlaced.

    - **SceneChangeDetect** *(string) --* Scene change detection.

    - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
    to the number of macroblock rows for progressive pictures, and less than or equal to
    half the number of macroblock rows for interlaced pictures. This field is optional;
    when no value is specified the encoder will choose the number of slices based on
    encode resolution.

    - **Tier** *(string) --* H.265 Tier.

    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
    into the video elementary stream. - 'disabled': Do not include timecodes -
    'picTimingSei': Pass through picture timing SEI messages from the source specified in
    Timecode Config
    """


_ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef",
    {
        "FrameCaptureSettings": ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef,
        "H264Settings": ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef,
        "H265Settings": ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef,
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef(
    _ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettingsVideoDescriptions` `CodecSettings`

    - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

      - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
      for inclusion in the output. For example, "10" means capture a frame every 10 seconds.

    - **H264Settings** *(dict) --* H264 Settings

      - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
      quantizers to vary to improve visual quality.

      - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
      output stream. If afdSignaling is "auto", the system will try to preserve the input
      AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
      value will be the value configured in the fixedAfd parameter.

      - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
      control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
      output must have a unique value when its bitrate is rounded down to the nearest
      multiple of 1000.

      - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
      filled (HRD buffer model).

      - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

      - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

      - **ColorSpaceSettings** *(dict) --* Color Space settings

        - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
        conversion to the output

        - **Rec601Settings** *(dict) --* Rec601 Settings

        - **Rec709Settings** *(dict) --* Rec709 Settings

      - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
      or High profile) or cavlc.

      - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
      the output stream. Only valid when afdSignaling is set to 'Fixed'.

      - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
      frame to reduce flicker or 'pop' on I-frames.

      - **FramerateControl** *(string) --* This field indicates how the output video frame
      rate is specified. If "specified" is selected then the output video frame rate is
      determined by framerateNumerator and framerateDenominator, else if
      "initializeFromSource" is selected then the output video frame rate will be set equal
      to the input video frame rate of the first input.

      - **FramerateDenominator** *(integer) --* Framerate denominator.

      - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
      fraction, e.g. 24000 / 1001 = 23.976 fps.

      - **GopBReference** *(string) --* Documentation update needed

      - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
      applications, it is recommended that this be set to 1 so a decoder joining mid-stream
      will receive an IDR frame as quickly as possible. Setting this value to 0 will break
      output segmenting.

      - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

      - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
      seconds per gopSizeUnits. Must be greater than zero.

      - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
      seconds. If seconds the system will convert the gopSize into a frame count at run
      time.

      - **Level** *(string) --* H.264 Level.

      - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
      decrease latency and memory usage, while high can produce better quality for certain
      content.

      - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
      Set the maximum bitrate in order to accommodate expected spikes in the complexity of
      the video.

      - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
      enabled. Enforces separation between repeated (cadence) I-frames and I-frames
      inserted by Scene Change Detection. If a scene change I-frame is within I-interval
      frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
      I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
      normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
      Min-I-interval - 1

      - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
      use more than requested if using B-frames and/or interlaced encoding.

      - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
      is specified. If "specified" is selected then the output video pixel aspect ratio is
      determined by parNumerator and parDenominator, else if "initializeFromSource" is
      selected then the output pixsel aspect ratio will be set equal to the input video
      pixel aspect ratio of the first input.

      - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

      - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

      - **Profile** *(string) --* H.264 Profile.

      - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
      encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
      quality level field and Max bitrate field that suit your most important viewing
      devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
      bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
      Quality level: 6. Max bitrate: 1M to 1.5M

      - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
      specified quality level except when it is constrained by the maximum bitrate.
      Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
      depending on the video complexity. Recommended instead of QVBR if you want to
      maintain a specific average bitrate over the duration of the channel. CBR: Quality
      varies, depending on the video complexity. Recommended only if you distribute your
      assets to devices that cannot handle variable bitrates.

      - **ScanType** *(string) --* Sets the scan type of the output to progressive or
      top-field-first interlaced.

      - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
      when scene change is detected. - Off: does not force an I-frame when scene change is
      detected.

      - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
      to the number of macroblock rows for progressive pictures, and less than or equal to
      half the number of macroblock rows for interlaced pictures. This field is optional;
      when no value is specified the encoder will choose the number of slices based on
      encode resolution.

      - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
      reduce high-frequency content in the encoded image.

      - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
      frame based on spatial variation of content complexity.

      - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
      sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
      improve visual quality.

      - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

      - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
      frame based on temporal variation of content complexity.

      - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
      into the video elementary stream. - 'disabled': Do not include timecodes -
      'picTimingSei': Pass through picture timing SEI messages from the source specified in
      Timecode Config

    - **H265Settings** *(dict) --* H265 Settings

      - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
      quantizers to vary to improve visual quality.

      - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
      output stream. If afdSignaling is "auto", the system will try to preserve the input
      AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
      value will be the value configured in the fixedAfd parameter.

      - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
      Alternative Transfer Function SEI message to support backwards compatibility with
      non-HDR decoders and displays.

      - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
      control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
      output must have a unique value when its bitrate is rounded down to the nearest
      multiple of 1000.

      - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

      - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

      - **ColorSpaceSettings** *(dict) --* Color Space settings

        - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
        conversion to the output

        - **Hdr10Settings** *(dict) --* Hdr10 Settings

          - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
          defining the maximum light level, in nits, of any single pixel within an encoded
          HDR video stream or file.

          - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
          metadata value defining the maximum average light level, in nits, for any single
          frame within an encoded HDR video stream or file.

        - **Rec601Settings** *(dict) --* Rec601 Settings

        - **Rec709Settings** *(dict) --* Rec709 Settings

      - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
      the output stream. Only valid when afdSignaling is set to 'Fixed'.

      - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
      frame to reduce flicker or 'pop' on I-frames.

      - **FramerateDenominator** *(integer) --* Framerate denominator.

      - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
      fraction, e.g. 24000 / 1001 = 23.976 fps.

      - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
      applications, it is recommended that this be set to 1 so a decoder joining mid-stream
      will receive an IDR frame as quickly as possible. Setting this value to 0 will break
      output segmenting.

      - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
      seconds per gopSizeUnits. Must be greater than zero.

      - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
      seconds. If seconds the system will convert the gopSize into a frame count at run
      time.

      - **Level** *(string) --* H.265 Level.

      - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
      decrease latency and memory usage, while high can produce better quality for certain
      content.

      - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

      - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
      enabled. Enforces separation between repeated (cadence) I-frames and I-frames
      inserted by Scene Change Detection. If a scene change I-frame is within I-interval
      frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
      I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
      normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
      Min-I-interval - 1

      - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

      - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

      - **Profile** *(string) --* H.265 Profile.

      - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
      encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
      quality level field and Max bitrate field that suit your most important viewing
      devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
      bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
      Quality level: 6. Max bitrate: 1M to 1.5M

      - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
      specified quality level except when it is constrained by the maximum bitrate.
      Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
      on the video complexity. Recommended only if you distribute your assets to devices
      that cannot handle variable bitrates.

      - **ScanType** *(string) --* Sets the scan type of the output to progressive or
      top-field-first interlaced.

      - **SceneChangeDetect** *(string) --* Scene change detection.

      - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
      to the number of macroblock rows for progressive pictures, and less than or equal to
      half the number of macroblock rows for interlaced pictures. This field is optional;
      when no value is specified the encoder will choose the number of slices based on
      encode resolution.

      - **Tier** *(string) --* H.265 Tier.

      - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
      into the video elementary stream. - 'disabled': Do not include timecodes -
      'picTimingSei': Pass through picture timing SEI messages from the source specified in
      Timecode Config
    """


_ClientStopChannelResponseEncoderSettingsVideoDescriptionsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsVideoDescriptionsTypeDef",
    {
        "CodecSettings": ClientStopChannelResponseEncoderSettingsVideoDescriptionsCodecSettingsTypeDef,
        "Height": int,
        "Name": str,
        "RespondToAfd": str,
        "ScalingBehavior": str,
        "Sharpness": int,
        "Width": int,
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsVideoDescriptionsTypeDef(
    _ClientStopChannelResponseEncoderSettingsVideoDescriptionsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseEncoderSettings` `VideoDescriptions`

    - **CodecSettings** *(dict) --* Video codec settings.

      - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

        - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
        for inclusion in the output. For example, "10" means capture a frame every 10 seconds.

      - **H264Settings** *(dict) --* H264 Settings

        - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
        quantizers to vary to improve visual quality.

        - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
        output stream. If afdSignaling is "auto", the system will try to preserve the input
        AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
        value will be the value configured in the fixedAfd parameter.

        - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
        control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
        output must have a unique value when its bitrate is rounded down to the nearest
        multiple of 1000.

        - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
        filled (HRD buffer model).

        - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

        - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

        - **ColorSpaceSettings** *(dict) --* Color Space settings

          - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
          conversion to the output

          - **Rec601Settings** *(dict) --* Rec601 Settings

          - **Rec709Settings** *(dict) --* Rec709 Settings

        - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
        or High profile) or cavlc.

        - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
        the output stream. Only valid when afdSignaling is set to 'Fixed'.

        - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
        frame to reduce flicker or 'pop' on I-frames.

        - **FramerateControl** *(string) --* This field indicates how the output video frame
        rate is specified. If "specified" is selected then the output video frame rate is
        determined by framerateNumerator and framerateDenominator, else if
        "initializeFromSource" is selected then the output video frame rate will be set equal
        to the input video frame rate of the first input.

        - **FramerateDenominator** *(integer) --* Framerate denominator.

        - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
        fraction, e.g. 24000 / 1001 = 23.976 fps.

        - **GopBReference** *(string) --* Documentation update needed

        - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
        applications, it is recommended that this be set to 1 so a decoder joining mid-stream
        will receive an IDR frame as quickly as possible. Setting this value to 0 will break
        output segmenting.

        - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

        - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
        seconds per gopSizeUnits. Must be greater than zero.

        - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
        seconds. If seconds the system will convert the gopSize into a frame count at run
        time.

        - **Level** *(string) --* H.264 Level.

        - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
        decrease latency and memory usage, while high can produce better quality for certain
        content.

        - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
        Set the maximum bitrate in order to accommodate expected spikes in the complexity of
        the video.

        - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
        enabled. Enforces separation between repeated (cadence) I-frames and I-frames
        inserted by Scene Change Detection. If a scene change I-frame is within I-interval
        frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
        I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
        normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
        Min-I-interval - 1

        - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
        use more than requested if using B-frames and/or interlaced encoding.

        - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
        is specified. If "specified" is selected then the output video pixel aspect ratio is
        determined by parNumerator and parDenominator, else if "initializeFromSource" is
        selected then the output pixsel aspect ratio will be set equal to the input video
        pixel aspect ratio of the first input.

        - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

        - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

        - **Profile** *(string) --* H.264 Profile.

        - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
        encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
        quality level field and Max bitrate field that suit your most important viewing
        devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
        bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
        Quality level: 6. Max bitrate: 1M to 1.5M

        - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
        specified quality level except when it is constrained by the maximum bitrate.
        Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
        depending on the video complexity. Recommended instead of QVBR if you want to
        maintain a specific average bitrate over the duration of the channel. CBR: Quality
        varies, depending on the video complexity. Recommended only if you distribute your
        assets to devices that cannot handle variable bitrates.

        - **ScanType** *(string) --* Sets the scan type of the output to progressive or
        top-field-first interlaced.

        - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
        when scene change is detected. - Off: does not force an I-frame when scene change is
        detected.

        - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
        to the number of macroblock rows for progressive pictures, and less than or equal to
        half the number of macroblock rows for interlaced pictures. This field is optional;
        when no value is specified the encoder will choose the number of slices based on
        encode resolution.

        - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
        reduce high-frequency content in the encoded image.

        - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
        frame based on spatial variation of content complexity.

        - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
        sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
        improve visual quality.

        - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

        - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
        frame based on temporal variation of content complexity.

        - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
        into the video elementary stream. - 'disabled': Do not include timecodes -
        'picTimingSei': Pass through picture timing SEI messages from the source specified in
        Timecode Config

      - **H265Settings** *(dict) --* H265 Settings

        - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
        quantizers to vary to improve visual quality.

        - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
        output stream. If afdSignaling is "auto", the system will try to preserve the input
        AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
        value will be the value configured in the fixedAfd parameter.

        - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
        Alternative Transfer Function SEI message to support backwards compatibility with
        non-HDR decoders and displays.

        - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
        control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
        output must have a unique value when its bitrate is rounded down to the nearest
        multiple of 1000.

        - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

        - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

        - **ColorSpaceSettings** *(dict) --* Color Space settings

          - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
          conversion to the output

          - **Hdr10Settings** *(dict) --* Hdr10 Settings

            - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
            defining the maximum light level, in nits, of any single pixel within an encoded
            HDR video stream or file.

            - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
            metadata value defining the maximum average light level, in nits, for any single
            frame within an encoded HDR video stream or file.

          - **Rec601Settings** *(dict) --* Rec601 Settings

          - **Rec709Settings** *(dict) --* Rec709 Settings

        - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
        the output stream. Only valid when afdSignaling is set to 'Fixed'.

        - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
        frame to reduce flicker or 'pop' on I-frames.

        - **FramerateDenominator** *(integer) --* Framerate denominator.

        - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
        fraction, e.g. 24000 / 1001 = 23.976 fps.

        - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
        applications, it is recommended that this be set to 1 so a decoder joining mid-stream
        will receive an IDR frame as quickly as possible. Setting this value to 0 will break
        output segmenting.

        - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
        seconds per gopSizeUnits. Must be greater than zero.

        - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
        seconds. If seconds the system will convert the gopSize into a frame count at run
        time.

        - **Level** *(string) --* H.265 Level.

        - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
        decrease latency and memory usage, while high can produce better quality for certain
        content.

        - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

        - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
        enabled. Enforces separation between repeated (cadence) I-frames and I-frames
        inserted by Scene Change Detection. If a scene change I-frame is within I-interval
        frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
        I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
        normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
        Min-I-interval - 1

        - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

        - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

        - **Profile** *(string) --* H.265 Profile.

        - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
        encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
        quality level field and Max bitrate field that suit your most important viewing
        devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
        bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
        Quality level: 6. Max bitrate: 1M to 1.5M

        - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
        specified quality level except when it is constrained by the maximum bitrate.
        Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
        on the video complexity. Recommended only if you distribute your assets to devices
        that cannot handle variable bitrates.

        - **ScanType** *(string) --* Sets the scan type of the output to progressive or
        top-field-first interlaced.

        - **SceneChangeDetect** *(string) --* Scene change detection.

        - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
        to the number of macroblock rows for progressive pictures, and less than or equal to
        half the number of macroblock rows for interlaced pictures. This field is optional;
        when no value is specified the encoder will choose the number of slices based on
        encode resolution.

        - **Tier** *(string) --* H.265 Tier.

        - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
        into the video elementary stream. - 'disabled': Do not include timecodes -
        'picTimingSei': Pass through picture timing SEI messages from the source specified in
        Timecode Config

    - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
    most codecs, you can leave this field and width blank in order to use the height and
    width (resolution) from the source. Note, however, that leaving blank is not recommended.
    For the Frame Capture codec, height and width are required.

    - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to
    uniquely identify this Description. Description names should be unique within this Live
    Event.

    - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the input
    stream. RESPOND causes input video to be clipped, depending on the AFD value, input
    display aspect ratio, and output display aspect ratio, and (except for FRAMECAPTURE
    codec) includes the values in the output. PASSTHROUGH (does not apply to FRAMECAPTURE
    codec) ignores the AFD values and includes the values in the output, so input video is
    not clipped. NONE ignores the AFD values and does not include the values through to the
    output, so input video is not clipped.

    - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
    stretch the video to the specified output resolution (height and width). This option will
    override any position value. DEFAULT may insert black boxes (pillar boxes or letter
    boxes) around the video to provide the specified output resolution.

    - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
    scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
    for most content.

    - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
    most codecs, you can leave this field and height blank in order to use the height and
    width (resolution) from the source. Note, however, that leaving blank is not recommended.
    For the Frame Capture codec, height and width are required.
    """


_ClientStopChannelResponseEncoderSettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseEncoderSettingsTypeDef",
    {
        "AudioDescriptions": List[
            ClientStopChannelResponseEncoderSettingsAudioDescriptionsTypeDef
        ],
        "AvailBlanking": ClientStopChannelResponseEncoderSettingsAvailBlankingTypeDef,
        "AvailConfiguration": ClientStopChannelResponseEncoderSettingsAvailConfigurationTypeDef,
        "BlackoutSlate": ClientStopChannelResponseEncoderSettingsBlackoutSlateTypeDef,
        "CaptionDescriptions": List[Dict],
        "GlobalConfiguration": Dict[str, Any],
        "OutputGroups": List[Dict],
        "TimecodeConfig": Dict[str, Any],
        "VideoDescriptions": List[
            ClientStopChannelResponseEncoderSettingsVideoDescriptionsTypeDef
        ],
    },
    total=False,
)


class ClientStopChannelResponseEncoderSettingsTypeDef(
    _ClientStopChannelResponseEncoderSettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponse` `EncoderSettings`

    - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

      - *(dict) --* Audio Description

        - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

          - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
          to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

          - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
          corrected using the chosen algorithm. If set to measureOnly, the audio will be measured
          but not adjusted.

          - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
          entered, a default value will be used according to the chosen algorithm. The CALM Act
          (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
          recommends a target of -23 LKFS.

        - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
        for this AudioDescription.

        - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
        values for audioType are defined in ISO-IEC 13818-1.

        - **AudioTypeControl** *(string) --* Determines how audio type is determined.
        followInput: If the input contains an ISO 639 audioType, then that value is passed
        through to the output. If the input contains no ISO 639 audioType, the value in Audio
        Type is included in the output. useConfigured: The value in Audio Type is included in the
        output. Note that this field and audioType are both ignored if inputType is
        broadcasterMixedAd.

        - **CodecSettings** *(dict) --* Audio codec settings.

          - **AacSettings** *(dict) --* Aac Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
            rate control mode and profile.

            - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
            depend on rate control mode and profile. The adReceiverMix setting receives a stereo
            description plus control track and emits a mono AAC encode of the description track,
            with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

            - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
            pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
            (audioType) will be set to 3, which signals to downstream systems that this stream
            contains "broadcaster mixed AD". Note that the input received by the encoder must
            contain pre-mixed audio; the encoder does not perform the mixing. The values in
            audioTypeControl and audioType (in AudioDescription) are ignored when set to
            broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
            + AD.

            - **Profile** *(string) --* AAC Profile.

            - **RateControlMode** *(string) --* Rate Control Mode.

            - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

            - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
            mode and profile.

            - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
            MPEG-2 Transport Stream containers.

            - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
            VBR.

          - **Ac3Settings** *(dict) --* Ac3 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
            the coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
            emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

            - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
            channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
            audio is Dolby Digital, dialnorm will be passed through.

            - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
            signaling to the output bitstream as defined in the Dolby Digital specification.

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
            the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

            - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
            be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
            audio was not supplied from one of these streams, then the static metadata settings
            will be used.

          - **Eac3Settings** *(dict) --* Eac3 Settings

            - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
            attenuation to the surround channels. Only used for 3/2 coding mode.

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
            the coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
            emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

            - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
            channels.

            - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
            all input channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
            audio is Dolby Digital Plus, dialnorm will be passed through.

            - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

            - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
            ensures that the instantaneous signal peaks do not exceed specified levels.

            - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
            LFE channel

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
            the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

            - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
            used for 3/2 coding mode.

            - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
            used for 3/2 coding mode.

            - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
            used for 3/2 coding mode.

            - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
            Only used for 3/2 coding mode.

            - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
            sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
            was not supplied from one of these streams, then the static metadata settings will be
            used.

            - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
            be passed through if it is present on the input. This detection is dynamic over the
            life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
            have a consistent DD+ output as the system alternates between passthrough and
            encoding.

            - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
            phase shift to the surround channels. Only used for 3/2 coding mode.

            - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
            mode.

            - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
            center back surround channel is matrix encoded into the left and right surround
            channels.

            - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
            is matrix encoded into the two channels.

          - **Mp2Settings** *(dict) --* Mp2 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second.

            - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
            codingMode10 (for mono) or codingMode20 (for stereo).

            - **SampleRate** *(float) --* Sample rate in Hz.

          - **PassThroughSettings** *(dict) --* Pass Through Settings

        - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
        used if languageControlMode is useConfigured, or there is no ISO 639 language code
        specified in the input.

        - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
        language code of the output to follow the ISO 639 language code of the input. The
        languageCode will be used when useConfigured is set, or when followInput is selected but
        there is no ISO 639 language code specified by the input.

        - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to
        uniquely identify this AudioDescription. Description names should be unique within this
        Live Event.

        - **RemixSettings** *(dict) --* Settings that control how input audio channels are
        remixed into the output audio channels.

          - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
          appropriate gain adjustments.

            - *(dict) --* Audio Channel Mapping

              - **InputChannelLevels** *(list) --* Indices and gain values for each input channel
              that should be remixed into this output channel.

                - *(dict) --* Input Channel Level

                  - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values
                  are within the range from -60 (mute) and 6 dB.

                  - **InputChannel** *(integer) --* The index of the input channel used as a
                  source.

              - **OutputChannel** *(integer) --* The index of the output channel being produced.

          - **ChannelsIn** *(integer) --* Number of input channels to be used.

          - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
          values: 1, 2, 4, 6, 8

        - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
        name displayed by the player (eg. English, or Director Commentary).

    - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

      - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
      black. Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be
      blanked when insertion metadata is added.

    - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.

      - **AvailSettings** *(dict) --* Ad avail settings.

        - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
          added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
          messages and does not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
          noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
          webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
          added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
          messages and does not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
          noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
          webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **BlackoutSlate** *(dict) --* Settings for blackout slate.

      - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid
      black. Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
      the video, audio, and captions, and raise the "Network Blackout Image" slate when an
      SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted
      when the Network Start Segmentation Descriptor is encountered. The Network End and Network
      Start descriptors must contain a network ID that matches the value entered in "Network ID".

      - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout
      image. Image will be scaled to fill the entire output raster.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
      "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be
      blanked when indicated by program metadata.

    - **CaptionDescriptions** *(list) --* Settings for caption decriptions

      - *(dict) --* Output groups for this Live Event. Output groups contain information about
      where streams should be distributed.

        - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use as
        a caption source when generating output captions. This field should match a
        captionSelector name.

        - **DestinationSettings** *(dict) --* Additional settings for captions destination that
        depend on the destination type.

          - **AribDestinationSettings** *(dict) --* Arib Destination Settings

          - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
            setting alignment to centered will place the captions at the bottom center of the
            output. Similarly, setting a left alignment will align captions to the bottom left of
            the output. If x and y positions are given in conjunction with the alignment
            parameter, the font will be justified (either left or centered) relative to those
            coordinates. Selecting "smart" justification will left-justify live subtitles and
            center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
            match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
            rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent
            to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension
            must be 'ttf' or 'tte'. Although the user can select output fonts for many different
            types of input captions, embedded, STL and teletext sources use a strict grid system.
            Using external fonts with these caption sources could cause unexpected display of
            proportional fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2
              Parameter store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
              file accessible to the Live system (eg. a http:// URI) depending on the output
              type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
            option is not valid for source captions that are STL, 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255
            is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
            is 96 dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the
            size of the output. Giving a positive integer will specify the exact font size in
            points. All burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not
            valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
            is not valid for source captions that are either 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
            captions. All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
            opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0
            (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels to the left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels above the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
            used to generate the output subtitles bitmap. Only applicable for Teletext inputs and
            DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption
            relative to the left side of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the left of the output. If no explicit xPosition is
            provided, the horizontal caption position will be determined by the alignment
            parameter. All burn-in and DVB-Sub font settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption
            relative to the top of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the top of the output. If no explicit yPosition is
            provided, the caption will be positioned towards the bottom of the output. All
            burn-in and DVB-Sub font settings must match.

          - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
            setting alignment to centered will place the captions at the bottom center of the
            output. Similarly, setting a left alignment will align captions to the bottom left of
            the output. If x and y positions are given in conjunction with the alignment
            parameter, the font will be justified (either left or centered) relative to those
            coordinates. Selecting "smart" justification will left-justify live subtitles and
            center-justify pre-recorded subtitles. This option is not valid for source captions
            that are STL or 608/embedded. These source settings are already pre-defined by the
            caption stream. All burn-in and DVB-Sub font settings must match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
            rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
            equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
            must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension
            must be 'ttf' or 'tte'. Although the user can select output fonts for many different
            types of input captions, embedded, STL and teletext sources use a strict grid system.
            Using external fonts with these caption sources could cause unexpected display of
            proportional fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2
              Parameter store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
              file accessible to the Live system (eg. a http:// URI) depending on the output
              type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
            option is not valid for source captions that are STL, 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255
            is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
            is 96 dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
            size of the output. Giving a positive integer will specify the exact font size in
            points. All burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not
            valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
            is not valid for source captions that are either 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
            captions. All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
            opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to
            0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels to the left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels above the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
            used to generate the output subtitles bitmap. Only applicable for Teletext inputs and
            DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption
            relative to the left side of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the left of the output. If no explicit xPosition is
            provided, the horizontal caption position will be determined by the alignment
            parameter. This option is not valid for source captions that are STL, 608/embedded or
            teletext. These source settings are already pre-defined by the caption stream. All
            burn-in and DVB-Sub font settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption
            relative to the top of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the top of the output. If no explicit yPosition is
            provided, the caption will be positioned towards the bottom of the output. This
            option is not valid for source captions that are STL, 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

          - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

          - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
          Destination Settings

          - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
          Settings

          - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
          Destination Settings

          - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

          - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

          - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

          - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

            - **StyleControl** *(string) --* When set to passthrough, passes through style and
            position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
            CFF-TT output or TTML output.

          - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

        - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
        http://www.loc.gov/standards/iso639-2/

        - **LanguageDescription** *(string) --* Human readable information to indicate captions
        available for players (eg. English, or Spanish).

        - **Name** *(string) --* Name of the caption description. Used to associate a caption
        description with an output. Names must be unique within an event.

    - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
    whole.

      - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
      Event.

      - **InputEndAction** *(string) --* Indicates the action to take when the current input
      completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
      restart at the beginning of the first input. When "none" is configured the encoder will
      transcode either black, a solid color, or a user specified slate images per the "Input Loss
      Behavior" configuration until the next input switch occurs (which is controlled through the
      Channel Schedule API).

      - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

        - **BlackFrameMsec** *(integer) --* Documentation update needed

        - **InputLossImageColor** *(string) --* When input loss image type is "color" this field
        specifies the color to use. Value: 6 hex characters representing the values of RGB.

        - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields
        specify the parameters for accessing the slate.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a
        slate into the output after input loss exceeds blackFrameMsec.

        - **RepeatFrameMsec** *(integer) --* Documentation update needed

      - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
      PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to the
      other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each pipeline to
      the Unix epoch.

      - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the
      Live encoder should be paced by its system clock (which optionally may be locked to another
      source via NTP) or should be locked to the clock of the source that is providing the input
      stream.

      - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
      very low video framerates. This is commonly set to enabled for music channels with less
      than one video frame per second.

    - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

      - *(dict) --* Output groups for this Live Event. Output groups contain information about
      where streams should be distributed.

        - **Name** *(string) --* Custom output group name optionally defined by the user. Only
        letters, numbers, and the underscore character allowed; only 32 characters allowed.

        - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

          - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

            - **Destination** *(dict) --* A directory and base filename where archive files
            should be written.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
            before closing and starting a new one.

          - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

            - **Destination** *(dict) --* The destination for the frame capture files. Either the
            URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
            s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
            container, plus a file name prefix (for example,
            mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
            the prefix from the destination field (for example, "curling_") + name modifier + the
            counter (5 digits, starting from 00001) + extension (which is always .jpg). For
            example, curlingLow.00001.jpg

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **HlsGroupSettings** *(dict) --* Hls Group Settings

            - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals
            through to this group of Apple HLS outputs.

              - *(string) --* Hls Ad Markers

            - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
            each output in the media .m3u8 file. Can be used if base manifest is delivered from a
            different URL than the main .m3u8 file.

            - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
            each output in the media .m3u8 file. Can be used if base manifest is delivered from a
            different URL than the main .m3u8 file.

            - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
            caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

              - *(dict) --* Maps a caption channel to an ISO 693-2 language code
              (http://www.loc.gov/standards/iso639-2), with an optional description.

                - **CaptionChannel** *(integer) --* The closed caption channel being described by
                this CaptionLanguageMapping. Each channel mapping must have a unique channel
                number (maximum of 4)

                - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                http://www.loc.gov/standards/iso639-2)

                - **LanguageDescription** *(string) --* Textual description of language

            - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
            captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one
            language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each
            Language Code you specify. Make sure to specify the languages in the order in which
            they appear in the original source (if the source is embedded format) or the order of
            the caption selectors (if the source is other than embedded). Otherwise, languages in
            the manifest will not match up properly with the output captions. none: Include
            CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from
            the manifest.

            - **ClientCache** *(string) --* When set to "disabled", sets the
            #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
            segments for later replay.

            - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default
            RFC-4281) during m3u8 playlist generation.

            - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
            16-byte hex value represented by a 32-character text string. If ivSource is set to
            "explicit" then this parameter is required and is used as the IV for encryption.

            - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
            manifest files, and encryption keys (if enabled).

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **DirectoryStructure** *(string) --* Place segments in subdirectories.

            - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
            scheme. Exclude this parameter if no encryption is desired.

            - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

              - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                transfer encoding to Akamai. User should contact Akamai to enable this feature.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                to wait until a restart is initiated. A value of 0 means never restart.

                - **Salt** *(string) --* Salt for authenticated Akamai.

                - **Token** *(string) --* Token parameter for authenticated akamai. If not
                specified, _gda_ is used.

              - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                to wait until a restart is initiated. A value of 0 means never restart.

              - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are
                stored in non-persistent memory for faster reading and writing.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                to wait until a restart is initiated. A value of 0 means never restart.

              - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                transfer encoding to WebDAV.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                to wait until a restart is initiated. A value of 0 means never restart.

            - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
            manifest, but do create the master and media manifests (according to the Output
            Selection field). STANDARD: Create an I-frame-only manifest for each output that
            contains video, as well as the other manifests (according to the Output Selection
            field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
            I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
            position. For example, #EXT-X-BYTERANGE:160364@1461888"

            - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
            maximum number of segments in the media manifest file. After this maximum, older
            segments are removed from the media manifest. This number must be less than or equal
            to the Keep Segments field.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on
            input loss.

            - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization
            Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
            If set to "include", IV is listed in the manifest, otherwise the IV is not in the
            manifest.

            - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
            Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
            If this setting is "followsSegmentNumber", it will cause the IV to change every
            segment (to match the segment number). If this is set to "explicit", you must enter a
            constantIv value.

            - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
            number of media segments (.ts files) to retain in the destination directory.

            - **KeyFormat** *(string) --* The value specifies how the key is represented in the
            resource identified by the URI. If parameter is absent, an implicit value of
            "identity" is used. A reverse DNS string can also be given.

            - **KeyFormatVersions** *(string) --* Either a single positive integer version value
            or a slash delimited list of version values (1/2/3).

            - **KeyProviderSettings** *(dict) --* The key provider settings.

              - **StaticKeySettings** *(dict) --* Static Key Settings

                - **KeyProviderServer** *(dict) --* The URL of the license server used for
                protecting content.

                  - **PasswordParam** *(string) --* key used to extract the password from EC2
                  Parameter store

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to
                  a file accessible to the Live system (eg. a http:// URI) depending on the
                  output type. For example, a RTMP destination should have a uri simliar to:
                  "rtmp://fmsserver/live".

                  - **Username** *(string) --* Documentation update needed

                - **StaticKeyValue** *(string) --* Static key value as a 32 character hexadecimal
                string.

            - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

            - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
            should use floating point or integer values for segment duration.

            - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
            looking ahead and back within the specified range for a nearby avail and extending
            the segment size if needed.

            - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
            the destination and manifest. If "live", only the number segments specified in
            keepSegments and indexNSegments are kept; newer segments replace older segments,
            which may prevent players from rewinding all the way to the beginning of the event.
            VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
            converting it to a "VOD" type manifest on completion of the stream.

            - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests (master
            manifest, if applicable, and media manifests) for this output group. SEGMENTSONLY:
            Does not generate any manifests for this output group.

            - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag
            in .m3u8 manifest files. The value is calculated as follows: either the program date
            and time are initialized using the input timecode source, or the time is initialized
            using the input timecode source and the date is initialized using the timestampOffset.

            - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
            EXT-X-PROGRAM-DATE-TIME entry, in seconds.

            - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
            each pipeline includes information about both pipelines: first its own media files,
            then the media files of the other pipeline. This feature allows playout device that
            support stale manifest detection to switch from one manifest to the other, when the
            current manifest seems to be stale. There are still two destinations and two master
            manifests, but both master manifests reference the media files from both pipelines.
            DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
            about its own pipeline only. For an HLS output group with MediaPackage as the
            destination, the DISABLED behavior is always followed. MediaPackage regenerates the
            manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

            - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
            create (in seconds). Note that segments will end on the next keyframe after this
            number of seconds, so actual segment length may be longer.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
            subdirectory before starting a new one. directoryStructure must be
            subdirectoryPerStream for this setting to have an effect.

            - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
            video in EXT-X-STREAM-INF tag of variant manifest.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

            - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
            offset to fine tune the timestamps.

            - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
            multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
            program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags
            to index segments for playback. A typical use for this value is when sending the
            output to AWS Elemental MediaConvert, which can accept only a single media file.
            Playback while the channel is running is not guaranteed due to HTTP server caching.

          - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

            - **Destination** *(dict) --* MediaPackage channel destination.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

            - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point Identity"
            element used in each message placed in the sparse track. Only enabled if
            sparseTrackType is not "none".

            - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only
            MS Smooth output, the fragment absolute time will be set to the current timecode.
            This option does not write timecodes to the audio elementary stream.

            - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
            certificate chain to a trusted Certificate Authority (CA). This will cause https
            outputs to self-signed certificates to fail.

            - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
            retrying connection to the IIS server if the connection is lost. Content will be
            cached during this time and the cache will be be delivered to the IIS server once the
            connection is re-established.

            - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
            Elemental Live acts as a "Push" encoder to IIS.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
            only be specified if eventIdMode is set to useConfigured.

            - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
            IIS server. If no event ID is sent and the same Live Event is used without changing
            the publishing point, clients might see cached video from the previous run. Options:
            - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and
            send an event ID based on the current timestamp - "noEventId" - do not send an event
            ID to the IIS server.

            - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
            server when stopping the event

            - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
            outputs.

            - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds).
            Fragment length must be compatible with GOP size and framerate.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on
            input loss.

            - **NumRetries** *(integer) --* Number of retry attempts.

            - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
            to output failure, due to exhausting the numRetries on one segment, or exceeding
            filecacheDuration.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the
            second pipeline.

            - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
            to generate a sparse track in this group of MS-Smooth outputs.

            - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so
            publishing point doesn't start until all streams start.

            - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
            timestampOffsetMode is set to useConfiguredOffset.

            - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
            useEventStartDate: Use the date the event was started as the offset -
            useConfiguredOffset: Use an explicitly configured date as the offset

          - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

            - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting
            with CDN

            - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up.
            If remote origin server stalls the RTMP connection and does not accept content fast
            enough the 'Media Cache' will fill up. When the cache reaches the duration specified
            by cacheLength the cache will stop accepting new content. If set to
            disconnectImmediately, the RTMP output will force a disconnect. Clear the media
            cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
            output will wait up to 5 minutes to allow the origin server to begin accepting data
            again.

            - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
            buffer size.

            - **CaptionData** *(string) --* Controls the types of data that passes to
            onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
            passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608
            data from both fields will be passed. If set to 'field1608' then only the data
            carried in 608 from field 1 video will be passed.

            - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input
            becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput:
            Stop transmitting data until input returns. This does not close the underlying RTMP
            connection.

            - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
            wait until a restart is initiated. A value of 0 means never restart.

          - **UdpGroupSettings** *(dict) --* Udp Group Settings

            - **InputLossAction** *(string) --* Specifies behavior of last resort when input
            video is lost, and no more backup inputs are available. When dropTs is selected the
            entire transport stream will stop being emitted. When dropProgram is selected the
            program can be dropped from the transport stream (and replaced with null packets to
            meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream
            will continue to be produced normally with repeat frames, black frames, or slate
            frames substituted for the absent input video.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

        - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

          - *(dict) --* Output settings. There can be multiple outputs within a group.

            - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
            audio sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
            as caption sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **OutputName** *(string) --* The name used to identify an output.

            - **OutputSettings** *(dict) --* Output type-specific settings.

              - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                - **ContainerSettings** *(dict) --* Settings specific to the container type of
                the file.

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream
                    is removed from the input. This allows the output audio configuration to
                    dynamically change based on input configuration. If this is set to
                    encodeSilence, all output audio streams will output encoded silence when not
                    connected to an active input stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                    muxing and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                    for ARIB Captions will be auto-selected from unused pids. If set to
                    useConfigured, ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                    for Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                    for each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                    stream(s) in the transport stream. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81
                    for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type =
                    0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                    bits per second. Setting to 0 lets the muxer automatically determine the
                    appropriate bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                    model for accurate interleaving. Setting to bufferModel to none can lead to
                    lower latency, but low-memory devices may not be able to play back the stream
                    without interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT)
                    at the specified table repetition interval.

                      - **NetworkId** *(integer) --* The numeric value placed in the Network
                      Information Table (NIT).

                      - **NetworkName** *(string) --* The network name text placed in the
                      networkNameDescriptor inside the Network Information Table. Maximum length
                      is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT)
                    at the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information
                      into output stream. The sdtFollow setting copies SDT information from input
                      stream to output stream. The sdtFollowIfPresent setting copies SDT
                      information from input stream to output stream if SDT information is
                      present in the input, otherwise it will fall back on the user-defined
                      values. The sdtManual setting means user will enter the SDT information.
                      The sdtNone setting means output stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed in
                      the serviceDescriptor in the Service Description Table. Maximum length is
                      256 characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                    specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                    DVB Teletext data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                    input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                    audio EBP markers will be added to partitions 3 and 4. The interval between
                    these additional markers will be fixed, and will be slightly shorter than the
                    video EBP marker interval. Only available when EBP Cablelabs segmentation
                    markers are selected. Partitions 1 and 2 will always follow the video
                    interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                    Points do not come within the specified time interval of each other by
                    looking ahead at input video. If another EBP is going to come in within the
                    specified time interval, the current EBP is not emitted, and the segment is
                    "stretched" to the next marker. The lookahead value does not add latency to
                    the system. The Live Event must be configured elsewhere to create sufficient
                    latency to make the lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If
                    set to videoAndAudioPids, EBP markers will be placed on the video PID and all
                    audio PIDs. If set to videoPid, EBP markers will be placed on only the video
                    PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                    PES header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Platform data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                    Signal data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment. Only
                    used with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                    input source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV
                    data to this output. Multiple values are accepted, and can be entered in
                    ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                    values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or
                    0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a downstream
                    encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between instances
                    of this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                    Reference value is inserted for every Packetized Elementary Stream (PES)
                    header. This parameter is effective only when the PCR PID is the same as the
                    video or audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                    Clock Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                    Reference (PCR) in the transport stream. When no value is given, the encoder
                    will assign the same value as the Video PID. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between instances
                    of this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                    (PMT) in the transport stream. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in the
                    Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                    SCTE-27 data to this output. Multiple values are accepted, and can be entered
                    in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                    input source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                    segmentationTime period. raiSegstart sets the Random Access Indicator bit in
                    the adaptation field. raiAdapt sets the RAI bit and adds the current timecode
                    in the private data bytes. psiSegstart inserts PAT and PMT tables at the
                    start of segments. ebp adds Encoder Boundary Point information to the
                    adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                    ebpLegacy adds Encoder Boundary Point information to the adaptation field
                    using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter
                    controls how segmentation markers are inserted into the transport stream.
                    With avails, it is possible that segments may be truncated, which can
                    influence where future segmentation markers are inserted. When a segmentation
                    style of "resetCadence" is selected and a segment is truncated due to an
                    avail, we will reset the segmentation cadence. This means the subsequent
                    segment will have a duration of $segmentationTime seconds. When a
                    segmentation style of "maintainCadence" is selected and a segment is
                    truncated due to an avail, we will not reset the segmentation cadence. This
                    means the subsequent segment will likely be truncated as well. However, all
                    segments after that will have a duration of $segmentationTime seconds. Note
                    that EBP lookahead is a slight exception to this rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                    metadata will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID
                    field in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                    stream in the transport stream. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Extension** *(string) --* Output file extension. If excluded, this will be
                auto-selected from the container type.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Required for multiple outputs of the same type.

              - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                - **NameModifier** *(string) --* Required if the output group contains more than
                one output. This modifier forms part of the output file name.

              - **HlsOutputSettings** *(dict) --* Hls Output Settings

                - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                settings are different for audio-only outputs.

                  - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                    - **AudioGroupId** *(string) --* Specifies the group to which the audio
                    Rendition belongs.

                    - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                    to use as the cover art for an audio-only output. We recommend a low bit-size
                    file because the image increases the output audio bandwidth. The image is
                    attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as
                    per the "ID3 tag version 2.4.0 - Native Frames" standard.

                      - **PasswordParam** *(string) --* key used to extract the password from EC2
                      Parameter store

                      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                      to a file accessible to the Live system (eg. a http:// URI) depending on
                      the output type. For example, a RTMP destination should have a uri simliar
                      to: "rtmp://fmsserver/live".

                      - **Username** *(string) --* Documentation update needed

                    - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                    supported: Audio-Only Variant Stream The client can play back this audio-only
                    stream instead of video in low-bandwidth scenarios. Represented as an
                    EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default
                    Alternate rendition that the client should try to play back by default.
                    Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES,
                    AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition
                    that the client may try to play back by default. Represented as an
                    EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate
                    Audio, not Auto Select Alternate rendition that the client will not try to
                    play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with
                    DEFAULT=NO, AUTOSELECT=NO

                  - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                    - **AudioRenditionSets** *(string) --* List all the audio groups that are
                    used with the video output stream. Input all the audio GROUP-IDs that are
                    associated to the video, separate by ','.

                    - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                      audio stream(s) in the transport stream. Multiple values are accepted, and
                      can be entered in ranges and/or by comma separation. Can be entered as
                      decimal or hexadecimal values.

                      - **EcmPid** *(string) --* This parameter is unused and deprecated.

                      - **PatInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. A value of \\"0\\"
                      writes out the PMT once per segment file.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                      Clock Reference value is inserted for every Packetized Elementary Stream
                      (PES) header. This parameter is effective only when the PCR PID is the same
                      as the video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock References (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the
                      encoder will assign the same value as the Video PID. Can be entered as a
                      decimal or hexadecimal value.

                      - **PmtInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. A value of \\"0\\"
                      writes out the PMT once per segment file.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                      Table (PMT) in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                      - **ProgramNum** *(integer) --* The value of the program number field in
                      the Program Map Table.

                      - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                      SCTE-35 signals from the input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata is passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                      video stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Accepts \\"Format
                Identifiers\\":#formatIdentifierParameters.

                - **SegmentModifier** *(string) --* String concatenated to end of segment
                filenames.

              - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

              - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                - **H265PackagingType** *(string) --* Only applicable when this output is
                referencing an H.265 video description. Specifies whether MP4 segments should be
                packaged as HEV1 or HVC1.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Required for multiple outputs of the same type.

              - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls
                certificate chain to a trusted Certificate Authority (CA). This will cause rtmps
                outputs with self-signed certificates to fail.

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying a connection to the Flash Media server if the connection is lost.

                - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                rtmp://host/appname). For connection to Akamai, a username and password must be
                supplied. URI fields accept format identifiers.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **NumRetries** *(integer) --* Number of retry attempts.

              - **UdpOutputSettings** *(dict) --* Udp Output Settings

                - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                values increase latency through the transcoder but simultaneously assist the
                transcoder in maintaining a constant, low-jitter UDP/RTP output while
                accommodating clock recovery, input switching, input disruptions, picture
                reordering, etc.

                - **ContainerSettings** *(dict) --* Udp Container Settings

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream
                    is removed from the input. This allows the output audio configuration to
                    dynamically change based on input configuration. If this is set to
                    encodeSilence, all output audio streams will output encoded silence when not
                    connected to an active input stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                    muxing and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                    for ARIB Captions will be auto-selected from unused pids. If set to
                    useConfigured, ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                    for Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                    for each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                    stream(s) in the transport stream. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81
                    for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type =
                    0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                    bits per second. Setting to 0 lets the muxer automatically determine the
                    appropriate bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                    model for accurate interleaving. Setting to bufferModel to none can lead to
                    lower latency, but low-memory devices may not be able to play back the stream
                    without interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT)
                    at the specified table repetition interval.

                      - **NetworkId** *(integer) --* The numeric value placed in the Network
                      Information Table (NIT).

                      - **NetworkName** *(string) --* The network name text placed in the
                      networkNameDescriptor inside the Network Information Table. Maximum length
                      is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT)
                    at the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information
                      into output stream. The sdtFollow setting copies SDT information from input
                      stream to output stream. The sdtFollowIfPresent setting copies SDT
                      information from input stream to output stream if SDT information is
                      present in the input, otherwise it will fall back on the user-defined
                      values. The sdtManual setting means user will enter the SDT information.
                      The sdtNone setting means output stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed in
                      the serviceDescriptor in the Service Description Table. Maximum length is
                      256 characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                    specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                    DVB Teletext data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                    input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                    audio EBP markers will be added to partitions 3 and 4. The interval between
                    these additional markers will be fixed, and will be slightly shorter than the
                    video EBP marker interval. Only available when EBP Cablelabs segmentation
                    markers are selected. Partitions 1 and 2 will always follow the video
                    interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                    Points do not come within the specified time interval of each other by
                    looking ahead at input video. If another EBP is going to come in within the
                    specified time interval, the current EBP is not emitted, and the segment is
                    "stretched" to the next marker. The lookahead value does not add latency to
                    the system. The Live Event must be configured elsewhere to create sufficient
                    latency to make the lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If
                    set to videoAndAudioPids, EBP markers will be placed on the video PID and all
                    audio PIDs. If set to videoPid, EBP markers will be placed on only the video
                    PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                    PES header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Platform data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                    Signal data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment. Only
                    used with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                    input source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV
                    data to this output. Multiple values are accepted, and can be entered in
                    ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                    values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or
                    0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a downstream
                    encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between instances
                    of this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                    Reference value is inserted for every Packetized Elementary Stream (PES)
                    header. This parameter is effective only when the PCR PID is the same as the
                    video or audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                    Clock Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                    Reference (PCR) in the transport stream. When no value is given, the encoder
                    will assign the same value as the Video PID. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between instances
                    of this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                    (PMT) in the transport stream. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in the
                    Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                    SCTE-27 data to this output. Multiple values are accepted, and can be entered
                    in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                    input source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                    segmentationTime period. raiSegstart sets the Random Access Indicator bit in
                    the adaptation field. raiAdapt sets the RAI bit and adds the current timecode
                    in the private data bytes. psiSegstart inserts PAT and PMT tables at the
                    start of segments. ebp adds Encoder Boundary Point information to the
                    adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                    ebpLegacy adds Encoder Boundary Point information to the adaptation field
                    using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter
                    controls how segmentation markers are inserted into the transport stream.
                    With avails, it is possible that segments may be truncated, which can
                    influence where future segmentation markers are inserted. When a segmentation
                    style of "resetCadence" is selected and a segment is truncated due to an
                    avail, we will reset the segmentation cadence. This means the subsequent
                    segment will have a duration of $segmentationTime seconds. When a
                    segmentation style of "maintainCadence" is selected and a segment is
                    truncated due to an avail, we will not reset the segmentation cadence. This
                    means the subsequent segment will likely be truncated as well. However, all
                    segments after that will have a duration of $segmentationTime seconds. Note
                    that EBP lookahead is a slight exception to this rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                    metadata will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID
                    field in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                    stream in the transport stream. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Destination** *(dict) --* Destination address and port number for RTP or UDP
                packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or
                udp://10.100.100.100:5002).

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                Error Correction on UDP outputs.

                  - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                  the FEC protection matrix. The number of transport stream packets per column
                  error correction packet. Must be between 4 and 20, inclusive.

                  - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                  - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the
                  FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC
                  is used, then larger values increase robustness. If Row FEC is used, then this
                  is the number of transport stream packets per row error correction packet, and
                  the value must be between 4 and 20, inclusive, if includeFec is columnAndRow.
                  If includeFec is column, this value must be 1 to 20, inclusive.

            - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the
            source for this output.

    - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
    information from inputs.

      - **Source** *(string) --* Identifies the source for the timecode that will be associated
      with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode
      from the the source. If no embedded timecode is detected in the source, the system falls
      back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time.
      -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.

      - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
      resynchronized to the input timecode. Discrepancies below this threshold are permitted to
      avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not
      specified.

    - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

      - *(dict) --* Video settings for this stream.

        - **CodecSettings** *(dict) --* Video codec settings.

          - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

            - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
            for inclusion in the output. For example, "10" means capture a frame every 10 seconds.

          - **H264Settings** *(dict) --* H264 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input
            AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
            value will be the value configured in the fixedAfd parameter.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
            output must have a unique value when its bitrate is rounded down to the nearest
            multiple of 1000.

            - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
            filled (HRD buffer model).

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
              conversion to the output

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
            or High profile) or cavlc.

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
            the output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
            frame to reduce flicker or 'pop' on I-frames.

            - **FramerateControl** *(string) --* This field indicates how the output video frame
            rate is specified. If "specified" is selected then the output video frame rate is
            determined by framerateNumerator and framerateDenominator, else if
            "initializeFromSource" is selected then the output video frame rate will be set equal
            to the input video frame rate of the first input.

            - **FramerateDenominator** *(integer) --* Framerate denominator.

            - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
            fraction, e.g. 24000 / 1001 = 23.976 fps.

            - **GopBReference** *(string) --* Documentation update needed

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining mid-stream
            will receive an IDR frame as quickly as possible. Setting this value to 0 will break
            output segmenting.

            - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
            seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run
            time.

            - **Level** *(string) --* H.264 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
            decrease latency and memory usage, while high can produce better quality for certain
            content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
            Set the maximum bitrate in order to accommodate expected spikes in the complexity of
            the video.

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
            enabled. Enforces separation between repeated (cadence) I-frames and I-frames
            inserted by Scene Change Detection. If a scene change I-frame is within I-interval
            frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
            I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
            normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
            Min-I-interval - 1

            - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
            use more than requested if using B-frames and/or interlaced encoding.

            - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
            is specified. If "specified" is selected then the output video pixel aspect ratio is
            determined by parNumerator and parDenominator, else if "initializeFromSource" is
            selected then the output pixsel aspect ratio will be set equal to the input video
            pixel aspect ratio of the first input.

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.264 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
            encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
            quality level field and Max bitrate field that suit your most important viewing
            devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
            bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
            Quality level: 6. Max bitrate: 1M to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate.
            Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
            depending on the video complexity. Recommended instead of QVBR if you want to
            maintain a specific average bitrate over the duration of the channel. CBR: Quality
            varies, depending on the video complexity. Recommended only if you distribute your
            assets to devices that cannot handle variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
            when scene change is detected. - Off: does not force an I-frame when scene change is
            detected.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
            to the number of macroblock rows for progressive pictures, and less than or equal to
            half the number of macroblock rows for interlaced pictures. This field is optional;
            when no value is specified the encoder will choose the number of slices based on
            encode resolution.

            - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
            reduce high-frequency content in the encoded image.

            - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
            frame based on spatial variation of content complexity.

            - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
            sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
            improve visual quality.

            - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

            - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
            frame based on temporal variation of content complexity.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
            into the video elementary stream. - 'disabled': Do not include timecodes -
            'picTimingSei': Pass through picture timing SEI messages from the source specified in
            Timecode Config

          - **H265Settings** *(dict) --* H265 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input
            AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
            value will be the value configured in the fixedAfd parameter.

            - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
            Alternative Transfer Function SEI message to support backwards compatibility with
            non-HDR decoders and displays.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
            output must have a unique value when its bitrate is rounded down to the nearest
            multiple of 1000.

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
              conversion to the output

              - **Hdr10Settings** *(dict) --* Hdr10 Settings

                - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
                defining the maximum light level, in nits, of any single pixel within an encoded
                HDR video stream or file.

                - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                metadata value defining the maximum average light level, in nits, for any single
                frame within an encoded HDR video stream or file.

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
            the output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
            frame to reduce flicker or 'pop' on I-frames.

            - **FramerateDenominator** *(integer) --* Framerate denominator.

            - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
            fraction, e.g. 24000 / 1001 = 23.976 fps.

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining mid-stream
            will receive an IDR frame as quickly as possible. Setting this value to 0 will break
            output segmenting.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
            seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run
            time.

            - **Level** *(string) --* H.265 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
            decrease latency and memory usage, while high can produce better quality for certain
            content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
            enabled. Enforces separation between repeated (cadence) I-frames and I-frames
            inserted by Scene Change Detection. If a scene change I-frame is within I-interval
            frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
            I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
            normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
            Min-I-interval - 1

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.265 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
            encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
            quality level field and Max bitrate field that suit your most important viewing
            devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
            bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
            Quality level: 6. Max bitrate: 1M to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate.
            Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
            on the video complexity. Recommended only if you distribute your assets to devices
            that cannot handle variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
            to the number of macroblock rows for progressive pictures, and less than or equal to
            half the number of macroblock rows for interlaced pictures. This field is optional;
            when no value is specified the encoder will choose the number of slices based on
            encode resolution.

            - **Tier** *(string) --* H.265 Tier.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
            into the video elementary stream. - 'disabled': Do not include timecodes -
            'picTimingSei': Pass through picture timing SEI messages from the source specified in
            Timecode Config

        - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
        most codecs, you can leave this field and width blank in order to use the height and
        width (resolution) from the source. Note, however, that leaving blank is not recommended.
        For the Frame Capture codec, height and width are required.

        - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to
        uniquely identify this Description. Description names should be unique within this Live
        Event.

        - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the input
        stream. RESPOND causes input video to be clipped, depending on the AFD value, input
        display aspect ratio, and output display aspect ratio, and (except for FRAMECAPTURE
        codec) includes the values in the output. PASSTHROUGH (does not apply to FRAMECAPTURE
        codec) ignores the AFD values and includes the values in the output, so input video is
        not clipped. NONE ignores the AFD values and does not include the values through to the
        output, so input video is not clipped.

        - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
        stretch the video to the specified output resolution (height and width). This option will
        override any position value. DEFAULT may insert black boxes (pillar boxes or letter
        boxes) around the video to provide the specified output resolution.

        - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
        scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
        for most content.

        - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
        most codecs, you can leave this field and height blank in order to use the height and
        width (resolution) from the source. Note, however, that leaving blank is not recommended.
        For the Frame Capture codec, height and width are required.
    """


_ClientStopChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    {"HlsInputSettings": Dict[str, Any], "ServerValidation": str},
    total=False,
)


class ClientStopChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef(
    _ClientStopChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseInputAttachmentsInputSettings` `NetworkInputSettings`

    - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
    HLS manifest.

      - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH
      that most closely matches this value will be chosen, otherwise the highest bandwidth
      stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in
      an HLS manifest.

      - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
      begin this many buffer segments from the end (most recently written segment). When
      not specified, the HLS input will begin with the first segment specified in the m3u8.

      - **Retries** *(integer) --* The number of consecutive times that attempts to read a
      manifest or segment must fail before the input is considered unavailable.

      - **RetryInterval** *(integer) --* The number of seconds between retries when an
      attempt to read a manifest or segment fails.

    - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
    checkCryptographyOnly, cryptography in the certificate will be checked, but not the
    server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name)
    do not strictly match the corresponding certificate's wildcard pattern and would
    otherwise cause the event to error. This setting is ignored for protocols that do not
    use https.
    """


_ClientStopChannelResponseInputAttachmentsInputSettingsTypeDef = TypedDict(
    "_ClientStopChannelResponseInputAttachmentsInputSettingsTypeDef",
    {
        "AudioSelectors": List[Any],
        "CaptionSelectors": List[Any],
        "DeblockFilter": str,
        "DenoiseFilter": str,
        "FilterStrength": int,
        "InputFilter": str,
        "NetworkInputSettings": ClientStopChannelResponseInputAttachmentsInputSettingsNetworkInputSettingsTypeDef,
        "SourceEndBehavior": str,
        "VideoSelector": Dict[str, Any],
    },
    total=False,
)


class ClientStopChannelResponseInputAttachmentsInputSettingsTypeDef(
    _ClientStopChannelResponseInputAttachmentsInputSettingsTypeDef
):
    """
    Type definition for `ClientStopChannelResponseInputAttachments` `InputSettings`

    - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
    that have multiple available.

      - *(dict) --* Audio Selector

        - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
        this name to uniquely identify this Selector. Selector names should be unique per
        input.

        - **SelectorSettings** *(dict) --* The audio selector settings.

          - **AudioLanguageSelection** *(dict) --* Audio Language Selection

            - **LanguageCode** *(string) --* Selects a specific three-letter language code
            from within an audio source.

            - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
            stream demux strictly identifies audio streams by their language descriptor. If a
            PMT update occurs such that an audio stream matching the initially selected
            language is no longer present then mute will be encoded until the language
            returns. If "loose", then on a PMT update the demux will choose another audio
            stream in the program with the same stream type if it can't find one with the
            same language.

          - **AudioPidSelection** *(dict) --* Audio Pid Selection

            - **Pid** *(integer) --* Selects a specific PID from within a source.

    - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
    that have multiple available.

      - *(dict) --* Output groups for this Live Event. Output groups contain information
      about where streams should be distributed.

        - **LanguageCode** *(string) --* When specified this field indicates the three letter
        language code of the caption track to extract from the source.

        - **Name** *(string) --* Name identifier for a caption selector. This name is used to
        associate this caption selector with one or more caption descriptions. Names must be
        unique within an event.

        - **SelectorSettings** *(dict) --* Caption selector settings.

          - **AribSourceSettings** *(dict) --* Arib Source Settings

          - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

            - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
            PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
            is passed through, regardless of selectors.

          - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
            via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
            into 708. 708 data present in the source content will be discarded.

            - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
            intermittent and/or non-aligned SCTE-20 and Embedded captions.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
            within the video track from which to extract captions. Unused for passthrough.

            - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

          - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
            via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
            into 708. 708 data present in the source content will be discarded.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
            within the video track from which to extract captions. Unused for passthrough.

          - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

            - **Pid** *(integer) --* The pid field is used in conjunction with the caption
            selector languageCode field as follows: - Specify PID and Language: Extracts
            captions from that PID; the language is "informational". - Specify PID and omit
            Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
            the specified language, whichever PID that happens to be. - Omit PID and omit
            Language: Valid only if source is DVB-Sub that is being passed through; all
            languages will be passed through.

          - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

            - **PageNumber** *(string) --* Specifies the teletext page number within the data
            stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303).
            Unused for passthrough. Should be specified as a hexadecimal string with no "0x"
            prefix.

    - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

    - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

    - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
    to 5 (strongest).

    - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
    the deblocking filter enabled by default. 1) auto - filtering will be applied depending
    on input type/quality 2) disabled - no filtering will be applied to the input 3) forced -
    filtering will be applied regardless of input type

    - **NetworkInputSettings** *(dict) --* Input settings.

      - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
      HLS manifest.

        - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH
        that most closely matches this value will be chosen, otherwise the highest bandwidth
        stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in
        an HLS manifest.

        - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
        begin this many buffer segments from the end (most recently written segment). When
        not specified, the HLS input will begin with the first segment specified in the m3u8.

        - **Retries** *(integer) --* The number of consecutive times that attempts to read a
        manifest or segment must fail before the input is considered unavailable.

        - **RetryInterval** *(integer) --* The number of seconds between retries when an
        attempt to read a manifest or segment fails.

      - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
      checkCryptographyOnly, cryptography in the certificate will be checked, but not the
      server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name)
      do not strictly match the corresponding certificate's wildcard pattern and would
      otherwise cause the event to error. This setting is ignored for protocols that do not
      use https.

    - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
    input to be streamed indefinitely.

    - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input
    types that have multiple available.

      - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
      works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice
      to determine if any conversion will be performed.

      - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
      follow. This field controls how the value in the colorSpace field will be used.
      fallback means that when the input does include color space data, that data will be
      used, but when the input has no color space data, the value in colorSpace will be used.
      Choose fallback if your input is sometimes missing color space data, but when it does
      have color space data, that data is correct. force means to always use the value in
      colorSpace. Choose force if your input usually has no color space data or might have
      unreliable color space data.

      - **SelectorSettings** *(dict) --* The video selector settings.

        - **VideoSelectorPid** *(dict) --* Video Selector Pid

          - **Pid** *(integer) --* Selects a specific PID from within a video source.

        - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

          - **ProgramId** *(integer) --* Selects a specific program from within a
          multi-program transport stream. If the program doesn't exist, the first program
          within the transport stream will be selected by default.
    """


_ClientStopChannelResponseInputAttachmentsTypeDef = TypedDict(
    "_ClientStopChannelResponseInputAttachmentsTypeDef",
    {
        "InputAttachmentName": str,
        "InputId": str,
        "InputSettings": ClientStopChannelResponseInputAttachmentsInputSettingsTypeDef,
    },
    total=False,
)


class ClientStopChannelResponseInputAttachmentsTypeDef(
    _ClientStopChannelResponseInputAttachmentsTypeDef
):
    """
    Type definition for `ClientStopChannelResponse` `InputAttachments`

    - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
    required if the user wants to use this input in an input switch action.

    - **InputId** *(string) --* The ID of the input

    - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

      - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
      that have multiple available.

        - *(dict) --* Audio Selector

          - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
          this name to uniquely identify this Selector. Selector names should be unique per
          input.

          - **SelectorSettings** *(dict) --* The audio selector settings.

            - **AudioLanguageSelection** *(dict) --* Audio Language Selection

              - **LanguageCode** *(string) --* Selects a specific three-letter language code
              from within an audio source.

              - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
              stream demux strictly identifies audio streams by their language descriptor. If a
              PMT update occurs such that an audio stream matching the initially selected
              language is no longer present then mute will be encoded until the language
              returns. If "loose", then on a PMT update the demux will choose another audio
              stream in the program with the same stream type if it can't find one with the
              same language.

            - **AudioPidSelection** *(dict) --* Audio Pid Selection

              - **Pid** *(integer) --* Selects a specific PID from within a source.

      - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
      that have multiple available.

        - *(dict) --* Output groups for this Live Event. Output groups contain information
        about where streams should be distributed.

          - **LanguageCode** *(string) --* When specified this field indicates the three letter
          language code of the caption track to extract from the source.

          - **Name** *(string) --* Name identifier for a caption selector. This name is used to
          associate this caption selector with one or more caption descriptions. Names must be
          unique within an event.

          - **SelectorSettings** *(dict) --* Caption selector settings.

            - **AribSourceSettings** *(dict) --* Arib Source Settings

            - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

              - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
              PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
              is passed through, regardless of selectors.

            - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
              via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
              into 708. 708 data present in the source content will be discarded.

              - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
              intermittent and/or non-aligned SCTE-20 and Embedded captions.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
              within the video track from which to extract captions. Unused for passthrough.

              - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

            - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
              via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
              into 708. 708 data present in the source content will be discarded.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
              within the video track from which to extract captions. Unused for passthrough.

            - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

              - **Pid** *(integer) --* The pid field is used in conjunction with the caption
              selector languageCode field as follows: - Specify PID and Language: Extracts
              captions from that PID; the language is "informational". - Specify PID and omit
              Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
              the specified language, whichever PID that happens to be. - Omit PID and omit
              Language: Valid only if source is DVB-Sub that is being passed through; all
              languages will be passed through.

            - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

              - **PageNumber** *(string) --* Specifies the teletext page number within the data
              stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303).
              Unused for passthrough. Should be specified as a hexadecimal string with no "0x"
              prefix.

      - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

      - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

      - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
      to 5 (strongest).

      - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
      the deblocking filter enabled by default. 1) auto - filtering will be applied depending
      on input type/quality 2) disabled - no filtering will be applied to the input 3) forced -
      filtering will be applied regardless of input type

      - **NetworkInputSettings** *(dict) --* Input settings.

        - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
        HLS manifest.

          - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH
          that most closely matches this value will be chosen, otherwise the highest bandwidth
          stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in
          an HLS manifest.

          - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
          begin this many buffer segments from the end (most recently written segment). When
          not specified, the HLS input will begin with the first segment specified in the m3u8.

          - **Retries** *(integer) --* The number of consecutive times that attempts to read a
          manifest or segment must fail before the input is considered unavailable.

          - **RetryInterval** *(integer) --* The number of seconds between retries when an
          attempt to read a manifest or segment fails.

        - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
        checkCryptographyOnly, cryptography in the certificate will be checked, but not the
        server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name)
        do not strictly match the corresponding certificate's wildcard pattern and would
        otherwise cause the event to error. This setting is ignored for protocols that do not
        use https.

      - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
      input to be streamed indefinitely.

      - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input
      types that have multiple available.

        - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
        works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice
        to determine if any conversion will be performed.

        - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
        follow. This field controls how the value in the colorSpace field will be used.
        fallback means that when the input does include color space data, that data will be
        used, but when the input has no color space data, the value in colorSpace will be used.
        Choose fallback if your input is sometimes missing color space data, but when it does
        have color space data, that data is correct. force means to always use the value in
        colorSpace. Choose force if your input usually has no color space data or might have
        unreliable color space data.

        - **SelectorSettings** *(dict) --* The video selector settings.

          - **VideoSelectorPid** *(dict) --* Video Selector Pid

            - **Pid** *(integer) --* Selects a specific PID from within a video source.

          - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

            - **ProgramId** *(integer) --* Selects a specific program from within a
            multi-program transport stream. If the program doesn't exist, the first program
            within the transport stream will be selected by default.
    """


_ClientStopChannelResponseInputSpecificationTypeDef = TypedDict(
    "_ClientStopChannelResponseInputSpecificationTypeDef",
    {"Codec": str, "MaximumBitrate": str, "Resolution": str},
    total=False,
)


class ClientStopChannelResponseInputSpecificationTypeDef(
    _ClientStopChannelResponseInputSpecificationTypeDef
):
    """
    Type definition for `ClientStopChannelResponse` `InputSpecification`

    - **Codec** *(string) --* Input codec

    - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

    - **Resolution** *(string) --* Input resolution, categorized coarsely
    """


_ClientStopChannelResponsePipelineDetailsTypeDef = TypedDict(
    "_ClientStopChannelResponsePipelineDetailsTypeDef",
    {
        "ActiveInputAttachmentName": str,
        "ActiveInputSwitchActionName": str,
        "PipelineId": str,
    },
    total=False,
)


class ClientStopChannelResponsePipelineDetailsTypeDef(
    _ClientStopChannelResponsePipelineDetailsTypeDef
):
    """
    Type definition for `ClientStopChannelResponse` `PipelineDetails`

    - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
    currently being ingested by this pipeline.

    - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
    action that occurred most recently and that resulted in the switch to the current input
    attachment for this pipeline.

    - **PipelineId** *(string) --* Pipeline ID
    """


_ClientStopChannelResponseTypeDef = TypedDict(
    "_ClientStopChannelResponseTypeDef",
    {
        "Arn": str,
        "ChannelClass": str,
        "Destinations": List[Any],
        "EgressEndpoints": List[ClientStopChannelResponseEgressEndpointsTypeDef],
        "EncoderSettings": ClientStopChannelResponseEncoderSettingsTypeDef,
        "Id": str,
        "InputAttachments": List[ClientStopChannelResponseInputAttachmentsTypeDef],
        "InputSpecification": ClientStopChannelResponseInputSpecificationTypeDef,
        "LogLevel": str,
        "Name": str,
        "PipelineDetails": List[ClientStopChannelResponsePipelineDetailsTypeDef],
        "PipelinesRunningCount": int,
        "RoleArn": str,
        "State": str,
        "Tags": Dict[str, str],
    },
    total=False,
)


class ClientStopChannelResponseTypeDef(_ClientStopChannelResponseTypeDef):
    """
    Type definition for `ClientStopChannel` `Response`

    - **Arn** *(string) --* The unique arn of the channel.

    - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two
    pipelines or SINGLE_PIPELINE for a channel with one pipeline.

    - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there is
    one destination per output. For other types (HLS, for example), there is one destination per
    packager.

      - *(dict) --* Placeholder documentation for OutputDestination

        - **Id** *(string) --* User-specified id. This is used in an output group or an output.

        - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one
        destination for both encoders.

          - *(dict) --* MediaPackage Output Destination Settings

            - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination
            for this output group. You do not need to specify the individual inputs in
            MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines to
            the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must be in
            the same region.

        - **Settings** *(list) --* Destination settings for a standard output; one destination for
        each redundant encoder.

          - *(dict) --* Placeholder documentation for OutputDestinationSettings

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)

            - **Url** *(string) --* A URL specifying a destination

            - **Username** *(string) --* username for destination

    - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from

      - *(dict) --* Placeholder documentation for ChannelEgressEndpoint

        - **SourceIp** *(string) --* Public IP of where a channel's output comes from

    - **EncoderSettings** *(dict) --* Encoder Settings

      - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

        - *(dict) --* Audio Description

          - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

            - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
            to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

            - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
            corrected using the chosen algorithm. If set to measureOnly, the audio will be measured
            but not adjusted.

            - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
            entered, a default value will be used according to the chosen algorithm. The CALM Act
            (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
            recommends a target of -23 LKFS.

          - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
          for this AudioDescription.

          - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
          values for audioType are defined in ISO-IEC 13818-1.

          - **AudioTypeControl** *(string) --* Determines how audio type is determined.
          followInput: If the input contains an ISO 639 audioType, then that value is passed
          through to the output. If the input contains no ISO 639 audioType, the value in Audio
          Type is included in the output. useConfigured: The value in Audio Type is included in the
          output. Note that this field and audioType are both ignored if inputType is
          broadcasterMixedAd.

          - **CodecSettings** *(dict) --* Audio codec settings.

            - **AacSettings** *(dict) --* Aac Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
              rate control mode and profile.

              - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
              depend on rate control mode and profile. The adReceiverMix setting receives a stereo
              description plus control track and emits a mono AAC encode of the description track,
              with control data emitted in the PES header as per ETSI TS 101 154 Annex E.

              - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
              pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
              (audioType) will be set to 3, which signals to downstream systems that this stream
              contains "broadcaster mixed AD". Note that the input received by the encoder must
              contain pre-mixed audio; the encoder does not perform the mixing. The values in
              audioTypeControl and audioType (in AudioDescription) are ignored when set to
              broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed audio
              + AD.

              - **Profile** *(string) --* AAC Profile.

              - **RateControlMode** *(string) --* Rate Control Mode.

              - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

              - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control
              mode and profile.

              - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
              MPEG-2 Transport Stream containers.

              - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
              VBR.

            - **Ac3Settings** *(dict) --* Ac3 Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
              the coding mode.

              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
              emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

              - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
              channels.

              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
              audio is Dolby Digital, dialnorm will be passed through.

              - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
              signaling to the output bitstream as defined in the Dolby Digital specification.

              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
              the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

              - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will
              be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
              audio was not supplied from one of these streams, then the static metadata settings
              will be used.

            - **Eac3Settings** *(dict) --* Eac3 Settings

              - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
              attenuation to the surround channels. Only used for 3/2 coding mode.

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
              the coding mode.

              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
              emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

              - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
              channels.

              - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for
              all input channels.

              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
              audio is Dolby Digital Plus, dialnorm will be passed through.

              - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

              - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
              ensures that the instantaneous signal peaks do not exceed specified levels.

              - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
              LFE channel

              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to
              the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

              - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
              used for 3/2 coding mode.

              - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
              used for 3/2 coding mode.

              - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
              used for 3/2 coding mode.

              - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
              Only used for 3/2 coding mode.

              - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
              sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio
              was not supplied from one of these streams, then the static metadata settings will be
              used.

              - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will
              be passed through if it is present on the input. This detection is dynamic over the
              life of the transcode. Inputs that alternate between DD+ and non-DD+ content will
              have a consistent DD+ output as the system alternates between passthrough and
              encoding.

              - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
              phase shift to the surround channels. Only used for 3/2 coding mode.

              - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
              mode.

              - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
              center back surround channel is matrix encoded into the left and right surround
              channels.

              - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround
              is matrix encoded into the two channels.

            - **Mp2Settings** *(dict) --* Mp2 Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second.

              - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
              codingMode10 (for mono) or codingMode20 (for stereo).

              - **SampleRate** *(float) --* Sample rate in Hz.

            - **PassThroughSettings** *(dict) --* Pass Through Settings

          - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
          used if languageControlMode is useConfigured, or there is no ISO 639 language code
          specified in the input.

          - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
          language code of the output to follow the ISO 639 language code of the input. The
          languageCode will be used when useConfigured is set, or when followInput is selected but
          there is no ISO 639 language code specified by the input.

          - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name to
          uniquely identify this AudioDescription. Description names should be unique within this
          Live Event.

          - **RemixSettings** *(dict) --* Settings that control how input audio channels are
          remixed into the output audio channels.

            - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
            appropriate gain adjustments.

              - *(dict) --* Audio Channel Mapping

                - **InputChannelLevels** *(list) --* Indices and gain values for each input channel
                that should be remixed into this output channel.

                  - *(dict) --* Input Channel Level

                    - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable values
                    are within the range from -60 (mute) and 6 dB.

                    - **InputChannel** *(integer) --* The index of the input channel used as a
                    source.

                - **OutputChannel** *(integer) --* The index of the output channel being produced.

            - **ChannelsIn** *(integer) --* Number of input channels to be used.

            - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
            values: 1, 2, 4, 6, 8

          - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
          name displayed by the player (eg. English, or Director Commentary).

      - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

        - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
        black. Only bmp and png images are supported.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **State** *(string) --* When set to enabled, causes video, audio and captions to be
        blanked when insertion metadata is added.

      - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.

        - **AvailSettings** *(dict) --* Ad avail settings.

          - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
            added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
            messages and does not apply to OOB messages.

            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
            noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
            webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

          - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
            added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
            messages and does not apply to OOB messages.

            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
            noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
            webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **BlackoutSlate** *(dict) --* Settings for blackout slate.

        - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid
        black. Only bmp and png images are supported.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
        the video, audio, and captions, and raise the "Network Blackout Image" slate when an
        SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be lifted
        when the Network Start Segmentation Descriptor is encountered. The Network End and Network
        Start descriptors must contain a network ID that matches the value entered in "Network ID".

        - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout
        image. Image will be scaled to fill the entire output raster.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
        "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

        - **State** *(string) --* When set to enabled, causes video, audio and captions to be
        blanked when indicated by program metadata.

      - **CaptionDescriptions** *(list) --* Settings for caption decriptions

        - *(dict) --* Output groups for this Live Event. Output groups contain information about
        where streams should be distributed.

          - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use as
          a caption source when generating output captions. This field should match a
          captionSelector name.

          - **DestinationSettings** *(dict) --* Additional settings for captions destination that
          depend on the destination type.

            - **AribDestinationSettings** *(dict) --* Arib Destination Settings

            - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
              setting alignment to centered will place the captions at the bottom center of the
              output. Similarly, setting a left alignment will align captions to the bottom left of
              the output. If x and y positions are given in conjunction with the alignment
              parameter, the font will be justified (either left or centered) relative to those
              coordinates. Selecting "smart" justification will left-justify live subtitles and
              center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
              match.

              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
              captions. All burn-in and DVB-Sub font settings must match.

              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
              rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is equivalent
              to setting it to 0 (transparent). All burn-in and DVB-Sub font settings must match.

              - **Font** *(dict) --* External font file used for caption burn-in. File extension
              must be 'ttf' or 'tte'. Although the user can select output fonts for many different
              types of input captions, embedded, STL and teletext sources use a strict grid system.
              Using external fonts with these caption sources could cause unexpected display of
              proportional fonts. All burn-in and DVB-Sub font settings must match.

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                file accessible to the Live system (eg. a http:// URI) depending on the output
                type. For example, a RTMP destination should have a uri simliar to:
                "rtmp://fmsserver/live".

                - **Username** *(string) --* Documentation update needed

              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
              option is not valid for source captions that are STL, 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255
              is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
              is 96 dpi. All burn-in and DVB-Sub font settings must match.

              - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the
              size of the output. Giving a positive integer will specify the exact font size in
              points. All burn-in and DVB-Sub font settings must match.

              - **OutlineColor** *(string) --* Specifies font outline color. This option is not
              valid for source captions that are either 608/embedded or teletext. These source
              settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
              settings must match.

              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
              is not valid for source captions that are either 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
              captions. All burn-in and DVB-Sub font settings must match.

              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
              opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to 0
              (transparent). All burn-in and DVB-Sub font settings must match.

              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels to the left. All burn-in and DVB-Sub font settings must match.

              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels above the text. All burn-in and DVB-Sub font settings must match.

              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
              used to generate the output subtitles bitmap. Only applicable for Teletext inputs and
              DVB-Sub/Burn-in outputs.

              - **XPosition** *(integer) --* Specifies the horizontal position of the caption
              relative to the left side of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the left of the output. If no explicit xPosition is
              provided, the horizontal caption position will be determined by the alignment
              parameter. All burn-in and DVB-Sub font settings must match.

              - **YPosition** *(integer) --* Specifies the vertical position of the caption
              relative to the top of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the top of the output. If no explicit yPosition is
              provided, the caption will be positioned towards the bottom of the output. All
              burn-in and DVB-Sub font settings must match.

            - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
              setting alignment to centered will place the captions at the bottom center of the
              output. Similarly, setting a left alignment will align captions to the bottom left of
              the output. If x and y positions are given in conjunction with the alignment
              parameter, the font will be justified (either left or centered) relative to those
              coordinates. Selecting "smart" justification will left-justify live subtitles and
              center-justify pre-recorded subtitles. This option is not valid for source captions
              that are STL or 608/embedded. These source settings are already pre-defined by the
              caption stream. All burn-in and DVB-Sub font settings must match.

              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
              captions. All burn-in and DVB-Sub font settings must match.

              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
              rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
              equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
              must match.

              - **Font** *(dict) --* External font file used for caption burn-in. File extension
              must be 'ttf' or 'tte'. Although the user can select output fonts for many different
              types of input captions, embedded, STL and teletext sources use a strict grid system.
              Using external fonts with these caption sources could cause unexpected display of
              proportional fonts. All burn-in and DVB-Sub font settings must match.

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                file accessible to the Live system (eg. a http:// URI) depending on the output
                type. For example, a RTMP destination should have a uri simliar to:
                "rtmp://fmsserver/live".

                - **Username** *(string) --* Documentation update needed

              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
              option is not valid for source captions that are STL, 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255
              is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
              is 96 dpi. All burn-in and DVB-Sub font settings must match.

              - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
              size of the output. Giving a positive integer will specify the exact font size in
              points. All burn-in and DVB-Sub font settings must match.

              - **OutlineColor** *(string) --* Specifies font outline color. This option is not
              valid for source captions that are either 608/embedded or teletext. These source
              settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
              settings must match.

              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
              is not valid for source captions that are either 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
              captions. All burn-in and DVB-Sub font settings must match.

              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
              opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it to
              0 (transparent). All burn-in and DVB-Sub font settings must match.

              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels to the left. All burn-in and DVB-Sub font settings must match.

              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels above the text. All burn-in and DVB-Sub font settings must match.

              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
              used to generate the output subtitles bitmap. Only applicable for Teletext inputs and
              DVB-Sub/Burn-in outputs.

              - **XPosition** *(integer) --* Specifies the horizontal position of the caption
              relative to the left side of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the left of the output. If no explicit xPosition is
              provided, the horizontal caption position will be determined by the alignment
              parameter. This option is not valid for source captions that are STL, 608/embedded or
              teletext. These source settings are already pre-defined by the caption stream. All
              burn-in and DVB-Sub font settings must match.

              - **YPosition** *(integer) --* Specifies the vertical position of the caption
              relative to the top of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the top of the output. If no explicit yPosition is
              provided, the caption will be positioned towards the bottom of the output. This
              option is not valid for source captions that are STL, 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

            - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

            - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
            Destination Settings

            - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
            Settings

            - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
            Destination Settings

            - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

            - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

            - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

            - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

              - **StyleControl** *(string) --* When set to passthrough, passes through style and
              position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
              CFF-TT output or TTML output.

            - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

          - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
          http://www.loc.gov/standards/iso639-2/

          - **LanguageDescription** *(string) --* Human readable information to indicate captions
          available for players (eg. English, or Spanish).

          - **Name** *(string) --* Name of the caption description. Used to associate a caption
          description with an output. Names must be unique within an event.

      - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
      whole.

        - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
        Event.

        - **InputEndAction** *(string) --* Indicates the action to take when the current input
        completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
        restart at the beginning of the first input. When "none" is configured the encoder will
        transcode either black, a solid color, or a user specified slate images per the "Input Loss
        Behavior" configuration until the next input switch occurs (which is controlled through the
        Channel Schedule API).

        - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

          - **BlackFrameMsec** *(integer) --* Documentation update needed

          - **InputLossImageColor** *(string) --* When input loss image type is "color" this field
          specifies the color to use. Value: 6 hex characters representing the values of RGB.

          - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields
          specify the parameters for accessing the slate.

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
            accessible to the Live system (eg. a http:// URI) depending on the output type. For
            example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            - **Username** *(string) --* Documentation update needed

          - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a
          slate into the output after input loss exceeds blackFrameMsec.

          - **RepeatFrameMsec** *(integer) --* Documentation update needed

        - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
        PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to the
        other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each pipeline to
        the Unix epoch.

        - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the
        Live encoder should be paced by its system clock (which optionally may be locked to another
        source via NTP) or should be locked to the clock of the source that is providing the input
        stream.

        - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
        very low video framerates. This is commonly set to enabled for music channels with less
        than one video frame per second.

      - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

        - *(dict) --* Output groups for this Live Event. Output groups contain information about
        where streams should be distributed.

          - **Name** *(string) --* Custom output group name optionally defined by the user. Only
          letters, numbers, and the underscore character allowed; only 32 characters allowed.

          - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

            - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

              - **Destination** *(dict) --* A directory and base filename where archive files
              should be written.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
              before closing and starting a new one.

            - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

              - **Destination** *(dict) --* The destination for the frame capture files. Either the
              URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
              s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
              container, plus a file name prefix (for example,
              mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
              the prefix from the destination field (for example, "curling_") + name modifier + the
              counter (5 digits, starting from 00001) + extension (which is always .jpg). For
              example, curlingLow.00001.jpg

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **HlsGroupSettings** *(dict) --* Hls Group Settings

              - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals
              through to this group of Apple HLS outputs.

                - *(string) --* Hls Ad Markers

              - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
              each output in the media .m3u8 file. Can be used if base manifest is delivered from a
              different URL than the main .m3u8 file.

              - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
              each output in the media .m3u8 file. Can be used if base manifest is delivered from a
              different URL than the main .m3u8 file.

              - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
              caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

                - *(dict) --* Maps a caption channel to an ISO 693-2 language code
                (http://www.loc.gov/standards/iso639-2), with an optional description.

                  - **CaptionChannel** *(integer) --* The closed caption channel being described by
                  this CaptionLanguageMapping. Each channel mapping must have a unique channel
                  number (maximum of 4)

                  - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                  http://www.loc.gov/standards/iso639-2)

                  - **LanguageDescription** *(string) --* Textual description of language

              - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
              captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one
              language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each
              Language Code you specify. Make sure to specify the languages in the order in which
              they appear in the original source (if the source is embedded format) or the order of
              the caption selectors (if the source is other than embedded). Otherwise, languages in
              the manifest will not match up properly with the output captions. none: Include
              CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any CLOSED-CAPTIONS line from
              the manifest.

              - **ClientCache** *(string) --* When set to "disabled", sets the
              #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
              segments for later replay.

              - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default
              RFC-4281) during m3u8 playlist generation.

              - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
              16-byte hex value represented by a 32-character text string. If ivSource is set to
              "explicit" then this parameter is required and is used as the IV for encryption.

              - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
              manifest files, and encryption keys (if enabled).

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **DirectoryStructure** *(string) --* Place segments in subdirectories.

              - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
              scheme. Exclude this parameter if no encryption is desired.

              - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

                - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                  transfer encoding to Akamai. User should contact Akamai to enable this feature.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                  the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                  to wait until a restart is initiated. A value of 0 means never restart.

                  - **Salt** *(string) --* Salt for authenticated Akamai.

                  - **Token** *(string) --* Token parameter for authenticated akamai. If not
                  specified, _gda_ is used.

                - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                  the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                  to wait until a restart is initiated. A value of 0 means never restart.

                - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are
                  stored in non-persistent memory for faster reading and writing.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                  the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                  to wait until a restart is initiated. A value of 0 means never restart.

                - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                  transfer encoding to WebDAV.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made before
                  the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds
                  to wait until a restart is initiated. A value of 0 means never restart.

              - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
              manifest, but do create the master and media manifests (according to the Output
              Selection field). STANDARD: Create an I-frame-only manifest for each output that
              contains video, as well as the other manifests (according to the Output Selection
              field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
              I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
              position. For example, #EXT-X-BYTERANGE:160364@1461888"

              - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
              maximum number of segments in the media manifest file. After this maximum, older
              segments are removed from the media manifest. This number must be less than or equal
              to the Keep Segments field.

              - **InputLossAction** *(string) --* Parameter that control output group behavior on
              input loss.

              - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization
              Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
              If set to "include", IV is listed in the manifest, otherwise the IV is not in the
              manifest.

              - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
              Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
              If this setting is "followsSegmentNumber", it will cause the IV to change every
              segment (to match the segment number). If this is set to "explicit", you must enter a
              constantIv value.

              - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
              number of media segments (.ts files) to retain in the destination directory.

              - **KeyFormat** *(string) --* The value specifies how the key is represented in the
              resource identified by the URI. If parameter is absent, an implicit value of
              "identity" is used. A reverse DNS string can also be given.

              - **KeyFormatVersions** *(string) --* Either a single positive integer version value
              or a slash delimited list of version values (1/2/3).

              - **KeyProviderSettings** *(dict) --* The key provider settings.

                - **StaticKeySettings** *(dict) --* Static Key Settings

                  - **KeyProviderServer** *(dict) --* The URL of the license server used for
                  protecting content.

                    - **PasswordParam** *(string) --* key used to extract the password from EC2
                    Parameter store

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to
                    a file accessible to the Live system (eg. a http:// URI) depending on the
                    output type. For example, a RTMP destination should have a uri simliar to:
                    "rtmp://fmsserver/live".

                    - **Username** *(string) --* Documentation update needed

                  - **StaticKeyValue** *(string) --* Static key value as a 32 character hexadecimal
                  string.

              - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

              - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
              should use floating point or integer values for segment duration.

              - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
              looking ahead and back within the specified range for a nearby avail and extending
              the segment size if needed.

              - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
              the destination and manifest. If "live", only the number segments specified in
              keepSegments and indexNSegments are kept; newer segments replace older segments,
              which may prevent players from rewinding all the way to the beginning of the event.
              VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
              converting it to a "VOD" type manifest on completion of the stream.

              - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests (master
              manifest, if applicable, and media manifests) for this output group. SEGMENTSONLY:
              Does not generate any manifests for this output group.

              - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag
              in .m3u8 manifest files. The value is calculated as follows: either the program date
              and time are initialized using the input timecode source, or the time is initialized
              using the input timecode source and the date is initialized using the timestampOffset.

              - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
              EXT-X-PROGRAM-DATE-TIME entry, in seconds.

              - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
              each pipeline includes information about both pipelines: first its own media files,
              then the media files of the other pipeline. This feature allows playout device that
              support stale manifest detection to switch from one manifest to the other, when the
              current manifest seems to be stale. There are still two destinations and two master
              manifests, but both master manifests reference the media files from both pipelines.
              DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
              about its own pipeline only. For an HLS output group with MediaPackage as the
              destination, the DISABLED behavior is always followed. MediaPackage regenerates the
              manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

              - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
              create (in seconds). Note that segments will end on the next keyframe after this
              number of seconds, so actual segment length may be longer.

              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
              configured segment size is always used.

              - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
              subdirectory before starting a new one. directoryStructure must be
              subdirectoryPerStream for this setting to have an effect.

              - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
              video in EXT-X-STREAM-INF tag of variant manifest.

              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

              - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
              offset to fine tune the timestamps.

              - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
              multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
              program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags
              to index segments for playback. A typical use for this value is when sending the
              output to AWS Elemental MediaConvert, which can accept only a single media file.
              Playback while the channel is running is not guaranteed due to HTTP server caching.

            - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

              - **Destination** *(dict) --* MediaPackage channel destination.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

              - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point Identity"
              element used in each message placed in the sparse track. Only enabled if
              sparseTrackType is not "none".

              - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only
              MS Smooth output, the fragment absolute time will be set to the current timecode.
              This option does not write timecodes to the audio elementary stream.

              - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
              certificate chain to a trusted Certificate Authority (CA). This will cause https
              outputs to self-signed certificates to fail.

              - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
              retrying connection to the IIS server if the connection is lost. Content will be
              cached during this time and the cache will be be delivered to the IIS server once the
              connection is re-established.

              - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
              Elemental Live acts as a "Push" encoder to IIS.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
              only be specified if eventIdMode is set to useConfigured.

              - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
              IIS server. If no event ID is sent and the same Live Event is used without changing
              the publishing point, clients might see cached video from the previous run. Options:
              - "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and
              send an event ID based on the current timestamp - "noEventId" - do not send an event
              ID to the IIS server.

              - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
              server when stopping the event

              - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
              outputs.

              - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds).
              Fragment length must be compatible with GOP size and framerate.

              - **InputLossAction** *(string) --* Parameter that control output group behavior on
              input loss.

              - **NumRetries** *(integer) --* Number of retry attempts.

              - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
              to output failure, due to exhausting the numRetries on one segment, or exceeding
              filecacheDuration.

              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
              configured segment size is always used.

              - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the
              second pipeline.

              - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
              to generate a sparse track in this group of MS-Smooth outputs.

              - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so
              publishing point doesn't start until all streams start.

              - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
              timestampOffsetMode is set to useConfiguredOffset.

              - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
              useEventStartDate: Use the date the event was started as the offset -
              useConfiguredOffset: Use an explicitly configured date as the offset

            - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

              - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting
              with CDN

              - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up.
              If remote origin server stalls the RTMP connection and does not accept content fast
              enough the 'Media Cache' will fill up. When the cache reaches the duration specified
              by cacheLength the cache will stop accepting new content. If set to
              disconnectImmediately, the RTMP output will force a disconnect. Clear the media
              cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
              output will wait up to 5 minutes to allow the origin server to begin accepting data
              again.

              - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
              buffer size.

              - **CaptionData** *(string) --* Controls the types of data that passes to
              onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
              passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but 608
              data from both fields will be passed. If set to 'field1608' then only the data
              carried in 608 from field 1 video will be passed.

              - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input
              becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput:
              Stop transmitting data until input returns. This does not close the underlying RTMP
              connection.

              - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
              wait until a restart is initiated. A value of 0 means never restart.

            - **UdpGroupSettings** *(dict) --* Udp Group Settings

              - **InputLossAction** *(string) --* Specifies behavior of last resort when input
              video is lost, and no more backup inputs are available. When dropTs is selected the
              entire transport stream will stop being emitted. When dropProgram is selected the
              program can be dropped from the transport stream (and replaced with null packets to
              meet the TS bitrate requirement). Or, when emitProgram is chosen the transport stream
              will continue to be produced normally with repeat frames, black frames, or slate
              frames substituted for the absent input video.

              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

          - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

            - *(dict) --* Output settings. There can be multiple outputs within a group.

              - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
              audio sources for this output.

                - *(string) --* Placeholder documentation for __string

              - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
              as caption sources for this output.

                - *(string) --* Placeholder documentation for __string

              - **OutputName** *(string) --* The name used to identify an output.

              - **OutputSettings** *(dict) --* Output type-specific settings.

                - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                  - **ContainerSettings** *(dict) --* Settings specific to the container type of
                  the file.

                    - **M2tsSettings** *(dict) --* M2ts Settings

                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                      streams will be removed from the program if the selected input audio stream
                      is removed from the input. This allows the output audio configuration to
                      dynamically change based on input configuration. If this is set to
                      encodeSilence, all output audio streams will output encoded silence when not
                      connected to an active input stream.

                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                      muxing and removes video descriptor.

                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                      for ARIB Captions will be auto-selected from unused pids. If set to
                      useConfigured, ARIB Captions will be on the configured pid number.

                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                      for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                      stream(s) in the transport stream. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81
                      for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type =
                      0x06.

                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                      bits per second. Setting to 0 lets the muxer automatically determine the
                      appropriate bitrate.

                      - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                      model for accurate interleaving. Setting to bufferModel to none can lead to
                      lower latency, but low-memory devices may not be able to play back the stream
                      without interruptions.

                      - **CcDescriptor** *(string) --* When set to enabled, generates
                      captionServiceDescriptor in PMT.

                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT)
                      at the specified table repetition interval.

                        - **NetworkId** *(integer) --* The numeric value placed in the Network
                        Information Table (NIT).

                        - **NetworkName** *(string) --* The network name text placed in the
                        networkNameDescriptor inside the Network Information Table. Maximum length
                        is 256 characters.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT)
                      at the specified table repetition interval.

                        - **OutputSdt** *(string) --* Selects method of inserting SDT information
                        into output stream. The sdtFollow setting copies SDT information from input
                        stream to output stream. The sdtFollowIfPresent setting copies SDT
                        information from input stream to output stream if SDT information is
                        present in the input, otherwise it will fall back on the user-defined
                        values. The sdtManual setting means user will enter the SDT information.
                        The sdtNone setting means output stream will not contain SDT information.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                        - **ServiceName** *(string) --* The service name placed in the
                        serviceDescriptor in the Service Description Table. Maximum length is 256
                        characters.

                        - **ServiceProviderName** *(string) --* The service provider name placed in
                        the serviceDescriptor in the Service Description Table. Maximum length is
                        256 characters.

                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                      Subtitle data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                      specified table repetition interval.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                      DVB Teletext data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                      input source to this output.

                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                      audio EBP markers will be added to partitions 3 and 4. The interval between
                      these additional markers will be fixed, and will be slightly shorter than the
                      video EBP marker interval. Only available when EBP Cablelabs segmentation
                      markers are selected. Partitions 1 and 2 will always follow the video
                      interval.

                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                      Points do not come within the specified time interval of each other by
                      looking ahead at input video. If another EBP is going to come in within the
                      specified time interval, the current EBP is not emitted, and the segment is
                      "stretched" to the next marker. The lookahead value does not add latency to
                      the system. The Live Event must be configured elsewhere to create sufficient
                      latency to make the lookahead accurate.

                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If
                      set to videoAndAudioPids, EBP markers will be placed on the video PID and all
                      audio PIDs. If set to videoPid, EBP markers will be placed on only the video
                      PID.

                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                      PES header.

                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Platform data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                      Signal data to this output. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **FragmentTime** *(float) --* The length in seconds of each fragment. Only
                      used with EBP markers.

                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                      input source to this output.

                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV
                      data to this output. Multiple values are accepted, and can be entered in
                      ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                      values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or
                      0x1ff6).

                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                      packets to insert into the transport stream. This can be used if a downstream
                      encryption system requires periodic null packets.

                      - **PatInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. Valid values are 0, 10..1000.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                      Reference value is inserted for every Packetized Elementary Stream (PES)
                      header. This parameter is effective only when the PCR PID is the same as the
                      video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock Reference (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the encoder
                      will assign the same value as the Video PID. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **PmtInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. Valid values are 0, 10..1000.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                      (PMT) in the transport stream. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **ProgramNum** *(integer) --* The value of the program number field in the
                      Program Map Table.

                      - **RateMode** *(string) --* When vbr, does not insert null packets into
                      transport stream to fill specified bitrate. The bitrate setting acts as the
                      maximum bitrate when vbr is set.

                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                      SCTE-27 data to this output. Multiple values are accepted, and can be entered
                      in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                      input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                      segmentationTime period. raiSegstart sets the Random Access Indicator bit in
                      the adaptation field. raiAdapt sets the RAI bit and adds the current timecode
                      in the private data bytes. psiSegstart inserts PAT and PMT tables at the
                      start of segments. ebp adds Encoder Boundary Point information to the
                      adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                      ebpLegacy adds Encoder Boundary Point information to the adaptation field
                      using a legacy proprietary format.

                      - **SegmentationStyle** *(string) --* The segmentation style parameter
                      controls how segmentation markers are inserted into the transport stream.
                      With avails, it is possible that segments may be truncated, which can
                      influence where future segmentation markers are inserted. When a segmentation
                      style of "resetCadence" is selected and a segment is truncated due to an
                      avail, we will reset the segmentation cadence. This means the subsequent
                      segment will have a duration of $segmentationTime seconds. When a
                      segmentation style of "maintainCadence" is selected and a segment is
                      truncated due to an avail, we will not reset the segmentation cadence. This
                      means the subsequent segment will likely be truncated as well. However, all
                      segments after that will have a duration of $segmentationTime seconds. Note
                      that EBP lookahead is a slight exception to this rule.

                      - **SegmentationTime** *(float) --* The length in seconds of each segment.
                      Required unless markers is set to None_.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata will be passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                      stream in the transport stream. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                  - **Extension** *(string) --* Output file extension. If excluded, this will be
                  auto-selected from the container type.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Required for multiple outputs of the same type.

                - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                  - **NameModifier** *(string) --* Required if the output group contains more than
                  one output. This modifier forms part of the output file name.

                - **HlsOutputSettings** *(dict) --* Hls Output Settings

                  - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                  settings are different for audio-only outputs.

                    - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                      - **AudioGroupId** *(string) --* Specifies the group to which the audio
                      Rendition belongs.

                      - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                      to use as the cover art for an audio-only output. We recommend a low bit-size
                      file because the image increases the output audio bandwidth. The image is
                      attached to the audio as an ID3 tag, frame type APIC, picture type 0x10, as
                      per the "ID3 tag version 2.4.0 - Native Frames" standard.

                        - **PasswordParam** *(string) --* key used to extract the password from EC2
                        Parameter store

                        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                        to a file accessible to the Live system (eg. a http:// URI) depending on
                        the output type. For example, a RTMP destination should have a uri simliar
                        to: "rtmp://fmsserver/live".

                        - **Username** *(string) --* Documentation update needed

                      - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                      supported: Audio-Only Variant Stream The client can play back this audio-only
                      stream instead of video in low-bandwidth scenarios. Represented as an
                      EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default
                      Alternate rendition that the client should try to play back by default.
                      Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES,
                      AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition
                      that the client may try to play back by default. Represented as an
                      EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate
                      Audio, not Auto Select Alternate rendition that the client will not try to
                      play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with
                      DEFAULT=NO, AUTOSELECT=NO

                    - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                      - **AudioRenditionSets** *(string) --* List all the audio groups that are
                      used with the video output stream. Input all the audio GROUP-IDs that are
                      associated to the video, separate by ','.

                      - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                        - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                        for each PES packet.

                        - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                        audio stream(s) in the transport stream. Multiple values are accepted, and
                        can be entered in ranges and/or by comma separation. Can be entered as
                        decimal or hexadecimal values.

                        - **EcmPid** *(string) --* This parameter is unused and deprecated.

                        - **PatInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. A value of \\"0\\"
                        writes out the PMT once per segment file.

                        - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                        Clock Reference value is inserted for every Packetized Elementary Stream
                        (PES) header. This parameter is effective only when the PCR PID is the same
                        as the video or audio elementary stream.

                        - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                        Clock References (PCRs) inserted into the transport stream.

                        - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                        Reference (PCR) in the transport stream. When no value is given, the
                        encoder will assign the same value as the Video PID. Can be entered as a
                        decimal or hexadecimal value.

                        - **PmtInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. A value of \\"0\\"
                        writes out the PMT once per segment file.

                        - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                        Table (PMT) in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                        - **ProgramNum** *(integer) --* The value of the program number field in
                        the Program Map Table.

                        - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                        SCTE-35 signals from the input source to this output.

                        - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                        in the transport stream. Can be entered as a decimal or hexadecimal value.

                        - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                        metadata is passed through from input to output.

                        - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                        metadata stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **TransportStreamId** *(integer) --* The value of the transport stream ID
                        field in the Program Map Table.

                        - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                        video stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Accepts \\"Format
                  Identifiers\\":#formatIdentifierParameters.

                  - **SegmentModifier** *(string) --* String concatenated to end of segment
                  filenames.

                - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

                - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                  - **H265PackagingType** *(string) --* Only applicable when this output is
                  referencing an H.265 video description. Specifies whether MP4 segments should be
                  packaged as HEV1 or HVC1.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Required for multiple outputs of the same type.

                - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                  - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls
                  certificate chain to a trusted Certificate Authority (CA). This will cause rtmps
                  outputs with self-signed certificates to fail.

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying a connection to the Flash Media server if the connection is lost.

                  - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                  rtmp://host/appname). For connection to Akamai, a username and password must be
                  supplied. URI fields accept format identifiers.

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                  - **NumRetries** *(integer) --* Number of retry attempts.

                - **UdpOutputSettings** *(dict) --* Udp Output Settings

                  - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                  values increase latency through the transcoder but simultaneously assist the
                  transcoder in maintaining a constant, low-jitter UDP/RTP output while
                  accommodating clock recovery, input switching, input disruptions, picture
                  reordering, etc.

                  - **ContainerSettings** *(dict) --* Udp Container Settings

                    - **M2tsSettings** *(dict) --* M2ts Settings

                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                      streams will be removed from the program if the selected input audio stream
                      is removed from the input. This allows the output audio configuration to
                      dynamically change based on input configuration. If this is set to
                      encodeSilence, all output audio streams will output encoded silence when not
                      connected to an active input stream.

                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                      muxing and removes video descriptor.

                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                      for ARIB Captions will be auto-selected from unused pids. If set to
                      useConfigured, ARIB Captions will be on the configured pid number.

                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                      for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                      stream(s) in the transport stream. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81
                      for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type =
                      0x06.

                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                      bits per second. Setting to 0 lets the muxer automatically determine the
                      appropriate bitrate.

                      - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                      model for accurate interleaving. Setting to bufferModel to none can lead to
                      lower latency, but low-memory devices may not be able to play back the stream
                      without interruptions.

                      - **CcDescriptor** *(string) --* When set to enabled, generates
                      captionServiceDescriptor in PMT.

                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT)
                      at the specified table repetition interval.

                        - **NetworkId** *(integer) --* The numeric value placed in the Network
                        Information Table (NIT).

                        - **NetworkName** *(string) --* The network name text placed in the
                        networkNameDescriptor inside the Network Information Table. Maximum length
                        is 256 characters.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT)
                      at the specified table repetition interval.

                        - **OutputSdt** *(string) --* Selects method of inserting SDT information
                        into output stream. The sdtFollow setting copies SDT information from input
                        stream to output stream. The sdtFollowIfPresent setting copies SDT
                        information from input stream to output stream if SDT information is
                        present in the input, otherwise it will fall back on the user-defined
                        values. The sdtManual setting means user will enter the SDT information.
                        The sdtNone setting means output stream will not contain SDT information.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                        - **ServiceName** *(string) --* The service name placed in the
                        serviceDescriptor in the Service Description Table. Maximum length is 256
                        characters.

                        - **ServiceProviderName** *(string) --* The service provider name placed in
                        the serviceDescriptor in the Service Description Table. Maximum length is
                        256 characters.

                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                      Subtitle data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                      specified table repetition interval.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                      DVB Teletext data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                      input source to this output.

                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                      audio EBP markers will be added to partitions 3 and 4. The interval between
                      these additional markers will be fixed, and will be slightly shorter than the
                      video EBP marker interval. Only available when EBP Cablelabs segmentation
                      markers are selected. Partitions 1 and 2 will always follow the video
                      interval.

                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                      Points do not come within the specified time interval of each other by
                      looking ahead at input video. If another EBP is going to come in within the
                      specified time interval, the current EBP is not emitted, and the segment is
                      "stretched" to the next marker. The lookahead value does not add latency to
                      the system. The Live Event must be configured elsewhere to create sufficient
                      latency to make the lookahead accurate.

                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If
                      set to videoAndAudioPids, EBP markers will be placed on the video PID and all
                      audio PIDs. If set to videoPid, EBP markers will be placed on only the video
                      PID.

                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                      PES header.

                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Platform data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                      Signal data to this output. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **FragmentTime** *(float) --* The length in seconds of each fragment. Only
                      used with EBP markers.

                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                      input source to this output.

                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV
                      data to this output. Multiple values are accepted, and can be entered in
                      ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                      values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or
                      0x1ff6).

                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                      packets to insert into the transport stream. This can be used if a downstream
                      encryption system requires periodic null packets.

                      - **PatInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. Valid values are 0, 10..1000.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                      Reference value is inserted for every Packetized Elementary Stream (PES)
                      header. This parameter is effective only when the PCR PID is the same as the
                      video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock Reference (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the encoder
                      will assign the same value as the Video PID. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **PmtInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. Valid values are 0, 10..1000.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                      (PMT) in the transport stream. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **ProgramNum** *(integer) --* The value of the program number field in the
                      Program Map Table.

                      - **RateMode** *(string) --* When vbr, does not insert null packets into
                      transport stream to fill specified bitrate. The bitrate setting acts as the
                      maximum bitrate when vbr is set.

                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                      SCTE-27 data to this output. Multiple values are accepted, and can be entered
                      in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                      input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                      segmentationTime period. raiSegstart sets the Random Access Indicator bit in
                      the adaptation field. raiAdapt sets the RAI bit and adds the current timecode
                      in the private data bytes. psiSegstart inserts PAT and PMT tables at the
                      start of segments. ebp adds Encoder Boundary Point information to the
                      adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                      ebpLegacy adds Encoder Boundary Point information to the adaptation field
                      using a legacy proprietary format.

                      - **SegmentationStyle** *(string) --* The segmentation style parameter
                      controls how segmentation markers are inserted into the transport stream.
                      With avails, it is possible that segments may be truncated, which can
                      influence where future segmentation markers are inserted. When a segmentation
                      style of "resetCadence" is selected and a segment is truncated due to an
                      avail, we will reset the segmentation cadence. This means the subsequent
                      segment will have a duration of $segmentationTime seconds. When a
                      segmentation style of "maintainCadence" is selected and a segment is
                      truncated due to an avail, we will not reset the segmentation cadence. This
                      means the subsequent segment will likely be truncated as well. However, all
                      segments after that will have a duration of $segmentationTime seconds. Note
                      that EBP lookahead is a slight exception to this rule.

                      - **SegmentationTime** *(float) --* The length in seconds of each segment.
                      Required unless markers is set to None_.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata will be passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                      stream in the transport stream. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                  - **Destination** *(dict) --* Destination address and port number for RTP or UDP
                  packets. Can be unicast or multicast RTP or UDP (eg. rtp://239.10.10.10:5001 or
                  udp://10.100.100.100:5002).

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                  - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                  Error Correction on UDP outputs.

                    - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                    the FEC protection matrix. The number of transport stream packets per column
                    error correction packet. Must be between 4 and 20, inclusive.

                    - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                    - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the
                    FEC protection matrix. Must be between 1 and 20, inclusive. If only Column FEC
                    is used, then larger values increase robustness. If Row FEC is used, then this
                    is the number of transport stream packets per row error correction packet, and
                    the value must be between 4 and 20, inclusive, if includeFec is columnAndRow.
                    If includeFec is column, this value must be 1 to 20, inclusive.

              - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the
              source for this output.

      - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
      information from inputs.

        - **Source** *(string) --* Identifies the source for the timecode that will be associated
        with the events outputs. -Embedded (embedded): Initialize the output timecode with timecode
        from the the source. If no embedded timecode is detected in the source, the system falls
        back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time.
        -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.

        - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
        resynchronized to the input timecode. Discrepancies below this threshold are permitted to
        avoid unnecessary discontinuities in the output timecode. No timecode sync when this is not
        specified.

      - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

        - *(dict) --* Video settings for this stream.

          - **CodecSettings** *(dict) --* Video codec settings.

            - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

              - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing frames
              for inclusion in the output. For example, "10" means capture a frame every 10 seconds.

            - **H264Settings** *(dict) --* H264 Settings

              - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
              quantizers to vary to improve visual quality.

              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
              output stream. If afdSignaling is "auto", the system will try to preserve the input
              AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
              value will be the value configured in the fixedAfd parameter.

              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
              control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
              output must have a unique value when its bitrate is rounded down to the nearest
              multiple of 1000.

              - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
              filled (HRD buffer model).

              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              - **ColorSpaceSettings** *(dict) --* Color Space settings

                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
                conversion to the output

                - **Rec601Settings** *(dict) --* Rec601 Settings

                - **Rec709Settings** *(dict) --* Rec709 Settings

              - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main
              or High profile) or cavlc.

              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
              the output stream. Only valid when afdSignaling is set to 'Fixed'.

              - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
              frame to reduce flicker or 'pop' on I-frames.

              - **FramerateControl** *(string) --* This field indicates how the output video frame
              rate is specified. If "specified" is selected then the output video frame rate is
              determined by framerateNumerator and framerateDenominator, else if
              "initializeFromSource" is selected then the output video frame rate will be set equal
              to the input video frame rate of the first input.

              - **FramerateDenominator** *(integer) --* Framerate denominator.

              - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
              fraction, e.g. 24000 / 1001 = 23.976 fps.

              - **GopBReference** *(string) --* Documentation update needed

              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
              applications, it is recommended that this be set to 1 so a decoder joining mid-stream
              will receive an IDR frame as quickly as possible. Setting this value to 0 will break
              output segmenting.

              - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
              seconds per gopSizeUnits. Must be greater than zero.

              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
              seconds. If seconds the system will convert the gopSize into a frame count at run
              time.

              - **Level** *(string) --* H.264 Level.

              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
              decrease latency and memory usage, while high can produce better quality for certain
              content.

              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR:
              Set the maximum bitrate in order to accommodate expected spikes in the complexity of
              the video.

              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
              enabled. Enforces separation between repeated (cadence) I-frames and I-frames
              inserted by Scene Change Detection. If a scene change I-frame is within I-interval
              frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
              I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
              normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
              Min-I-interval - 1

              - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may
              use more than requested if using B-frames and/or interlaced encoding.

              - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio
              is specified. If "specified" is selected then the output video pixel aspect ratio is
              determined by parNumerator and parDenominator, else if "initializeFromSource" is
              selected then the output pixsel aspect ratio will be set equal to the input video
              pixel aspect ratio of the first input.

              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              - **Profile** *(string) --* H.264 Profile.

              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
              encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
              quality level field and Max bitrate field that suit your most important viewing
              devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
              bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
              Quality level: 6. Max bitrate: 1M to 1.5M

              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
              specified quality level except when it is constrained by the maximum bitrate.
              Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary,
              depending on the video complexity. Recommended instead of QVBR if you want to
              maintain a specific average bitrate over the duration of the channel. CBR: Quality
              varies, depending on the video complexity. Recommended only if you distribute your
              assets to devices that cannot handle variable bitrates.

              - **ScanType** *(string) --* Sets the scan type of the output to progressive or
              top-field-first interlaced.

              - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames
              when scene change is detected. - Off: does not force an I-frame when scene change is
              detected.

              - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
              to the number of macroblock rows for progressive pictures, and less than or equal to
              half the number of macroblock rows for interlaced pictures. This field is optional;
              when no value is specified the encoder will choose the number of slices based on
              encode resolution.

              - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
              reduce high-frequency content in the encoded image.

              - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
              frame based on spatial variation of content complexity.

              - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
              sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP to
              improve visual quality.

              - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

              - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
              frame based on temporal variation of content complexity.

              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
              into the video elementary stream. - 'disabled': Do not include timecodes -
              'picTimingSei': Pass through picture timing SEI messages from the source specified in
              Timecode Config

            - **H265Settings** *(dict) --* H265 Settings

              - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
              quantizers to vary to improve visual quality.

              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
              output stream. If afdSignaling is "auto", the system will try to preserve the input
              AFD value (in cases where multiple AFD values are valid). If set to "fixed", the AFD
              value will be the value configured in the fixedAfd parameter.

              - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
              Alternative Transfer Function SEI message to support backwards compatibility with
              non-HDR decoders and displays.

              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
              control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
              output must have a unique value when its bitrate is rounded down to the nearest
              multiple of 1000.

              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              - **ColorSpaceSettings** *(dict) --* Color Space settings

                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
                conversion to the output

                - **Hdr10Settings** *(dict) --* Hdr10 Settings

                  - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
                  defining the maximum light level, in nits, of any single pixel within an encoded
                  HDR video stream or file.

                  - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                  metadata value defining the maximum average light level, in nits, for any single
                  frame within an encoded HDR video stream or file.

                - **Rec601Settings** *(dict) --* Rec601 Settings

                - **Rec709Settings** *(dict) --* Rec709 Settings

              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
              the output stream. Only valid when afdSignaling is set to 'Fixed'.

              - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
              frame to reduce flicker or 'pop' on I-frames.

              - **FramerateDenominator** *(integer) --* Framerate denominator.

              - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
              fraction, e.g. 24000 / 1001 = 23.976 fps.

              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
              applications, it is recommended that this be set to 1 so a decoder joining mid-stream
              will receive an IDR frame as quickly as possible. Setting this value to 0 will break
              output segmenting.

              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
              seconds per gopSizeUnits. Must be greater than zero.

              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
              seconds. If seconds the system will convert the gopSize into a frame count at run
              time.

              - **Level** *(string) --* H.265 Level.

              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
              decrease latency and memory usage, while high can produce better quality for certain
              content.

              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
              enabled. Enforces separation between repeated (cadence) I-frames and I-frames
              inserted by Scene Change Detection. If a scene change I-frame is within I-interval
              frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
              I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
              normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
              Min-I-interval - 1

              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              - **Profile** *(string) --* H.265 Profile.

              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
              encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
              quality level field and Max bitrate field that suit your most important viewing
              devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
              bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
              Quality level: 6. Max bitrate: 1M to 1.5M

              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
              specified quality level except when it is constrained by the maximum bitrate.
              Recommended if you or your viewers pay for bandwidth. CBR: Quality varies, depending
              on the video complexity. Recommended only if you distribute your assets to devices
              that cannot handle variable bitrates.

              - **ScanType** *(string) --* Sets the scan type of the output to progressive or
              top-field-first interlaced.

              - **SceneChangeDetect** *(string) --* Scene change detection.

              - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal
              to the number of macroblock rows for progressive pictures, and less than or equal to
              half the number of macroblock rows for interlaced pictures. This field is optional;
              when no value is specified the encoder will choose the number of slices based on
              encode resolution.

              - **Tier** *(string) --* H.265 Tier.

              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
              into the video elementary stream. - 'disabled': Do not include timecodes -
              'picTimingSei': Pass through picture timing SEI messages from the source specified in
              Timecode Config

          - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
          most codecs, you can leave this field and width blank in order to use the height and
          width (resolution) from the source. Note, however, that leaving blank is not recommended.
          For the Frame Capture codec, height and width are required.

          - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name to
          uniquely identify this Description. Description names should be unique within this Live
          Event.

          - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the input
          stream. RESPOND causes input video to be clipped, depending on the AFD value, input
          display aspect ratio, and output display aspect ratio, and (except for FRAMECAPTURE
          codec) includes the values in the output. PASSTHROUGH (does not apply to FRAMECAPTURE
          codec) ignores the AFD values and includes the values in the output, so input video is
          not clipped. NONE ignores the AFD values and does not include the values through to the
          output, so input video is not clipped.

          - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
          stretch the video to the specified output resolution (height and width). This option will
          override any position value. DEFAULT may insert black boxes (pillar boxes or letter
          boxes) around the video to provide the specified output resolution.

          - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
          scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
          for most content.

          - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
          most codecs, you can leave this field and height blank in order to use the height and
          width (resolution) from the source. Note, however, that leaving blank is not recommended.
          For the Frame Capture codec, height and width are required.

    - **Id** *(string) --* The unique id of the channel.

    - **InputAttachments** *(list) --* List of input attachments for channel.

      - *(dict) --* Placeholder documentation for InputAttachment

        - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
        required if the user wants to use this input in an input switch action.

        - **InputId** *(string) --* The ID of the input

        - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

          - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
          that have multiple available.

            - *(dict) --* Audio Selector

              - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
              this name to uniquely identify this Selector. Selector names should be unique per
              input.

              - **SelectorSettings** *(dict) --* The audio selector settings.

                - **AudioLanguageSelection** *(dict) --* Audio Language Selection

                  - **LanguageCode** *(string) --* Selects a specific three-letter language code
                  from within an audio source.

                  - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
                  stream demux strictly identifies audio streams by their language descriptor. If a
                  PMT update occurs such that an audio stream matching the initially selected
                  language is no longer present then mute will be encoded until the language
                  returns. If "loose", then on a PMT update the demux will choose another audio
                  stream in the program with the same stream type if it can't find one with the
                  same language.

                - **AudioPidSelection** *(dict) --* Audio Pid Selection

                  - **Pid** *(integer) --* Selects a specific PID from within a source.

          - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
          that have multiple available.

            - *(dict) --* Output groups for this Live Event. Output groups contain information
            about where streams should be distributed.

              - **LanguageCode** *(string) --* When specified this field indicates the three letter
              language code of the caption track to extract from the source.

              - **Name** *(string) --* Name identifier for a caption selector. This name is used to
              associate this caption selector with one or more caption descriptions. Names must be
              unique within an event.

              - **SelectorSettings** *(dict) --* Caption selector settings.

                - **AribSourceSettings** *(dict) --* Arib Source Settings

                - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

                  - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
                  PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
                  is passed through, regardless of selectors.

                - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
                  via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
                  into 708. 708 data present in the source content will be discarded.

                  - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
                  intermittent and/or non-aligned SCTE-20 and Embedded captions.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
                  within the video track from which to extract captions. Unused for passthrough.

                  - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

                - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through
                  via the "608 compatibility bytes" fields of the 708 wrapper as well as translated
                  into 708. 708 data present in the source content will be discarded.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
                  within the video track from which to extract captions. Unused for passthrough.

                - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

                  - **Pid** *(integer) --* The pid field is used in conjunction with the caption
                  selector languageCode field as follows: - Specify PID and Language: Extracts
                  captions from that PID; the language is "informational". - Specify PID and omit
                  Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
                  the specified language, whichever PID that happens to be. - Omit PID and omit
                  Language: Valid only if source is DVB-Sub that is being passed through; all
                  languages will be passed through.

                - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

                  - **PageNumber** *(string) --* Specifies the teletext page number within the data
                  stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303).
                  Unused for passthrough. Should be specified as a hexadecimal string with no "0x"
                  prefix.

          - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

          - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

          - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
          to 5 (strongest).

          - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
          the deblocking filter enabled by default. 1) auto - filtering will be applied depending
          on input type/quality 2) disabled - no filtering will be applied to the input 3) forced -
          filtering will be applied regardless of input type

          - **NetworkInputSettings** *(dict) --* Input settings.

            - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
            HLS manifest.

              - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH
              that most closely matches this value will be chosen, otherwise the highest bandwidth
              stream in the m3u8 will be chosen. The bitrate is specified in bits per second, as in
              an HLS manifest.

              - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
              begin this many buffer segments from the end (most recently written segment). When
              not specified, the HLS input will begin with the first segment specified in the m3u8.

              - **Retries** *(integer) --* The number of consecutive times that attempts to read a
              manifest or segment must fail before the input is considered unavailable.

              - **RetryInterval** *(integer) --* The number of seconds between retries when an
              attempt to read a manifest or segment fails.

            - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
            checkCryptographyOnly, cryptography in the certificate will be checked, but not the
            server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name)
            do not strictly match the corresponding certificate's wildcard pattern and would
            otherwise cause the event to error. This setting is ignored for protocols that do not
            use https.

          - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
          input to be streamed indefinitely.

          - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input
          types that have multiple available.

            - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
            works in tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice
            to determine if any conversion will be performed.

            - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
            follow. This field controls how the value in the colorSpace field will be used.
            fallback means that when the input does include color space data, that data will be
            used, but when the input has no color space data, the value in colorSpace will be used.
            Choose fallback if your input is sometimes missing color space data, but when it does
            have color space data, that data is correct. force means to always use the value in
            colorSpace. Choose force if your input usually has no color space data or might have
            unreliable color space data.

            - **SelectorSettings** *(dict) --* The video selector settings.

              - **VideoSelectorPid** *(dict) --* Video Selector Pid

                - **Pid** *(integer) --* Selects a specific PID from within a video source.

              - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

                - **ProgramId** *(integer) --* Selects a specific program from within a
                multi-program transport stream. If the program doesn't exist, the first program
                within the transport stream will be selected by default.

    - **InputSpecification** *(dict) --* Placeholder documentation for InputSpecification

      - **Codec** *(string) --* Input codec

      - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

      - **Resolution** *(string) --* Input resolution, categorized coarsely

    - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.

    - **Name** *(string) --* The name of the channel. (user-mutable)

    - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.

      - *(dict) --* Runtime details of a pipeline when a channel is running.

        - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
        currently being ingested by this pipeline.

        - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
        action that occurred most recently and that resulted in the switch to the current input
        attachment for this pipeline.

        - **PipelineId** *(string) --* Pipeline ID

    - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.

    - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running the
    Channel.

    - **State** *(string) --* Placeholder documentation for ChannelState

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string
    """


_ClientUpdateChannelClassDestinationsTypeDef = TypedDict(
    "_ClientUpdateChannelClassDestinationsTypeDef",
    {"Id": str, "MediaPackageSettings": List[Any], "Settings": List[Any]},
    total=False,
)


class ClientUpdateChannelClassDestinationsTypeDef(
    _ClientUpdateChannelClassDestinationsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClass` `Destinations`

    - **Id** *(string) --* User-specified id. This is used in an output group or an output.

    - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one
    destination for both encoders.

      - *(dict) --* MediaPackage Output Destination Settings

        - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination for
        this output group. You do not need to specify the individual inputs in MediaPackage;
        MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage
        inputs. The MediaPackage channel and MediaLive channel must be in the same region.

    - **Settings** *(list) --* Destination settings for a standard output; one destination for each
    redundant encoder.

      - *(dict) --* Placeholder documentation for OutputDestinationSettings

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

        - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)

        - **Url** *(string) --* A URL specifying a destination

        - **Username** *(string) --* username for destination
    """


_ClientUpdateChannelClassResponseChannelEgressEndpointsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEgressEndpointsTypeDef",
    {"SourceIp": str},
    total=False,
)


class ClientUpdateChannelClassResponseChannelEgressEndpointsTypeDef(
    _ClientUpdateChannelClassResponseChannelEgressEndpointsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannel` `EgressEndpoints`

    - **SourceIp** *(string) --* Public IP of where a channel's output comes from
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef",
    {"Algorithm": str, "AlgorithmControl": str, "TargetLkfs": float},
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptions` `AudioNormalizationSettings`

    - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
    to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

    - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
    corrected using the chosen algorithm. If set to measureOnly, the audio will be
    measured but not adjusted.

    - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value
    is entered, a default value will be used according to the chosen algorithm. The CALM
    Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
    recommends a target of -23 LKFS.
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef",
    {
        "Bitrate": float,
        "CodingMode": str,
        "InputType": str,
        "Profile": str,
        "RateControlMode": str,
        "RawFormat": str,
        "SampleRate": float,
        "Spec": str,
        "VbrQuality": str,
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettings` `AacSettings`

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
    rate control mode and profile.

    - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
    depend on rate control mode and profile. The adReceiverMix setting receives a
    stereo description plus control track and emits a mono AAC encode of the
    description track, with control data emitted in the PES header as per ETSI TS 101
    154 Annex E.

    - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
    pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
    (audioType) will be set to 3, which signals to downstream systems that this stream
    contains "broadcaster mixed AD". Note that the input received by the encoder must
    contain pre-mixed audio; the encoder does not perform the mixing. The values in
    audioTypeControl and audioType (in AudioDescription) are ignored when set to
    broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
    audio + AD.

    - **Profile** *(string) --* AAC Profile.

    - **RateControlMode** *(string) --* Rate Control Mode.

    - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

    - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
    control mode and profile.

    - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
    or MPEG-2 Transport Stream containers.

    - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
    VBR.
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef",
    {
        "Bitrate": float,
        "BitstreamMode": str,
        "CodingMode": str,
        "Dialnorm": int,
        "DrcProfile": str,
        "LfeFilter": str,
        "MetadataControl": str,
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettings` `Ac3Settings`

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
    the coding mode.

    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
    emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

    - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
    channels.

    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
    input audio is Dolby Digital, dialnorm will be passed through.

    - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
    compression signaling to the output bitstream as defined in the Dolby Digital
    specification.

    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
    to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

    - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
    will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
    If audio was not supplied from one of these streams, then the static metadata
    settings will be used.
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef",
    {
        "AttenuationControl": str,
        "Bitrate": float,
        "BitstreamMode": str,
        "CodingMode": str,
        "DcFilter": str,
        "Dialnorm": int,
        "DrcLine": str,
        "DrcRf": str,
        "LfeControl": str,
        "LfeFilter": str,
        "LoRoCenterMixLevel": float,
        "LoRoSurroundMixLevel": float,
        "LtRtCenterMixLevel": float,
        "LtRtSurroundMixLevel": float,
        "MetadataControl": str,
        "PassthroughControl": str,
        "PhaseControl": str,
        "StereoDownmix": str,
        "SurroundExMode": str,
        "SurroundMode": str,
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettings` `Eac3Settings`

    - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
    attenuation to the surround channels. Only used for 3/2 coding mode.

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
    the coding mode.

    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
    emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

    - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
    channels.

    - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
    for all input channels.

    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
    audio is Dolby Digital Plus, dialnorm will be passed through.

    - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

    - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
    compression, ensures that the instantaneous signal peaks do not exceed specified
    levels.

    - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
    LFE channel

    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
    to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

    - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
    used for 3/2 coding mode.

    - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
    Only used for 3/2 coding mode.

    - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
    used for 3/2 coding mode.

    - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
    Only used for 3/2 coding mode.

    - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
    be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
    audio was not supplied from one of these streams, then the static metadata settings
    will be used.

    - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
    will be passed through if it is present on the input. This detection is dynamic
    over the life of the transcode. Inputs that alternate between DD+ and non-DD+
    content will have a consistent DD+ output as the system alternates between
    passthrough and encoding.

    - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
    phase shift to the surround channels. Only used for 3/2 coding mode.

    - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
    coding mode.

    - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
    center back surround channel is matrix encoded into the left and right surround
    channels.

    - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
    Surround is matrix encoded into the two channels.
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef",
    {"Bitrate": float, "CodingMode": str, "SampleRate": float},
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettings` `Mp2Settings`

    - **Bitrate** *(float) --* Average bitrate in bits/second.

    - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
    codingMode10 (for mono) or codingMode20 (for stereo).

    - **SampleRate** *(float) --* Sample rate in Hz.
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef",
    {
        "AacSettings": ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef,
        "Ac3Settings": ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef,
        "Eac3Settings": ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef,
        "Mp2Settings": ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef,
        "PassThroughSettings": Dict[str, Any],
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptions` `CodecSettings`

    - **AacSettings** *(dict) --* Aac Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
      rate control mode and profile.

      - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
      depend on rate control mode and profile. The adReceiverMix setting receives a
      stereo description plus control track and emits a mono AAC encode of the
      description track, with control data emitted in the PES header as per ETSI TS 101
      154 Annex E.

      - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
      pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
      (audioType) will be set to 3, which signals to downstream systems that this stream
      contains "broadcaster mixed AD". Note that the input received by the encoder must
      contain pre-mixed audio; the encoder does not perform the mixing. The values in
      audioTypeControl and audioType (in AudioDescription) are ignored when set to
      broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
      audio + AD.

      - **Profile** *(string) --* AAC Profile.

      - **RateControlMode** *(string) --* Rate Control Mode.

      - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

      - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
      control mode and profile.

      - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
      or MPEG-2 Transport Stream containers.

      - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
      VBR.

    - **Ac3Settings** *(dict) --* Ac3 Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
      the coding mode.

      - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
      emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

      - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
      channels.

      - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
      input audio is Dolby Digital, dialnorm will be passed through.

      - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
      compression signaling to the output bitstream as defined in the Dolby Digital
      specification.

      - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
      to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

      - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
      will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
      If audio was not supplied from one of these streams, then the static metadata
      settings will be used.

    - **Eac3Settings** *(dict) --* Eac3 Settings

      - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
      attenuation to the surround channels. Only used for 3/2 coding mode.

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
      the coding mode.

      - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
      emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

      - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
      channels.

      - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
      for all input channels.

      - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
      audio is Dolby Digital Plus, dialnorm will be passed through.

      - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

      - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
      compression, ensures that the instantaneous signal peaks do not exceed specified
      levels.

      - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
      LFE channel

      - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
      to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

      - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
      used for 3/2 coding mode.

      - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
      Only used for 3/2 coding mode.

      - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
      used for 3/2 coding mode.

      - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
      Only used for 3/2 coding mode.

      - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
      be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
      audio was not supplied from one of these streams, then the static metadata settings
      will be used.

      - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
      will be passed through if it is present on the input. This detection is dynamic
      over the life of the transcode. Inputs that alternate between DD+ and non-DD+
      content will have a consistent DD+ output as the system alternates between
      passthrough and encoding.

      - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
      phase shift to the surround channels. Only used for 3/2 coding mode.

      - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
      coding mode.

      - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
      center back surround channel is matrix encoded into the left and right surround
      channels.

      - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
      Surround is matrix encoded into the two channels.

    - **Mp2Settings** *(dict) --* Mp2 Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second.

      - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
      codingMode10 (for mono) or codingMode20 (for stereo).

      - **SampleRate** *(float) --* Sample rate in Hz.

    - **PassThroughSettings** *(dict) --* Pass Through Settings
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsTypeDef",
    {
        "AudioNormalizationSettings": ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef,
        "AudioSelectorName": str,
        "AudioType": str,
        "AudioTypeControl": str,
        "CodecSettings": ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef,
        "LanguageCode": str,
        "LanguageCodeControl": str,
        "Name": str,
        "RemixSettings": Dict[str, Any],
        "StreamName": str,
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettings` `AudioDescriptions`

    - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

      - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
      to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

      - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
      corrected using the chosen algorithm. If set to measureOnly, the audio will be
      measured but not adjusted.

      - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value
      is entered, a default value will be used according to the chosen algorithm. The CALM
      Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
      recommends a target of -23 LKFS.

    - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
    for this AudioDescription.

    - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
    values for audioType are defined in ISO-IEC 13818-1.

    - **AudioTypeControl** *(string) --* Determines how audio type is determined.
    followInput: If the input contains an ISO 639 audioType, then that value is passed
    through to the output. If the input contains no ISO 639 audioType, the value in Audio
    Type is included in the output. useConfigured: The value in Audio Type is included in
    the output. Note that this field and audioType are both ignored if inputType is
    broadcasterMixedAd.

    - **CodecSettings** *(dict) --* Audio codec settings.

      - **AacSettings** *(dict) --* Aac Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
        rate control mode and profile.

        - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
        depend on rate control mode and profile. The adReceiverMix setting receives a
        stereo description plus control track and emits a mono AAC encode of the
        description track, with control data emitted in the PES header as per ETSI TS 101
        154 Annex E.

        - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
        pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
        (audioType) will be set to 3, which signals to downstream systems that this stream
        contains "broadcaster mixed AD". Note that the input received by the encoder must
        contain pre-mixed audio; the encoder does not perform the mixing. The values in
        audioTypeControl and audioType (in AudioDescription) are ignored when set to
        broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
        audio + AD.

        - **Profile** *(string) --* AAC Profile.

        - **RateControlMode** *(string) --* Rate Control Mode.

        - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

        - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
        control mode and profile.

        - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
        or MPEG-2 Transport Stream containers.

        - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
        VBR.

      - **Ac3Settings** *(dict) --* Ac3 Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
        the coding mode.

        - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
        emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

        - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
        channels.

        - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
        input audio is Dolby Digital, dialnorm will be passed through.

        - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
        compression signaling to the output bitstream as defined in the Dolby Digital
        specification.

        - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
        to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

        - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
        will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
        If audio was not supplied from one of these streams, then the static metadata
        settings will be used.

      - **Eac3Settings** *(dict) --* Eac3 Settings

        - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
        attenuation to the surround channels. Only used for 3/2 coding mode.

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
        the coding mode.

        - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
        emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

        - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
        channels.

        - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
        for all input channels.

        - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
        audio is Dolby Digital Plus, dialnorm will be passed through.

        - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

        - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
        compression, ensures that the instantaneous signal peaks do not exceed specified
        levels.

        - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
        LFE channel

        - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
        to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

        - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
        used for 3/2 coding mode.

        - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
        Only used for 3/2 coding mode.

        - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
        used for 3/2 coding mode.

        - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
        Only used for 3/2 coding mode.

        - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
        be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
        audio was not supplied from one of these streams, then the static metadata settings
        will be used.

        - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
        will be passed through if it is present on the input. This detection is dynamic
        over the life of the transcode. Inputs that alternate between DD+ and non-DD+
        content will have a consistent DD+ output as the system alternates between
        passthrough and encoding.

        - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
        phase shift to the surround channels. Only used for 3/2 coding mode.

        - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
        coding mode.

        - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
        center back surround channel is matrix encoded into the left and right surround
        channels.

        - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
        Surround is matrix encoded into the two channels.

      - **Mp2Settings** *(dict) --* Mp2 Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second.

        - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
        codingMode10 (for mono) or codingMode20 (for stereo).

        - **SampleRate** *(float) --* Sample rate in Hz.

      - **PassThroughSettings** *(dict) --* Pass Through Settings

    - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
    used if languageControlMode is useConfigured, or there is no ISO 639 language code
    specified in the input.

    - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
    language code of the output to follow the ISO 639 language code of the input. The
    languageCode will be used when useConfigured is set, or when followInput is selected
    but there is no ISO 639 language code specified by the input.

    - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name
    to uniquely identify this AudioDescription. Description names should be unique within
    this Live Event.

    - **RemixSettings** *(dict) --* Settings that control how input audio channels are
    remixed into the output audio channels.

      - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
      appropriate gain adjustments.

        - *(dict) --* Audio Channel Mapping

          - **InputChannelLevels** *(list) --* Indices and gain values for each input
          channel that should be remixed into this output channel.

            - *(dict) --* Input Channel Level

              - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable
              values are within the range from -60 (mute) and 6 dB.

              - **InputChannel** *(integer) --* The index of the input channel used as a
              source.

          - **OutputChannel** *(integer) --* The index of the output channel being produced.

      - **ChannelsIn** *(integer) --* Number of input channels to be used.

      - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
      values: 1, 2, 4, 6, 8

    - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
    name displayed by the player (eg. English, or Director Commentary).
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsAvailBlankingTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsAvailBlankingTypeDef",
    {"AvailBlankingImage": Dict[str, Any], "State": str},
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsAvailBlankingTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsAvailBlankingTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettings` `AvailBlanking`

    - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
    black. Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be
    blanked when insertion metadata is added.
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsBlackoutSlateTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsBlackoutSlateTypeDef",
    {
        "BlackoutSlateImage": Dict[str, Any],
        "NetworkEndBlackout": str,
        "NetworkEndBlackoutImage": Dict[str, Any],
        "NetworkId": str,
        "State": str,
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsBlackoutSlateTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsBlackoutSlateTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettings` `BlackoutSlate`

    - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for
    solid black. Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
    the video, audio, and captions, and raise the "Network Blackout Image" slate when an
    SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be
    lifted when the Network Start Segmentation Descriptor is encountered. The Network End and
    Network Start descriptors must contain a network ID that matches the value entered in
    "Network ID".

    - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End
    Blackout image. Image will be scaled to fill the entire output raster.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
    "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be
    blanked when indicated by program metadata.
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef",
    {"CaptureInterval": int},
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettings` `FrameCaptureSettings`

    - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
    frames for inclusion in the output. For example, "10" means capture a frame every
    10 seconds.
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef",
    {
        "ColorSpacePassthroughSettings": Dict[str, Any],
        "Rec601Settings": Dict,
        "Rec709Settings": Dict[str, Any],
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings` `ColorSpaceSettings`

    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
    space conversion to the output

    - **Rec601Settings** *(dict) --* Rec601 Settings

    - **Rec709Settings** *(dict) --* Rec709 Settings
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef",
    {
        "AdaptiveQuantization": str,
        "AfdSignaling": str,
        "Bitrate": int,
        "BufFillPct": int,
        "BufSize": int,
        "ColorMetadata": str,
        "ColorSpaceSettings": ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef,
        "EntropyEncoding": str,
        "FixedAfd": str,
        "FlickerAq": str,
        "FramerateControl": str,
        "FramerateDenominator": int,
        "FramerateNumerator": int,
        "GopBReference": str,
        "GopClosedCadence": int,
        "GopNumBFrames": int,
        "GopSize": float,
        "GopSizeUnits": str,
        "Level": str,
        "LookAheadRateControl": str,
        "MaxBitrate": int,
        "MinIInterval": int,
        "NumRefFrames": int,
        "ParControl": str,
        "ParDenominator": int,
        "ParNumerator": int,
        "Profile": str,
        "QvbrQualityLevel": int,
        "RateControlMode": str,
        "ScanType": str,
        "SceneChangeDetect": str,
        "Slices": int,
        "Softness": int,
        "SpatialAq": str,
        "SubgopLength": str,
        "Syntax": str,
        "TemporalAq": str,
        "TimecodeInsertion": str,
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettings` `H264Settings`

    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
    quantizers to vary to improve visual quality.

    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
    output stream. If afdSignaling is "auto", the system will try to preserve the input
    AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
    AFD value will be the value configured in the fixedAfd parameter.

    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
    control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
    output must have a unique value when its bitrate is rounded down to the nearest
    multiple of 1000.

    - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
    filled (HRD buffer model).

    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

    - **ColorSpaceSettings** *(dict) --* Color Space settings

      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
      space conversion to the output

      - **Rec601Settings** *(dict) --* Rec601 Settings

      - **Rec709Settings** *(dict) --* Rec709 Settings

    - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
    Main or High profile) or cavlc.

    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
    the output stream. Only valid when afdSignaling is set to 'Fixed'.

    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
    frame to reduce flicker or 'pop' on I-frames.

    - **FramerateControl** *(string) --* This field indicates how the output video
    frame rate is specified. If "specified" is selected then the output video frame
    rate is determined by framerateNumerator and framerateDenominator, else if
    "initializeFromSource" is selected then the output video frame rate will be set
    equal to the input video frame rate of the first input.

    - **FramerateDenominator** *(integer) --* Framerate denominator.

    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
    fraction, e.g. 24000 / 1001 = 23.976 fps.

    - **GopBReference** *(string) --* Documentation update needed

    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
    applications, it is recommended that this be set to 1 so a decoder joining
    mid-stream will receive an IDR frame as quickly as possible. Setting this value to
    0 will break output segmenting.

    - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
    or seconds per gopSizeUnits. Must be greater than zero.

    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
    seconds. If seconds the system will convert the gopSize into a frame count at run
    time.

    - **Level** *(string) --* H.264 Level.

    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
    decrease latency and memory usage, while high can produce better quality for
    certain content.

    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
    VBR: Set the maximum bitrate in order to accommodate expected spikes in the
    complexity of the video.

    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
    enabled. Enforces separation between repeated (cadence) I-frames and I-frames
    inserted by Scene Change Detection. If a scene change I-frame is within I-interval
    frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
    I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
    normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
    Min-I-interval - 1

    - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
    may use more than requested if using B-frames and/or interlaced encoding.

    - **ParControl** *(string) --* This field indicates how the output pixel aspect
    ratio is specified. If "specified" is selected then the output video pixel aspect
    ratio is determined by parNumerator and parDenominator, else if
    "initializeFromSource" is selected then the output pixsel aspect ratio will be set
    equal to the input video pixel aspect ratio of the first input.

    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

    - **Profile** *(string) --* H.264 Profile.

    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
    encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
    quality level field and Max bitrate field that suit your most important viewing
    devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
    bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
    Quality level: 6. Max bitrate: 1M to 1.5M

    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
    specified quality level except when it is constrained by the maximum bitrate.
    Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
    vary, depending on the video complexity. Recommended instead of QVBR if you want to
    maintain a specific average bitrate over the duration of the channel. CBR: Quality
    varies, depending on the video complexity. Recommended only if you distribute your
    assets to devices that cannot handle variable bitrates.

    - **ScanType** *(string) --* Sets the scan type of the output to progressive or
    top-field-first interlaced.

    - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
    I-frames when scene change is detected. - Off: does not force an I-frame when scene
    change is detected.

    - **Slices** *(integer) --* Number of slices per picture. Must be less than or
    equal to the number of macroblock rows for progressive pictures, and less than or
    equal to half the number of macroblock rows for interlaced pictures. This field is
    optional; when no value is specified the encoder will choose the number of slices
    based on encode resolution.

    - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
    reduce high-frequency content in the encoded image.

    - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
    frame based on spatial variation of content complexity.

    - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
    sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
    to improve visual quality.

    - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

    - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
    frame based on temporal variation of content complexity.

    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
    into the video elementary stream. - 'disabled': Do not include timecodes -
    'picTimingSei': Pass through picture timing SEI messages from the source specified
    in Timecode Config
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef",
    {"MaxCll": int, "MaxFall": int},
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings` `Hdr10Settings`

    - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
    value defining the maximum light level, in nits, of any single pixel within an
    encoded HDR video stream or file.

    - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
    metadata value defining the maximum average light level, in nits, for any
    single frame within an encoded HDR video stream or file.
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef",
    {
        "ColorSpacePassthroughSettings": Dict[str, Any],
        "Hdr10Settings": ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef,
        "Rec601Settings": Dict,
        "Rec709Settings": Dict[str, Any],
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings` `ColorSpaceSettings`

    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
    space conversion to the output

    - **Hdr10Settings** *(dict) --* Hdr10 Settings

      - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
      value defining the maximum light level, in nits, of any single pixel within an
      encoded HDR video stream or file.

      - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
      metadata value defining the maximum average light level, in nits, for any
      single frame within an encoded HDR video stream or file.

    - **Rec601Settings** *(dict) --* Rec601 Settings

    - **Rec709Settings** *(dict) --* Rec709 Settings
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef",
    {
        "AdaptiveQuantization": str,
        "AfdSignaling": str,
        "AlternativeTransferFunction": str,
        "Bitrate": int,
        "BufSize": int,
        "ColorMetadata": str,
        "ColorSpaceSettings": ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef,
        "FixedAfd": str,
        "FlickerAq": str,
        "FramerateDenominator": int,
        "FramerateNumerator": int,
        "GopClosedCadence": int,
        "GopSize": float,
        "GopSizeUnits": str,
        "Level": str,
        "LookAheadRateControl": str,
        "MaxBitrate": int,
        "MinIInterval": int,
        "ParDenominator": int,
        "ParNumerator": int,
        "Profile": str,
        "QvbrQualityLevel": int,
        "RateControlMode": str,
        "ScanType": str,
        "SceneChangeDetect": str,
        "Slices": int,
        "Tier": str,
        "TimecodeInsertion": str,
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettings` `H265Settings`

    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
    quantizers to vary to improve visual quality.

    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
    output stream. If afdSignaling is "auto", the system will try to preserve the input
    AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
    AFD value will be the value configured in the fixedAfd parameter.

    - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
    Alternative Transfer Function SEI message to support backwards compatibility with
    non-HDR decoders and displays.

    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
    control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
    output must have a unique value when its bitrate is rounded down to the nearest
    multiple of 1000.

    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

    - **ColorSpaceSettings** *(dict) --* Color Space settings

      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
      space conversion to the output

      - **Hdr10Settings** *(dict) --* Hdr10 Settings

        - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
        value defining the maximum light level, in nits, of any single pixel within an
        encoded HDR video stream or file.

        - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
        metadata value defining the maximum average light level, in nits, for any
        single frame within an encoded HDR video stream or file.

      - **Rec601Settings** *(dict) --* Rec601 Settings

      - **Rec709Settings** *(dict) --* Rec709 Settings

    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
    the output stream. Only valid when afdSignaling is set to 'Fixed'.

    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
    frame to reduce flicker or 'pop' on I-frames.

    - **FramerateDenominator** *(integer) --* Framerate denominator.

    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
    fraction, e.g. 24000 / 1001 = 23.976 fps.

    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
    applications, it is recommended that this be set to 1 so a decoder joining
    mid-stream will receive an IDR frame as quickly as possible. Setting this value to
    0 will break output segmenting.

    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
    or seconds per gopSizeUnits. Must be greater than zero.

    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
    seconds. If seconds the system will convert the gopSize into a frame count at run
    time.

    - **Level** *(string) --* H.265 Level.

    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
    decrease latency and memory usage, while high can produce better quality for
    certain content.

    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
    enabled. Enforces separation between repeated (cadence) I-frames and I-frames
    inserted by Scene Change Detection. If a scene change I-frame is within I-interval
    frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
    I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
    normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
    Min-I-interval - 1

    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

    - **Profile** *(string) --* H.265 Profile.

    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
    encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
    quality level field and Max bitrate field that suit your most important viewing
    devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
    bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
    Quality level: 6. Max bitrate: 1M to 1.5M

    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
    specified quality level except when it is constrained by the maximum bitrate.
    Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
    depending on the video complexity. Recommended only if you distribute your assets
    to devices that cannot handle variable bitrates.

    - **ScanType** *(string) --* Sets the scan type of the output to progressive or
    top-field-first interlaced.

    - **SceneChangeDetect** *(string) --* Scene change detection.

    - **Slices** *(integer) --* Number of slices per picture. Must be less than or
    equal to the number of macroblock rows for progressive pictures, and less than or
    equal to half the number of macroblock rows for interlaced pictures. This field is
    optional; when no value is specified the encoder will choose the number of slices
    based on encode resolution.

    - **Tier** *(string) --* H.265 Tier.

    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
    into the video elementary stream. - 'disabled': Do not include timecodes -
    'picTimingSei': Pass through picture timing SEI messages from the source specified
    in Timecode Config
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef",
    {
        "FrameCaptureSettings": ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef,
        "H264Settings": ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef,
        "H265Settings": ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef,
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptions` `CodecSettings`

    - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

      - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
      frames for inclusion in the output. For example, "10" means capture a frame every
      10 seconds.

    - **H264Settings** *(dict) --* H264 Settings

      - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
      quantizers to vary to improve visual quality.

      - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
      output stream. If afdSignaling is "auto", the system will try to preserve the input
      AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
      AFD value will be the value configured in the fixedAfd parameter.

      - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
      control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
      output must have a unique value when its bitrate is rounded down to the nearest
      multiple of 1000.

      - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
      filled (HRD buffer model).

      - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

      - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

      - **ColorSpaceSettings** *(dict) --* Color Space settings

        - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
        space conversion to the output

        - **Rec601Settings** *(dict) --* Rec601 Settings

        - **Rec709Settings** *(dict) --* Rec709 Settings

      - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
      Main or High profile) or cavlc.

      - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
      the output stream. Only valid when afdSignaling is set to 'Fixed'.

      - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
      frame to reduce flicker or 'pop' on I-frames.

      - **FramerateControl** *(string) --* This field indicates how the output video
      frame rate is specified. If "specified" is selected then the output video frame
      rate is determined by framerateNumerator and framerateDenominator, else if
      "initializeFromSource" is selected then the output video frame rate will be set
      equal to the input video frame rate of the first input.

      - **FramerateDenominator** *(integer) --* Framerate denominator.

      - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
      fraction, e.g. 24000 / 1001 = 23.976 fps.

      - **GopBReference** *(string) --* Documentation update needed

      - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
      applications, it is recommended that this be set to 1 so a decoder joining
      mid-stream will receive an IDR frame as quickly as possible. Setting this value to
      0 will break output segmenting.

      - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

      - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
      or seconds per gopSizeUnits. Must be greater than zero.

      - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
      seconds. If seconds the system will convert the gopSize into a frame count at run
      time.

      - **Level** *(string) --* H.264 Level.

      - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
      decrease latency and memory usage, while high can produce better quality for
      certain content.

      - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
      VBR: Set the maximum bitrate in order to accommodate expected spikes in the
      complexity of the video.

      - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
      enabled. Enforces separation between repeated (cadence) I-frames and I-frames
      inserted by Scene Change Detection. If a scene change I-frame is within I-interval
      frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
      I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
      normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
      Min-I-interval - 1

      - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
      may use more than requested if using B-frames and/or interlaced encoding.

      - **ParControl** *(string) --* This field indicates how the output pixel aspect
      ratio is specified. If "specified" is selected then the output video pixel aspect
      ratio is determined by parNumerator and parDenominator, else if
      "initializeFromSource" is selected then the output pixsel aspect ratio will be set
      equal to the input video pixel aspect ratio of the first input.

      - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

      - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

      - **Profile** *(string) --* H.264 Profile.

      - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
      encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
      quality level field and Max bitrate field that suit your most important viewing
      devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
      bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
      Quality level: 6. Max bitrate: 1M to 1.5M

      - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
      specified quality level except when it is constrained by the maximum bitrate.
      Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
      vary, depending on the video complexity. Recommended instead of QVBR if you want to
      maintain a specific average bitrate over the duration of the channel. CBR: Quality
      varies, depending on the video complexity. Recommended only if you distribute your
      assets to devices that cannot handle variable bitrates.

      - **ScanType** *(string) --* Sets the scan type of the output to progressive or
      top-field-first interlaced.

      - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
      I-frames when scene change is detected. - Off: does not force an I-frame when scene
      change is detected.

      - **Slices** *(integer) --* Number of slices per picture. Must be less than or
      equal to the number of macroblock rows for progressive pictures, and less than or
      equal to half the number of macroblock rows for interlaced pictures. This field is
      optional; when no value is specified the encoder will choose the number of slices
      based on encode resolution.

      - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
      reduce high-frequency content in the encoded image.

      - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
      frame based on spatial variation of content complexity.

      - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
      sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
      to improve visual quality.

      - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

      - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
      frame based on temporal variation of content complexity.

      - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
      into the video elementary stream. - 'disabled': Do not include timecodes -
      'picTimingSei': Pass through picture timing SEI messages from the source specified
      in Timecode Config

    - **H265Settings** *(dict) --* H265 Settings

      - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
      quantizers to vary to improve visual quality.

      - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
      output stream. If afdSignaling is "auto", the system will try to preserve the input
      AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
      AFD value will be the value configured in the fixedAfd parameter.

      - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
      Alternative Transfer Function SEI message to support backwards compatibility with
      non-HDR decoders and displays.

      - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
      control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
      output must have a unique value when its bitrate is rounded down to the nearest
      multiple of 1000.

      - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

      - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

      - **ColorSpaceSettings** *(dict) --* Color Space settings

        - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
        space conversion to the output

        - **Hdr10Settings** *(dict) --* Hdr10 Settings

          - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
          value defining the maximum light level, in nits, of any single pixel within an
          encoded HDR video stream or file.

          - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
          metadata value defining the maximum average light level, in nits, for any
          single frame within an encoded HDR video stream or file.

        - **Rec601Settings** *(dict) --* Rec601 Settings

        - **Rec709Settings** *(dict) --* Rec709 Settings

      - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
      the output stream. Only valid when afdSignaling is set to 'Fixed'.

      - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
      frame to reduce flicker or 'pop' on I-frames.

      - **FramerateDenominator** *(integer) --* Framerate denominator.

      - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
      fraction, e.g. 24000 / 1001 = 23.976 fps.

      - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
      applications, it is recommended that this be set to 1 so a decoder joining
      mid-stream will receive an IDR frame as quickly as possible. Setting this value to
      0 will break output segmenting.

      - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
      or seconds per gopSizeUnits. Must be greater than zero.

      - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
      seconds. If seconds the system will convert the gopSize into a frame count at run
      time.

      - **Level** *(string) --* H.265 Level.

      - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
      decrease latency and memory usage, while high can produce better quality for
      certain content.

      - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

      - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
      enabled. Enforces separation between repeated (cadence) I-frames and I-frames
      inserted by Scene Change Detection. If a scene change I-frame is within I-interval
      frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
      I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
      normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
      Min-I-interval - 1

      - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

      - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

      - **Profile** *(string) --* H.265 Profile.

      - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
      encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
      quality level field and Max bitrate field that suit your most important viewing
      devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
      bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
      Quality level: 6. Max bitrate: 1M to 1.5M

      - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
      specified quality level except when it is constrained by the maximum bitrate.
      Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
      depending on the video complexity. Recommended only if you distribute your assets
      to devices that cannot handle variable bitrates.

      - **ScanType** *(string) --* Sets the scan type of the output to progressive or
      top-field-first interlaced.

      - **SceneChangeDetect** *(string) --* Scene change detection.

      - **Slices** *(integer) --* Number of slices per picture. Must be less than or
      equal to the number of macroblock rows for progressive pictures, and less than or
      equal to half the number of macroblock rows for interlaced pictures. This field is
      optional; when no value is specified the encoder will choose the number of slices
      based on encode resolution.

      - **Tier** *(string) --* H.265 Tier.

      - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
      into the video elementary stream. - 'disabled': Do not include timecodes -
      'picTimingSei': Pass through picture timing SEI messages from the source specified
      in Timecode Config
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsTypeDef",
    {
        "CodecSettings": ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef,
        "Height": int,
        "Name": str,
        "RespondToAfd": str,
        "ScalingBehavior": str,
        "Sharpness": int,
        "Width": int,
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelEncoderSettings` `VideoDescriptions`

    - **CodecSettings** *(dict) --* Video codec settings.

      - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

        - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
        frames for inclusion in the output. For example, "10" means capture a frame every
        10 seconds.

      - **H264Settings** *(dict) --* H264 Settings

        - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
        quantizers to vary to improve visual quality.

        - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
        output stream. If afdSignaling is "auto", the system will try to preserve the input
        AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
        AFD value will be the value configured in the fixedAfd parameter.

        - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
        control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
        output must have a unique value when its bitrate is rounded down to the nearest
        multiple of 1000.

        - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
        filled (HRD buffer model).

        - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

        - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

        - **ColorSpaceSettings** *(dict) --* Color Space settings

          - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
          space conversion to the output

          - **Rec601Settings** *(dict) --* Rec601 Settings

          - **Rec709Settings** *(dict) --* Rec709 Settings

        - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
        Main or High profile) or cavlc.

        - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
        the output stream. Only valid when afdSignaling is set to 'Fixed'.

        - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
        frame to reduce flicker or 'pop' on I-frames.

        - **FramerateControl** *(string) --* This field indicates how the output video
        frame rate is specified. If "specified" is selected then the output video frame
        rate is determined by framerateNumerator and framerateDenominator, else if
        "initializeFromSource" is selected then the output video frame rate will be set
        equal to the input video frame rate of the first input.

        - **FramerateDenominator** *(integer) --* Framerate denominator.

        - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
        fraction, e.g. 24000 / 1001 = 23.976 fps.

        - **GopBReference** *(string) --* Documentation update needed

        - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
        applications, it is recommended that this be set to 1 so a decoder joining
        mid-stream will receive an IDR frame as quickly as possible. Setting this value to
        0 will break output segmenting.

        - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

        - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
        or seconds per gopSizeUnits. Must be greater than zero.

        - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
        seconds. If seconds the system will convert the gopSize into a frame count at run
        time.

        - **Level** *(string) --* H.264 Level.

        - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
        decrease latency and memory usage, while high can produce better quality for
        certain content.

        - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
        VBR: Set the maximum bitrate in order to accommodate expected spikes in the
        complexity of the video.

        - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
        enabled. Enforces separation between repeated (cadence) I-frames and I-frames
        inserted by Scene Change Detection. If a scene change I-frame is within I-interval
        frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
        I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
        normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
        Min-I-interval - 1

        - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
        may use more than requested if using B-frames and/or interlaced encoding.

        - **ParControl** *(string) --* This field indicates how the output pixel aspect
        ratio is specified. If "specified" is selected then the output video pixel aspect
        ratio is determined by parNumerator and parDenominator, else if
        "initializeFromSource" is selected then the output pixsel aspect ratio will be set
        equal to the input video pixel aspect ratio of the first input.

        - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

        - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

        - **Profile** *(string) --* H.264 Profile.

        - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
        encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
        quality level field and Max bitrate field that suit your most important viewing
        devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
        bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
        Quality level: 6. Max bitrate: 1M to 1.5M

        - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
        specified quality level except when it is constrained by the maximum bitrate.
        Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
        vary, depending on the video complexity. Recommended instead of QVBR if you want to
        maintain a specific average bitrate over the duration of the channel. CBR: Quality
        varies, depending on the video complexity. Recommended only if you distribute your
        assets to devices that cannot handle variable bitrates.

        - **ScanType** *(string) --* Sets the scan type of the output to progressive or
        top-field-first interlaced.

        - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
        I-frames when scene change is detected. - Off: does not force an I-frame when scene
        change is detected.

        - **Slices** *(integer) --* Number of slices per picture. Must be less than or
        equal to the number of macroblock rows for progressive pictures, and less than or
        equal to half the number of macroblock rows for interlaced pictures. This field is
        optional; when no value is specified the encoder will choose the number of slices
        based on encode resolution.

        - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
        reduce high-frequency content in the encoded image.

        - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
        frame based on spatial variation of content complexity.

        - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
        sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
        to improve visual quality.

        - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

        - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
        frame based on temporal variation of content complexity.

        - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
        into the video elementary stream. - 'disabled': Do not include timecodes -
        'picTimingSei': Pass through picture timing SEI messages from the source specified
        in Timecode Config

      - **H265Settings** *(dict) --* H265 Settings

        - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
        quantizers to vary to improve visual quality.

        - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
        output stream. If afdSignaling is "auto", the system will try to preserve the input
        AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
        AFD value will be the value configured in the fixedAfd parameter.

        - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
        Alternative Transfer Function SEI message to support backwards compatibility with
        non-HDR decoders and displays.

        - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
        control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
        output must have a unique value when its bitrate is rounded down to the nearest
        multiple of 1000.

        - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

        - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

        - **ColorSpaceSettings** *(dict) --* Color Space settings

          - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
          space conversion to the output

          - **Hdr10Settings** *(dict) --* Hdr10 Settings

            - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
            value defining the maximum light level, in nits, of any single pixel within an
            encoded HDR video stream or file.

            - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
            metadata value defining the maximum average light level, in nits, for any
            single frame within an encoded HDR video stream or file.

          - **Rec601Settings** *(dict) --* Rec601 Settings

          - **Rec709Settings** *(dict) --* Rec709 Settings

        - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
        the output stream. Only valid when afdSignaling is set to 'Fixed'.

        - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
        frame to reduce flicker or 'pop' on I-frames.

        - **FramerateDenominator** *(integer) --* Framerate denominator.

        - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
        fraction, e.g. 24000 / 1001 = 23.976 fps.

        - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
        applications, it is recommended that this be set to 1 so a decoder joining
        mid-stream will receive an IDR frame as quickly as possible. Setting this value to
        0 will break output segmenting.

        - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
        or seconds per gopSizeUnits. Must be greater than zero.

        - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
        seconds. If seconds the system will convert the gopSize into a frame count at run
        time.

        - **Level** *(string) --* H.265 Level.

        - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
        decrease latency and memory usage, while high can produce better quality for
        certain content.

        - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

        - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
        enabled. Enforces separation between repeated (cadence) I-frames and I-frames
        inserted by Scene Change Detection. If a scene change I-frame is within I-interval
        frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
        I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
        normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
        Min-I-interval - 1

        - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

        - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

        - **Profile** *(string) --* H.265 Profile.

        - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
        encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
        quality level field and Max bitrate field that suit your most important viewing
        devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
        bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
        Quality level: 6. Max bitrate: 1M to 1.5M

        - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
        specified quality level except when it is constrained by the maximum bitrate.
        Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
        depending on the video complexity. Recommended only if you distribute your assets
        to devices that cannot handle variable bitrates.

        - **ScanType** *(string) --* Sets the scan type of the output to progressive or
        top-field-first interlaced.

        - **SceneChangeDetect** *(string) --* Scene change detection.

        - **Slices** *(integer) --* Number of slices per picture. Must be less than or
        equal to the number of macroblock rows for progressive pictures, and less than or
        equal to half the number of macroblock rows for interlaced pictures. This field is
        optional; when no value is specified the encoder will choose the number of slices
        based on encode resolution.

        - **Tier** *(string) --* H.265 Tier.

        - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
        into the video elementary stream. - 'disabled': Do not include timecodes -
        'picTimingSei': Pass through picture timing SEI messages from the source specified
        in Timecode Config

    - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
    most codecs, you can leave this field and width blank in order to use the height and
    width (resolution) from the source. Note, however, that leaving blank is not
    recommended. For the Frame Capture codec, height and width are required.

    - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name
    to uniquely identify this Description. Description names should be unique within this
    Live Event.

    - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the
    input stream. RESPOND causes input video to be clipped, depending on the AFD value,
    input display aspect ratio, and output display aspect ratio, and (except for
    FRAMECAPTURE codec) includes the values in the output. PASSTHROUGH (does not apply to
    FRAMECAPTURE codec) ignores the AFD values and includes the values in the output, so
    input video is not clipped. NONE ignores the AFD values and does not include the values
    through to the output, so input video is not clipped.

    - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
    stretch the video to the specified output resolution (height and width). This option
    will override any position value. DEFAULT may insert black boxes (pillar boxes or
    letter boxes) around the video to provide the specified output resolution.

    - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
    scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
    for most content.

    - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
    most codecs, you can leave this field and height blank in order to use the height and
    width (resolution) from the source. Note, however, that leaving blank is not
    recommended. For the Frame Capture codec, height and width are required.
    """


_ClientUpdateChannelClassResponseChannelEncoderSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelEncoderSettingsTypeDef",
    {
        "AudioDescriptions": List[
            ClientUpdateChannelClassResponseChannelEncoderSettingsAudioDescriptionsTypeDef
        ],
        "AvailBlanking": ClientUpdateChannelClassResponseChannelEncoderSettingsAvailBlankingTypeDef,
        "AvailConfiguration": Dict[str, Any],
        "BlackoutSlate": ClientUpdateChannelClassResponseChannelEncoderSettingsBlackoutSlateTypeDef,
        "CaptionDescriptions": List[Dict],
        "GlobalConfiguration": Dict[str, Any],
        "OutputGroups": List[Dict],
        "TimecodeConfig": Dict[str, Any],
        "VideoDescriptions": List[
            ClientUpdateChannelClassResponseChannelEncoderSettingsVideoDescriptionsTypeDef
        ],
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelEncoderSettingsTypeDef(
    _ClientUpdateChannelClassResponseChannelEncoderSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannel` `EncoderSettings`

    - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

      - *(dict) --* Audio Description

        - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

          - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
          to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

          - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
          corrected using the chosen algorithm. If set to measureOnly, the audio will be
          measured but not adjusted.

          - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value
          is entered, a default value will be used according to the chosen algorithm. The CALM
          Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
          recommends a target of -23 LKFS.

        - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
        for this AudioDescription.

        - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
        values for audioType are defined in ISO-IEC 13818-1.

        - **AudioTypeControl** *(string) --* Determines how audio type is determined.
        followInput: If the input contains an ISO 639 audioType, then that value is passed
        through to the output. If the input contains no ISO 639 audioType, the value in Audio
        Type is included in the output. useConfigured: The value in Audio Type is included in
        the output. Note that this field and audioType are both ignored if inputType is
        broadcasterMixedAd.

        - **CodecSettings** *(dict) --* Audio codec settings.

          - **AacSettings** *(dict) --* Aac Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
            rate control mode and profile.

            - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
            depend on rate control mode and profile. The adReceiverMix setting receives a
            stereo description plus control track and emits a mono AAC encode of the
            description track, with control data emitted in the PES header as per ETSI TS 101
            154 Annex E.

            - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
            pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
            (audioType) will be set to 3, which signals to downstream systems that this stream
            contains "broadcaster mixed AD". Note that the input received by the encoder must
            contain pre-mixed audio; the encoder does not perform the mixing. The values in
            audioTypeControl and audioType (in AudioDescription) are ignored when set to
            broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
            audio + AD.

            - **Profile** *(string) --* AAC Profile.

            - **RateControlMode** *(string) --* Rate Control Mode.

            - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

            - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
            control mode and profile.

            - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
            or MPEG-2 Transport Stream containers.

            - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
            VBR.

          - **Ac3Settings** *(dict) --* Ac3 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
            the coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
            emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

            - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
            channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
            input audio is Dolby Digital, dialnorm will be passed through.

            - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
            compression signaling to the output bitstream as defined in the Dolby Digital
            specification.

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
            to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

            - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
            will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
            If audio was not supplied from one of these streams, then the static metadata
            settings will be used.

          - **Eac3Settings** *(dict) --* Eac3 Settings

            - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
            attenuation to the surround channels. Only used for 3/2 coding mode.

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
            the coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
            emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

            - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
            channels.

            - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
            for all input channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
            audio is Dolby Digital Plus, dialnorm will be passed through.

            - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

            - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
            compression, ensures that the instantaneous signal peaks do not exceed specified
            levels.

            - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
            LFE channel

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
            to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

            - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
            used for 3/2 coding mode.

            - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
            Only used for 3/2 coding mode.

            - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
            used for 3/2 coding mode.

            - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
            Only used for 3/2 coding mode.

            - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
            be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
            audio was not supplied from one of these streams, then the static metadata settings
            will be used.

            - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
            will be passed through if it is present on the input. This detection is dynamic
            over the life of the transcode. Inputs that alternate between DD+ and non-DD+
            content will have a consistent DD+ output as the system alternates between
            passthrough and encoding.

            - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
            phase shift to the surround channels. Only used for 3/2 coding mode.

            - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
            coding mode.

            - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
            center back surround channel is matrix encoded into the left and right surround
            channels.

            - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
            Surround is matrix encoded into the two channels.

          - **Mp2Settings** *(dict) --* Mp2 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second.

            - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
            codingMode10 (for mono) or codingMode20 (for stereo).

            - **SampleRate** *(float) --* Sample rate in Hz.

          - **PassThroughSettings** *(dict) --* Pass Through Settings

        - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
        used if languageControlMode is useConfigured, or there is no ISO 639 language code
        specified in the input.

        - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
        language code of the output to follow the ISO 639 language code of the input. The
        languageCode will be used when useConfigured is set, or when followInput is selected
        but there is no ISO 639 language code specified by the input.

        - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name
        to uniquely identify this AudioDescription. Description names should be unique within
        this Live Event.

        - **RemixSettings** *(dict) --* Settings that control how input audio channels are
        remixed into the output audio channels.

          - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
          appropriate gain adjustments.

            - *(dict) --* Audio Channel Mapping

              - **InputChannelLevels** *(list) --* Indices and gain values for each input
              channel that should be remixed into this output channel.

                - *(dict) --* Input Channel Level

                  - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable
                  values are within the range from -60 (mute) and 6 dB.

                  - **InputChannel** *(integer) --* The index of the input channel used as a
                  source.

              - **OutputChannel** *(integer) --* The index of the output channel being produced.

          - **ChannelsIn** *(integer) --* Number of input channels to be used.

          - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
          values: 1, 2, 4, 6, 8

        - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
        name displayed by the player (eg. English, or Director Commentary).

    - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

      - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
      black. Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be
      blanked when insertion metadata is added.

    - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail
    insertion.

      - **AvailSettings** *(dict) --* Ad avail settings.

        - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
          added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
          messages and does not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
          with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
          slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
          with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
          slates

        - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
          added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
          messages and does not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
          with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
          slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
          with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
          slates

    - **BlackoutSlate** *(dict) --* Settings for blackout slate.

      - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for
      solid black. Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
      the video, audio, and captions, and raise the "Network Blackout Image" slate when an
      SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be
      lifted when the Network Start Segmentation Descriptor is encountered. The Network End and
      Network Start descriptors must contain a network ID that matches the value entered in
      "Network ID".

      - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End
      Blackout image. Image will be scaled to fill the entire output raster.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
      "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be
      blanked when indicated by program metadata.

    - **CaptionDescriptions** *(list) --* Settings for caption decriptions

      - *(dict) --* Output groups for this Live Event. Output groups contain information about
      where streams should be distributed.

        - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use
        as a caption source when generating output captions. This field should match a
        captionSelector name.

        - **DestinationSettings** *(dict) --* Additional settings for captions destination that
        depend on the destination type.

          - **AribDestinationSettings** *(dict) --* Arib Destination Settings

          - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
            setting alignment to centered will place the captions at the bottom center of the
            output. Similarly, setting a left alignment will align captions to the bottom left
            of the output. If x and y positions are given in conjunction with the alignment
            parameter, the font will be justified (either left or centered) relative to those
            coordinates. Selecting "smart" justification will left-justify live subtitles and
            center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
            match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
            rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is
            equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
            must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension
            must be 'ttf' or 'tte'. Although the user can select output fonts for many
            different types of input captions, embedded, STL and teletext sources use a strict
            grid system. Using external fonts with these caption sources could cause unexpected
            display of proportional fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2
              Parameter store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
              file accessible to the Live system (eg. a http:// URI) depending on the output
              type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
            option is not valid for source captions that are STL, 608/embedded or teletext.
            These source settings are already pre-defined by the caption stream. All burn-in
            and DVB-Sub font settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
            255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
            is 96 dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on
            the size of the output. Giving a positive integer will specify the exact font size
            in points. All burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not
            valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
            font settings must match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
            is not valid for source captions that are either 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
            captions. All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
            opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to
            0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels to the left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels above the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
            used to generate the output subtitles bitmap. Only applicable for Teletext inputs
            and DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption
            relative to the left side of the output in pixels. A value of 10 would result in
            the captions starting 10 pixels from the left of the output. If no explicit
            xPosition is provided, the horizontal caption position will be determined by the
            alignment parameter. All burn-in and DVB-Sub font settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption
            relative to the top of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the top of the output. If no explicit yPosition is
            provided, the caption will be positioned towards the bottom of the output. All
            burn-in and DVB-Sub font settings must match.

          - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
            setting alignment to centered will place the captions at the bottom center of the
            output. Similarly, setting a left alignment will align captions to the bottom left
            of the output. If x and y positions are given in conjunction with the alignment
            parameter, the font will be justified (either left or centered) relative to those
            coordinates. Selecting "smart" justification will left-justify live subtitles and
            center-justify pre-recorded subtitles. This option is not valid for source captions
            that are STL or 608/embedded. These source settings are already pre-defined by the
            caption stream. All burn-in and DVB-Sub font settings must match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
            rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
            equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
            must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension
            must be 'ttf' or 'tte'. Although the user can select output fonts for many
            different types of input captions, embedded, STL and teletext sources use a strict
            grid system. Using external fonts with these caption sources could cause unexpected
            display of proportional fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2
              Parameter store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
              file accessible to the Live system (eg. a http:// URI) depending on the output
              type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
            option is not valid for source captions that are STL, 608/embedded or teletext.
            These source settings are already pre-defined by the caption stream. All burn-in
            and DVB-Sub font settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
            255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
            is 96 dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
            size of the output. Giving a positive integer will specify the exact font size in
            points. All burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not
            valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
            font settings must match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
            is not valid for source captions that are either 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
            captions. All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
            opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it
            to 0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels to the left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels above the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
            used to generate the output subtitles bitmap. Only applicable for Teletext inputs
            and DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption
            relative to the left side of the output in pixels. A value of 10 would result in
            the captions starting 10 pixels from the left of the output. If no explicit
            xPosition is provided, the horizontal caption position will be determined by the
            alignment parameter. This option is not valid for source captions that are STL,
            608/embedded or teletext. These source settings are already pre-defined by the
            caption stream. All burn-in and DVB-Sub font settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption
            relative to the top of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the top of the output. If no explicit yPosition is
            provided, the caption will be positioned towards the bottom of the output. This
            option is not valid for source captions that are STL, 608/embedded or teletext.
            These source settings are already pre-defined by the caption stream. All burn-in
            and DVB-Sub font settings must match.

          - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

          - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
          Destination Settings

          - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
          Settings

          - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
          Destination Settings

          - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

          - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

          - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

          - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

            - **StyleControl** *(string) --* When set to passthrough, passes through style and
            position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
            CFF-TT output or TTML output.

          - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

        - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
        http://www.loc.gov/standards/iso639-2/

        - **LanguageDescription** *(string) --* Human readable information to indicate captions
        available for players (eg. English, or Spanish).

        - **Name** *(string) --* Name of the caption description. Used to associate a caption
        description with an output. Names must be unique within an event.

    - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
    whole.

      - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
      Event.

      - **InputEndAction** *(string) --* Indicates the action to take when the current input
      completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
      restart at the beginning of the first input. When "none" is configured the encoder will
      transcode either black, a solid color, or a user specified slate images per the "Input
      Loss Behavior" configuration until the next input switch occurs (which is controlled
      through the Channel Schedule API).

      - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

        - **BlackFrameMsec** *(integer) --* Documentation update needed

        - **InputLossImageColor** *(string) --* When input loss image type is "color" this
        field specifies the color to use. Value: 6 hex characters representing the values of
        RGB.

        - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these
        fields specify the parameters for accessing the slate.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or
        a slate into the output after input loss exceeds blackFrameMsec.

        - **RepeatFrameMsec** *(integer) --* Documentation update needed

      - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
      PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to
      the other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each
      pipeline to the Unix epoch.

      - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by
      the Live encoder should be paced by its system clock (which optionally may be locked to
      another source via NTP) or should be locked to the clock of the source that is providing
      the input stream.

      - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
      very low video framerates. This is commonly set to enabled for music channels with less
      than one video frame per second.

    - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

      - *(dict) --* Output groups for this Live Event. Output groups contain information about
      where streams should be distributed.

        - **Name** *(string) --* Custom output group name optionally defined by the user. Only
        letters, numbers, and the underscore character allowed; only 32 characters allowed.

        - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

          - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

            - **Destination** *(dict) --* A directory and base filename where archive files
            should be written.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
            before closing and starting a new one.

          - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

            - **Destination** *(dict) --* The destination for the frame capture files. Either
            the URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
            s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
            container, plus a file name prefix (for example,
            mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
            the prefix from the destination field (for example, "curling_") + name modifier +
            the counter (5 digits, starting from 00001) + extension (which is always .jpg). For
            example, curlingLow.00001.jpg

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **HlsGroupSettings** *(dict) --* Hls Group Settings

            - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35
            signals through to this group of Apple HLS outputs.

              - *(string) --* Hls Ad Markers

            - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
            each output in the media .m3u8 file. Can be used if base manifest is delivered from
            a different URL than the main .m3u8 file.

            - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
            each output in the media .m3u8 file. Can be used if base manifest is delivered from
            a different URL than the main .m3u8 file.

            - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
            caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

              - *(dict) --* Maps a caption channel to an ISO 693-2 language code
              (http://www.loc.gov/standards/iso639-2), with an optional description.

                - **CaptionChannel** *(integer) --* The closed caption channel being described
                by this CaptionLanguageMapping. Each channel mapping must have a unique channel
                number (maximum of 4)

                - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                http://www.loc.gov/standards/iso639-2)

                - **LanguageDescription** *(string) --* Textual description of language

            - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
            captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least
            one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for
            each Language Code you specify. Make sure to specify the languages in the order in
            which they appear in the original source (if the source is embedded format) or the
            order of the caption selectors (if the source is other than embedded). Otherwise,
            languages in the manifest will not match up properly with the output captions.
            none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any
            CLOSED-CAPTIONS line from the manifest.

            - **ClientCache** *(string) --* When set to "disabled", sets the
            #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
            segments for later replay.

            - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the
            default RFC-4281) during m3u8 playlist generation.

            - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
            16-byte hex value represented by a 32-character text string. If ivSource is set to
            "explicit" then this parameter is required and is used as the IV for encryption.

            - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
            manifest files, and encryption keys (if enabled).

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **DirectoryStructure** *(string) --* Place segments in subdirectories.

            - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
            scheme. Exclude this parameter if no encryption is desired.

            - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

              - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                transfer encoding to Akamai. User should contact Akamai to enable this feature.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made
                before the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of
                seconds to wait until a restart is initiated. A value of 0 means never restart.

                - **Salt** *(string) --* Salt for authenticated Akamai.

                - **Token** *(string) --* Token parameter for authenticated akamai. If not
                specified, _gda_ is used.

              - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made
                before the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of
                seconds to wait until a restart is initiated. A value of 0 means never restart.

              - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **MediaStoreStorageClass** *(string) --* When set to temporal, output files
                are stored in non-persistent memory for faster reading and writing.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made
                before the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of
                seconds to wait until a restart is initiated. A value of 0 means never restart.

              - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                transfer encoding to WebDAV.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made
                before the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of
                seconds to wait until a restart is initiated. A value of 0 means never restart.

            - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
            manifest, but do create the master and media manifests (according to the Output
            Selection field). STANDARD: Create an I-frame-only manifest for each output that
            contains video, as well as the other manifests (according to the Output Selection
            field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
            I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
            position. For example, #EXT-X-BYTERANGE:160364@1461888"

            - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies
            the maximum number of segments in the media manifest file. After this maximum,
            older segments are removed from the media manifest. This number must be less than
            or equal to the Keep Segments field.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on
            input loss.

            - **IvInManifest** *(string) --* For use with encryptionType. The IV
            (Initialization Vector) is a 128-bit number used in conjunction with the key for
            encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the
            IV is not in the manifest.

            - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
            Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
            If this setting is "followsSegmentNumber", it will cause the IV to change every
            segment (to match the segment number). If this is set to "explicit", you must enter
            a constantIv value.

            - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
            number of media segments (.ts files) to retain in the destination directory.

            - **KeyFormat** *(string) --* The value specifies how the key is represented in the
            resource identified by the URI. If parameter is absent, an implicit value of
            "identity" is used. A reverse DNS string can also be given.

            - **KeyFormatVersions** *(string) --* Either a single positive integer version
            value or a slash delimited list of version values (1/2/3).

            - **KeyProviderSettings** *(dict) --* The key provider settings.

              - **StaticKeySettings** *(dict) --* Static Key Settings

                - **KeyProviderServer** *(dict) --* The URL of the license server used for
                protecting content.

                  - **PasswordParam** *(string) --* key used to extract the password from EC2
                  Parameter store

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                  to a file accessible to the Live system (eg. a http:// URI) depending on the
                  output type. For example, a RTMP destination should have a uri simliar to:
                  "rtmp://fmsserver/live".

                  - **Username** *(string) --* Documentation update needed

                - **StaticKeyValue** *(string) --* Static key value as a 32 character
                hexadecimal string.

            - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

            - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
            should use floating point or integer values for segment duration.

            - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
            looking ahead and back within the specified range for a nearby avail and extending
            the segment size if needed.

            - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
            the destination and manifest. If "live", only the number segments specified in
            keepSegments and indexNSegments are kept; newer segments replace older segments,
            which may prevent players from rewinding all the way to the beginning of the event.
            VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
            converting it to a "VOD" type manifest on completion of the stream.

            - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests
            (master manifest, if applicable, and media manifests) for this output group.
            SEGMENTSONLY: Does not generate any manifests for this output group.

            - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME
            tag in .m3u8 manifest files. The value is calculated as follows: either the program
            date and time are initialized using the input timecode source, or the time is
            initialized using the input timecode source and the date is initialized using the
            timestampOffset.

            - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
            EXT-X-PROGRAM-DATE-TIME entry, in seconds.

            - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
            each pipeline includes information about both pipelines: first its own media files,
            then the media files of the other pipeline. This feature allows playout device that
            support stale manifest detection to switch from one manifest to the other, when the
            current manifest seems to be stale. There are still two destinations and two master
            manifests, but both master manifests reference the media files from both pipelines.
            DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
            about its own pipeline only. For an HLS output group with MediaPackage as the
            destination, the DISABLED behavior is always followed. MediaPackage regenerates the
            manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

            - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
            create (in seconds). Note that segments will end on the next keyframe after this
            number of seconds, so actual segment length may be longer.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
            subdirectory before starting a new one. directoryStructure must be
            subdirectoryPerStream for this setting to have an effect.

            - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
            video in EXT-X-STREAM-INF tag of variant manifest.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

            - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
            offset to fine tune the timestamps.

            - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
            multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
            program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE
            tags to index segments for playback. A typical use for this value is when sending
            the output to AWS Elemental MediaConvert, which can accept only a single media
            file. Playback while the channel is running is not guaranteed due to HTTP server
            caching.

          - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

            - **Destination** *(dict) --* MediaPackage channel destination.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

            - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point
            Identity" element used in each message placed in the sparse track. Only enabled if
            sparseTrackType is not "none".

            - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an
            audio-only MS Smooth output, the fragment absolute time will be set to the current
            timecode. This option does not write timecodes to the audio elementary stream.

            - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
            certificate chain to a trusted Certificate Authority (CA). This will cause https
            outputs to self-signed certificates to fail.

            - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
            retrying connection to the IIS server if the connection is lost. Content will be
            cached during this time and the cache will be be delivered to the IIS server once
            the connection is re-established.

            - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
            Elemental Live acts as a "Push" encoder to IIS.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
            only be specified if eventIdMode is set to useConfigured.

            - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
            IIS server. If no event ID is sent and the same Live Event is used without changing
            the publishing point, clients might see cached video from the previous run.
            Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" -
            generate and send an event ID based on the current timestamp - "noEventId" - do not
            send an event ID to the IIS server.

            - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
            server when stopping the event

            - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
            outputs.

            - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in
            seconds). Fragment length must be compatible with GOP size and framerate.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on
            input loss.

            - **NumRetries** *(integer) --* Number of retry attempts.

            - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
            to output failure, due to exhausting the numRetries on one segment, or exceeding
            filecacheDuration.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from
            the second pipeline.

            - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
            to generate a sparse track in this group of MS-Smooth outputs.

            - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest
            so publishing point doesn't start until all streams start.

            - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
            timestampOffsetMode is set to useConfiguredOffset.

            - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
            useEventStartDate: Use the date the event was started as the offset -
            useConfiguredOffset: Use an explicitly configured date as the offset

          - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

            - **AuthenticationScheme** *(string) --* Authentication scheme to use when
            connecting with CDN

            - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills
            up. If remote origin server stalls the RTMP connection and does not accept content
            fast enough the 'Media Cache' will fill up. When the cache reaches the duration
            specified by cacheLength the cache will stop accepting new content. If set to
            disconnectImmediately, the RTMP output will force a disconnect. Clear the media
            cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
            output will wait up to 5 minutes to allow the origin server to begin accepting data
            again.

            - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
            buffer size.

            - **CaptionData** *(string) --* Controls the types of data that passes to
            onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
            passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but
            608 data from both fields will be passed. If set to 'field1608' then only the data
            carried in 608 from field 1 video will be passed.

            - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if
            input becomes unavailable. - emitOutput: Emit a slate until input returns. -
            pauseOutput: Stop transmitting data until input returns. This does not close the
            underlying RTMP connection.

            - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
            wait until a restart is initiated. A value of 0 means never restart.

          - **UdpGroupSettings** *(dict) --* Udp Group Settings

            - **InputLossAction** *(string) --* Specifies behavior of last resort when input
            video is lost, and no more backup inputs are available. When dropTs is selected the
            entire transport stream will stop being emitted. When dropProgram is selected the
            program can be dropped from the transport stream (and replaced with null packets to
            meet the TS bitrate requirement). Or, when emitProgram is chosen the transport
            stream will continue to be produced normally with repeat frames, black frames, or
            slate frames substituted for the absent input video.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

        - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

          - *(dict) --* Output settings. There can be multiple outputs within a group.

            - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
            audio sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
            as caption sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **OutputName** *(string) --* The name used to identify an output.

            - **OutputSettings** *(dict) --* Output type-specific settings.

              - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                - **ContainerSettings** *(dict) --* Settings specific to the container type of
                the file.

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream
                    is removed from the input. This allows the output audio configuration to
                    dynamically change based on input configuration. If this is set to
                    encodeSilence, all output audio streams will output encoded silence when
                    not connected to an active input stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                    muxing and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                    Captions in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                    for ARIB Captions will be auto-selected from unused pids. If set to
                    useConfigured, ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                    for Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                    for each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                    audio stream(s) in the transport stream. Multiple values are accepted, and
                    can be entered in ranges and/or by comma separation. Can be entered as
                    decimal or hexadecimal values. Each PID specified must be in the range of
                    32 (or 0x20)..8182 (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                    0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                    type = 0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                    bits per second. Setting to 0 lets the muxer automatically determine the
                    appropriate bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                    model for accurate interleaving. Setting to bufferModel to none can lead to
                    lower latency, but low-memory devices may not be able to play back the
                    stream without interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                    (NIT) at the specified table repetition interval.

                      - **NetworkId** *(integer) --* The numeric value placed in the Network
                      Information Table (NIT).

                      - **NetworkName** *(string) --* The network name text placed in the
                      networkNameDescriptor inside the Network Information Table. Maximum
                      length is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                    (SDT) at the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information
                      into output stream. The sdtFollow setting copies SDT information from
                      input stream to output stream. The sdtFollowIfPresent setting copies SDT
                      information from input stream to output stream if SDT information is
                      present in the input, otherwise it will fall back on the user-defined
                      values. The sdtManual setting means user will enter the SDT information.
                      The sdtNone setting means output stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed
                      in the serviceDescriptor in the Service Description Table. Maximum length
                      is 256 characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                    the specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                    DVB Teletext data to this output. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                    the input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                    selected, audio EBP markers will be added to partitions 3 and 4. The
                    interval between these additional markers will be fixed, and will be
                    slightly shorter than the video EBP marker interval. Only available when
                    EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                    always follow the video interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                    Boundary Points do not come within the specified time interval of each
                    other by looking ahead at input video. If another EBP is going to come in
                    within the specified time interval, the current EBP is not emitted, and the
                    segment is "stretched" to the next marker. The lookahead value does not add
                    latency to the system. The Live Event must be configured elsewhere to
                    create sufficient latency to make the lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                    If set to videoAndAudioPids, EBP markers will be placed on the video PID
                    and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                    the video PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                    PES header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Platform data to this output. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment.
                    Only used with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                    input source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                    KLV data to this output. Multiple values are accepted, and can be entered
                    in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a
                    downstream encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between
                    instances of this table in the output transport stream. Valid values are 0,
                    10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                    Clock Reference value is inserted for every Packetized Elementary Stream
                    (PES) header. This parameter is effective only when the PCR PID is the same
                    as the video or audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                    Clock Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                    Reference (PCR) in the transport stream. When no value is given, the
                    encoder will assign the same value as the Video PID. Can be entered as a
                    decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                    0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between
                    instances of this table in the output transport stream. Valid values are 0,
                    10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                    Table (PMT) in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in
                    the Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                    SCTE-27 data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                    input source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                    each segmentationTime period. raiSegstart sets the Random Access Indicator
                    bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                    timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                    at the start of segments. ebp adds Encoder Boundary Point information to
                    the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                    ebpLegacy adds Encoder Boundary Point information to the adaptation field
                    using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter
                    controls how segmentation markers are inserted into the transport stream.
                    With avails, it is possible that segments may be truncated, which can
                    influence where future segmentation markers are inserted. When a
                    segmentation style of "resetCadence" is selected and a segment is truncated
                    due to an avail, we will reset the segmentation cadence. This means the
                    subsequent segment will have a duration of $segmentationTime seconds. When
                    a segmentation style of "maintainCadence" is selected and a segment is
                    truncated due to an avail, we will not reset the segmentation cadence. This
                    means the subsequent segment will likely be truncated as well. However, all
                    segments after that will have a duration of $segmentationTime seconds. Note
                    that EBP lookahead is a slight exception to this rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                    metadata will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID
                    field in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                    video stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Extension** *(string) --* Output file extension. If excluded, this will be
                auto-selected from the container type.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Required for multiple outputs of the same type.

              - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                - **NameModifier** *(string) --* Required if the output group contains more
                than one output. This modifier forms part of the output file name.

              - **HlsOutputSettings** *(dict) --* Hls Output Settings

                - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                settings are different for audio-only outputs.

                  - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                    - **AudioGroupId** *(string) --* Specifies the group to which the audio
                    Rendition belongs.

                    - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                    to use as the cover art for an audio-only output. We recommend a low
                    bit-size file because the image increases the output audio bandwidth. The
                    image is attached to the audio as an ID3 tag, frame type APIC, picture type
                    0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.

                      - **PasswordParam** *(string) --* key used to extract the password from
                      EC2 Parameter store

                      - **Uri** *(string) --* Uniform Resource Identifier - This should be a
                      path to a file accessible to the Live system (eg. a http:// URI)
                      depending on the output type. For example, a RTMP destination should have
                      a uri simliar to: "rtmp://fmsserver/live".

                      - **Username** *(string) --* Documentation update needed

                    - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                    supported: Audio-Only Variant Stream The client can play back this
                    audio-only stream instead of video in low-bandwidth scenarios. Represented
                    as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select,
                    Default Alternate rendition that the client should try to play back by
                    default. Represented as an EXT-X-MEDIA in the HLS manifest with
                    DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default
                    Alternate rendition that the client may try to play back by default.
                    Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO,
                    AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that
                    the client will not try to play back by default. Represented as an
                    EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO

                  - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                    - **AudioRenditionSets** *(string) --* List all the audio groups that are
                    used with the video output stream. Input all the audio GROUP-IDs that are
                    associated to the video, separate by ','.

                    - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to
                      insert for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                      audio stream(s) in the transport stream. Multiple values are accepted,
                      and can be entered in ranges and/or by comma separation. Can be entered
                      as decimal or hexadecimal values.

                      - **EcmPid** *(string) --* This parameter is unused and deprecated.

                      - **PatInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. A value of
                      \\"0\\" writes out the PMT once per segment file.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                      Clock Reference value is inserted for every Packetized Elementary Stream
                      (PES) header. This parameter is effective only when the PCR PID is the
                      same as the video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between
                      Program Clock References (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the
                      encoder will assign the same value as the Video PID. Can be entered as a
                      decimal or hexadecimal value.

                      - **PmtInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. A value of
                      \\"0\\" writes out the PMT once per segment file.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                      Table (PMT) in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                      - **ProgramNum** *(integer) --* The value of the program number field in
                      the Program Map Table.

                      - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                      SCTE-35 signals from the input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35
                      stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata is passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream
                      ID field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                      video stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Accepts \\"Format
                Identifiers\\":#formatIdentifierParameters.

                - **SegmentModifier** *(string) --* String concatenated to end of segment
                filenames.

              - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

              - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                - **H265PackagingType** *(string) --* Only applicable when this output is
                referencing an H.265 video description. Specifies whether MP4 segments should
                be packaged as HEV1 or HVC1.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Required for multiple outputs of the same type.

              - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the
                tls certificate chain to a trusted Certificate Authority (CA). This will cause
                rtmps outputs with self-signed certificates to fail.

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying a connection to the Flash Media server if the connection is lost.

                - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                rtmp://host/appname). For connection to Akamai, a username and password must be
                supplied. URI fields accept format identifiers.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **NumRetries** *(integer) --* Number of retry attempts.

              - **UdpOutputSettings** *(dict) --* Udp Output Settings

                - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                values increase latency through the transcoder but simultaneously assist the
                transcoder in maintaining a constant, low-jitter UDP/RTP output while
                accommodating clock recovery, input switching, input disruptions, picture
                reordering, etc.

                - **ContainerSettings** *(dict) --* Udp Container Settings

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream
                    is removed from the input. This allows the output audio configuration to
                    dynamically change based on input configuration. If this is set to
                    encodeSilence, all output audio streams will output encoded silence when
                    not connected to an active input stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                    muxing and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                    Captions in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                    for ARIB Captions will be auto-selected from unused pids. If set to
                    useConfigured, ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                    for Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                    for each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                    audio stream(s) in the transport stream. Multiple values are accepted, and
                    can be entered in ranges and/or by comma separation. Can be entered as
                    decimal or hexadecimal values. Each PID specified must be in the range of
                    32 (or 0x20)..8182 (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                    0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                    type = 0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                    bits per second. Setting to 0 lets the muxer automatically determine the
                    appropriate bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                    model for accurate interleaving. Setting to bufferModel to none can lead to
                    lower latency, but low-memory devices may not be able to play back the
                    stream without interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                    (NIT) at the specified table repetition interval.

                      - **NetworkId** *(integer) --* The numeric value placed in the Network
                      Information Table (NIT).

                      - **NetworkName** *(string) --* The network name text placed in the
                      networkNameDescriptor inside the Network Information Table. Maximum
                      length is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                    (SDT) at the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information
                      into output stream. The sdtFollow setting copies SDT information from
                      input stream to output stream. The sdtFollowIfPresent setting copies SDT
                      information from input stream to output stream if SDT information is
                      present in the input, otherwise it will fall back on the user-defined
                      values. The sdtManual setting means user will enter the SDT information.
                      The sdtNone setting means output stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed
                      in the serviceDescriptor in the Service Description Table. Maximum length
                      is 256 characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                    the specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                    DVB Teletext data to this output. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                    the input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                    selected, audio EBP markers will be added to partitions 3 and 4. The
                    interval between these additional markers will be fixed, and will be
                    slightly shorter than the video EBP marker interval. Only available when
                    EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                    always follow the video interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                    Boundary Points do not come within the specified time interval of each
                    other by looking ahead at input video. If another EBP is going to come in
                    within the specified time interval, the current EBP is not emitted, and the
                    segment is "stretched" to the next marker. The lookahead value does not add
                    latency to the system. The Live Event must be configured elsewhere to
                    create sufficient latency to make the lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                    If set to videoAndAudioPids, EBP markers will be placed on the video PID
                    and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                    the video PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                    PES header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Platform data to this output. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment.
                    Only used with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                    input source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                    KLV data to this output. Multiple values are accepted, and can be entered
                    in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a
                    downstream encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between
                    instances of this table in the output transport stream. Valid values are 0,
                    10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                    Clock Reference value is inserted for every Packetized Elementary Stream
                    (PES) header. This parameter is effective only when the PCR PID is the same
                    as the video or audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                    Clock Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                    Reference (PCR) in the transport stream. When no value is given, the
                    encoder will assign the same value as the Video PID. Can be entered as a
                    decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                    0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between
                    instances of this table in the output transport stream. Valid values are 0,
                    10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                    Table (PMT) in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in
                    the Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                    SCTE-27 data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                    input source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                    each segmentationTime period. raiSegstart sets the Random Access Indicator
                    bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                    timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                    at the start of segments. ebp adds Encoder Boundary Point information to
                    the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                    ebpLegacy adds Encoder Boundary Point information to the adaptation field
                    using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter
                    controls how segmentation markers are inserted into the transport stream.
                    With avails, it is possible that segments may be truncated, which can
                    influence where future segmentation markers are inserted. When a
                    segmentation style of "resetCadence" is selected and a segment is truncated
                    due to an avail, we will reset the segmentation cadence. This means the
                    subsequent segment will have a duration of $segmentationTime seconds. When
                    a segmentation style of "maintainCadence" is selected and a segment is
                    truncated due to an avail, we will not reset the segmentation cadence. This
                    means the subsequent segment will likely be truncated as well. However, all
                    segments after that will have a duration of $segmentationTime seconds. Note
                    that EBP lookahead is a slight exception to this rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                    metadata will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID
                    field in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                    video stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Destination** *(dict) --* Destination address and port number for RTP or
                UDP packets. Can be unicast or multicast RTP or UDP (eg.
                rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                Error Correction on UDP outputs.

                  - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                  the FEC protection matrix. The number of transport stream packets per column
                  error correction packet. Must be between 4 and 20, inclusive.

                  - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                  - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of
                  the FEC protection matrix. Must be between 1 and 20, inclusive. If only
                  Column FEC is used, then larger values increase robustness. If Row FEC is
                  used, then this is the number of transport stream packets per row error
                  correction packet, and the value must be between 4 and 20, inclusive, if
                  includeFec is columnAndRow. If includeFec is column, this value must be 1 to
                  20, inclusive.

            - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as
            the source for this output.

    - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
    information from inputs.

      - **Source** *(string) --* Identifies the source for the timecode that will be associated
      with the events outputs. -Embedded (embedded): Initialize the output timecode with
      timecode from the the source. If no embedded timecode is detected in the source, the
      system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the
      UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be
      00:00:00:00.

      - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
      resynchronized to the input timecode. Discrepancies below this threshold are permitted to
      avoid unnecessary discontinuities in the output timecode. No timecode sync when this is
      not specified.

    - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

      - *(dict) --* Video settings for this stream.

        - **CodecSettings** *(dict) --* Video codec settings.

          - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

            - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
            frames for inclusion in the output. For example, "10" means capture a frame every
            10 seconds.

          - **H264Settings** *(dict) --* H264 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input
            AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
            AFD value will be the value configured in the fixedAfd parameter.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
            output must have a unique value when its bitrate is rounded down to the nearest
            multiple of 1000.

            - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
            filled (HRD buffer model).

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
              space conversion to the output

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
            Main or High profile) or cavlc.

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
            the output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
            frame to reduce flicker or 'pop' on I-frames.

            - **FramerateControl** *(string) --* This field indicates how the output video
            frame rate is specified. If "specified" is selected then the output video frame
            rate is determined by framerateNumerator and framerateDenominator, else if
            "initializeFromSource" is selected then the output video frame rate will be set
            equal to the input video frame rate of the first input.

            - **FramerateDenominator** *(integer) --* Framerate denominator.

            - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
            fraction, e.g. 24000 / 1001 = 23.976 fps.

            - **GopBReference** *(string) --* Documentation update needed

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining
            mid-stream will receive an IDR frame as quickly as possible. Setting this value to
            0 will break output segmenting.

            - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
            or seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run
            time.

            - **Level** *(string) --* H.264 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
            decrease latency and memory usage, while high can produce better quality for
            certain content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
            VBR: Set the maximum bitrate in order to accommodate expected spikes in the
            complexity of the video.

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
            enabled. Enforces separation between repeated (cadence) I-frames and I-frames
            inserted by Scene Change Detection. If a scene change I-frame is within I-interval
            frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
            I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
            normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
            Min-I-interval - 1

            - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
            may use more than requested if using B-frames and/or interlaced encoding.

            - **ParControl** *(string) --* This field indicates how the output pixel aspect
            ratio is specified. If "specified" is selected then the output video pixel aspect
            ratio is determined by parNumerator and parDenominator, else if
            "initializeFromSource" is selected then the output pixsel aspect ratio will be set
            equal to the input video pixel aspect ratio of the first input.

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.264 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
            encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
            quality level field and Max bitrate field that suit your most important viewing
            devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
            bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
            Quality level: 6. Max bitrate: 1M to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate.
            Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
            vary, depending on the video complexity. Recommended instead of QVBR if you want to
            maintain a specific average bitrate over the duration of the channel. CBR: Quality
            varies, depending on the video complexity. Recommended only if you distribute your
            assets to devices that cannot handle variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
            I-frames when scene change is detected. - Off: does not force an I-frame when scene
            change is detected.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or
            equal to the number of macroblock rows for progressive pictures, and less than or
            equal to half the number of macroblock rows for interlaced pictures. This field is
            optional; when no value is specified the encoder will choose the number of slices
            based on encode resolution.

            - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
            reduce high-frequency content in the encoded image.

            - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
            frame based on spatial variation of content complexity.

            - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
            sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
            to improve visual quality.

            - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

            - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
            frame based on temporal variation of content complexity.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
            into the video elementary stream. - 'disabled': Do not include timecodes -
            'picTimingSei': Pass through picture timing SEI messages from the source specified
            in Timecode Config

          - **H265Settings** *(dict) --* H265 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input
            AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
            AFD value will be the value configured in the fixedAfd parameter.

            - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
            Alternative Transfer Function SEI message to support backwards compatibility with
            non-HDR decoders and displays.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
            output must have a unique value when its bitrate is rounded down to the nearest
            multiple of 1000.

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
              space conversion to the output

              - **Hdr10Settings** *(dict) --* Hdr10 Settings

                - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
                value defining the maximum light level, in nits, of any single pixel within an
                encoded HDR video stream or file.

                - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                metadata value defining the maximum average light level, in nits, for any
                single frame within an encoded HDR video stream or file.

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
            the output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
            frame to reduce flicker or 'pop' on I-frames.

            - **FramerateDenominator** *(integer) --* Framerate denominator.

            - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
            fraction, e.g. 24000 / 1001 = 23.976 fps.

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining
            mid-stream will receive an IDR frame as quickly as possible. Setting this value to
            0 will break output segmenting.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
            or seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run
            time.

            - **Level** *(string) --* H.265 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
            decrease latency and memory usage, while high can produce better quality for
            certain content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
            enabled. Enforces separation between repeated (cadence) I-frames and I-frames
            inserted by Scene Change Detection. If a scene change I-frame is within I-interval
            frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
            I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
            normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
            Min-I-interval - 1

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.265 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
            encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
            quality level field and Max bitrate field that suit your most important viewing
            devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
            bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
            Quality level: 6. Max bitrate: 1M to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate.
            Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
            depending on the video complexity. Recommended only if you distribute your assets
            to devices that cannot handle variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or
            equal to the number of macroblock rows for progressive pictures, and less than or
            equal to half the number of macroblock rows for interlaced pictures. This field is
            optional; when no value is specified the encoder will choose the number of slices
            based on encode resolution.

            - **Tier** *(string) --* H.265 Tier.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
            into the video elementary stream. - 'disabled': Do not include timecodes -
            'picTimingSei': Pass through picture timing SEI messages from the source specified
            in Timecode Config

        - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
        most codecs, you can leave this field and width blank in order to use the height and
        width (resolution) from the source. Note, however, that leaving blank is not
        recommended. For the Frame Capture codec, height and width are required.

        - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name
        to uniquely identify this Description. Description names should be unique within this
        Live Event.

        - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the
        input stream. RESPOND causes input video to be clipped, depending on the AFD value,
        input display aspect ratio, and output display aspect ratio, and (except for
        FRAMECAPTURE codec) includes the values in the output. PASSTHROUGH (does not apply to
        FRAMECAPTURE codec) ignores the AFD values and includes the values in the output, so
        input video is not clipped. NONE ignores the AFD values and does not include the values
        through to the output, so input video is not clipped.

        - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
        stretch the video to the specified output resolution (height and width). This option
        will override any position value. DEFAULT may insert black boxes (pillar boxes or
        letter boxes) around the video to provide the specified output resolution.

        - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
        scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
        for most content.

        - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
        most codecs, you can leave this field and height blank in order to use the height and
        width (resolution) from the source. Note, however, that leaving blank is not
        recommended. For the Frame Capture codec, height and width are required.
    """


_ClientUpdateChannelClassResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    {"HlsInputSettings": Dict[str, Any], "ServerValidation": str},
    total=False,
)


class ClientUpdateChannelClassResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef(
    _ClientUpdateChannelClassResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelInputAttachmentsInputSettings` `NetworkInputSettings`

    - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
    HLS manifest.

      - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
      BANDWIDTH that most closely matches this value will be chosen, otherwise the
      highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
      bits per second, as in an HLS manifest.

      - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
      begin this many buffer segments from the end (most recently written segment). When
      not specified, the HLS input will begin with the first segment specified in the
      m3u8.

      - **Retries** *(integer) --* The number of consecutive times that attempts to read
      a manifest or segment must fail before the input is considered unavailable.

      - **RetryInterval** *(integer) --* The number of seconds between retries when an
      attempt to read a manifest or segment fails.

    - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
    checkCryptographyOnly, cryptography in the certificate will be checked, but not the
    server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
    name) do not strictly match the corresponding certificate's wildcard pattern and
    would otherwise cause the event to error. This setting is ignored for protocols that
    do not use https.
    """


_ClientUpdateChannelClassResponseChannelInputAttachmentsInputSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelInputAttachmentsInputSettingsTypeDef",
    {
        "AudioSelectors": List[Any],
        "CaptionSelectors": List[Any],
        "DeblockFilter": str,
        "DenoiseFilter": str,
        "FilterStrength": int,
        "InputFilter": str,
        "NetworkInputSettings": ClientUpdateChannelClassResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef,
        "SourceEndBehavior": str,
        "VideoSelector": Dict[str, Any],
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelInputAttachmentsInputSettingsTypeDef(
    _ClientUpdateChannelClassResponseChannelInputAttachmentsInputSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannelInputAttachments` `InputSettings`

    - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
    that have multiple available.

      - *(dict) --* Audio Selector

        - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
        this name to uniquely identify this Selector. Selector names should be unique per
        input.

        - **SelectorSettings** *(dict) --* The audio selector settings.

          - **AudioLanguageSelection** *(dict) --* Audio Language Selection

            - **LanguageCode** *(string) --* Selects a specific three-letter language code
            from within an audio source.

            - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
            stream demux strictly identifies audio streams by their language descriptor. If
            a PMT update occurs such that an audio stream matching the initially selected
            language is no longer present then mute will be encoded until the language
            returns. If "loose", then on a PMT update the demux will choose another audio
            stream in the program with the same stream type if it can't find one with the
            same language.

          - **AudioPidSelection** *(dict) --* Audio Pid Selection

            - **Pid** *(integer) --* Selects a specific PID from within a source.

    - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
    that have multiple available.

      - *(dict) --* Output groups for this Live Event. Output groups contain information
      about where streams should be distributed.

        - **LanguageCode** *(string) --* When specified this field indicates the three
        letter language code of the caption track to extract from the source.

        - **Name** *(string) --* Name identifier for a caption selector. This name is used
        to associate this caption selector with one or more caption descriptions. Names
        must be unique within an event.

        - **SelectorSettings** *(dict) --* Caption selector settings.

          - **AribSourceSettings** *(dict) --* Arib Source Settings

          - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

            - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
            PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
            is passed through, regardless of selectors.

          - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
            through via the "608 compatibility bytes" fields of the 708 wrapper as well as
            translated into 708. 708 data present in the source content will be discarded.

            - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
            intermittent and/or non-aligned SCTE-20 and Embedded captions.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
            number within the video track from which to extract captions. Unused for
            passthrough.

            - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

          - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
            through via the "608 compatibility bytes" fields of the 708 wrapper as well as
            translated into 708. 708 data present in the source content will be discarded.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
            number within the video track from which to extract captions. Unused for
            passthrough.

          - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

            - **Pid** *(integer) --* The pid field is used in conjunction with the caption
            selector languageCode field as follows: - Specify PID and Language: Extracts
            captions from that PID; the language is "informational". - Specify PID and omit
            Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
            the specified language, whichever PID that happens to be. - Omit PID and omit
            Language: Valid only if source is DVB-Sub that is being passed through; all
            languages will be passed through.

          - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

            - **PageNumber** *(string) --* Specifies the teletext page number within the
            data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
            (2303). Unused for passthrough. Should be specified as a hexadecimal string
            with no "0x" prefix.

    - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

    - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

    - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
    to 5 (strongest).

    - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
    the deblocking filter enabled by default. 1) auto - filtering will be applied depending
    on input type/quality 2) disabled - no filtering will be applied to the input 3) forced
    - filtering will be applied regardless of input type

    - **NetworkInputSettings** *(dict) --* Input settings.

      - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
      HLS manifest.

        - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
        BANDWIDTH that most closely matches this value will be chosen, otherwise the
        highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
        bits per second, as in an HLS manifest.

        - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
        begin this many buffer segments from the end (most recently written segment). When
        not specified, the HLS input will begin with the first segment specified in the
        m3u8.

        - **Retries** *(integer) --* The number of consecutive times that attempts to read
        a manifest or segment must fail before the input is considered unavailable.

        - **RetryInterval** *(integer) --* The number of seconds between retries when an
        attempt to read a manifest or segment fails.

      - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
      checkCryptographyOnly, cryptography in the certificate will be checked, but not the
      server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
      name) do not strictly match the corresponding certificate's wildcard pattern and
      would otherwise cause the event to error. This setting is ignored for protocols that
      do not use https.

    - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
    input to be streamed indefinitely.

    - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
    input types that have multiple available.

      - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
      works in tandem with colorSpaceUsage and a video description's
      colorSpaceSettingsChoice to determine if any conversion will be performed.

      - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
      follow. This field controls how the value in the colorSpace field will be used.
      fallback means that when the input does include color space data, that data will be
      used, but when the input has no color space data, the value in colorSpace will be
      used. Choose fallback if your input is sometimes missing color space data, but when
      it does have color space data, that data is correct. force means to always use the
      value in colorSpace. Choose force if your input usually has no color space data or
      might have unreliable color space data.

      - **SelectorSettings** *(dict) --* The video selector settings.

        - **VideoSelectorPid** *(dict) --* Video Selector Pid

          - **Pid** *(integer) --* Selects a specific PID from within a video source.

        - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

          - **ProgramId** *(integer) --* Selects a specific program from within a
          multi-program transport stream. If the program doesn't exist, the first program
          within the transport stream will be selected by default.
    """


_ClientUpdateChannelClassResponseChannelInputAttachmentsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelInputAttachmentsTypeDef",
    {
        "InputAttachmentName": str,
        "InputId": str,
        "InputSettings": ClientUpdateChannelClassResponseChannelInputAttachmentsInputSettingsTypeDef,
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelInputAttachmentsTypeDef(
    _ClientUpdateChannelClassResponseChannelInputAttachmentsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannel` `InputAttachments`

    - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
    required if the user wants to use this input in an input switch action.

    - **InputId** *(string) --* The ID of the input

    - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

      - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
      that have multiple available.

        - *(dict) --* Audio Selector

          - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
          this name to uniquely identify this Selector. Selector names should be unique per
          input.

          - **SelectorSettings** *(dict) --* The audio selector settings.

            - **AudioLanguageSelection** *(dict) --* Audio Language Selection

              - **LanguageCode** *(string) --* Selects a specific three-letter language code
              from within an audio source.

              - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
              stream demux strictly identifies audio streams by their language descriptor. If
              a PMT update occurs such that an audio stream matching the initially selected
              language is no longer present then mute will be encoded until the language
              returns. If "loose", then on a PMT update the demux will choose another audio
              stream in the program with the same stream type if it can't find one with the
              same language.

            - **AudioPidSelection** *(dict) --* Audio Pid Selection

              - **Pid** *(integer) --* Selects a specific PID from within a source.

      - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
      that have multiple available.

        - *(dict) --* Output groups for this Live Event. Output groups contain information
        about where streams should be distributed.

          - **LanguageCode** *(string) --* When specified this field indicates the three
          letter language code of the caption track to extract from the source.

          - **Name** *(string) --* Name identifier for a caption selector. This name is used
          to associate this caption selector with one or more caption descriptions. Names
          must be unique within an event.

          - **SelectorSettings** *(dict) --* Caption selector settings.

            - **AribSourceSettings** *(dict) --* Arib Source Settings

            - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

              - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
              PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
              is passed through, regardless of selectors.

            - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
              through via the "608 compatibility bytes" fields of the 708 wrapper as well as
              translated into 708. 708 data present in the source content will be discarded.

              - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
              intermittent and/or non-aligned SCTE-20 and Embedded captions.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
              number within the video track from which to extract captions. Unused for
              passthrough.

              - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

            - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
              through via the "608 compatibility bytes" fields of the 708 wrapper as well as
              translated into 708. 708 data present in the source content will be discarded.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
              number within the video track from which to extract captions. Unused for
              passthrough.

            - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

              - **Pid** *(integer) --* The pid field is used in conjunction with the caption
              selector languageCode field as follows: - Specify PID and Language: Extracts
              captions from that PID; the language is "informational". - Specify PID and omit
              Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
              the specified language, whichever PID that happens to be. - Omit PID and omit
              Language: Valid only if source is DVB-Sub that is being passed through; all
              languages will be passed through.

            - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

              - **PageNumber** *(string) --* Specifies the teletext page number within the
              data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
              (2303). Unused for passthrough. Should be specified as a hexadecimal string
              with no "0x" prefix.

      - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

      - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

      - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
      to 5 (strongest).

      - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
      the deblocking filter enabled by default. 1) auto - filtering will be applied depending
      on input type/quality 2) disabled - no filtering will be applied to the input 3) forced
      - filtering will be applied regardless of input type

      - **NetworkInputSettings** *(dict) --* Input settings.

        - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
        HLS manifest.

          - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
          BANDWIDTH that most closely matches this value will be chosen, otherwise the
          highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
          bits per second, as in an HLS manifest.

          - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
          begin this many buffer segments from the end (most recently written segment). When
          not specified, the HLS input will begin with the first segment specified in the
          m3u8.

          - **Retries** *(integer) --* The number of consecutive times that attempts to read
          a manifest or segment must fail before the input is considered unavailable.

          - **RetryInterval** *(integer) --* The number of seconds between retries when an
          attempt to read a manifest or segment fails.

        - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
        checkCryptographyOnly, cryptography in the certificate will be checked, but not the
        server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
        name) do not strictly match the corresponding certificate's wildcard pattern and
        would otherwise cause the event to error. This setting is ignored for protocols that
        do not use https.

      - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
      input to be streamed indefinitely.

      - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
      input types that have multiple available.

        - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
        works in tandem with colorSpaceUsage and a video description's
        colorSpaceSettingsChoice to determine if any conversion will be performed.

        - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
        follow. This field controls how the value in the colorSpace field will be used.
        fallback means that when the input does include color space data, that data will be
        used, but when the input has no color space data, the value in colorSpace will be
        used. Choose fallback if your input is sometimes missing color space data, but when
        it does have color space data, that data is correct. force means to always use the
        value in colorSpace. Choose force if your input usually has no color space data or
        might have unreliable color space data.

        - **SelectorSettings** *(dict) --* The video selector settings.

          - **VideoSelectorPid** *(dict) --* Video Selector Pid

            - **Pid** *(integer) --* Selects a specific PID from within a video source.

          - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

            - **ProgramId** *(integer) --* Selects a specific program from within a
            multi-program transport stream. If the program doesn't exist, the first program
            within the transport stream will be selected by default.
    """


_ClientUpdateChannelClassResponseChannelInputSpecificationTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelInputSpecificationTypeDef",
    {"Codec": str, "MaximumBitrate": str, "Resolution": str},
    total=False,
)


class ClientUpdateChannelClassResponseChannelInputSpecificationTypeDef(
    _ClientUpdateChannelClassResponseChannelInputSpecificationTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannel` `InputSpecification`

    - **Codec** *(string) --* Input codec

    - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

    - **Resolution** *(string) --* Input resolution, categorized coarsely
    """


_ClientUpdateChannelClassResponseChannelPipelineDetailsTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelPipelineDetailsTypeDef",
    {
        "ActiveInputAttachmentName": str,
        "ActiveInputSwitchActionName": str,
        "PipelineId": str,
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelPipelineDetailsTypeDef(
    _ClientUpdateChannelClassResponseChannelPipelineDetailsTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponseChannel` `PipelineDetails`

    - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
    currently being ingested by this pipeline.

    - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
    action that occurred most recently and that resulted in the switch to the current input
    attachment for this pipeline.

    - **PipelineId** *(string) --* Pipeline ID
    """


_ClientUpdateChannelClassResponseChannelTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseChannelTypeDef",
    {
        "Arn": str,
        "ChannelClass": str,
        "Destinations": List[Any],
        "EgressEndpoints": List[
            ClientUpdateChannelClassResponseChannelEgressEndpointsTypeDef
        ],
        "EncoderSettings": ClientUpdateChannelClassResponseChannelEncoderSettingsTypeDef,
        "Id": str,
        "InputAttachments": List[
            ClientUpdateChannelClassResponseChannelInputAttachmentsTypeDef
        ],
        "InputSpecification": ClientUpdateChannelClassResponseChannelInputSpecificationTypeDef,
        "LogLevel": str,
        "Name": str,
        "PipelineDetails": List[
            ClientUpdateChannelClassResponseChannelPipelineDetailsTypeDef
        ],
        "PipelinesRunningCount": int,
        "RoleArn": str,
        "State": str,
        "Tags": Dict[str, str],
    },
    total=False,
)


class ClientUpdateChannelClassResponseChannelTypeDef(
    _ClientUpdateChannelClassResponseChannelTypeDef
):
    """
    Type definition for `ClientUpdateChannelClassResponse` `Channel`

    - **Arn** *(string) --* The unique arn of the channel.

    - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two
    pipelines or SINGLE_PIPELINE for a channel with one pipeline.

    - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there
    is one destination per output. For other types (HLS, for example), there is one destination
    per packager.

      - *(dict) --* Placeholder documentation for OutputDestination

        - **Id** *(string) --* User-specified id. This is used in an output group or an output.

        - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output;
        one destination for both encoders.

          - *(dict) --* MediaPackage Output Destination Settings

            - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the
            destination for this output group. You do not need to specify the individual inputs
            in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines
            to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must
            be in the same region.

        - **Settings** *(list) --* Destination settings for a standard output; one destination
        for each redundant encoder.

          - *(dict) --* Placeholder documentation for OutputDestinationSettings

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type
            rtmp://)

            - **Url** *(string) --* A URL specifying a destination

            - **Username** *(string) --* username for destination

    - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from

      - *(dict) --* Placeholder documentation for ChannelEgressEndpoint

        - **SourceIp** *(string) --* Public IP of where a channel's output comes from

    - **EncoderSettings** *(dict) --* Encoder Settings

      - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

        - *(dict) --* Audio Description

          - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

            - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
            to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

            - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
            corrected using the chosen algorithm. If set to measureOnly, the audio will be
            measured but not adjusted.

            - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value
            is entered, a default value will be used according to the chosen algorithm. The CALM
            Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
            recommends a target of -23 LKFS.

          - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
          for this AudioDescription.

          - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
          values for audioType are defined in ISO-IEC 13818-1.

          - **AudioTypeControl** *(string) --* Determines how audio type is determined.
          followInput: If the input contains an ISO 639 audioType, then that value is passed
          through to the output. If the input contains no ISO 639 audioType, the value in Audio
          Type is included in the output. useConfigured: The value in Audio Type is included in
          the output. Note that this field and audioType are both ignored if inputType is
          broadcasterMixedAd.

          - **CodecSettings** *(dict) --* Audio codec settings.

            - **AacSettings** *(dict) --* Aac Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
              rate control mode and profile.

              - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
              depend on rate control mode and profile. The adReceiverMix setting receives a
              stereo description plus control track and emits a mono AAC encode of the
              description track, with control data emitted in the PES header as per ETSI TS 101
              154 Annex E.

              - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
              pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
              (audioType) will be set to 3, which signals to downstream systems that this stream
              contains "broadcaster mixed AD". Note that the input received by the encoder must
              contain pre-mixed audio; the encoder does not perform the mixing. The values in
              audioTypeControl and audioType (in AudioDescription) are ignored when set to
              broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
              audio + AD.

              - **Profile** *(string) --* AAC Profile.

              - **RateControlMode** *(string) --* Rate Control Mode.

              - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

              - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
              control mode and profile.

              - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
              or MPEG-2 Transport Stream containers.

              - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
              VBR.

            - **Ac3Settings** *(dict) --* Ac3 Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
              the coding mode.

              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
              emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

              - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
              channels.

              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
              input audio is Dolby Digital, dialnorm will be passed through.

              - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
              compression signaling to the output bitstream as defined in the Dolby Digital
              specification.

              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
              to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

              - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
              will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
              If audio was not supplied from one of these streams, then the static metadata
              settings will be used.

            - **Eac3Settings** *(dict) --* Eac3 Settings

              - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
              attenuation to the surround channels. Only used for 3/2 coding mode.

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
              the coding mode.

              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
              emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

              - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
              channels.

              - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
              for all input channels.

              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
              audio is Dolby Digital Plus, dialnorm will be passed through.

              - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

              - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
              compression, ensures that the instantaneous signal peaks do not exceed specified
              levels.

              - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
              LFE channel

              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
              to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

              - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
              used for 3/2 coding mode.

              - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
              Only used for 3/2 coding mode.

              - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
              used for 3/2 coding mode.

              - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
              Only used for 3/2 coding mode.

              - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
              be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
              audio was not supplied from one of these streams, then the static metadata settings
              will be used.

              - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
              will be passed through if it is present on the input. This detection is dynamic
              over the life of the transcode. Inputs that alternate between DD+ and non-DD+
              content will have a consistent DD+ output as the system alternates between
              passthrough and encoding.

              - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
              phase shift to the surround channels. Only used for 3/2 coding mode.

              - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
              coding mode.

              - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
              center back surround channel is matrix encoded into the left and right surround
              channels.

              - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
              Surround is matrix encoded into the two channels.

            - **Mp2Settings** *(dict) --* Mp2 Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second.

              - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
              codingMode10 (for mono) or codingMode20 (for stereo).

              - **SampleRate** *(float) --* Sample rate in Hz.

            - **PassThroughSettings** *(dict) --* Pass Through Settings

          - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
          used if languageControlMode is useConfigured, or there is no ISO 639 language code
          specified in the input.

          - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
          language code of the output to follow the ISO 639 language code of the input. The
          languageCode will be used when useConfigured is set, or when followInput is selected
          but there is no ISO 639 language code specified by the input.

          - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name
          to uniquely identify this AudioDescription. Description names should be unique within
          this Live Event.

          - **RemixSettings** *(dict) --* Settings that control how input audio channels are
          remixed into the output audio channels.

            - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
            appropriate gain adjustments.

              - *(dict) --* Audio Channel Mapping

                - **InputChannelLevels** *(list) --* Indices and gain values for each input
                channel that should be remixed into this output channel.

                  - *(dict) --* Input Channel Level

                    - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable
                    values are within the range from -60 (mute) and 6 dB.

                    - **InputChannel** *(integer) --* The index of the input channel used as a
                    source.

                - **OutputChannel** *(integer) --* The index of the output channel being produced.

            - **ChannelsIn** *(integer) --* Number of input channels to be used.

            - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
            values: 1, 2, 4, 6, 8

          - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
          name displayed by the player (eg. English, or Director Commentary).

      - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

        - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
        black. Only bmp and png images are supported.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **State** *(string) --* When set to enabled, causes video, audio and captions to be
        blanked when insertion metadata is added.

      - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail
      insertion.

        - **AvailSettings** *(dict) --* Ad avail settings.

          - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
            added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
            messages and does not apply to OOB messages.

            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
            with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
            slates

            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
            with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
            slates

          - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
            added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
            messages and does not apply to OOB messages.

            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
            with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
            slates

            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
            with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
            slates

      - **BlackoutSlate** *(dict) --* Settings for blackout slate.

        - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for
        solid black. Only bmp and png images are supported.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
        the video, audio, and captions, and raise the "Network Blackout Image" slate when an
        SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be
        lifted when the Network Start Segmentation Descriptor is encountered. The Network End and
        Network Start descriptors must contain a network ID that matches the value entered in
        "Network ID".

        - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End
        Blackout image. Image will be scaled to fill the entire output raster.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
        "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

        - **State** *(string) --* When set to enabled, causes video, audio and captions to be
        blanked when indicated by program metadata.

      - **CaptionDescriptions** *(list) --* Settings for caption decriptions

        - *(dict) --* Output groups for this Live Event. Output groups contain information about
        where streams should be distributed.

          - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use
          as a caption source when generating output captions. This field should match a
          captionSelector name.

          - **DestinationSettings** *(dict) --* Additional settings for captions destination that
          depend on the destination type.

            - **AribDestinationSettings** *(dict) --* Arib Destination Settings

            - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
              setting alignment to centered will place the captions at the bottom center of the
              output. Similarly, setting a left alignment will align captions to the bottom left
              of the output. If x and y positions are given in conjunction with the alignment
              parameter, the font will be justified (either left or centered) relative to those
              coordinates. Selecting "smart" justification will left-justify live subtitles and
              center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
              match.

              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
              captions. All burn-in and DVB-Sub font settings must match.

              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
              rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is
              equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
              must match.

              - **Font** *(dict) --* External font file used for caption burn-in. File extension
              must be 'ttf' or 'tte'. Although the user can select output fonts for many
              different types of input captions, embedded, STL and teletext sources use a strict
              grid system. Using external fonts with these caption sources could cause unexpected
              display of proportional fonts. All burn-in and DVB-Sub font settings must match.

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                file accessible to the Live system (eg. a http:// URI) depending on the output
                type. For example, a RTMP destination should have a uri simliar to:
                "rtmp://fmsserver/live".

                - **Username** *(string) --* Documentation update needed

              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
              option is not valid for source captions that are STL, 608/embedded or teletext.
              These source settings are already pre-defined by the caption stream. All burn-in
              and DVB-Sub font settings must match.

              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
              255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
              is 96 dpi. All burn-in and DVB-Sub font settings must match.

              - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on
              the size of the output. Giving a positive integer will specify the exact font size
              in points. All burn-in and DVB-Sub font settings must match.

              - **OutlineColor** *(string) --* Specifies font outline color. This option is not
              valid for source captions that are either 608/embedded or teletext. These source
              settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
              font settings must match.

              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
              is not valid for source captions that are either 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
              captions. All burn-in and DVB-Sub font settings must match.

              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
              opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to
              0 (transparent). All burn-in and DVB-Sub font settings must match.

              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels to the left. All burn-in and DVB-Sub font settings must match.

              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels above the text. All burn-in and DVB-Sub font settings must match.

              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
              used to generate the output subtitles bitmap. Only applicable for Teletext inputs
              and DVB-Sub/Burn-in outputs.

              - **XPosition** *(integer) --* Specifies the horizontal position of the caption
              relative to the left side of the output in pixels. A value of 10 would result in
              the captions starting 10 pixels from the left of the output. If no explicit
              xPosition is provided, the horizontal caption position will be determined by the
              alignment parameter. All burn-in and DVB-Sub font settings must match.

              - **YPosition** *(integer) --* Specifies the vertical position of the caption
              relative to the top of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the top of the output. If no explicit yPosition is
              provided, the caption will be positioned towards the bottom of the output. All
              burn-in and DVB-Sub font settings must match.

            - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
              setting alignment to centered will place the captions at the bottom center of the
              output. Similarly, setting a left alignment will align captions to the bottom left
              of the output. If x and y positions are given in conjunction with the alignment
              parameter, the font will be justified (either left or centered) relative to those
              coordinates. Selecting "smart" justification will left-justify live subtitles and
              center-justify pre-recorded subtitles. This option is not valid for source captions
              that are STL or 608/embedded. These source settings are already pre-defined by the
              caption stream. All burn-in and DVB-Sub font settings must match.

              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
              captions. All burn-in and DVB-Sub font settings must match.

              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
              rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
              equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
              must match.

              - **Font** *(dict) --* External font file used for caption burn-in. File extension
              must be 'ttf' or 'tte'. Although the user can select output fonts for many
              different types of input captions, embedded, STL and teletext sources use a strict
              grid system. Using external fonts with these caption sources could cause unexpected
              display of proportional fonts. All burn-in and DVB-Sub font settings must match.

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                file accessible to the Live system (eg. a http:// URI) depending on the output
                type. For example, a RTMP destination should have a uri simliar to:
                "rtmp://fmsserver/live".

                - **Username** *(string) --* Documentation update needed

              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
              option is not valid for source captions that are STL, 608/embedded or teletext.
              These source settings are already pre-defined by the caption stream. All burn-in
              and DVB-Sub font settings must match.

              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
              255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
              is 96 dpi. All burn-in and DVB-Sub font settings must match.

              - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
              size of the output. Giving a positive integer will specify the exact font size in
              points. All burn-in and DVB-Sub font settings must match.

              - **OutlineColor** *(string) --* Specifies font outline color. This option is not
              valid for source captions that are either 608/embedded or teletext. These source
              settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
              font settings must match.

              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
              is not valid for source captions that are either 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
              captions. All burn-in and DVB-Sub font settings must match.

              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
              opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it
              to 0 (transparent). All burn-in and DVB-Sub font settings must match.

              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels to the left. All burn-in and DVB-Sub font settings must match.

              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels above the text. All burn-in and DVB-Sub font settings must match.

              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
              used to generate the output subtitles bitmap. Only applicable for Teletext inputs
              and DVB-Sub/Burn-in outputs.

              - **XPosition** *(integer) --* Specifies the horizontal position of the caption
              relative to the left side of the output in pixels. A value of 10 would result in
              the captions starting 10 pixels from the left of the output. If no explicit
              xPosition is provided, the horizontal caption position will be determined by the
              alignment parameter. This option is not valid for source captions that are STL,
              608/embedded or teletext. These source settings are already pre-defined by the
              caption stream. All burn-in and DVB-Sub font settings must match.

              - **YPosition** *(integer) --* Specifies the vertical position of the caption
              relative to the top of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the top of the output. If no explicit yPosition is
              provided, the caption will be positioned towards the bottom of the output. This
              option is not valid for source captions that are STL, 608/embedded or teletext.
              These source settings are already pre-defined by the caption stream. All burn-in
              and DVB-Sub font settings must match.

            - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

            - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
            Destination Settings

            - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
            Settings

            - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
            Destination Settings

            - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

            - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

            - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

            - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

              - **StyleControl** *(string) --* When set to passthrough, passes through style and
              position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
              CFF-TT output or TTML output.

            - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

          - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
          http://www.loc.gov/standards/iso639-2/

          - **LanguageDescription** *(string) --* Human readable information to indicate captions
          available for players (eg. English, or Spanish).

          - **Name** *(string) --* Name of the caption description. Used to associate a caption
          description with an output. Names must be unique within an event.

      - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
      whole.

        - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
        Event.

        - **InputEndAction** *(string) --* Indicates the action to take when the current input
        completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
        restart at the beginning of the first input. When "none" is configured the encoder will
        transcode either black, a solid color, or a user specified slate images per the "Input
        Loss Behavior" configuration until the next input switch occurs (which is controlled
        through the Channel Schedule API).

        - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

          - **BlackFrameMsec** *(integer) --* Documentation update needed

          - **InputLossImageColor** *(string) --* When input loss image type is "color" this
          field specifies the color to use. Value: 6 hex characters representing the values of
          RGB.

          - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these
          fields specify the parameters for accessing the slate.

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
            accessible to the Live system (eg. a http:// URI) depending on the output type. For
            example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            - **Username** *(string) --* Documentation update needed

          - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or
          a slate into the output after input loss exceeds blackFrameMsec.

          - **RepeatFrameMsec** *(integer) --* Documentation update needed

        - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
        PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to
        the other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each
        pipeline to the Unix epoch.

        - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by
        the Live encoder should be paced by its system clock (which optionally may be locked to
        another source via NTP) or should be locked to the clock of the source that is providing
        the input stream.

        - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
        very low video framerates. This is commonly set to enabled for music channels with less
        than one video frame per second.

      - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

        - *(dict) --* Output groups for this Live Event. Output groups contain information about
        where streams should be distributed.

          - **Name** *(string) --* Custom output group name optionally defined by the user. Only
          letters, numbers, and the underscore character allowed; only 32 characters allowed.

          - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

            - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

              - **Destination** *(dict) --* A directory and base filename where archive files
              should be written.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
              before closing and starting a new one.

            - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

              - **Destination** *(dict) --* The destination for the frame capture files. Either
              the URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
              s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
              container, plus a file name prefix (for example,
              mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
              the prefix from the destination field (for example, "curling_") + name modifier +
              the counter (5 digits, starting from 00001) + extension (which is always .jpg). For
              example, curlingLow.00001.jpg

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **HlsGroupSettings** *(dict) --* Hls Group Settings

              - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35
              signals through to this group of Apple HLS outputs.

                - *(string) --* Hls Ad Markers

              - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
              each output in the media .m3u8 file. Can be used if base manifest is delivered from
              a different URL than the main .m3u8 file.

              - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
              each output in the media .m3u8 file. Can be used if base manifest is delivered from
              a different URL than the main .m3u8 file.

              - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
              caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

                - *(dict) --* Maps a caption channel to an ISO 693-2 language code
                (http://www.loc.gov/standards/iso639-2), with an optional description.

                  - **CaptionChannel** *(integer) --* The closed caption channel being described
                  by this CaptionLanguageMapping. Each channel mapping must have a unique channel
                  number (maximum of 4)

                  - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                  http://www.loc.gov/standards/iso639-2)

                  - **LanguageDescription** *(string) --* Textual description of language

              - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
              captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least
              one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for
              each Language Code you specify. Make sure to specify the languages in the order in
              which they appear in the original source (if the source is embedded format) or the
              order of the caption selectors (if the source is other than embedded). Otherwise,
              languages in the manifest will not match up properly with the output captions.
              none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any
              CLOSED-CAPTIONS line from the manifest.

              - **ClientCache** *(string) --* When set to "disabled", sets the
              #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
              segments for later replay.

              - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the
              default RFC-4281) during m3u8 playlist generation.

              - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
              16-byte hex value represented by a 32-character text string. If ivSource is set to
              "explicit" then this parameter is required and is used as the IV for encryption.

              - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
              manifest files, and encryption keys (if enabled).

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **DirectoryStructure** *(string) --* Place segments in subdirectories.

              - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
              scheme. Exclude this parameter if no encryption is desired.

              - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

                - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                  transfer encoding to Akamai. User should contact Akamai to enable this feature.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made
                  before the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of
                  seconds to wait until a restart is initiated. A value of 0 means never restart.

                  - **Salt** *(string) --* Salt for authenticated Akamai.

                  - **Token** *(string) --* Token parameter for authenticated akamai. If not
                  specified, _gda_ is used.

                - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made
                  before the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of
                  seconds to wait until a restart is initiated. A value of 0 means never restart.

                - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **MediaStoreStorageClass** *(string) --* When set to temporal, output files
                  are stored in non-persistent memory for faster reading and writing.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made
                  before the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of
                  seconds to wait until a restart is initiated. A value of 0 means never restart.

                - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                  transfer encoding to WebDAV.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made
                  before the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of
                  seconds to wait until a restart is initiated. A value of 0 means never restart.

              - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
              manifest, but do create the master and media manifests (according to the Output
              Selection field). STANDARD: Create an I-frame-only manifest for each output that
              contains video, as well as the other manifests (according to the Output Selection
              field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
              I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
              position. For example, #EXT-X-BYTERANGE:160364@1461888"

              - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies
              the maximum number of segments in the media manifest file. After this maximum,
              older segments are removed from the media manifest. This number must be less than
              or equal to the Keep Segments field.

              - **InputLossAction** *(string) --* Parameter that control output group behavior on
              input loss.

              - **IvInManifest** *(string) --* For use with encryptionType. The IV
              (Initialization Vector) is a 128-bit number used in conjunction with the key for
              encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the
              IV is not in the manifest.

              - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
              Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
              If this setting is "followsSegmentNumber", it will cause the IV to change every
              segment (to match the segment number). If this is set to "explicit", you must enter
              a constantIv value.

              - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
              number of media segments (.ts files) to retain in the destination directory.

              - **KeyFormat** *(string) --* The value specifies how the key is represented in the
              resource identified by the URI. If parameter is absent, an implicit value of
              "identity" is used. A reverse DNS string can also be given.

              - **KeyFormatVersions** *(string) --* Either a single positive integer version
              value or a slash delimited list of version values (1/2/3).

              - **KeyProviderSettings** *(dict) --* The key provider settings.

                - **StaticKeySettings** *(dict) --* Static Key Settings

                  - **KeyProviderServer** *(dict) --* The URL of the license server used for
                  protecting content.

                    - **PasswordParam** *(string) --* key used to extract the password from EC2
                    Parameter store

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                    to a file accessible to the Live system (eg. a http:// URI) depending on the
                    output type. For example, a RTMP destination should have a uri simliar to:
                    "rtmp://fmsserver/live".

                    - **Username** *(string) --* Documentation update needed

                  - **StaticKeyValue** *(string) --* Static key value as a 32 character
                  hexadecimal string.

              - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

              - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
              should use floating point or integer values for segment duration.

              - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
              looking ahead and back within the specified range for a nearby avail and extending
              the segment size if needed.

              - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
              the destination and manifest. If "live", only the number segments specified in
              keepSegments and indexNSegments are kept; newer segments replace older segments,
              which may prevent players from rewinding all the way to the beginning of the event.
              VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
              converting it to a "VOD" type manifest on completion of the stream.

              - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests
              (master manifest, if applicable, and media manifests) for this output group.
              SEGMENTSONLY: Does not generate any manifests for this output group.

              - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME
              tag in .m3u8 manifest files. The value is calculated as follows: either the program
              date and time are initialized using the input timecode source, or the time is
              initialized using the input timecode source and the date is initialized using the
              timestampOffset.

              - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
              EXT-X-PROGRAM-DATE-TIME entry, in seconds.

              - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
              each pipeline includes information about both pipelines: first its own media files,
              then the media files of the other pipeline. This feature allows playout device that
              support stale manifest detection to switch from one manifest to the other, when the
              current manifest seems to be stale. There are still two destinations and two master
              manifests, but both master manifests reference the media files from both pipelines.
              DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
              about its own pipeline only. For an HLS output group with MediaPackage as the
              destination, the DISABLED behavior is always followed. MediaPackage regenerates the
              manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

              - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
              create (in seconds). Note that segments will end on the next keyframe after this
              number of seconds, so actual segment length may be longer.

              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
              configured segment size is always used.

              - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
              subdirectory before starting a new one. directoryStructure must be
              subdirectoryPerStream for this setting to have an effect.

              - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
              video in EXT-X-STREAM-INF tag of variant manifest.

              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

              - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
              offset to fine tune the timestamps.

              - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
              multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
              program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE
              tags to index segments for playback. A typical use for this value is when sending
              the output to AWS Elemental MediaConvert, which can accept only a single media
              file. Playback while the channel is running is not guaranteed due to HTTP server
              caching.

            - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

              - **Destination** *(dict) --* MediaPackage channel destination.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

              - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point
              Identity" element used in each message placed in the sparse track. Only enabled if
              sparseTrackType is not "none".

              - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an
              audio-only MS Smooth output, the fragment absolute time will be set to the current
              timecode. This option does not write timecodes to the audio elementary stream.

              - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
              certificate chain to a trusted Certificate Authority (CA). This will cause https
              outputs to self-signed certificates to fail.

              - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
              retrying connection to the IIS server if the connection is lost. Content will be
              cached during this time and the cache will be be delivered to the IIS server once
              the connection is re-established.

              - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
              Elemental Live acts as a "Push" encoder to IIS.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
              only be specified if eventIdMode is set to useConfigured.

              - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
              IIS server. If no event ID is sent and the same Live Event is used without changing
              the publishing point, clients might see cached video from the previous run.
              Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" -
              generate and send an event ID based on the current timestamp - "noEventId" - do not
              send an event ID to the IIS server.

              - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
              server when stopping the event

              - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
              outputs.

              - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in
              seconds). Fragment length must be compatible with GOP size and framerate.

              - **InputLossAction** *(string) --* Parameter that control output group behavior on
              input loss.

              - **NumRetries** *(integer) --* Number of retry attempts.

              - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
              to output failure, due to exhausting the numRetries on one segment, or exceeding
              filecacheDuration.

              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
              configured segment size is always used.

              - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from
              the second pipeline.

              - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
              to generate a sparse track in this group of MS-Smooth outputs.

              - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest
              so publishing point doesn't start until all streams start.

              - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
              timestampOffsetMode is set to useConfiguredOffset.

              - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
              useEventStartDate: Use the date the event was started as the offset -
              useConfiguredOffset: Use an explicitly configured date as the offset

            - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

              - **AuthenticationScheme** *(string) --* Authentication scheme to use when
              connecting with CDN

              - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills
              up. If remote origin server stalls the RTMP connection and does not accept content
              fast enough the 'Media Cache' will fill up. When the cache reaches the duration
              specified by cacheLength the cache will stop accepting new content. If set to
              disconnectImmediately, the RTMP output will force a disconnect. Clear the media
              cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
              output will wait up to 5 minutes to allow the origin server to begin accepting data
              again.

              - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
              buffer size.

              - **CaptionData** *(string) --* Controls the types of data that passes to
              onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
              passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but
              608 data from both fields will be passed. If set to 'field1608' then only the data
              carried in 608 from field 1 video will be passed.

              - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if
              input becomes unavailable. - emitOutput: Emit a slate until input returns. -
              pauseOutput: Stop transmitting data until input returns. This does not close the
              underlying RTMP connection.

              - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
              wait until a restart is initiated. A value of 0 means never restart.

            - **UdpGroupSettings** *(dict) --* Udp Group Settings

              - **InputLossAction** *(string) --* Specifies behavior of last resort when input
              video is lost, and no more backup inputs are available. When dropTs is selected the
              entire transport stream will stop being emitted. When dropProgram is selected the
              program can be dropped from the transport stream (and replaced with null packets to
              meet the TS bitrate requirement). Or, when emitProgram is chosen the transport
              stream will continue to be produced normally with repeat frames, black frames, or
              slate frames substituted for the absent input video.

              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

          - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

            - *(dict) --* Output settings. There can be multiple outputs within a group.

              - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
              audio sources for this output.

                - *(string) --* Placeholder documentation for __string

              - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
              as caption sources for this output.

                - *(string) --* Placeholder documentation for __string

              - **OutputName** *(string) --* The name used to identify an output.

              - **OutputSettings** *(dict) --* Output type-specific settings.

                - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                  - **ContainerSettings** *(dict) --* Settings specific to the container type of
                  the file.

                    - **M2tsSettings** *(dict) --* M2ts Settings

                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                      streams will be removed from the program if the selected input audio stream
                      is removed from the input. This allows the output audio configuration to
                      dynamically change based on input configuration. If this is set to
                      encodeSilence, all output audio streams will output encoded silence when
                      not connected to an active input stream.

                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                      muxing and removes video descriptor.

                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                      Captions in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                      for ARIB Captions will be auto-selected from unused pids. If set to
                      useConfigured, ARIB Captions will be on the configured pid number.

                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                      for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                      audio stream(s) in the transport stream. Multiple values are accepted, and
                      can be entered in ranges and/or by comma separation. Can be entered as
                      decimal or hexadecimal values. Each PID specified must be in the range of
                      32 (or 0x20)..8182 (or 0x1ff6).

                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                      0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                      type = 0x06.

                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                      bits per second. Setting to 0 lets the muxer automatically determine the
                      appropriate bitrate.

                      - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                      model for accurate interleaving. Setting to bufferModel to none can lead to
                      lower latency, but low-memory devices may not be able to play back the
                      stream without interruptions.

                      - **CcDescriptor** *(string) --* When set to enabled, generates
                      captionServiceDescriptor in PMT.

                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                      (NIT) at the specified table repetition interval.

                        - **NetworkId** *(integer) --* The numeric value placed in the Network
                        Information Table (NIT).

                        - **NetworkName** *(string) --* The network name text placed in the
                        networkNameDescriptor inside the Network Information Table. Maximum
                        length is 256 characters.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                      (SDT) at the specified table repetition interval.

                        - **OutputSdt** *(string) --* Selects method of inserting SDT information
                        into output stream. The sdtFollow setting copies SDT information from
                        input stream to output stream. The sdtFollowIfPresent setting copies SDT
                        information from input stream to output stream if SDT information is
                        present in the input, otherwise it will fall back on the user-defined
                        values. The sdtManual setting means user will enter the SDT information.
                        The sdtNone setting means output stream will not contain SDT information.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                        - **ServiceName** *(string) --* The service name placed in the
                        serviceDescriptor in the Service Description Table. Maximum length is 256
                        characters.

                        - **ServiceProviderName** *(string) --* The service provider name placed
                        in the serviceDescriptor in the Service Description Table. Maximum length
                        is 256 characters.

                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                      Subtitle data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                      the specified table repetition interval.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                      DVB Teletext data to this output. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                      the input source to this output.

                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                      selected, audio EBP markers will be added to partitions 3 and 4. The
                      interval between these additional markers will be fixed, and will be
                      slightly shorter than the video EBP marker interval. Only available when
                      EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                      always follow the video interval.

                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                      Boundary Points do not come within the specified time interval of each
                      other by looking ahead at input video. If another EBP is going to come in
                      within the specified time interval, the current EBP is not emitted, and the
                      segment is "stretched" to the next marker. The lookahead value does not add
                      latency to the system. The Live Event must be configured elsewhere to
                      create sufficient latency to make the lookahead accurate.

                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                      If set to videoAndAudioPids, EBP markers will be placed on the video PID
                      and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                      the video PID.

                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                      PES header.

                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Platform data to this output. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **FragmentTime** *(float) --* The length in seconds of each fragment.
                      Only used with EBP markers.

                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                      input source to this output.

                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                      KLV data to this output. Multiple values are accepted, and can be entered
                      in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                      packets to insert into the transport stream. This can be used if a
                      downstream encryption system requires periodic null packets.

                      - **PatInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. Valid values are 0,
                      10..1000.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                      Clock Reference value is inserted for every Packetized Elementary Stream
                      (PES) header. This parameter is effective only when the PCR PID is the same
                      as the video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock Reference (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the
                      encoder will assign the same value as the Video PID. Can be entered as a
                      decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                      0x1ff6).

                      - **PmtInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. Valid values are 0,
                      10..1000.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                      Table (PMT) in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **ProgramNum** *(integer) --* The value of the program number field in
                      the Program Map Table.

                      - **RateMode** *(string) --* When vbr, does not insert null packets into
                      transport stream to fill specified bitrate. The bitrate setting acts as the
                      maximum bitrate when vbr is set.

                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                      SCTE-27 data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                      input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                      each segmentationTime period. raiSegstart sets the Random Access Indicator
                      bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                      timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                      at the start of segments. ebp adds Encoder Boundary Point information to
                      the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                      ebpLegacy adds Encoder Boundary Point information to the adaptation field
                      using a legacy proprietary format.

                      - **SegmentationStyle** *(string) --* The segmentation style parameter
                      controls how segmentation markers are inserted into the transport stream.
                      With avails, it is possible that segments may be truncated, which can
                      influence where future segmentation markers are inserted. When a
                      segmentation style of "resetCadence" is selected and a segment is truncated
                      due to an avail, we will reset the segmentation cadence. This means the
                      subsequent segment will have a duration of $segmentationTime seconds. When
                      a segmentation style of "maintainCadence" is selected and a segment is
                      truncated due to an avail, we will not reset the segmentation cadence. This
                      means the subsequent segment will likely be truncated as well. However, all
                      segments after that will have a duration of $segmentationTime seconds. Note
                      that EBP lookahead is a slight exception to this rule.

                      - **SegmentationTime** *(float) --* The length in seconds of each segment.
                      Required unless markers is set to None_.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata will be passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                      video stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                  - **Extension** *(string) --* Output file extension. If excluded, this will be
                  auto-selected from the container type.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Required for multiple outputs of the same type.

                - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                  - **NameModifier** *(string) --* Required if the output group contains more
                  than one output. This modifier forms part of the output file name.

                - **HlsOutputSettings** *(dict) --* Hls Output Settings

                  - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                  settings are different for audio-only outputs.

                    - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                      - **AudioGroupId** *(string) --* Specifies the group to which the audio
                      Rendition belongs.

                      - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                      to use as the cover art for an audio-only output. We recommend a low
                      bit-size file because the image increases the output audio bandwidth. The
                      image is attached to the audio as an ID3 tag, frame type APIC, picture type
                      0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.

                        - **PasswordParam** *(string) --* key used to extract the password from
                        EC2 Parameter store

                        - **Uri** *(string) --* Uniform Resource Identifier - This should be a
                        path to a file accessible to the Live system (eg. a http:// URI)
                        depending on the output type. For example, a RTMP destination should have
                        a uri simliar to: "rtmp://fmsserver/live".

                        - **Username** *(string) --* Documentation update needed

                      - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                      supported: Audio-Only Variant Stream The client can play back this
                      audio-only stream instead of video in low-bandwidth scenarios. Represented
                      as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select,
                      Default Alternate rendition that the client should try to play back by
                      default. Represented as an EXT-X-MEDIA in the HLS manifest with
                      DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default
                      Alternate rendition that the client may try to play back by default.
                      Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO,
                      AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that
                      the client will not try to play back by default. Represented as an
                      EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO

                    - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                      - **AudioRenditionSets** *(string) --* List all the audio groups that are
                      used with the video output stream. Input all the audio GROUP-IDs that are
                      associated to the video, separate by ','.

                      - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                        - **AudioFramesPerPes** *(integer) --* The number of audio frames to
                        insert for each PES packet.

                        - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                        audio stream(s) in the transport stream. Multiple values are accepted,
                        and can be entered in ranges and/or by comma separation. Can be entered
                        as decimal or hexadecimal values.

                        - **EcmPid** *(string) --* This parameter is unused and deprecated.

                        - **PatInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. A value of
                        \\"0\\" writes out the PMT once per segment file.

                        - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                        Clock Reference value is inserted for every Packetized Elementary Stream
                        (PES) header. This parameter is effective only when the PCR PID is the
                        same as the video or audio elementary stream.

                        - **PcrPeriod** *(integer) --* Maximum time in milliseconds between
                        Program Clock References (PCRs) inserted into the transport stream.

                        - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                        Reference (PCR) in the transport stream. When no value is given, the
                        encoder will assign the same value as the Video PID. Can be entered as a
                        decimal or hexadecimal value.

                        - **PmtInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. A value of
                        \\"0\\" writes out the PMT once per segment file.

                        - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                        Table (PMT) in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                        - **ProgramNum** *(integer) --* The value of the program number field in
                        the Program Map Table.

                        - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                        SCTE-35 signals from the input source to this output.

                        - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35
                        stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                        - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                        metadata is passed through from input to output.

                        - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                        metadata stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **TransportStreamId** *(integer) --* The value of the transport stream
                        ID field in the Program Map Table.

                        - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                        video stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Accepts \\"Format
                  Identifiers\\":#formatIdentifierParameters.

                  - **SegmentModifier** *(string) --* String concatenated to end of segment
                  filenames.

                - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

                - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                  - **H265PackagingType** *(string) --* Only applicable when this output is
                  referencing an H.265 video description. Specifies whether MP4 segments should
                  be packaged as HEV1 or HVC1.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Required for multiple outputs of the same type.

                - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                  - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the
                  tls certificate chain to a trusted Certificate Authority (CA). This will cause
                  rtmps outputs with self-signed certificates to fail.

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying a connection to the Flash Media server if the connection is lost.

                  - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                  rtmp://host/appname). For connection to Akamai, a username and password must be
                  supplied. URI fields accept format identifiers.

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                  - **NumRetries** *(integer) --* Number of retry attempts.

                - **UdpOutputSettings** *(dict) --* Udp Output Settings

                  - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                  values increase latency through the transcoder but simultaneously assist the
                  transcoder in maintaining a constant, low-jitter UDP/RTP output while
                  accommodating clock recovery, input switching, input disruptions, picture
                  reordering, etc.

                  - **ContainerSettings** *(dict) --* Udp Container Settings

                    - **M2tsSettings** *(dict) --* M2ts Settings

                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                      streams will be removed from the program if the selected input audio stream
                      is removed from the input. This allows the output audio configuration to
                      dynamically change based on input configuration. If this is set to
                      encodeSilence, all output audio streams will output encoded silence when
                      not connected to an active input stream.

                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                      muxing and removes video descriptor.

                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                      Captions in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                      for ARIB Captions will be auto-selected from unused pids. If set to
                      useConfigured, ARIB Captions will be on the configured pid number.

                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                      for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                      audio stream(s) in the transport stream. Multiple values are accepted, and
                      can be entered in ranges and/or by comma separation. Can be entered as
                      decimal or hexadecimal values. Each PID specified must be in the range of
                      32 (or 0x20)..8182 (or 0x1ff6).

                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                      0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                      type = 0x06.

                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                      bits per second. Setting to 0 lets the muxer automatically determine the
                      appropriate bitrate.

                      - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                      model for accurate interleaving. Setting to bufferModel to none can lead to
                      lower latency, but low-memory devices may not be able to play back the
                      stream without interruptions.

                      - **CcDescriptor** *(string) --* When set to enabled, generates
                      captionServiceDescriptor in PMT.

                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                      (NIT) at the specified table repetition interval.

                        - **NetworkId** *(integer) --* The numeric value placed in the Network
                        Information Table (NIT).

                        - **NetworkName** *(string) --* The network name text placed in the
                        networkNameDescriptor inside the Network Information Table. Maximum
                        length is 256 characters.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                      (SDT) at the specified table repetition interval.

                        - **OutputSdt** *(string) --* Selects method of inserting SDT information
                        into output stream. The sdtFollow setting copies SDT information from
                        input stream to output stream. The sdtFollowIfPresent setting copies SDT
                        information from input stream to output stream if SDT information is
                        present in the input, otherwise it will fall back on the user-defined
                        values. The sdtManual setting means user will enter the SDT information.
                        The sdtNone setting means output stream will not contain SDT information.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                        - **ServiceName** *(string) --* The service name placed in the
                        serviceDescriptor in the Service Description Table. Maximum length is 256
                        characters.

                        - **ServiceProviderName** *(string) --* The service provider name placed
                        in the serviceDescriptor in the Service Description Table. Maximum length
                        is 256 characters.

                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                      Subtitle data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                      the specified table repetition interval.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                      DVB Teletext data to this output. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                      the input source to this output.

                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                      selected, audio EBP markers will be added to partitions 3 and 4. The
                      interval between these additional markers will be fixed, and will be
                      slightly shorter than the video EBP marker interval. Only available when
                      EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                      always follow the video interval.

                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                      Boundary Points do not come within the specified time interval of each
                      other by looking ahead at input video. If another EBP is going to come in
                      within the specified time interval, the current EBP is not emitted, and the
                      segment is "stretched" to the next marker. The lookahead value does not add
                      latency to the system. The Live Event must be configured elsewhere to
                      create sufficient latency to make the lookahead accurate.

                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                      If set to videoAndAudioPids, EBP markers will be placed on the video PID
                      and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                      the video PID.

                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                      PES header.

                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Platform data to this output. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **FragmentTime** *(float) --* The length in seconds of each fragment.
                      Only used with EBP markers.

                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                      input source to this output.

                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                      KLV data to this output. Multiple values are accepted, and can be entered
                      in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                      packets to insert into the transport stream. This can be used if a
                      downstream encryption system requires periodic null packets.

                      - **PatInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. Valid values are 0,
                      10..1000.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                      Clock Reference value is inserted for every Packetized Elementary Stream
                      (PES) header. This parameter is effective only when the PCR PID is the same
                      as the video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock Reference (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the
                      encoder will assign the same value as the Video PID. Can be entered as a
                      decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                      0x1ff6).

                      - **PmtInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. Valid values are 0,
                      10..1000.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                      Table (PMT) in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **ProgramNum** *(integer) --* The value of the program number field in
                      the Program Map Table.

                      - **RateMode** *(string) --* When vbr, does not insert null packets into
                      transport stream to fill specified bitrate. The bitrate setting acts as the
                      maximum bitrate when vbr is set.

                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                      SCTE-27 data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                      input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                      each segmentationTime period. raiSegstart sets the Random Access Indicator
                      bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                      timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                      at the start of segments. ebp adds Encoder Boundary Point information to
                      the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                      ebpLegacy adds Encoder Boundary Point information to the adaptation field
                      using a legacy proprietary format.

                      - **SegmentationStyle** *(string) --* The segmentation style parameter
                      controls how segmentation markers are inserted into the transport stream.
                      With avails, it is possible that segments may be truncated, which can
                      influence where future segmentation markers are inserted. When a
                      segmentation style of "resetCadence" is selected and a segment is truncated
                      due to an avail, we will reset the segmentation cadence. This means the
                      subsequent segment will have a duration of $segmentationTime seconds. When
                      a segmentation style of "maintainCadence" is selected and a segment is
                      truncated due to an avail, we will not reset the segmentation cadence. This
                      means the subsequent segment will likely be truncated as well. However, all
                      segments after that will have a duration of $segmentationTime seconds. Note
                      that EBP lookahead is a slight exception to this rule.

                      - **SegmentationTime** *(float) --* The length in seconds of each segment.
                      Required unless markers is set to None_.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata will be passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                      video stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                  - **Destination** *(dict) --* Destination address and port number for RTP or
                  UDP packets. Can be unicast or multicast RTP or UDP (eg.
                  rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                  - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                  Error Correction on UDP outputs.

                    - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                    the FEC protection matrix. The number of transport stream packets per column
                    error correction packet. Must be between 4 and 20, inclusive.

                    - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                    - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of
                    the FEC protection matrix. Must be between 1 and 20, inclusive. If only
                    Column FEC is used, then larger values increase robustness. If Row FEC is
                    used, then this is the number of transport stream packets per row error
                    correction packet, and the value must be between 4 and 20, inclusive, if
                    includeFec is columnAndRow. If includeFec is column, this value must be 1 to
                    20, inclusive.

              - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as
              the source for this output.

      - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
      information from inputs.

        - **Source** *(string) --* Identifies the source for the timecode that will be associated
        with the events outputs. -Embedded (embedded): Initialize the output timecode with
        timecode from the the source. If no embedded timecode is detected in the source, the
        system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the
        UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be
        00:00:00:00.

        - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
        resynchronized to the input timecode. Discrepancies below this threshold are permitted to
        avoid unnecessary discontinuities in the output timecode. No timecode sync when this is
        not specified.

      - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

        - *(dict) --* Video settings for this stream.

          - **CodecSettings** *(dict) --* Video codec settings.

            - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

              - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
              frames for inclusion in the output. For example, "10" means capture a frame every
              10 seconds.

            - **H264Settings** *(dict) --* H264 Settings

              - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
              quantizers to vary to improve visual quality.

              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
              output stream. If afdSignaling is "auto", the system will try to preserve the input
              AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
              AFD value will be the value configured in the fixedAfd parameter.

              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
              control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
              output must have a unique value when its bitrate is rounded down to the nearest
              multiple of 1000.

              - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
              filled (HRD buffer model).

              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              - **ColorSpaceSettings** *(dict) --* Color Space settings

                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
                space conversion to the output

                - **Rec601Settings** *(dict) --* Rec601 Settings

                - **Rec709Settings** *(dict) --* Rec709 Settings

              - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
              Main or High profile) or cavlc.

              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
              the output stream. Only valid when afdSignaling is set to 'Fixed'.

              - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
              frame to reduce flicker or 'pop' on I-frames.

              - **FramerateControl** *(string) --* This field indicates how the output video
              frame rate is specified. If "specified" is selected then the output video frame
              rate is determined by framerateNumerator and framerateDenominator, else if
              "initializeFromSource" is selected then the output video frame rate will be set
              equal to the input video frame rate of the first input.

              - **FramerateDenominator** *(integer) --* Framerate denominator.

              - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
              fraction, e.g. 24000 / 1001 = 23.976 fps.

              - **GopBReference** *(string) --* Documentation update needed

              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
              applications, it is recommended that this be set to 1 so a decoder joining
              mid-stream will receive an IDR frame as quickly as possible. Setting this value to
              0 will break output segmenting.

              - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
              or seconds per gopSizeUnits. Must be greater than zero.

              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
              seconds. If seconds the system will convert the gopSize into a frame count at run
              time.

              - **Level** *(string) --* H.264 Level.

              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
              decrease latency and memory usage, while high can produce better quality for
              certain content.

              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
              VBR: Set the maximum bitrate in order to accommodate expected spikes in the
              complexity of the video.

              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
              enabled. Enforces separation between repeated (cadence) I-frames and I-frames
              inserted by Scene Change Detection. If a scene change I-frame is within I-interval
              frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
              I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
              normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
              Min-I-interval - 1

              - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
              may use more than requested if using B-frames and/or interlaced encoding.

              - **ParControl** *(string) --* This field indicates how the output pixel aspect
              ratio is specified. If "specified" is selected then the output video pixel aspect
              ratio is determined by parNumerator and parDenominator, else if
              "initializeFromSource" is selected then the output pixsel aspect ratio will be set
              equal to the input video pixel aspect ratio of the first input.

              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              - **Profile** *(string) --* H.264 Profile.

              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
              encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
              quality level field and Max bitrate field that suit your most important viewing
              devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
              bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
              Quality level: 6. Max bitrate: 1M to 1.5M

              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
              specified quality level except when it is constrained by the maximum bitrate.
              Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
              vary, depending on the video complexity. Recommended instead of QVBR if you want to
              maintain a specific average bitrate over the duration of the channel. CBR: Quality
              varies, depending on the video complexity. Recommended only if you distribute your
              assets to devices that cannot handle variable bitrates.

              - **ScanType** *(string) --* Sets the scan type of the output to progressive or
              top-field-first interlaced.

              - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
              I-frames when scene change is detected. - Off: does not force an I-frame when scene
              change is detected.

              - **Slices** *(integer) --* Number of slices per picture. Must be less than or
              equal to the number of macroblock rows for progressive pictures, and less than or
              equal to half the number of macroblock rows for interlaced pictures. This field is
              optional; when no value is specified the encoder will choose the number of slices
              based on encode resolution.

              - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
              reduce high-frequency content in the encoded image.

              - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
              frame based on spatial variation of content complexity.

              - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
              sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
              to improve visual quality.

              - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

              - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
              frame based on temporal variation of content complexity.

              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
              into the video elementary stream. - 'disabled': Do not include timecodes -
              'picTimingSei': Pass through picture timing SEI messages from the source specified
              in Timecode Config

            - **H265Settings** *(dict) --* H265 Settings

              - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
              quantizers to vary to improve visual quality.

              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
              output stream. If afdSignaling is "auto", the system will try to preserve the input
              AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
              AFD value will be the value configured in the fixedAfd parameter.

              - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
              Alternative Transfer Function SEI message to support backwards compatibility with
              non-HDR decoders and displays.

              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
              control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
              output must have a unique value when its bitrate is rounded down to the nearest
              multiple of 1000.

              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              - **ColorSpaceSettings** *(dict) --* Color Space settings

                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
                space conversion to the output

                - **Hdr10Settings** *(dict) --* Hdr10 Settings

                  - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
                  value defining the maximum light level, in nits, of any single pixel within an
                  encoded HDR video stream or file.

                  - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                  metadata value defining the maximum average light level, in nits, for any
                  single frame within an encoded HDR video stream or file.

                - **Rec601Settings** *(dict) --* Rec601 Settings

                - **Rec709Settings** *(dict) --* Rec709 Settings

              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
              the output stream. Only valid when afdSignaling is set to 'Fixed'.

              - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
              frame to reduce flicker or 'pop' on I-frames.

              - **FramerateDenominator** *(integer) --* Framerate denominator.

              - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
              fraction, e.g. 24000 / 1001 = 23.976 fps.

              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
              applications, it is recommended that this be set to 1 so a decoder joining
              mid-stream will receive an IDR frame as quickly as possible. Setting this value to
              0 will break output segmenting.

              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
              or seconds per gopSizeUnits. Must be greater than zero.

              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
              seconds. If seconds the system will convert the gopSize into a frame count at run
              time.

              - **Level** *(string) --* H.265 Level.

              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
              decrease latency and memory usage, while high can produce better quality for
              certain content.

              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
              enabled. Enforces separation between repeated (cadence) I-frames and I-frames
              inserted by Scene Change Detection. If a scene change I-frame is within I-interval
              frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
              I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
              normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
              Min-I-interval - 1

              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              - **Profile** *(string) --* H.265 Profile.

              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
              encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
              quality level field and Max bitrate field that suit your most important viewing
              devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
              bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
              Quality level: 6. Max bitrate: 1M to 1.5M

              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
              specified quality level except when it is constrained by the maximum bitrate.
              Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
              depending on the video complexity. Recommended only if you distribute your assets
              to devices that cannot handle variable bitrates.

              - **ScanType** *(string) --* Sets the scan type of the output to progressive or
              top-field-first interlaced.

              - **SceneChangeDetect** *(string) --* Scene change detection.

              - **Slices** *(integer) --* Number of slices per picture. Must be less than or
              equal to the number of macroblock rows for progressive pictures, and less than or
              equal to half the number of macroblock rows for interlaced pictures. This field is
              optional; when no value is specified the encoder will choose the number of slices
              based on encode resolution.

              - **Tier** *(string) --* H.265 Tier.

              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
              into the video elementary stream. - 'disabled': Do not include timecodes -
              'picTimingSei': Pass through picture timing SEI messages from the source specified
              in Timecode Config

          - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
          most codecs, you can leave this field and width blank in order to use the height and
          width (resolution) from the source. Note, however, that leaving blank is not
          recommended. For the Frame Capture codec, height and width are required.

          - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name
          to uniquely identify this Description. Description names should be unique within this
          Live Event.

          - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the
          input stream. RESPOND causes input video to be clipped, depending on the AFD value,
          input display aspect ratio, and output display aspect ratio, and (except for
          FRAMECAPTURE codec) includes the values in the output. PASSTHROUGH (does not apply to
          FRAMECAPTURE codec) ignores the AFD values and includes the values in the output, so
          input video is not clipped. NONE ignores the AFD values and does not include the values
          through to the output, so input video is not clipped.

          - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
          stretch the video to the specified output resolution (height and width). This option
          will override any position value. DEFAULT may insert black boxes (pillar boxes or
          letter boxes) around the video to provide the specified output resolution.

          - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
          scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
          for most content.

          - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
          most codecs, you can leave this field and height blank in order to use the height and
          width (resolution) from the source. Note, however, that leaving blank is not
          recommended. For the Frame Capture codec, height and width are required.

    - **Id** *(string) --* The unique id of the channel.

    - **InputAttachments** *(list) --* List of input attachments for channel.

      - *(dict) --* Placeholder documentation for InputAttachment

        - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
        required if the user wants to use this input in an input switch action.

        - **InputId** *(string) --* The ID of the input

        - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

          - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
          that have multiple available.

            - *(dict) --* Audio Selector

              - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
              this name to uniquely identify this Selector. Selector names should be unique per
              input.

              - **SelectorSettings** *(dict) --* The audio selector settings.

                - **AudioLanguageSelection** *(dict) --* Audio Language Selection

                  - **LanguageCode** *(string) --* Selects a specific three-letter language code
                  from within an audio source.

                  - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
                  stream demux strictly identifies audio streams by their language descriptor. If
                  a PMT update occurs such that an audio stream matching the initially selected
                  language is no longer present then mute will be encoded until the language
                  returns. If "loose", then on a PMT update the demux will choose another audio
                  stream in the program with the same stream type if it can't find one with the
                  same language.

                - **AudioPidSelection** *(dict) --* Audio Pid Selection

                  - **Pid** *(integer) --* Selects a specific PID from within a source.

          - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
          that have multiple available.

            - *(dict) --* Output groups for this Live Event. Output groups contain information
            about where streams should be distributed.

              - **LanguageCode** *(string) --* When specified this field indicates the three
              letter language code of the caption track to extract from the source.

              - **Name** *(string) --* Name identifier for a caption selector. This name is used
              to associate this caption selector with one or more caption descriptions. Names
              must be unique within an event.

              - **SelectorSettings** *(dict) --* Caption selector settings.

                - **AribSourceSettings** *(dict) --* Arib Source Settings

                - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

                  - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
                  PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
                  is passed through, regardless of selectors.

                - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                  through via the "608 compatibility bytes" fields of the 708 wrapper as well as
                  translated into 708. 708 data present in the source content will be discarded.

                  - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
                  intermittent and/or non-aligned SCTE-20 and Embedded captions.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                  number within the video track from which to extract captions. Unused for
                  passthrough.

                  - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

                - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                  through via the "608 compatibility bytes" fields of the 708 wrapper as well as
                  translated into 708. 708 data present in the source content will be discarded.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                  number within the video track from which to extract captions. Unused for
                  passthrough.

                - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

                  - **Pid** *(integer) --* The pid field is used in conjunction with the caption
                  selector languageCode field as follows: - Specify PID and Language: Extracts
                  captions from that PID; the language is "informational". - Specify PID and omit
                  Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
                  the specified language, whichever PID that happens to be. - Omit PID and omit
                  Language: Valid only if source is DVB-Sub that is being passed through; all
                  languages will be passed through.

                - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

                  - **PageNumber** *(string) --* Specifies the teletext page number within the
                  data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
                  (2303). Unused for passthrough. Should be specified as a hexadecimal string
                  with no "0x" prefix.

          - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

          - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

          - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
          to 5 (strongest).

          - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
          the deblocking filter enabled by default. 1) auto - filtering will be applied depending
          on input type/quality 2) disabled - no filtering will be applied to the input 3) forced
          - filtering will be applied regardless of input type

          - **NetworkInputSettings** *(dict) --* Input settings.

            - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
            HLS manifest.

              - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
              BANDWIDTH that most closely matches this value will be chosen, otherwise the
              highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
              bits per second, as in an HLS manifest.

              - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
              begin this many buffer segments from the end (most recently written segment). When
              not specified, the HLS input will begin with the first segment specified in the
              m3u8.

              - **Retries** *(integer) --* The number of consecutive times that attempts to read
              a manifest or segment must fail before the input is considered unavailable.

              - **RetryInterval** *(integer) --* The number of seconds between retries when an
              attempt to read a manifest or segment fails.

            - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
            checkCryptographyOnly, cryptography in the certificate will be checked, but not the
            server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
            name) do not strictly match the corresponding certificate's wildcard pattern and
            would otherwise cause the event to error. This setting is ignored for protocols that
            do not use https.

          - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
          input to be streamed indefinitely.

          - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
          input types that have multiple available.

            - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
            works in tandem with colorSpaceUsage and a video description's
            colorSpaceSettingsChoice to determine if any conversion will be performed.

            - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
            follow. This field controls how the value in the colorSpace field will be used.
            fallback means that when the input does include color space data, that data will be
            used, but when the input has no color space data, the value in colorSpace will be
            used. Choose fallback if your input is sometimes missing color space data, but when
            it does have color space data, that data is correct. force means to always use the
            value in colorSpace. Choose force if your input usually has no color space data or
            might have unreliable color space data.

            - **SelectorSettings** *(dict) --* The video selector settings.

              - **VideoSelectorPid** *(dict) --* Video Selector Pid

                - **Pid** *(integer) --* Selects a specific PID from within a video source.

              - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

                - **ProgramId** *(integer) --* Selects a specific program from within a
                multi-program transport stream. If the program doesn't exist, the first program
                within the transport stream will be selected by default.

    - **InputSpecification** *(dict) --* Placeholder documentation for InputSpecification

      - **Codec** *(string) --* Input codec

      - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

      - **Resolution** *(string) --* Input resolution, categorized coarsely

    - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.

    - **Name** *(string) --* The name of the channel. (user-mutable)

    - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.

      - *(dict) --* Runtime details of a pipeline when a channel is running.

        - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
        currently being ingested by this pipeline.

        - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
        action that occurred most recently and that resulted in the switch to the current input
        attachment for this pipeline.

        - **PipelineId** *(string) --* Pipeline ID

    - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.

    - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running
    the Channel.

    - **State** *(string) --* Placeholder documentation for ChannelState

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string
    """


_ClientUpdateChannelClassResponseTypeDef = TypedDict(
    "_ClientUpdateChannelClassResponseTypeDef",
    {"Channel": ClientUpdateChannelClassResponseChannelTypeDef},
    total=False,
)


class ClientUpdateChannelClassResponseTypeDef(_ClientUpdateChannelClassResponseTypeDef):
    """
    Type definition for `ClientUpdateChannelClass` `Response`

    - **Channel** *(dict) --* Placeholder documentation for Channel

      - **Arn** *(string) --* The unique arn of the channel.

      - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two
      pipelines or SINGLE_PIPELINE for a channel with one pipeline.

      - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there
      is one destination per output. For other types (HLS, for example), there is one destination
      per packager.

        - *(dict) --* Placeholder documentation for OutputDestination

          - **Id** *(string) --* User-specified id. This is used in an output group or an output.

          - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output;
          one destination for both encoders.

            - *(dict) --* MediaPackage Output Destination Settings

              - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the
              destination for this output group. You do not need to specify the individual inputs
              in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines
              to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must
              be in the same region.

          - **Settings** *(list) --* Destination settings for a standard output; one destination
          for each redundant encoder.

            - *(dict) --* Placeholder documentation for OutputDestinationSettings

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
              store

              - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type
              rtmp://)

              - **Url** *(string) --* A URL specifying a destination

              - **Username** *(string) --* username for destination

      - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from

        - *(dict) --* Placeholder documentation for ChannelEgressEndpoint

          - **SourceIp** *(string) --* Public IP of where a channel's output comes from

      - **EncoderSettings** *(dict) --* Encoder Settings

        - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

          - *(dict) --* Audio Description

            - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

              - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
              to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

              - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
              corrected using the chosen algorithm. If set to measureOnly, the audio will be
              measured but not adjusted.

              - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value
              is entered, a default value will be used according to the chosen algorithm. The CALM
              Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
              recommends a target of -23 LKFS.

            - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
            for this AudioDescription.

            - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
            values for audioType are defined in ISO-IEC 13818-1.

            - **AudioTypeControl** *(string) --* Determines how audio type is determined.
            followInput: If the input contains an ISO 639 audioType, then that value is passed
            through to the output. If the input contains no ISO 639 audioType, the value in Audio
            Type is included in the output. useConfigured: The value in Audio Type is included in
            the output. Note that this field and audioType are both ignored if inputType is
            broadcasterMixedAd.

            - **CodecSettings** *(dict) --* Audio codec settings.

              - **AacSettings** *(dict) --* Aac Settings

                - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
                rate control mode and profile.

                - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
                depend on rate control mode and profile. The adReceiverMix setting receives a
                stereo description plus control track and emits a mono AAC encode of the
                description track, with control data emitted in the PES header as per ETSI TS 101
                154 Annex E.

                - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
                pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
                (audioType) will be set to 3, which signals to downstream systems that this stream
                contains "broadcaster mixed AD". Note that the input received by the encoder must
                contain pre-mixed audio; the encoder does not perform the mixing. The values in
                audioTypeControl and audioType (in AudioDescription) are ignored when set to
                broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
                audio + AD.

                - **Profile** *(string) --* AAC Profile.

                - **RateControlMode** *(string) --* Rate Control Mode.

                - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

                - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
                control mode and profile.

                - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
                or MPEG-2 Transport Stream containers.

                - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
                VBR.

              - **Ac3Settings** *(dict) --* Ac3 Settings

                - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
                the coding mode.

                - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
                emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

                - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
                channels.

                - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
                input audio is Dolby Digital, dialnorm will be passed through.

                - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
                compression signaling to the output bitstream as defined in the Dolby Digital
                specification.

                - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
                to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

                - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
                will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
                If audio was not supplied from one of these streams, then the static metadata
                settings will be used.

              - **Eac3Settings** *(dict) --* Eac3 Settings

                - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
                attenuation to the surround channels. Only used for 3/2 coding mode.

                - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
                the coding mode.

                - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
                emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

                - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
                channels.

                - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
                for all input channels.

                - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
                audio is Dolby Digital Plus, dialnorm will be passed through.

                - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

                - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
                compression, ensures that the instantaneous signal peaks do not exceed specified
                levels.

                - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
                LFE channel

                - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
                to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

                - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
                used for 3/2 coding mode.

                - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
                Only used for 3/2 coding mode.

                - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
                used for 3/2 coding mode.

                - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
                Only used for 3/2 coding mode.

                - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
                be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
                audio was not supplied from one of these streams, then the static metadata settings
                will be used.

                - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
                will be passed through if it is present on the input. This detection is dynamic
                over the life of the transcode. Inputs that alternate between DD+ and non-DD+
                content will have a consistent DD+ output as the system alternates between
                passthrough and encoding.

                - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
                phase shift to the surround channels. Only used for 3/2 coding mode.

                - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
                coding mode.

                - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
                center back surround channel is matrix encoded into the left and right surround
                channels.

                - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
                Surround is matrix encoded into the two channels.

              - **Mp2Settings** *(dict) --* Mp2 Settings

                - **Bitrate** *(float) --* Average bitrate in bits/second.

                - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
                codingMode10 (for mono) or codingMode20 (for stereo).

                - **SampleRate** *(float) --* Sample rate in Hz.

              - **PassThroughSettings** *(dict) --* Pass Through Settings

            - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
            used if languageControlMode is useConfigured, or there is no ISO 639 language code
            specified in the input.

            - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
            language code of the output to follow the ISO 639 language code of the input. The
            languageCode will be used when useConfigured is set, or when followInput is selected
            but there is no ISO 639 language code specified by the input.

            - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name
            to uniquely identify this AudioDescription. Description names should be unique within
            this Live Event.

            - **RemixSettings** *(dict) --* Settings that control how input audio channels are
            remixed into the output audio channels.

              - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
              appropriate gain adjustments.

                - *(dict) --* Audio Channel Mapping

                  - **InputChannelLevels** *(list) --* Indices and gain values for each input
                  channel that should be remixed into this output channel.

                    - *(dict) --* Input Channel Level

                      - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable
                      values are within the range from -60 (mute) and 6 dB.

                      - **InputChannel** *(integer) --* The index of the input channel used as a
                      source.

                  - **OutputChannel** *(integer) --* The index of the output channel being produced.

              - **ChannelsIn** *(integer) --* Number of input channels to be used.

              - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
              values: 1, 2, 4, 6, 8

            - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
            name displayed by the player (eg. English, or Director Commentary).

        - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

          - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
          black. Only bmp and png images are supported.

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
            accessible to the Live system (eg. a http:// URI) depending on the output type. For
            example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            - **Username** *(string) --* Documentation update needed

          - **State** *(string) --* When set to enabled, causes video, audio and captions to be
          blanked when insertion metadata is added.

        - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail
        insertion.

          - **AvailSettings** *(dict) --* Ad avail settings.

            - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

              - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
              added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
              messages and does not apply to OOB messages.

              - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
              with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
              slates

              - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
              with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
              slates

            - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

              - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
              added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
              messages and does not apply to OOB messages.

              - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
              with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
              slates

              - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
              with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
              slates

        - **BlackoutSlate** *(dict) --* Settings for blackout slate.

          - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for
          solid black. Only bmp and png images are supported.

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
            accessible to the Live system (eg. a http:// URI) depending on the output type. For
            example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            - **Username** *(string) --* Documentation update needed

          - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
          the video, audio, and captions, and raise the "Network Blackout Image" slate when an
          SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be
          lifted when the Network Start Segmentation Descriptor is encountered. The Network End and
          Network Start descriptors must contain a network ID that matches the value entered in
          "Network ID".

          - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End
          Blackout image. Image will be scaled to fill the entire output raster.

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
            accessible to the Live system (eg. a http:// URI) depending on the output type. For
            example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            - **Username** *(string) --* Documentation update needed

          - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
          "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

          - **State** *(string) --* When set to enabled, causes video, audio and captions to be
          blanked when indicated by program metadata.

        - **CaptionDescriptions** *(list) --* Settings for caption decriptions

          - *(dict) --* Output groups for this Live Event. Output groups contain information about
          where streams should be distributed.

            - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use
            as a caption source when generating output captions. This field should match a
            captionSelector name.

            - **DestinationSettings** *(dict) --* Additional settings for captions destination that
            depend on the destination type.

              - **AribDestinationSettings** *(dict) --* Arib Destination Settings

              - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

                - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
                setting alignment to centered will place the captions at the bottom center of the
                output. Similarly, setting a left alignment will align captions to the bottom left
                of the output. If x and y positions are given in conjunction with the alignment
                parameter, the font will be justified (either left or centered) relative to those
                coordinates. Selecting "smart" justification will left-justify live subtitles and
                center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
                match.

                - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
                captions. All burn-in and DVB-Sub font settings must match.

                - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
                rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is
                equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
                must match.

                - **Font** *(dict) --* External font file used for caption burn-in. File extension
                must be 'ttf' or 'tte'. Although the user can select output fonts for many
                different types of input captions, embedded, STL and teletext sources use a strict
                grid system. Using external fonts with these caption sources could cause unexpected
                display of proportional fonts. All burn-in and DVB-Sub font settings must match.

                  - **PasswordParam** *(string) --* key used to extract the password from EC2
                  Parameter store

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                  file accessible to the Live system (eg. a http:// URI) depending on the output
                  type. For example, a RTMP destination should have a uri simliar to:
                  "rtmp://fmsserver/live".

                  - **Username** *(string) --* Documentation update needed

                - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
                option is not valid for source captions that are STL, 608/embedded or teletext.
                These source settings are already pre-defined by the caption stream. All burn-in
                and DVB-Sub font settings must match.

                - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
                255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

                - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
                is 96 dpi. All burn-in and DVB-Sub font settings must match.

                - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on
                the size of the output. Giving a positive integer will specify the exact font size
                in points. All burn-in and DVB-Sub font settings must match.

                - **OutlineColor** *(string) --* Specifies font outline color. This option is not
                valid for source captions that are either 608/embedded or teletext. These source
                settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
                font settings must match.

                - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
                is not valid for source captions that are either 608/embedded or teletext. These
                source settings are already pre-defined by the caption stream. All burn-in and
                DVB-Sub font settings must match.

                - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
                captions. All burn-in and DVB-Sub font settings must match.

                - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
                opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to
                0 (transparent). All burn-in and DVB-Sub font settings must match.

                - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
                relative to the captions in pixels. A value of -2 would result in a shadow offset 2
                pixels to the left. All burn-in and DVB-Sub font settings must match.

                - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
                relative to the captions in pixels. A value of -2 would result in a shadow offset 2
                pixels above the text. All burn-in and DVB-Sub font settings must match.

                - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
                used to generate the output subtitles bitmap. Only applicable for Teletext inputs
                and DVB-Sub/Burn-in outputs.

                - **XPosition** *(integer) --* Specifies the horizontal position of the caption
                relative to the left side of the output in pixels. A value of 10 would result in
                the captions starting 10 pixels from the left of the output. If no explicit
                xPosition is provided, the horizontal caption position will be determined by the
                alignment parameter. All burn-in and DVB-Sub font settings must match.

                - **YPosition** *(integer) --* Specifies the vertical position of the caption
                relative to the top of the output in pixels. A value of 10 would result in the
                captions starting 10 pixels from the top of the output. If no explicit yPosition is
                provided, the caption will be positioned towards the bottom of the output. All
                burn-in and DVB-Sub font settings must match.

              - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

                - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
                setting alignment to centered will place the captions at the bottom center of the
                output. Similarly, setting a left alignment will align captions to the bottom left
                of the output. If x and y positions are given in conjunction with the alignment
                parameter, the font will be justified (either left or centered) relative to those
                coordinates. Selecting "smart" justification will left-justify live subtitles and
                center-justify pre-recorded subtitles. This option is not valid for source captions
                that are STL or 608/embedded. These source settings are already pre-defined by the
                caption stream. All burn-in and DVB-Sub font settings must match.

                - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
                captions. All burn-in and DVB-Sub font settings must match.

                - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
                rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
                equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
                must match.

                - **Font** *(dict) --* External font file used for caption burn-in. File extension
                must be 'ttf' or 'tte'. Although the user can select output fonts for many
                different types of input captions, embedded, STL and teletext sources use a strict
                grid system. Using external fonts with these caption sources could cause unexpected
                display of proportional fonts. All burn-in and DVB-Sub font settings must match.

                  - **PasswordParam** *(string) --* key used to extract the password from EC2
                  Parameter store

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                  file accessible to the Live system (eg. a http:// URI) depending on the output
                  type. For example, a RTMP destination should have a uri simliar to:
                  "rtmp://fmsserver/live".

                  - **Username** *(string) --* Documentation update needed

                - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
                option is not valid for source captions that are STL, 608/embedded or teletext.
                These source settings are already pre-defined by the caption stream. All burn-in
                and DVB-Sub font settings must match.

                - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
                255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

                - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
                is 96 dpi. All burn-in and DVB-Sub font settings must match.

                - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
                size of the output. Giving a positive integer will specify the exact font size in
                points. All burn-in and DVB-Sub font settings must match.

                - **OutlineColor** *(string) --* Specifies font outline color. This option is not
                valid for source captions that are either 608/embedded or teletext. These source
                settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
                font settings must match.

                - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
                is not valid for source captions that are either 608/embedded or teletext. These
                source settings are already pre-defined by the caption stream. All burn-in and
                DVB-Sub font settings must match.

                - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
                captions. All burn-in and DVB-Sub font settings must match.

                - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
                opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it
                to 0 (transparent). All burn-in and DVB-Sub font settings must match.

                - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
                relative to the captions in pixels. A value of -2 would result in a shadow offset 2
                pixels to the left. All burn-in and DVB-Sub font settings must match.

                - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
                relative to the captions in pixels. A value of -2 would result in a shadow offset 2
                pixels above the text. All burn-in and DVB-Sub font settings must match.

                - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
                used to generate the output subtitles bitmap. Only applicable for Teletext inputs
                and DVB-Sub/Burn-in outputs.

                - **XPosition** *(integer) --* Specifies the horizontal position of the caption
                relative to the left side of the output in pixels. A value of 10 would result in
                the captions starting 10 pixels from the left of the output. If no explicit
                xPosition is provided, the horizontal caption position will be determined by the
                alignment parameter. This option is not valid for source captions that are STL,
                608/embedded or teletext. These source settings are already pre-defined by the
                caption stream. All burn-in and DVB-Sub font settings must match.

                - **YPosition** *(integer) --* Specifies the vertical position of the caption
                relative to the top of the output in pixels. A value of 10 would result in the
                captions starting 10 pixels from the top of the output. If no explicit yPosition is
                provided, the caption will be positioned towards the bottom of the output. This
                option is not valid for source captions that are STL, 608/embedded or teletext.
                These source settings are already pre-defined by the caption stream. All burn-in
                and DVB-Sub font settings must match.

              - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

              - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
              Destination Settings

              - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
              Settings

              - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
              Destination Settings

              - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

              - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

              - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

              - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

                - **StyleControl** *(string) --* When set to passthrough, passes through style and
                position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
                CFF-TT output or TTML output.

              - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

            - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
            http://www.loc.gov/standards/iso639-2/

            - **LanguageDescription** *(string) --* Human readable information to indicate captions
            available for players (eg. English, or Spanish).

            - **Name** *(string) --* Name of the caption description. Used to associate a caption
            description with an output. Names must be unique within an event.

        - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
        whole.

          - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
          Event.

          - **InputEndAction** *(string) --* Indicates the action to take when the current input
          completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
          restart at the beginning of the first input. When "none" is configured the encoder will
          transcode either black, a solid color, or a user specified slate images per the "Input
          Loss Behavior" configuration until the next input switch occurs (which is controlled
          through the Channel Schedule API).

          - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

            - **BlackFrameMsec** *(integer) --* Documentation update needed

            - **InputLossImageColor** *(string) --* When input loss image type is "color" this
            field specifies the color to use. Value: 6 hex characters representing the values of
            RGB.

            - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these
            fields specify the parameters for accessing the slate.

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
              store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
              accessible to the Live system (eg. a http:// URI) depending on the output type. For
              example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or
            a slate into the output after input loss exceeds blackFrameMsec.

            - **RepeatFrameMsec** *(integer) --* Documentation update needed

          - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
          PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to
          the other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each
          pipeline to the Unix epoch.

          - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by
          the Live encoder should be paced by its system clock (which optionally may be locked to
          another source via NTP) or should be locked to the clock of the source that is providing
          the input stream.

          - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
          very low video framerates. This is commonly set to enabled for music channels with less
          than one video frame per second.

        - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

          - *(dict) --* Output groups for this Live Event. Output groups contain information about
          where streams should be distributed.

            - **Name** *(string) --* Custom output group name optionally defined by the user. Only
            letters, numbers, and the underscore character allowed; only 32 characters allowed.

            - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

              - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

                - **Destination** *(dict) --* A directory and base filename where archive files
                should be written.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
                before closing and starting a new one.

              - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

                - **Destination** *(dict) --* The destination for the frame capture files. Either
                the URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
                s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
                container, plus a file name prefix (for example,
                mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
                the prefix from the destination field (for example, "curling_") + name modifier +
                the counter (5 digits, starting from 00001) + extension (which is always .jpg). For
                example, curlingLow.00001.jpg

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **HlsGroupSettings** *(dict) --* Hls Group Settings

                - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35
                signals through to this group of Apple HLS outputs.

                  - *(string) --* Hls Ad Markers

                - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
                each output in the media .m3u8 file. Can be used if base manifest is delivered from
                a different URL than the main .m3u8 file.

                - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
                each output in the media .m3u8 file. Can be used if base manifest is delivered from
                a different URL than the main .m3u8 file.

                - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
                caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

                  - *(dict) --* Maps a caption channel to an ISO 693-2 language code
                  (http://www.loc.gov/standards/iso639-2), with an optional description.

                    - **CaptionChannel** *(integer) --* The closed caption channel being described
                    by this CaptionLanguageMapping. Each channel mapping must have a unique channel
                    number (maximum of 4)

                    - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                    http://www.loc.gov/standards/iso639-2)

                    - **LanguageDescription** *(string) --* Textual description of language

                - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
                captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least
                one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for
                each Language Code you specify. Make sure to specify the languages in the order in
                which they appear in the original source (if the source is embedded format) or the
                order of the caption selectors (if the source is other than embedded). Otherwise,
                languages in the manifest will not match up properly with the output captions.
                none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any
                CLOSED-CAPTIONS line from the manifest.

                - **ClientCache** *(string) --* When set to "disabled", sets the
                #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
                segments for later replay.

                - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the
                default RFC-4281) during m3u8 playlist generation.

                - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
                16-byte hex value represented by a 32-character text string. If ivSource is set to
                "explicit" then this parameter is required and is used as the IV for encryption.

                - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
                manifest files, and encryption keys (if enabled).

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **DirectoryStructure** *(string) --* Place segments in subdirectories.

                - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
                scheme. Exclude this parameter if no encryption is desired.

                - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

                  - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                    retrying connection to the CDN if the connection is lost.

                    - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                    streaming outputs.

                    - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                    transfer encoding to Akamai. User should contact Akamai to enable this feature.

                    - **NumRetries** *(integer) --* Number of retry attempts that will be made
                    before the Live Event is put into an error state.

                    - **RestartDelay** *(integer) --* If a streaming output fails, number of
                    seconds to wait until a restart is initiated. A value of 0 means never restart.

                    - **Salt** *(string) --* Salt for authenticated Akamai.

                    - **Token** *(string) --* Token parameter for authenticated akamai. If not
                    specified, _gda_ is used.

                  - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                    retrying connection to the CDN if the connection is lost.

                    - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                    streaming outputs.

                    - **NumRetries** *(integer) --* Number of retry attempts that will be made
                    before the Live Event is put into an error state.

                    - **RestartDelay** *(integer) --* If a streaming output fails, number of
                    seconds to wait until a restart is initiated. A value of 0 means never restart.

                  - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                    retrying connection to the CDN if the connection is lost.

                    - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                    streaming outputs.

                    - **MediaStoreStorageClass** *(string) --* When set to temporal, output files
                    are stored in non-persistent memory for faster reading and writing.

                    - **NumRetries** *(integer) --* Number of retry attempts that will be made
                    before the Live Event is put into an error state.

                    - **RestartDelay** *(integer) --* If a streaming output fails, number of
                    seconds to wait until a restart is initiated. A value of 0 means never restart.

                  - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                    retrying connection to the CDN if the connection is lost.

                    - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                    streaming outputs.

                    - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                    transfer encoding to WebDAV.

                    - **NumRetries** *(integer) --* Number of retry attempts that will be made
                    before the Live Event is put into an error state.

                    - **RestartDelay** *(integer) --* If a streaming output fails, number of
                    seconds to wait until a restart is initiated. A value of 0 means never restart.

                - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
                manifest, but do create the master and media manifests (according to the Output
                Selection field). STANDARD: Create an I-frame-only manifest for each output that
                contains video, as well as the other manifests (according to the Output Selection
                field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
                I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
                position. For example, #EXT-X-BYTERANGE:160364@1461888"

                - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies
                the maximum number of segments in the media manifest file. After this maximum,
                older segments are removed from the media manifest. This number must be less than
                or equal to the Keep Segments field.

                - **InputLossAction** *(string) --* Parameter that control output group behavior on
                input loss.

                - **IvInManifest** *(string) --* For use with encryptionType. The IV
                (Initialization Vector) is a 128-bit number used in conjunction with the key for
                encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the
                IV is not in the manifest.

                - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
                Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
                If this setting is "followsSegmentNumber", it will cause the IV to change every
                segment (to match the segment number). If this is set to "explicit", you must enter
                a constantIv value.

                - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
                number of media segments (.ts files) to retain in the destination directory.

                - **KeyFormat** *(string) --* The value specifies how the key is represented in the
                resource identified by the URI. If parameter is absent, an implicit value of
                "identity" is used. A reverse DNS string can also be given.

                - **KeyFormatVersions** *(string) --* Either a single positive integer version
                value or a slash delimited list of version values (1/2/3).

                - **KeyProviderSettings** *(dict) --* The key provider settings.

                  - **StaticKeySettings** *(dict) --* Static Key Settings

                    - **KeyProviderServer** *(dict) --* The URL of the license server used for
                    protecting content.

                      - **PasswordParam** *(string) --* key used to extract the password from EC2
                      Parameter store

                      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                      to a file accessible to the Live system (eg. a http:// URI) depending on the
                      output type. For example, a RTMP destination should have a uri simliar to:
                      "rtmp://fmsserver/live".

                      - **Username** *(string) --* Documentation update needed

                    - **StaticKeyValue** *(string) --* Static key value as a 32 character
                    hexadecimal string.

                - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

                - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
                should use floating point or integer values for segment duration.

                - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
                looking ahead and back within the specified range for a nearby avail and extending
                the segment size if needed.

                - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
                the destination and manifest. If "live", only the number segments specified in
                keepSegments and indexNSegments are kept; newer segments replace older segments,
                which may prevent players from rewinding all the way to the beginning of the event.
                VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
                converting it to a "VOD" type manifest on completion of the stream.

                - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests
                (master manifest, if applicable, and media manifests) for this output group.
                SEGMENTSONLY: Does not generate any manifests for this output group.

                - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME
                tag in .m3u8 manifest files. The value is calculated as follows: either the program
                date and time are initialized using the input timecode source, or the time is
                initialized using the input timecode source and the date is initialized using the
                timestampOffset.

                - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
                EXT-X-PROGRAM-DATE-TIME entry, in seconds.

                - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
                each pipeline includes information about both pipelines: first its own media files,
                then the media files of the other pipeline. This feature allows playout device that
                support stale manifest detection to switch from one manifest to the other, when the
                current manifest seems to be stale. There are still two destinations and two master
                manifests, but both master manifests reference the media files from both pipelines.
                DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
                about its own pipeline only. For an HLS output group with MediaPackage as the
                destination, the DISABLED behavior is always followed. MediaPackage regenerates the
                manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

                - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
                create (in seconds). Note that segments will end on the next keyframe after this
                number of seconds, so actual segment length may be longer.

                - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
                configured segment size is always used.

                - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
                subdirectory before starting a new one. directoryStructure must be
                subdirectoryPerStream for this setting to have an effect.

                - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
                video in EXT-X-STREAM-INF tag of variant manifest.

                - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

                - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

                - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
                offset to fine tune the timestamps.

                - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
                multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
                program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE
                tags to index segments for playback. A typical use for this value is when sending
                the output to AWS Elemental MediaConvert, which can accept only a single media
                file. Playback while the channel is running is not guaranteed due to HTTP server
                caching.

              - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

                - **Destination** *(dict) --* MediaPackage channel destination.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

                - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point
                Identity" element used in each message placed in the sparse track. Only enabled if
                sparseTrackType is not "none".

                - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an
                audio-only MS Smooth output, the fragment absolute time will be set to the current
                timecode. This option does not write timecodes to the audio elementary stream.

                - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
                certificate chain to a trusted Certificate Authority (CA). This will cause https
                outputs to self-signed certificates to fail.

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the IIS server if the connection is lost. Content will be
                cached during this time and the cache will be be delivered to the IIS server once
                the connection is re-established.

                - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
                Elemental Live acts as a "Push" encoder to IIS.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
                only be specified if eventIdMode is set to useConfigured.

                - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
                IIS server. If no event ID is sent and the same Live Event is used without changing
                the publishing point, clients might see cached video from the previous run.
                Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" -
                generate and send an event ID based on the current timestamp - "noEventId" - do not
                send an event ID to the IIS server.

                - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
                server when stopping the event

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
                outputs.

                - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in
                seconds). Fragment length must be compatible with GOP size and framerate.

                - **InputLossAction** *(string) --* Parameter that control output group behavior on
                input loss.

                - **NumRetries** *(integer) --* Number of retry attempts.

                - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
                to output failure, due to exhausting the numRetries on one segment, or exceeding
                filecacheDuration.

                - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
                configured segment size is always used.

                - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from
                the second pipeline.

                - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
                to generate a sparse track in this group of MS-Smooth outputs.

                - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest
                so publishing point doesn't start until all streams start.

                - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
                timestampOffsetMode is set to useConfiguredOffset.

                - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
                useEventStartDate: Use the date the event was started as the offset -
                useConfiguredOffset: Use an explicitly configured date as the offset

              - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

                - **AuthenticationScheme** *(string) --* Authentication scheme to use when
                connecting with CDN

                - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills
                up. If remote origin server stalls the RTMP connection and does not accept content
                fast enough the 'Media Cache' will fill up. When the cache reaches the duration
                specified by cacheLength the cache will stop accepting new content. If set to
                disconnectImmediately, the RTMP output will force a disconnect. Clear the media
                cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
                output will wait up to 5 minutes to allow the origin server to begin accepting data
                again.

                - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
                buffer size.

                - **CaptionData** *(string) --* Controls the types of data that passes to
                onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
                passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but
                608 data from both fields will be passed. If set to 'field1608' then only the data
                carried in 608 from field 1 video will be passed.

                - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if
                input becomes unavailable. - emitOutput: Emit a slate until input returns. -
                pauseOutput: Stop transmitting data until input returns. This does not close the
                underlying RTMP connection.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
                wait until a restart is initiated. A value of 0 means never restart.

              - **UdpGroupSettings** *(dict) --* Udp Group Settings

                - **InputLossAction** *(string) --* Specifies behavior of last resort when input
                video is lost, and no more backup inputs are available. When dropTs is selected the
                entire transport stream will stop being emitted. When dropProgram is selected the
                program can be dropped from the transport stream (and replaced with null packets to
                meet the TS bitrate requirement). Or, when emitProgram is chosen the transport
                stream will continue to be produced normally with repeat frames, black frames, or
                slate frames substituted for the absent input video.

                - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

                - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

            - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

              - *(dict) --* Output settings. There can be multiple outputs within a group.

                - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
                audio sources for this output.

                  - *(string) --* Placeholder documentation for __string

                - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
                as caption sources for this output.

                  - *(string) --* Placeholder documentation for __string

                - **OutputName** *(string) --* The name used to identify an output.

                - **OutputSettings** *(dict) --* Output type-specific settings.

                  - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                    - **ContainerSettings** *(dict) --* Settings specific to the container type of
                    the file.

                      - **M2tsSettings** *(dict) --* M2ts Settings

                        - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                        streams will be removed from the program if the selected input audio stream
                        is removed from the input. This allows the output audio configuration to
                        dynamically change based on input configuration. If this is set to
                        encodeSilence, all output audio streams will output encoded silence when
                        not connected to an active input stream.

                        - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                        muxing and removes video descriptor.

                        - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                        Captions in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                        for ARIB Captions will be auto-selected from unused pids. If set to
                        useConfigured, ARIB Captions will be on the configured pid number.

                        - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                        for Dolby Digital audio. When set to atsc, the ATSC model is used.

                        - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                        for each PES packet.

                        - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                        audio stream(s) in the transport stream. Multiple values are accepted, and
                        can be entered in ranges and/or by comma separation. Can be entered as
                        decimal or hexadecimal values. Each PID specified must be in the range of
                        32 (or 0x20)..8182 (or 0x1ff6).

                        - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                        0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                        type = 0x06.

                        - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                        bits per second. Setting to 0 lets the muxer automatically determine the
                        appropriate bitrate.

                        - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                        model for accurate interleaving. Setting to bufferModel to none can lead to
                        lower latency, but low-memory devices may not be able to play back the
                        stream without interruptions.

                        - **CcDescriptor** *(string) --* When set to enabled, generates
                        captionServiceDescriptor in PMT.

                        - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                        (NIT) at the specified table repetition interval.

                          - **NetworkId** *(integer) --* The numeric value placed in the Network
                          Information Table (NIT).

                          - **NetworkName** *(string) --* The network name text placed in the
                          networkNameDescriptor inside the Network Information Table. Maximum
                          length is 256 characters.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                        - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                        (SDT) at the specified table repetition interval.

                          - **OutputSdt** *(string) --* Selects method of inserting SDT information
                          into output stream. The sdtFollow setting copies SDT information from
                          input stream to output stream. The sdtFollowIfPresent setting copies SDT
                          information from input stream to output stream if SDT information is
                          present in the input, otherwise it will fall back on the user-defined
                          values. The sdtManual setting means user will enter the SDT information.
                          The sdtNone setting means output stream will not contain SDT information.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                          - **ServiceName** *(string) --* The service name placed in the
                          serviceDescriptor in the Service Description Table. Maximum length is 256
                          characters.

                          - **ServiceProviderName** *(string) --* The service provider name placed
                          in the serviceDescriptor in the Service Description Table. Maximum length
                          is 256 characters.

                        - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                        Subtitle data to this output. Multiple values are accepted, and can be
                        entered in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                        the specified table repetition interval.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                        - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                        DVB Teletext data to this output. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                        the input source to this output.

                        - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                        selected, audio EBP markers will be added to partitions 3 and 4. The
                        interval between these additional markers will be fixed, and will be
                        slightly shorter than the video EBP marker interval. Only available when
                        EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                        always follow the video interval.

                        - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                        Boundary Points do not come within the specified time interval of each
                        other by looking ahead at input video. If another EBP is going to come in
                        within the specified time interval, the current EBP is not emitted, and the
                        segment is "stretched" to the next marker. The lookahead value does not add
                        latency to the system. The Live Event must be configured elsewhere to
                        create sufficient latency to make the lookahead accurate.

                        - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                        If set to videoAndAudioPids, EBP markers will be placed on the video PID
                        and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                        the video PID.

                        - **EcmPid** *(string) --* This field is unused and deprecated.

                        - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                        PES header.

                        - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                        ETV Platform data to this output. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                        ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                        value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **FragmentTime** *(float) --* The length in seconds of each fragment.
                        Only used with EBP markers.

                        - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                        input source to this output.

                        - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                        KLV data to this output. Multiple values are accepted, and can be entered
                        in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                        packets to insert into the transport stream. This can be used if a
                        downstream encryption system requires periodic null packets.

                        - **PatInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. Valid values are 0,
                        10..1000.

                        - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                        Clock Reference value is inserted for every Packetized Elementary Stream
                        (PES) header. This parameter is effective only when the PCR PID is the same
                        as the video or audio elementary stream.

                        - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                        Clock Reference (PCRs) inserted into the transport stream.

                        - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                        Reference (PCR) in the transport stream. When no value is given, the
                        encoder will assign the same value as the Video PID. Can be entered as a
                        decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                        0x1ff6).

                        - **PmtInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. Valid values are 0,
                        10..1000.

                        - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                        Table (PMT) in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **ProgramNum** *(integer) --* The value of the program number field in
                        the Program Map Table.

                        - **RateMode** *(string) --* When vbr, does not insert null packets into
                        transport stream to fill specified bitrate. The bitrate setting acts as the
                        maximum bitrate when vbr is set.

                        - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                        SCTE-27 data to this output. Multiple values are accepted, and can be
                        entered in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                        input source to this output.

                        - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                        in the transport stream. Can be entered as a decimal or hexadecimal value.
                        Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                        each segmentationTime period. raiSegstart sets the Random Access Indicator
                        bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                        timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                        at the start of segments. ebp adds Encoder Boundary Point information to
                        the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                        ebpLegacy adds Encoder Boundary Point information to the adaptation field
                        using a legacy proprietary format.

                        - **SegmentationStyle** *(string) --* The segmentation style parameter
                        controls how segmentation markers are inserted into the transport stream.
                        With avails, it is possible that segments may be truncated, which can
                        influence where future segmentation markers are inserted. When a
                        segmentation style of "resetCadence" is selected and a segment is truncated
                        due to an avail, we will reset the segmentation cadence. This means the
                        subsequent segment will have a duration of $segmentationTime seconds. When
                        a segmentation style of "maintainCadence" is selected and a segment is
                        truncated due to an avail, we will not reset the segmentation cadence. This
                        means the subsequent segment will likely be truncated as well. However, all
                        segments after that will have a duration of $segmentationTime seconds. Note
                        that EBP lookahead is a slight exception to this rule.

                        - **SegmentationTime** *(float) --* The length in seconds of each segment.
                        Required unless markers is set to None_.

                        - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                        metadata will be passed through from input to output.

                        - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                        metadata stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **TransportStreamId** *(integer) --* The value of the transport stream ID
                        field in the Program Map Table.

                        - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                        video stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Extension** *(string) --* Output file extension. If excluded, this will be
                    auto-selected from the container type.

                    - **NameModifier** *(string) --* String concatenated to the end of the
                    destination filename. Required for multiple outputs of the same type.

                  - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                    - **NameModifier** *(string) --* Required if the output group contains more
                    than one output. This modifier forms part of the output file name.

                  - **HlsOutputSettings** *(dict) --* Hls Output Settings

                    - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                    settings are different for audio-only outputs.

                      - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                        - **AudioGroupId** *(string) --* Specifies the group to which the audio
                        Rendition belongs.

                        - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                        to use as the cover art for an audio-only output. We recommend a low
                        bit-size file because the image increases the output audio bandwidth. The
                        image is attached to the audio as an ID3 tag, frame type APIC, picture type
                        0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.

                          - **PasswordParam** *(string) --* key used to extract the password from
                          EC2 Parameter store

                          - **Uri** *(string) --* Uniform Resource Identifier - This should be a
                          path to a file accessible to the Live system (eg. a http:// URI)
                          depending on the output type. For example, a RTMP destination should have
                          a uri simliar to: "rtmp://fmsserver/live".

                          - **Username** *(string) --* Documentation update needed

                        - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                        supported: Audio-Only Variant Stream The client can play back this
                        audio-only stream instead of video in low-bandwidth scenarios. Represented
                        as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select,
                        Default Alternate rendition that the client should try to play back by
                        default. Represented as an EXT-X-MEDIA in the HLS manifest with
                        DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default
                        Alternate rendition that the client may try to play back by default.
                        Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO,
                        AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that
                        the client will not try to play back by default. Represented as an
                        EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO

                      - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                        - **AudioRenditionSets** *(string) --* List all the audio groups that are
                        used with the video output stream. Input all the audio GROUP-IDs that are
                        associated to the video, separate by ','.

                        - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                          - **AudioFramesPerPes** *(integer) --* The number of audio frames to
                          insert for each PES packet.

                          - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                          audio stream(s) in the transport stream. Multiple values are accepted,
                          and can be entered in ranges and/or by comma separation. Can be entered
                          as decimal or hexadecimal values.

                          - **EcmPid** *(string) --* This parameter is unused and deprecated.

                          - **PatInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream. A value of
                          \\"0\\" writes out the PMT once per segment file.

                          - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                          Clock Reference value is inserted for every Packetized Elementary Stream
                          (PES) header. This parameter is effective only when the PCR PID is the
                          same as the video or audio elementary stream.

                          - **PcrPeriod** *(integer) --* Maximum time in milliseconds between
                          Program Clock References (PCRs) inserted into the transport stream.

                          - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                          Reference (PCR) in the transport stream. When no value is given, the
                          encoder will assign the same value as the Video PID. Can be entered as a
                          decimal or hexadecimal value.

                          - **PmtInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream. A value of
                          \\"0\\" writes out the PMT once per segment file.

                          - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                          Table (PMT) in the transport stream. Can be entered as a decimal or
                          hexadecimal value.

                          - **ProgramNum** *(integer) --* The value of the program number field in
                          the Program Map Table.

                          - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                          SCTE-35 signals from the input source to this output.

                          - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35
                          stream in the transport stream. Can be entered as a decimal or
                          hexadecimal value.

                          - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                          metadata is passed through from input to output.

                          - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                          metadata stream in the transport stream. Can be entered as a decimal or
                          hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                          - **TransportStreamId** *(integer) --* The value of the transport stream
                          ID field in the Program Map Table.

                          - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                          video stream in the transport stream. Can be entered as a decimal or
                          hexadecimal value.

                    - **NameModifier** *(string) --* String concatenated to the end of the
                    destination filename. Accepts \\"Format
                    Identifiers\\":#formatIdentifierParameters.

                    - **SegmentModifier** *(string) --* String concatenated to end of segment
                    filenames.

                  - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

                  - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                    - **H265PackagingType** *(string) --* Only applicable when this output is
                    referencing an H.265 video description. Specifies whether MP4 segments should
                    be packaged as HEV1 or HVC1.

                    - **NameModifier** *(string) --* String concatenated to the end of the
                    destination filename. Required for multiple outputs of the same type.

                  - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                    - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the
                    tls certificate chain to a trusted Certificate Authority (CA). This will cause
                    rtmps outputs with self-signed certificates to fail.

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                    retrying a connection to the Flash Media server if the connection is lost.

                    - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                    rtmp://host/appname). For connection to Akamai, a username and password must be
                    supplied. URI fields accept format identifiers.

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string

                    - **NumRetries** *(integer) --* Number of retry attempts.

                  - **UdpOutputSettings** *(dict) --* Udp Output Settings

                    - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                    values increase latency through the transcoder but simultaneously assist the
                    transcoder in maintaining a constant, low-jitter UDP/RTP output while
                    accommodating clock recovery, input switching, input disruptions, picture
                    reordering, etc.

                    - **ContainerSettings** *(dict) --* Udp Container Settings

                      - **M2tsSettings** *(dict) --* M2ts Settings

                        - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                        streams will be removed from the program if the selected input audio stream
                        is removed from the input. This allows the output audio configuration to
                        dynamically change based on input configuration. If this is set to
                        encodeSilence, all output audio streams will output encoded silence when
                        not connected to an active input stream.

                        - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                        muxing and removes video descriptor.

                        - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                        Captions in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                        for ARIB Captions will be auto-selected from unused pids. If set to
                        useConfigured, ARIB Captions will be on the configured pid number.

                        - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                        for Dolby Digital audio. When set to atsc, the ATSC model is used.

                        - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                        for each PES packet.

                        - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                        audio stream(s) in the transport stream. Multiple values are accepted, and
                        can be entered in ranges and/or by comma separation. Can be entered as
                        decimal or hexadecimal values. Each PID specified must be in the range of
                        32 (or 0x20)..8182 (or 0x1ff6).

                        - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                        0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                        type = 0x06.

                        - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                        bits per second. Setting to 0 lets the muxer automatically determine the
                        appropriate bitrate.

                        - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                        model for accurate interleaving. Setting to bufferModel to none can lead to
                        lower latency, but low-memory devices may not be able to play back the
                        stream without interruptions.

                        - **CcDescriptor** *(string) --* When set to enabled, generates
                        captionServiceDescriptor in PMT.

                        - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                        (NIT) at the specified table repetition interval.

                          - **NetworkId** *(integer) --* The numeric value placed in the Network
                          Information Table (NIT).

                          - **NetworkName** *(string) --* The network name text placed in the
                          networkNameDescriptor inside the Network Information Table. Maximum
                          length is 256 characters.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                        - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                        (SDT) at the specified table repetition interval.

                          - **OutputSdt** *(string) --* Selects method of inserting SDT information
                          into output stream. The sdtFollow setting copies SDT information from
                          input stream to output stream. The sdtFollowIfPresent setting copies SDT
                          information from input stream to output stream if SDT information is
                          present in the input, otherwise it will fall back on the user-defined
                          values. The sdtManual setting means user will enter the SDT information.
                          The sdtNone setting means output stream will not contain SDT information.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                          - **ServiceName** *(string) --* The service name placed in the
                          serviceDescriptor in the Service Description Table. Maximum length is 256
                          characters.

                          - **ServiceProviderName** *(string) --* The service provider name placed
                          in the serviceDescriptor in the Service Description Table. Maximum length
                          is 256 characters.

                        - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                        Subtitle data to this output. Multiple values are accepted, and can be
                        entered in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                        the specified table repetition interval.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                        - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                        DVB Teletext data to this output. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                        the input source to this output.

                        - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                        selected, audio EBP markers will be added to partitions 3 and 4. The
                        interval between these additional markers will be fixed, and will be
                        slightly shorter than the video EBP marker interval. Only available when
                        EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                        always follow the video interval.

                        - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                        Boundary Points do not come within the specified time interval of each
                        other by looking ahead at input video. If another EBP is going to come in
                        within the specified time interval, the current EBP is not emitted, and the
                        segment is "stretched" to the next marker. The lookahead value does not add
                        latency to the system. The Live Event must be configured elsewhere to
                        create sufficient latency to make the lookahead accurate.

                        - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                        If set to videoAndAudioPids, EBP markers will be placed on the video PID
                        and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                        the video PID.

                        - **EcmPid** *(string) --* This field is unused and deprecated.

                        - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                        PES header.

                        - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                        ETV Platform data to this output. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                        ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                        value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **FragmentTime** *(float) --* The length in seconds of each fragment.
                        Only used with EBP markers.

                        - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                        input source to this output.

                        - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                        KLV data to this output. Multiple values are accepted, and can be entered
                        in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                        packets to insert into the transport stream. This can be used if a
                        downstream encryption system requires periodic null packets.

                        - **PatInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. Valid values are 0,
                        10..1000.

                        - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                        Clock Reference value is inserted for every Packetized Elementary Stream
                        (PES) header. This parameter is effective only when the PCR PID is the same
                        as the video or audio elementary stream.

                        - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                        Clock Reference (PCRs) inserted into the transport stream.

                        - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                        Reference (PCR) in the transport stream. When no value is given, the
                        encoder will assign the same value as the Video PID. Can be entered as a
                        decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                        0x1ff6).

                        - **PmtInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. Valid values are 0,
                        10..1000.

                        - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                        Table (PMT) in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **ProgramNum** *(integer) --* The value of the program number field in
                        the Program Map Table.

                        - **RateMode** *(string) --* When vbr, does not insert null packets into
                        transport stream to fill specified bitrate. The bitrate setting acts as the
                        maximum bitrate when vbr is set.

                        - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                        SCTE-27 data to this output. Multiple values are accepted, and can be
                        entered in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                        input source to this output.

                        - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                        in the transport stream. Can be entered as a decimal or hexadecimal value.
                        Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                        each segmentationTime period. raiSegstart sets the Random Access Indicator
                        bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                        timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                        at the start of segments. ebp adds Encoder Boundary Point information to
                        the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                        ebpLegacy adds Encoder Boundary Point information to the adaptation field
                        using a legacy proprietary format.

                        - **SegmentationStyle** *(string) --* The segmentation style parameter
                        controls how segmentation markers are inserted into the transport stream.
                        With avails, it is possible that segments may be truncated, which can
                        influence where future segmentation markers are inserted. When a
                        segmentation style of "resetCadence" is selected and a segment is truncated
                        due to an avail, we will reset the segmentation cadence. This means the
                        subsequent segment will have a duration of $segmentationTime seconds. When
                        a segmentation style of "maintainCadence" is selected and a segment is
                        truncated due to an avail, we will not reset the segmentation cadence. This
                        means the subsequent segment will likely be truncated as well. However, all
                        segments after that will have a duration of $segmentationTime seconds. Note
                        that EBP lookahead is a slight exception to this rule.

                        - **SegmentationTime** *(float) --* The length in seconds of each segment.
                        Required unless markers is set to None_.

                        - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                        metadata will be passed through from input to output.

                        - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                        metadata stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **TransportStreamId** *(integer) --* The value of the transport stream ID
                        field in the Program Map Table.

                        - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                        video stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Destination** *(dict) --* Destination address and port number for RTP or
                    UDP packets. Can be unicast or multicast RTP or UDP (eg.
                    rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string

                    - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                    Error Correction on UDP outputs.

                      - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                      the FEC protection matrix. The number of transport stream packets per column
                      error correction packet. Must be between 4 and 20, inclusive.

                      - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                      - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of
                      the FEC protection matrix. Must be between 1 and 20, inclusive. If only
                      Column FEC is used, then larger values increase robustness. If Row FEC is
                      used, then this is the number of transport stream packets per row error
                      correction packet, and the value must be between 4 and 20, inclusive, if
                      includeFec is columnAndRow. If includeFec is column, this value must be 1 to
                      20, inclusive.

                - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as
                the source for this output.

        - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
        information from inputs.

          - **Source** *(string) --* Identifies the source for the timecode that will be associated
          with the events outputs. -Embedded (embedded): Initialize the output timecode with
          timecode from the the source. If no embedded timecode is detected in the source, the
          system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the
          UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be
          00:00:00:00.

          - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
          resynchronized to the input timecode. Discrepancies below this threshold are permitted to
          avoid unnecessary discontinuities in the output timecode. No timecode sync when this is
          not specified.

        - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

          - *(dict) --* Video settings for this stream.

            - **CodecSettings** *(dict) --* Video codec settings.

              - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

                - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
                frames for inclusion in the output. For example, "10" means capture a frame every
                10 seconds.

              - **H264Settings** *(dict) --* H264 Settings

                - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
                quantizers to vary to improve visual quality.

                - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
                output stream. If afdSignaling is "auto", the system will try to preserve the input
                AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
                AFD value will be the value configured in the fixedAfd parameter.

                - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
                control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
                output must have a unique value when its bitrate is rounded down to the nearest
                multiple of 1000.

                - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
                filled (HRD buffer model).

                - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

                - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

                - **ColorSpaceSettings** *(dict) --* Color Space settings

                  - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
                  space conversion to the output

                  - **Rec601Settings** *(dict) --* Rec601 Settings

                  - **Rec709Settings** *(dict) --* Rec709 Settings

                - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
                Main or High profile) or cavlc.

                - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
                the output stream. Only valid when afdSignaling is set to 'Fixed'.

                - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
                frame to reduce flicker or 'pop' on I-frames.

                - **FramerateControl** *(string) --* This field indicates how the output video
                frame rate is specified. If "specified" is selected then the output video frame
                rate is determined by framerateNumerator and framerateDenominator, else if
                "initializeFromSource" is selected then the output video frame rate will be set
                equal to the input video frame rate of the first input.

                - **FramerateDenominator** *(integer) --* Framerate denominator.

                - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
                fraction, e.g. 24000 / 1001 = 23.976 fps.

                - **GopBReference** *(string) --* Documentation update needed

                - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
                applications, it is recommended that this be set to 1 so a decoder joining
                mid-stream will receive an IDR frame as quickly as possible. Setting this value to
                0 will break output segmenting.

                - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

                - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
                or seconds per gopSizeUnits. Must be greater than zero.

                - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
                seconds. If seconds the system will convert the gopSize into a frame count at run
                time.

                - **Level** *(string) --* H.264 Level.

                - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
                decrease latency and memory usage, while high can produce better quality for
                certain content.

                - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
                VBR: Set the maximum bitrate in order to accommodate expected spikes in the
                complexity of the video.

                - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
                enabled. Enforces separation between repeated (cadence) I-frames and I-frames
                inserted by Scene Change Detection. If a scene change I-frame is within I-interval
                frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
                I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
                normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
                Min-I-interval - 1

                - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
                may use more than requested if using B-frames and/or interlaced encoding.

                - **ParControl** *(string) --* This field indicates how the output pixel aspect
                ratio is specified. If "specified" is selected then the output video pixel aspect
                ratio is determined by parNumerator and parDenominator, else if
                "initializeFromSource" is selected then the output pixsel aspect ratio will be set
                equal to the input video pixel aspect ratio of the first input.

                - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

                - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

                - **Profile** *(string) --* H.264 Profile.

                - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
                encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
                quality level field and Max bitrate field that suit your most important viewing
                devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
                bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
                Quality level: 6. Max bitrate: 1M to 1.5M

                - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
                specified quality level except when it is constrained by the maximum bitrate.
                Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
                vary, depending on the video complexity. Recommended instead of QVBR if you want to
                maintain a specific average bitrate over the duration of the channel. CBR: Quality
                varies, depending on the video complexity. Recommended only if you distribute your
                assets to devices that cannot handle variable bitrates.

                - **ScanType** *(string) --* Sets the scan type of the output to progressive or
                top-field-first interlaced.

                - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
                I-frames when scene change is detected. - Off: does not force an I-frame when scene
                change is detected.

                - **Slices** *(integer) --* Number of slices per picture. Must be less than or
                equal to the number of macroblock rows for progressive pictures, and less than or
                equal to half the number of macroblock rows for interlaced pictures. This field is
                optional; when no value is specified the encoder will choose the number of slices
                based on encode resolution.

                - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
                reduce high-frequency content in the encoded image.

                - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
                frame based on spatial variation of content complexity.

                - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
                sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
                to improve visual quality.

                - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

                - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
                frame based on temporal variation of content complexity.

                - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
                into the video elementary stream. - 'disabled': Do not include timecodes -
                'picTimingSei': Pass through picture timing SEI messages from the source specified
                in Timecode Config

              - **H265Settings** *(dict) --* H265 Settings

                - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
                quantizers to vary to improve visual quality.

                - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
                output stream. If afdSignaling is "auto", the system will try to preserve the input
                AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
                AFD value will be the value configured in the fixedAfd parameter.

                - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
                Alternative Transfer Function SEI message to support backwards compatibility with
                non-HDR decoders and displays.

                - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
                control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
                output must have a unique value when its bitrate is rounded down to the nearest
                multiple of 1000.

                - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

                - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

                - **ColorSpaceSettings** *(dict) --* Color Space settings

                  - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
                  space conversion to the output

                  - **Hdr10Settings** *(dict) --* Hdr10 Settings

                    - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
                    value defining the maximum light level, in nits, of any single pixel within an
                    encoded HDR video stream or file.

                    - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                    metadata value defining the maximum average light level, in nits, for any
                    single frame within an encoded HDR video stream or file.

                  - **Rec601Settings** *(dict) --* Rec601 Settings

                  - **Rec709Settings** *(dict) --* Rec709 Settings

                - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
                the output stream. Only valid when afdSignaling is set to 'Fixed'.

                - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
                frame to reduce flicker or 'pop' on I-frames.

                - **FramerateDenominator** *(integer) --* Framerate denominator.

                - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
                fraction, e.g. 24000 / 1001 = 23.976 fps.

                - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
                applications, it is recommended that this be set to 1 so a decoder joining
                mid-stream will receive an IDR frame as quickly as possible. Setting this value to
                0 will break output segmenting.

                - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
                or seconds per gopSizeUnits. Must be greater than zero.

                - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
                seconds. If seconds the system will convert the gopSize into a frame count at run
                time.

                - **Level** *(string) --* H.265 Level.

                - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
                decrease latency and memory usage, while high can produce better quality for
                certain content.

                - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

                - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
                enabled. Enforces separation between repeated (cadence) I-frames and I-frames
                inserted by Scene Change Detection. If a scene change I-frame is within I-interval
                frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
                I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
                normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
                Min-I-interval - 1

                - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

                - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

                - **Profile** *(string) --* H.265 Profile.

                - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
                encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
                quality level field and Max bitrate field that suit your most important viewing
                devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
                bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
                Quality level: 6. Max bitrate: 1M to 1.5M

                - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
                specified quality level except when it is constrained by the maximum bitrate.
                Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
                depending on the video complexity. Recommended only if you distribute your assets
                to devices that cannot handle variable bitrates.

                - **ScanType** *(string) --* Sets the scan type of the output to progressive or
                top-field-first interlaced.

                - **SceneChangeDetect** *(string) --* Scene change detection.

                - **Slices** *(integer) --* Number of slices per picture. Must be less than or
                equal to the number of macroblock rows for progressive pictures, and less than or
                equal to half the number of macroblock rows for interlaced pictures. This field is
                optional; when no value is specified the encoder will choose the number of slices
                based on encode resolution.

                - **Tier** *(string) --* H.265 Tier.

                - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
                into the video elementary stream. - 'disabled': Do not include timecodes -
                'picTimingSei': Pass through picture timing SEI messages from the source specified
                in Timecode Config

            - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
            most codecs, you can leave this field and width blank in order to use the height and
            width (resolution) from the source. Note, however, that leaving blank is not
            recommended. For the Frame Capture codec, height and width are required.

            - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name
            to uniquely identify this Description. Description names should be unique within this
            Live Event.

            - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the
            input stream. RESPOND causes input video to be clipped, depending on the AFD value,
            input display aspect ratio, and output display aspect ratio, and (except for
            FRAMECAPTURE codec) includes the values in the output. PASSTHROUGH (does not apply to
            FRAMECAPTURE codec) ignores the AFD values and includes the values in the output, so
            input video is not clipped. NONE ignores the AFD values and does not include the values
            through to the output, so input video is not clipped.

            - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
            stretch the video to the specified output resolution (height and width). This option
            will override any position value. DEFAULT may insert black boxes (pillar boxes or
            letter boxes) around the video to provide the specified output resolution.

            - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
            scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
            for most content.

            - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
            most codecs, you can leave this field and height blank in order to use the height and
            width (resolution) from the source. Note, however, that leaving blank is not
            recommended. For the Frame Capture codec, height and width are required.

      - **Id** *(string) --* The unique id of the channel.

      - **InputAttachments** *(list) --* List of input attachments for channel.

        - *(dict) --* Placeholder documentation for InputAttachment

          - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
          required if the user wants to use this input in an input switch action.

          - **InputId** *(string) --* The ID of the input

          - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

            - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
            that have multiple available.

              - *(dict) --* Audio Selector

                - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
                this name to uniquely identify this Selector. Selector names should be unique per
                input.

                - **SelectorSettings** *(dict) --* The audio selector settings.

                  - **AudioLanguageSelection** *(dict) --* Audio Language Selection

                    - **LanguageCode** *(string) --* Selects a specific three-letter language code
                    from within an audio source.

                    - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
                    stream demux strictly identifies audio streams by their language descriptor. If
                    a PMT update occurs such that an audio stream matching the initially selected
                    language is no longer present then mute will be encoded until the language
                    returns. If "loose", then on a PMT update the demux will choose another audio
                    stream in the program with the same stream type if it can't find one with the
                    same language.

                  - **AudioPidSelection** *(dict) --* Audio Pid Selection

                    - **Pid** *(integer) --* Selects a specific PID from within a source.

            - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
            that have multiple available.

              - *(dict) --* Output groups for this Live Event. Output groups contain information
              about where streams should be distributed.

                - **LanguageCode** *(string) --* When specified this field indicates the three
                letter language code of the caption track to extract from the source.

                - **Name** *(string) --* Name identifier for a caption selector. This name is used
                to associate this caption selector with one or more caption descriptions. Names
                must be unique within an event.

                - **SelectorSettings** *(dict) --* Caption selector settings.

                  - **AribSourceSettings** *(dict) --* Arib Source Settings

                  - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

                    - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
                    PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
                    is passed through, regardless of selectors.

                  - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

                    - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                    through via the "608 compatibility bytes" fields of the 708 wrapper as well as
                    translated into 708. 708 data present in the source content will be discarded.

                    - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
                    intermittent and/or non-aligned SCTE-20 and Embedded captions.

                    - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                    number within the video track from which to extract captions. Unused for
                    passthrough.

                    - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

                  - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

                    - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                    through via the "608 compatibility bytes" fields of the 708 wrapper as well as
                    translated into 708. 708 data present in the source content will be discarded.

                    - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                    number within the video track from which to extract captions. Unused for
                    passthrough.

                  - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

                    - **Pid** *(integer) --* The pid field is used in conjunction with the caption
                    selector languageCode field as follows: - Specify PID and Language: Extracts
                    captions from that PID; the language is "informational". - Specify PID and omit
                    Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
                    the specified language, whichever PID that happens to be. - Omit PID and omit
                    Language: Valid only if source is DVB-Sub that is being passed through; all
                    languages will be passed through.

                  - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

                    - **PageNumber** *(string) --* Specifies the teletext page number within the
                    data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
                    (2303). Unused for passthrough. Should be specified as a hexadecimal string
                    with no "0x" prefix.

            - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

            - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

            - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
            to 5 (strongest).

            - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
            the deblocking filter enabled by default. 1) auto - filtering will be applied depending
            on input type/quality 2) disabled - no filtering will be applied to the input 3) forced
            - filtering will be applied regardless of input type

            - **NetworkInputSettings** *(dict) --* Input settings.

              - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
              HLS manifest.

                - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
                BANDWIDTH that most closely matches this value will be chosen, otherwise the
                highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
                bits per second, as in an HLS manifest.

                - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
                begin this many buffer segments from the end (most recently written segment). When
                not specified, the HLS input will begin with the first segment specified in the
                m3u8.

                - **Retries** *(integer) --* The number of consecutive times that attempts to read
                a manifest or segment must fail before the input is considered unavailable.

                - **RetryInterval** *(integer) --* The number of seconds between retries when an
                attempt to read a manifest or segment fails.

              - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
              checkCryptographyOnly, cryptography in the certificate will be checked, but not the
              server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
              name) do not strictly match the corresponding certificate's wildcard pattern and
              would otherwise cause the event to error. This setting is ignored for protocols that
              do not use https.

            - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
            input to be streamed indefinitely.

            - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
            input types that have multiple available.

              - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
              works in tandem with colorSpaceUsage and a video description's
              colorSpaceSettingsChoice to determine if any conversion will be performed.

              - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
              follow. This field controls how the value in the colorSpace field will be used.
              fallback means that when the input does include color space data, that data will be
              used, but when the input has no color space data, the value in colorSpace will be
              used. Choose fallback if your input is sometimes missing color space data, but when
              it does have color space data, that data is correct. force means to always use the
              value in colorSpace. Choose force if your input usually has no color space data or
              might have unreliable color space data.

              - **SelectorSettings** *(dict) --* The video selector settings.

                - **VideoSelectorPid** *(dict) --* Video Selector Pid

                  - **Pid** *(integer) --* Selects a specific PID from within a video source.

                - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

                  - **ProgramId** *(integer) --* Selects a specific program from within a
                  multi-program transport stream. If the program doesn't exist, the first program
                  within the transport stream will be selected by default.

      - **InputSpecification** *(dict) --* Placeholder documentation for InputSpecification

        - **Codec** *(string) --* Input codec

        - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

        - **Resolution** *(string) --* Input resolution, categorized coarsely

      - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.

      - **Name** *(string) --* The name of the channel. (user-mutable)

      - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.

        - *(dict) --* Runtime details of a pipeline when a channel is running.

          - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
          currently being ingested by this pipeline.

          - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
          action that occurred most recently and that resulted in the switch to the current input
          attachment for this pipeline.

          - **PipelineId** *(string) --* Pipeline ID

      - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.

      - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running
      the Channel.

      - **State** *(string) --* Placeholder documentation for ChannelState

      - **Tags** *(dict) --* A collection of key-value pairs.

        - *(string) --* Placeholder documentation for __string

          - *(string) --* Placeholder documentation for __string
    """


_ClientUpdateChannelDestinationsTypeDef = TypedDict(
    "_ClientUpdateChannelDestinationsTypeDef",
    {"Id": str, "MediaPackageSettings": List[Any], "Settings": List[Any]},
    total=False,
)


class ClientUpdateChannelDestinationsTypeDef(_ClientUpdateChannelDestinationsTypeDef):
    """
    Type definition for `ClientUpdateChannel` `Destinations`

    - **Id** *(string) --* User-specified id. This is used in an output group or an output.

    - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output; one
    destination for both encoders.

      - *(dict) --* MediaPackage Output Destination Settings

        - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the destination for
        this output group. You do not need to specify the individual inputs in MediaPackage;
        MediaLive will handle the connection of the two MediaLive pipelines to the two MediaPackage
        inputs. The MediaPackage channel and MediaLive channel must be in the same region.

    - **Settings** *(list) --* Destination settings for a standard output; one destination for each
    redundant encoder.

      - *(dict) --* Placeholder documentation for OutputDestinationSettings

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

        - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type rtmp://)

        - **Url** *(string) --* A URL specifying a destination

        - **Username** *(string) --* username for destination
    """


_ClientUpdateChannelEncoderSettingsAvailBlankingTypeDef = TypedDict(
    "_ClientUpdateChannelEncoderSettingsAvailBlankingTypeDef",
    {"AvailBlankingImage": Dict[str, Any], "State": str},
    total=False,
)


class ClientUpdateChannelEncoderSettingsAvailBlankingTypeDef(
    _ClientUpdateChannelEncoderSettingsAvailBlankingTypeDef
):
    """
    Type definition for `ClientUpdateChannelEncoderSettings` `AvailBlanking`

    - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid black.
    Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

      - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to
      a file accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked
    when insertion metadata is added.
    """


_ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef = TypedDict(
    "_ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef",
    {
        "AdAvailOffset": int,
        "NoRegionalBlackoutFlag": str,
        "WebDeliveryAllowedFlag": str,
    },
    total=False,
)


class ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef(
    _ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef
):
    """
    Type definition for `ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettings` `Scte35SpliceInsert`

    - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added
    to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does
    not apply to OOB messages.

    - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
    noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
    webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef = TypedDict(
    "_ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef",
    {
        "AdAvailOffset": int,
        "NoRegionalBlackoutFlag": str,
        "WebDeliveryAllowedFlag": str,
    },
    total=False,
)


class ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef(
    _ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef
):
    """
    Type definition for `ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettings` `Scte35TimeSignalApos`

    - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added
    to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does
    not apply to OOB messages.

    - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
    noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
    webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsTypeDef",
    {
        "Scte35SpliceInsert": ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35SpliceInsertTypeDef,
        "Scte35TimeSignalApos": ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsScte35TimeSignalAposTypeDef,
    },
    total=False,
)


class ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsTypeDef(
    _ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelEncoderSettingsAvailConfiguration` `AvailSettings`

    - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

      - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added
      to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does
      not apply to OOB messages.

      - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
      noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
      webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

      - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added
      to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does
      not apply to OOB messages.

      - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
      noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
      webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientUpdateChannelEncoderSettingsAvailConfigurationTypeDef = TypedDict(
    "_ClientUpdateChannelEncoderSettingsAvailConfigurationTypeDef",
    {
        "AvailSettings": ClientUpdateChannelEncoderSettingsAvailConfigurationAvailSettingsTypeDef
    },
    total=False,
)


class ClientUpdateChannelEncoderSettingsAvailConfigurationTypeDef(
    _ClientUpdateChannelEncoderSettingsAvailConfigurationTypeDef
):
    """
    Type definition for `ClientUpdateChannelEncoderSettings` `AvailConfiguration`

    - **AvailSettings** *(dict) --* Ad avail settings.

      - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

        - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added
        to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does
        not apply to OOB messages.

        - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
        noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
        webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

      - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

        - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added
        to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does
        not apply to OOB messages.

        - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
        noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
        webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates
    """


_ClientUpdateChannelEncoderSettingsBlackoutSlateTypeDef = TypedDict(
    "_ClientUpdateChannelEncoderSettingsBlackoutSlateTypeDef",
    {
        "BlackoutSlateImage": Dict[str, Any],
        "NetworkEndBlackout": str,
        "NetworkEndBlackoutImage": Dict[str, Any],
        "NetworkId": str,
        "State": str,
    },
    total=False,
)


class ClientUpdateChannelEncoderSettingsBlackoutSlateTypeDef(
    _ClientUpdateChannelEncoderSettingsBlackoutSlateTypeDef
):
    """
    Type definition for `ClientUpdateChannelEncoderSettings` `BlackoutSlate`

    - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid
    black. Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

      - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to
      a file accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout the
    video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35
    Network End Segmentation Descriptor is encountered. The blackout will be lifted when the
    Network Start Segmentation Descriptor is encountered. The Network End and Network Start
    descriptors must contain a network ID that matches the value entered in "Network ID".

    - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout
    image. Image will be scaled to fill the entire output raster.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

      - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to
      a file accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
    "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked
    when indicated by program metadata.
    """


_ClientUpdateChannelEncoderSettingsGlobalConfigurationInputLossBehaviorTypeDef = TypedDict(
    "_ClientUpdateChannelEncoderSettingsGlobalConfigurationInputLossBehaviorTypeDef",
    {
        "BlackFrameMsec": int,
        "InputLossImageColor": str,
        "InputLossImageSlate": Dict[str, Any],
        "InputLossImageType": str,
        "RepeatFrameMsec": int,
    },
    total=False,
)


class ClientUpdateChannelEncoderSettingsGlobalConfigurationInputLossBehaviorTypeDef(
    _ClientUpdateChannelEncoderSettingsGlobalConfigurationInputLossBehaviorTypeDef
):
    """
    Type definition for `ClientUpdateChannelEncoderSettingsGlobalConfiguration` `InputLossBehavior`

    - **BlackFrameMsec** *(integer) --* Documentation update needed

    - **InputLossImageColor** *(string) --* When input loss image type is "color" this field
    specifies the color to use. Value: 6 hex characters representing the values of RGB.

    - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields
    specify the parameters for accessing the slate.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

      - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path
      to a file accessible to the Live system (eg. a http:// URI) depending on the output type.
      For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a
    slate into the output after input loss exceeds blackFrameMsec.

    - **RepeatFrameMsec** *(integer) --* Documentation update needed
    """


_ClientUpdateChannelEncoderSettingsGlobalConfigurationTypeDef = TypedDict(
    "_ClientUpdateChannelEncoderSettingsGlobalConfigurationTypeDef",
    {
        "InitialAudioGain": int,
        "InputEndAction": str,
        "InputLossBehavior": ClientUpdateChannelEncoderSettingsGlobalConfigurationInputLossBehaviorTypeDef,
        "OutputLockingMode": str,
        "OutputTimingSource": str,
        "SupportLowFramerateInputs": str,
    },
    total=False,
)


class ClientUpdateChannelEncoderSettingsGlobalConfigurationTypeDef(
    _ClientUpdateChannelEncoderSettingsGlobalConfigurationTypeDef
):
    """
    Type definition for `ClientUpdateChannelEncoderSettings` `GlobalConfiguration`

    - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live Event.

    - **InputEndAction** *(string) --* Indicates the action to take when the current input
    completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart
    at the beginning of the first input. When "none" is configured the encoder will transcode
    either black, a solid color, or a user specified slate images per the "Input Loss Behavior"
    configuration until the next input switch occurs (which is controlled through the Channel
    Schedule API).

    - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

      - **BlackFrameMsec** *(integer) --* Documentation update needed

      - **InputLossImageColor** *(string) --* When input loss image type is "color" this field
      specifies the color to use. Value: 6 hex characters representing the values of RGB.

      - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields
      specify the parameters for accessing the slate.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

        - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path
        to a file accessible to the Live system (eg. a http:// URI) depending on the output type.
        For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a
      slate into the output after input loss exceeds blackFrameMsec.

      - **RepeatFrameMsec** *(integer) --* Documentation update needed

    - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
    PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to the
    other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each pipeline to the
    Unix epoch.

    - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the Live
    encoder should be paced by its system clock (which optionally may be locked to another source
    via NTP) or should be locked to the clock of the source that is providing the input stream.

    - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with very
    low video framerates. This is commonly set to enabled for music channels with less than one
    video frame per second.
    """


_RequiredClientUpdateChannelEncoderSettingsTypeDef = TypedDict(
    "_RequiredClientUpdateChannelEncoderSettingsTypeDef",
    {
        "AudioDescriptions": List[Any],
        "OutputGroups": List[Dict],
        "TimecodeConfig": Dict[str, Any],
        "VideoDescriptions": List[Any],
    },
)
_OptionalClientUpdateChannelEncoderSettingsTypeDef = TypedDict(
    "_OptionalClientUpdateChannelEncoderSettingsTypeDef",
    {
        "AvailBlanking": ClientUpdateChannelEncoderSettingsAvailBlankingTypeDef,
        "AvailConfiguration": ClientUpdateChannelEncoderSettingsAvailConfigurationTypeDef,
        "BlackoutSlate": ClientUpdateChannelEncoderSettingsBlackoutSlateTypeDef,
        "CaptionDescriptions": List[Dict],
        "GlobalConfiguration": ClientUpdateChannelEncoderSettingsGlobalConfigurationTypeDef,
    },
    total=False,
)


class ClientUpdateChannelEncoderSettingsTypeDef(
    _RequiredClientUpdateChannelEncoderSettingsTypeDef,
    _OptionalClientUpdateChannelEncoderSettingsTypeDef,
):
    """
    Type definition for `ClientUpdateChannel` `EncoderSettings`

    - **AudioDescriptions** *(list) --* **[REQUIRED]** Placeholder documentation for
    __listOfAudioDescription

      - *(dict) --* Audio Description

        - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

          - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms to
          the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

          - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is corrected
          using the chosen algorithm. If set to measureOnly, the audio will be measured but not
          adjusted.

          - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value is
          entered, a default value will be used according to the chosen algorithm. The CALM Act
          (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2) recommends a
          target of -23 LKFS.

        - **AudioSelectorName** *(string) --* **[REQUIRED]** The name of the AudioSelector used as
        the source for this AudioDescription.

        - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The values
        for audioType are defined in ISO-IEC 13818-1.

        - **AudioTypeControl** *(string) --* Determines how audio type is determined. followInput: If
        the input contains an ISO 639 audioType, then that value is passed through to the output. If
        the input contains no ISO 639 audioType, the value in Audio Type is included in the output.
        useConfigured: The value in Audio Type is included in the output. Note that this field and
        audioType are both ignored if inputType is broadcasterMixedAd.

        - **CodecSettings** *(dict) --* Audio codec settings.

          - **AacSettings** *(dict) --* Aac Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on rate
            control mode and profile.

            - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values depend
            on rate control mode and profile. The adReceiverMix setting receives a stereo description
            plus control track and emits a mono AAC encode of the description track, with control
            data emitted in the PES header as per ETSI TS 101 154 Annex E.

            - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains pre-mixed
            main audio + AD (narration) as a stereo pair. The Audio Type field (audioType) will be
            set to 3, which signals to downstream systems that this stream contains "broadcaster
            mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the
            encoder does not perform the mixing. The values in audioTypeControl and audioType (in
            AudioDescription) are ignored when set to broadcasterMixedAd. Leave set to "normal" when
            input does not contain pre-mixed audio + AD.

            - **Profile** *(string) --* AAC Profile.

            - **RateControlMode** *(string) --* Rate Control Mode.

            - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

            - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate control mode
            and profile.

            - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or
            MPEG-2 Transport Stream containers.

            - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is VBR.

          - **Ac3Settings** *(dict) --* Ac3 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the
            coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted
            AC-3 stream. See ATSC A/52-2012 for background on these values.

            - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and input
            audio is Dolby Digital, dialnorm will be passed through.

            - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range compression
            signaling to the output bitstream as defined in the Dolby Digital specification.

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the
            LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

            - **MetadataControl** *(string) --* When set to "followInput", encoder metadata will be
            sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was
            not supplied from one of these streams, then the static metadata settings will be used.

          - **Eac3Settings** *(dict) --* Eac3 Settings

            - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
            attenuation to the surround channels. Only used for 3/2 coding mode.

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on the
            coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the emitted
            E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

            - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
            channels.

            - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter for all
            input channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input audio
            is Dolby Digital Plus, dialnorm will be passed through.

            - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

            - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range compression,
            ensures that the instantaneous signal peaks do not exceed specified levels.

            - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the LFE
            channel

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter to the
            LFE channel prior to encoding. Only valid with codingMode32 coding mode.

            - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only used
            for 3/2 coding mode.

            - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level. Only
            used for 3/2 coding mode.

            - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only used
            for 3/2 coding mode.

            - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level. Only
            used for 3/2 coding mode.

            - **MetadataControl** *(string) --* When set to followInput, encoder metadata will be
            sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If audio was
            not supplied from one of these streams, then the static metadata settings will be used.

            - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio will be
            passed through if it is present on the input. This detection is dynamic over the life of
            the transcode. Inputs that alternate between DD+ and non-DD+ content will have a
            consistent DD+ output as the system alternates between passthrough and encoding.

            - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree phase
            shift to the surround channels. Only used for 3/2 coding mode.

            - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2 coding
            mode.

            - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra center
            back surround channel is matrix encoded into the left and right surround channels.

            - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby Surround is
            matrix encoded into the two channels.

          - **Mp2Settings** *(dict) --* Mp2 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second.

            - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are codingMode10
            (for mono) or codingMode20 (for stereo).

            - **SampleRate** *(float) --* Sample rate in Hz.

          - **PassThroughSettings** *(dict) --* Pass Through Settings

        - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only used
        if languageControlMode is useConfigured, or there is no ISO 639 language code specified in
        the input.

        - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639 language
        code of the output to follow the ISO 639 language code of the input. The languageCode will be
        used when useConfigured is set, or when followInput is selected but there is no ISO 639
        language code specified by the input.

        - **Name** *(string) --* **[REQUIRED]** The name of this AudioDescription. Outputs will use
        this name to uniquely identify this AudioDescription. Description names should be unique
        within this Live Event.

        - **RemixSettings** *(dict) --* Settings that control how input audio channels are remixed
        into the output audio channels.

          - **ChannelMappings** *(list) --* **[REQUIRED]** Mapping of input channels to output
          channels, with appropriate gain adjustments.

            - *(dict) --* Audio Channel Mapping

              - **InputChannelLevels** *(list) --* **[REQUIRED]** Indices and gain values for each
              input channel that should be remixed into this output channel.

                - *(dict) --* Input Channel Level

                  - **Gain** *(integer) --* **[REQUIRED]** Remixing value. Units are in dB and
                  acceptable values are within the range from -60 (mute) and 6 dB.

                  - **InputChannel** *(integer) --* **[REQUIRED]** The index of the input channel
                  used as a source.

              - **OutputChannel** *(integer) --* **[REQUIRED]** The index of the output channel being
              produced.

          - **ChannelsIn** *(integer) --* Number of input channels to be used.

          - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid values: 1,
          2, 4, 6, 8

        - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the name
        displayed by the player (eg. English, or Director Commentary).

    - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

      - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid black.
      Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

        - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to
        a file accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked
      when insertion metadata is added.

    - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail insertion.

      - **AvailSettings** *(dict) --* Ad avail settings.

        - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added
          to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does
          not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
          noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
          webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

        - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is added
          to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35 messages and does
          not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors with
          noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors with
          webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail slates

    - **BlackoutSlate** *(dict) --* Settings for blackout slate.

      - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for solid
      black. Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

        - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to
        a file accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout the
      video, audio, and captions, and raise the "Network Blackout Image" slate when an SCTE104/35
      Network End Segmentation Descriptor is encountered. The blackout will be lifted when the
      Network Start Segmentation Descriptor is encountered. The Network End and Network Start
      descriptors must contain a network ID that matches the value entered in "Network ID".

      - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End Blackout
      image. Image will be scaled to fill the entire output raster.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

        - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path to
        a file accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
      "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be blanked
      when indicated by program metadata.

    - **CaptionDescriptions** *(list) --* Settings for caption decriptions

      - *(dict) --* Output groups for this Live Event. Output groups contain information about where
      streams should be distributed.

        - **CaptionSelectorName** *(string) --* **[REQUIRED]** Specifies which input caption selector
        to use as a caption source when generating output captions. This field should match a
        captionSelector name.

        - **DestinationSettings** *(dict) --* Additional settings for captions destination that
        depend on the destination type.

          - **AribDestinationSettings** *(dict) --* Arib Destination Settings

          - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting
            alignment to centered will place the captions at the bottom center of the output.
            Similarly, setting a left alignment will align captions to the bottom left of the output.
            If x and y positions are given in conjunction with the alignment parameter, the font will
            be justified (either left or centered) relative to those coordinates. Selecting "smart"
            justification will left-justify live subtitles and center-justify pre-recorded subtitles.
            All burn-in and DVB-Sub font settings must match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle.
            255 is opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it
            to 0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension must
            be 'ttf' or 'tte'. Although the user can select output fonts for many different types of
            input captions, embedded, STL and teletext sources use a strict grid system. Using
            external fonts with these caption sources could cause unexpected display of proportional
            fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
              store

              - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a
              path to a file accessible to the Live system (eg. a http:// URI) depending on the
              output type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option
            is not valid for source captions that are STL, 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is
            opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96
            dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on the size
            of the output. Giving a positive integer will specify the exact font size in points. All
            burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid
            for source captions that are either 608/embedded or teletext. These source settings are
            already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must
            match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is
            not valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions.
            All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0
            is transparent. Leaving this parameter out is equivalent to setting it to 0
            (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative
            to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the
            left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative
            to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above
            the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used
            to generate the output subtitles bitmap. Only applicable for Teletext inputs and
            DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative
            to the left side of the output in pixels. A value of 10 would result in the captions
            starting 10 pixels from the left of the output. If no explicit xPosition is provided, the
            horizontal caption position will be determined by the alignment parameter. All burn-in
            and DVB-Sub font settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to
            the top of the output in pixels. A value of 10 would result in the captions starting 10
            pixels from the top of the output. If no explicit yPosition is provided, the caption will
            be positioned towards the bottom of the output. All burn-in and DVB-Sub font settings
            must match.

          - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided, setting
            alignment to centered will place the captions at the bottom center of the output.
            Similarly, setting a left alignment will align captions to the bottom left of the output.
            If x and y positions are given in conjunction with the alignment parameter, the font will
            be justified (either left or centered) relative to those coordinates. Selecting "smart"
            justification will left-justify live subtitles and center-justify pre-recorded subtitles.
            This option is not valid for source captions that are STL or 608/embedded. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background rectangle.
            255 is opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it
            to 0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension must
            be 'ttf' or 'tte'. Although the user can select output fonts for many different types of
            input captions, embedded, STL and teletext sources use a strict grid system. Using
            external fonts with these caption sources could cause unexpected display of proportional
            fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
              store

              - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a
              path to a file accessible to the Live system (eg. a http:// URI) depending on the
              output type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This option
            is not valid for source captions that are STL, 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions. 255 is
            opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default is 96
            dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to auto fontSize will scale depending on the size
            of the output. Giving a positive integer will specify the exact font size in points. All
            burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not valid
            for source captions that are either 608/embedded or teletext. These source settings are
            already pre-defined by the caption stream. All burn-in and DVB-Sub font settings must
            match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option is
            not valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the captions.
            All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is opaque; 0
            is transparent. Leaving this parameter blank is equivalent to setting it to 0
            (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow relative
            to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the
            left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow relative
            to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above
            the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be used
            to generate the output subtitles bitmap. Only applicable for Teletext inputs and
            DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption relative
            to the left side of the output in pixels. A value of 10 would result in the captions
            starting 10 pixels from the left of the output. If no explicit xPosition is provided, the
            horizontal caption position will be determined by the alignment parameter. This option is
            not valid for source captions that are STL, 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub font
            settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption relative to
            the top of the output in pixels. A value of 10 would result in the captions starting 10
            pixels from the top of the output. If no explicit yPosition is provided, the caption will
            be positioned towards the bottom of the output. This option is not valid for source
            captions that are STL, 608/embedded or teletext. These source settings are already
            pre-defined by the caption stream. All burn-in and DVB-Sub font settings must match.

          - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

          - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20 Destination
          Settings

          - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination Settings

          - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded Destination
          Settings

          - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

          - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

          - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

          - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

            - **StyleControl** *(string) --* When set to passthrough, passes through style and
            position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the CFF-TT
            output or TTML output.

          - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

        - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
        http://www.loc.gov/standards/iso639-2/

        - **LanguageDescription** *(string) --* Human readable information to indicate captions
        available for players (eg. English, or Spanish).

        - **Name** *(string) --* **[REQUIRED]** Name of the caption description. Used to associate a
        caption description with an output. Names must be unique within an event.

    - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a whole.

      - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live Event.

      - **InputEndAction** *(string) --* Indicates the action to take when the current input
      completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will restart
      at the beginning of the first input. When "none" is configured the encoder will transcode
      either black, a solid color, or a user specified slate images per the "Input Loss Behavior"
      configuration until the next input switch occurs (which is controlled through the Channel
      Schedule API).

      - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

        - **BlackFrameMsec** *(integer) --* Documentation update needed

        - **InputLossImageColor** *(string) --* When input loss image type is "color" this field
        specifies the color to use. Value: 6 hex characters representing the values of RGB.

        - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these fields
        specify the parameters for accessing the slate.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter store

          - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be a path
          to a file accessible to the Live system (eg. a http:// URI) depending on the output type.
          For example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or a
        slate into the output after input loss exceeds blackFrameMsec.

        - **RepeatFrameMsec** *(integer) --* Documentation update needed

      - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
      PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to the
      other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each pipeline to the
      Unix epoch.

      - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by the Live
      encoder should be paced by its system clock (which optionally may be locked to another source
      via NTP) or should be locked to the clock of the source that is providing the input stream.

      - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with very
      low video framerates. This is commonly set to enabled for music channels with less than one
      video frame per second.

    - **OutputGroups** *(list) --* **[REQUIRED]** Placeholder documentation for __listOfOutputGroup

      - *(dict) --* Output groups for this Live Event. Output groups contain information about where
      streams should be distributed.

        - **Name** *(string) --* Custom output group name optionally defined by the user. Only
        letters, numbers, and the underscore character allowed; only 32 characters allowed.

        - **OutputGroupSettings** *(dict) --* **[REQUIRED]** Settings associated with the output
        group.

          - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

            - **Destination** *(dict) --* **[REQUIRED]** A directory and base filename where archive
            files should be written.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **RolloverInterval** *(integer) --* Number of seconds to write to archive file before
            closing and starting a new one.

          - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

            - **Destination** *(dict) --* **[REQUIRED]** The destination for the frame capture files.
            Either the URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
            s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
            container, plus a file name prefix (for example,
            mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of the
            prefix from the destination field (for example, "curling_") + name modifier + the counter
            (5 digits, starting from 00001) + extension (which is always .jpg). For example,
            curlingLow.00001.jpg

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **HlsGroupSettings** *(dict) --* Hls Group Settings

            - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35 signals
            through to this group of Apple HLS outputs.

              - *(string) --* Hls Ad Markers

            - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to each
            output in the media .m3u8 file. Can be used if base manifest is delivered from a
            different URL than the main .m3u8 file.

            - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to each
            output in the media .m3u8 file. Can be used if base manifest is delivered from a
            different URL than the main .m3u8 file.

            - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to caption
            languages. Is only meaningful if captionLanguageSetting is set to "insert".

              - *(dict) --* Maps a caption channel to an ISO 693-2 language code
              (http://www.loc.gov/standards/iso639-2), with an optional description.

                - **CaptionChannel** *(integer) --* **[REQUIRED]** The closed caption channel being
                described by this CaptionLanguageMapping. Each channel mapping must have a unique
                channel number (maximum of 4)

                - **LanguageCode** *(string) --* **[REQUIRED]** Three character ISO 639-2 language
                code (see http://www.loc.gov/standards/iso639-2)

                - **LanguageDescription** *(string) --* **[REQUIRED]** Textual description of language

            - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output captions.
            insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in
            the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you
            specify. Make sure to specify the languages in the order in which they appear in the
            original source (if the source is embedded format) or the order of the caption selectors
            (if the source is other than embedded). Otherwise, languages in the manifest will not
            match up properly with the output captions. none: Include CLOSED-CAPTIONS=NONE line in
            the manifest. omit: Omit any CLOSED-CAPTIONS line from the manifest.

            - **ClientCache** *(string) --* When set to "disabled", sets the #EXT-X-ALLOW-CACHE:no
            tag in the manifest, which prevents clients from saving media segments for later replay.

            - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the default
            RFC-4281) during m3u8 playlist generation.

            - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit, 16-byte
            hex value represented by a 32-character text string. If ivSource is set to "explicit"
            then this parameter is required and is used as the IV for encryption.

            - **Destination** *(dict) --* **[REQUIRED]** A directory or HTTP destination for the HLS
            segments, manifest files, and encryption keys (if enabled).

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **DirectoryStructure** *(string) --* Place segments in subdirectories.

            - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
            scheme. Exclude this parameter if no encryption is desired.

            - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

              - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
                outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer
                encoding to Akamai. User should contact Akamai to enable this feature.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before the
                Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
                wait until a restart is initiated. A value of 0 means never restart.

                - **Salt** *(string) --* Salt for authenticated Akamai.

                - **Token** *(string) --* Token parameter for authenticated akamai. If not specified,
                _gda_ is used.

              - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
                outputs.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before the
                Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
                wait until a restart is initiated. A value of 0 means never restart.

              - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
                outputs.

                - **MediaStoreStorageClass** *(string) --* When set to temporal, output files are
                stored in non-persistent memory for faster reading and writing.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before the
                Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
                wait until a restart is initiated. A value of 0 means never restart.

              - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
                outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked transfer
                encoding to WebDAV.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made before the
                Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
                wait until a restart is initiated. A value of 0 means never restart.

            - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only manifest,
            but do create the master and media manifests (according to the Output Selection field).
            STANDARD: Create an I-frame-only manifest for each output that contains video, as well as
            the other manifests (according to the Output Selection field). The I-frame manifest
            contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is I-frame only, and one or more
            #EXT-X-BYTERANGE entries identifying the I-frame position. For example,
            #EXT-X-BYTERANGE:160364@1461888"

            - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
            maximum number of segments in the media manifest file. After this maximum, older segments
            are removed from the media manifest. This number must be less than or equal to the Keep
            Segments field.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on input
            loss.

            - **IvInManifest** *(string) --* For use with encryptionType. The IV (Initialization
            Vector) is a 128-bit number used in conjunction with the key for encrypting blocks. If
            set to "include", IV is listed in the manifest, otherwise the IV is not in the manifest.

            - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization Vector)
            is a 128-bit number used in conjunction with the key for encrypting blocks. If this
            setting is "followsSegmentNumber", it will cause the IV to change every segment (to match
            the segment number). If this is set to "explicit", you must enter a constantIv value.

            - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
            number of media segments (.ts files) to retain in the destination directory.

            - **KeyFormat** *(string) --* The value specifies how the key is represented in the
            resource identified by the URI. If parameter is absent, an implicit value of "identity"
            is used. A reverse DNS string can also be given.

            - **KeyFormatVersions** *(string) --* Either a single positive integer version value or a
            slash delimited list of version values (1/2/3).

            - **KeyProviderSettings** *(dict) --* The key provider settings.

              - **StaticKeySettings** *(dict) --* Static Key Settings

                - **KeyProviderServer** *(dict) --* The URL of the license server used for protecting
                content.

                  - **PasswordParam** *(string) --* key used to extract the password from EC2
                  Parameter store

                  - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This should be
                  a path to a file accessible to the Live system (eg. a http:// URI) depending on the
                  output type. For example, a RTMP destination should have a uri simliar to:
                  "rtmp://fmsserver/live".

                  - **Username** *(string) --* Documentation update needed

                - **StaticKeyValue** *(string) --* **[REQUIRED]** Static key value as a 32 character
                hexadecimal string.

            - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

            - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest should
            use floating point or integer values for segment duration.

            - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
            looking ahead and back within the specified range for a nearby avail and extending the
            segment size if needed.

            - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in the
            destination and manifest. If "live", only the number segments specified in keepSegments
            and indexNSegments are kept; newer segments replace older segments, which may prevent
            players from rewinding all the way to the beginning of the event. VOD mode uses HLS
            EXT-X-PLAYLIST-TYPE of EVENT while the channel is running, converting it to a "VOD" type
            manifest on completion of the stream.

            - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests (master
            manifest, if applicable, and media manifests) for this output group. SEGMENTSONLY: Does
            not generate any manifests for this output group.

            - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in
            .m3u8 manifest files. The value is calculated as follows: either the program date and
            time are initialized using the input timecode source, or the time is initialized using
            the input timecode source and the date is initialized using the timestampOffset.

            - **ProgramDateTimePeriod** *(integer) --* Period of insertion of EXT-X-PROGRAM-DATE-TIME
            entry, in seconds.

            - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for each
            pipeline includes information about both pipelines: first its own media files, then the
            media files of the other pipeline. This feature allows playout device that support stale
            manifest detection to switch from one manifest to the other, when the current manifest
            seems to be stale. There are still two destinations and two master manifests, but both
            master manifests reference the media files from both pipelines. DISABLED: The master
            manifest (.m3u8 file) for each pipeline includes information about its own pipeline only.
            For an HLS output group with MediaPackage as the destination, the DISABLED behavior is
            always followed. MediaPackage regenerates the manifests it serves to players so a
            redundant manifest from MediaLive is irrelevant.

            - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to create
            (in seconds). Note that segments will end on the next keyframe after this number of
            seconds, so actual segment length may be longer.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
            subdirectory before starting a new one. directoryStructure must be subdirectoryPerStream
            for this setting to have an effect.

            - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for video
            in EXT-X-STREAM-INF tag of variant manifest.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

            - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
            offset to fine tune the timestamps.

            - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments - multiple
            .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the program as a
            single .ts media file. The media manifest includes #EXT-X-BYTERANGE tags to index
            segments for playback. A typical use for this value is when sending the output to AWS
            Elemental MediaConvert, which can accept only a single media file. Playback while the
            channel is running is not guaranteed due to HTTP server caching.

          - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

            - **Destination** *(dict) --* **[REQUIRED]** MediaPackage channel destination.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

            - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point Identity"
            element used in each message placed in the sparse track. Only enabled if sparseTrackType
            is not "none".

            - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an audio-only MS
            Smooth output, the fragment absolute time will be set to the current timecode. This
            option does not write timecodes to the audio elementary stream.

            - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
            certificate chain to a trusted Certificate Authority (CA). This will cause https outputs
            to self-signed certificates to fail.

            - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before retrying
            connection to the IIS server if the connection is lost. Content will be cached during
            this time and the cache will be be delivered to the IIS server once the connection is
            re-established.

            - **Destination** *(dict) --* **[REQUIRED]** Smooth Streaming publish point on an IIS
            server. Elemental Live acts as a "Push" encoder to IIS.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should only
            be specified if eventIdMode is set to useConfigured.

            - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the IIS
            server. If no event ID is sent and the same Live Event is used without changing the
            publishing point, clients might see cached video from the previous run. Options: -
            "useConfigured" - use the value provided in eventId - "useTimestamp" - generate and send
            an event ID based on the current timestamp - "noEventId" - do not send an event ID to the
            IIS server.

            - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS server
            when stopping the event

            - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
            outputs.

            - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in seconds).
            Fragment length must be compatible with GOP size and framerate.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on input
            loss.

            - **NumRetries** *(integer) --* Number of retry attempts.

            - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due to
            output failure, due to exhausting the numRetries on one segment, or exceeding
            filecacheDuration.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from the
            second pipeline.

            - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages to
            generate a sparse track in this group of MS-Smooth outputs.

            - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest so
            publishing point doesn't start until all streams start.

            - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
            timestampOffsetMode is set to useConfiguredOffset.

            - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
            useEventStartDate: Use the date the event was started as the offset -
            useConfiguredOffset: Use an explicitly configured date as the offset

          - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

            - **AuthenticationScheme** *(string) --* Authentication scheme to use when connecting
            with CDN

            - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills up. If
            remote origin server stalls the RTMP connection and does not accept content fast enough
            the 'Media Cache' will fill up. When the cache reaches the duration specified by
            cacheLength the cache will stop accepting new content. If set to disconnectImmediately,
            the RTMP output will force a disconnect. Clear the media cache, and reconnect after
            restartDelay seconds. If set to waitForServer, the RTMP output will wait up to 5 minutes
            to allow the origin server to begin accepting data again.

            - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate buffer
            size.

            - **CaptionData** *(string) --* Controls the types of data that passes to onCaptionInfo
            outputs. If set to 'all' then 608 and 708 carried DTVCC data will be passed. If set to
            'field1AndField2608' then DTVCC data will be stripped out, but 608 data from both fields
            will be passed. If set to 'field1608' then only the data carried in 608 from field 1
            video will be passed.

            - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if input
            becomes unavailable. - emitOutput: Emit a slate until input returns. - pauseOutput: Stop
            transmitting data until input returns. This does not close the underlying RTMP connection.

            - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to wait
            until a restart is initiated. A value of 0 means never restart.

          - **UdpGroupSettings** *(dict) --* Udp Group Settings

            - **InputLossAction** *(string) --* Specifies behavior of last resort when input video is
            lost, and no more backup inputs are available. When dropTs is selected the entire
            transport stream will stop being emitted. When dropProgram is selected the program can be
            dropped from the transport stream (and replaced with null packets to meet the TS bitrate
            requirement). Or, when emitProgram is chosen the transport stream will continue to be
            produced normally with repeat frames, black frames, or slate frames substituted for the
            absent input video.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

        - **Outputs** *(list) --* **[REQUIRED]** Placeholder documentation for __listOfOutput

          - *(dict) --* Output settings. There can be multiple outputs within a group.

            - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as audio
            sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used as
            caption sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **OutputName** *(string) --* The name used to identify an output.

            - **OutputSettings** *(dict) --* **[REQUIRED]** Output type-specific settings.

              - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                - **ContainerSettings** *(dict) --* **[REQUIRED]** Settings specific to the container
                type of the file.

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream is
                    removed from the input. This allows the output audio configuration to dynamically
                    change based on input configuration. If this is set to encodeSilence, all output
                    audio streams will output encoded silence when not connected to an active input
                    stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing
                    and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in
                    the transport stream. Can be entered as a decimal or hexadecimal value. Valid
                    values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for
                    ARIB Captions will be auto-selected from unused pids. If set to useConfigured,
                    ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for
                    Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for
                    each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                    stream(s) in the transport stream. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182
                    (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for
                    AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits
                    per second. Setting to 0 lets the muxer automatically determine the appropriate
                    bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer model
                    for accurate interleaving. Setting to bufferModel to none can lead to lower
                    latency, but low-memory devices may not be able to play back the stream without
                    interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at
                    the specified table repetition interval.

                      - **NetworkId** *(integer) --* **[REQUIRED]** The numeric value placed in the
                      Network Information Table (NIT).

                      - **NetworkName** *(string) --* **[REQUIRED]** The network name text placed in
                      the networkNameDescriptor inside the Network Information Table. Maximum length
                      is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at
                    the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information into
                      output stream. The sdtFollow setting copies SDT information from input stream
                      to output stream. The sdtFollowIfPresent setting copies SDT information from
                      input stream to output stream if SDT information is present in the input,
                      otherwise it will fall back on the user-defined values. The sdtManual setting
                      means user will enter the SDT information. The sdtNone setting means output
                      stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be entered in
                    ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                    values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                    specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB
                    Teletext data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                    input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                    audio EBP markers will be added to partitions 3 and 4. The interval between these
                    additional markers will be fixed, and will be slightly shorter than the video EBP
                    marker interval. Only available when EBP Cablelabs segmentation markers are
                    selected. Partitions 1 and 2 will always follow the video interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                    Points do not come within the specified time interval of each other by looking
                    ahead at input video. If another EBP is going to come in within the specified
                    time interval, the current EBP is not emitted, and the segment is "stretched" to
                    the next marker. The lookahead value does not add latency to the system. The Live
                    Event must be configured elsewhere to create sufficient latency to make the
                    lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set
                    to videoAndAudioPids, EBP markers will be placed on the video PID and all audio
                    PIDs. If set to videoPid, EBP markers will be placed on only the video PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES
                    header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV
                    Platform data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                    Signal data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used
                    with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input
                    source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data
                    to this output. Multiple values are accepted, and can be entered in ranges and/or
                    by comma separation. Can be entered as decimal or hexadecimal values. Each PID
                    specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a downstream
                    encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between instances of
                    this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                    Reference value is inserted for every Packetized Elementary Stream (PES) header.
                    This parameter is effective only when the PCR PID is the same as the video or
                    audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock
                    Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference
                    (PCR) in the transport stream. When no value is given, the encoder will assign
                    the same value as the Video PID. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between instances of
                    this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                    (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in the
                    Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27
                    data to this output. Multiple values are accepted, and can be entered in ranges
                    and/or by comma separation. Can be entered as decimal or hexadecimal values. Each
                    PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input
                    source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in
                    the transport stream. Can be entered as a decimal or hexadecimal value. Valid
                    values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                    segmentationTime period. raiSegstart sets the Random Access Indicator bit in the
                    adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the
                    private data bytes. psiSegstart inserts PAT and PMT tables at the start of
                    segments. ebp adds Encoder Boundary Point information to the adaptation field as
                    per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary
                    Point information to the adaptation field using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter controls
                    how segmentation markers are inserted into the transport stream. With avails, it
                    is possible that segments may be truncated, which can influence where future
                    segmentation markers are inserted. When a segmentation style of "resetCadence" is
                    selected and a segment is truncated due to an avail, we will reset the
                    segmentation cadence. This means the subsequent segment will have a duration of
                    $segmentationTime seconds. When a segmentation style of "maintainCadence" is
                    selected and a segment is truncated due to an avail, we will not reset the
                    segmentation cadence. This means the subsequent segment will likely be truncated
                    as well. However, all segments after that will have a duration of
                    $segmentationTime seconds. Note that EBP lookahead is a slight exception to this
                    rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata
                    will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID field
                    in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                    stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Extension** *(string) --* Output file extension. If excluded, this will be
                auto-selected from the container type.

                - **NameModifier** *(string) --* String concatenated to the end of the destination
                filename. Required for multiple outputs of the same type.

              - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                - **NameModifier** *(string) --* Required if the output group contains more than one
                output. This modifier forms part of the output file name.

              - **HlsOutputSettings** *(dict) --* Hls Output Settings

                - **HlsSettings** *(dict) --* **[REQUIRED]** Settings regarding the underlying
                stream. These settings are different for audio-only outputs.

                  - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                    - **AudioGroupId** *(string) --* Specifies the group to which the audio Rendition
                    belongs.

                    - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image to
                    use as the cover art for an audio-only output. We recommend a low bit-size file
                    because the image increases the output audio bandwidth. The image is attached to
                    the audio as an ID3 tag, frame type APIC, picture type 0x10, as per the "ID3 tag
                    version 2.4.0 - Native Frames" standard.

                      - **PasswordParam** *(string) --* key used to extract the password from EC2
                      Parameter store

                      - **Uri** *(string) --* **[REQUIRED]** Uniform Resource Identifier - This
                      should be a path to a file accessible to the Live system (eg. a http:// URI)
                      depending on the output type. For example, a RTMP destination should have a uri
                      simliar to: "rtmp://fmsserver/live".

                      - **Username** *(string) --* Documentation update needed

                    - **AudioTrackType** *(string) --* Four types of audio-only tracks are supported:
                    Audio-Only Variant Stream The client can play back this audio-only stream instead
                    of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the
                    HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the
                    client should try to play back by default. Represented as an EXT-X-MEDIA in the
                    HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not
                    Default Alternate rendition that the client may try to play back by default.
                    Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES
                    Alternate Audio, not Auto Select Alternate rendition that the client will not try
                    to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with
                    DEFAULT=NO, AUTOSELECT=NO

                  - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                    - **AudioRenditionSets** *(string) --* List all the audio groups that are used
                    with the video output stream. Input all the audio GROUP-IDs that are associated
                    to the video, separate by ','.

                    - **M3u8Settings** *(dict) --* **[REQUIRED]** Settings information for the .m3u8
                    container

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for
                      each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                      stream(s) in the transport stream. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values.

                      - **EcmPid** *(string) --* This parameter is unused and deprecated.

                      - **PatInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. A value of \\"0\\" writes out the
                      PMT once per segment file.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                      Reference value is inserted for every Packetized Elementary Stream (PES)
                      header. This parameter is effective only when the PCR PID is the same as the
                      video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock References (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the encoder
                      will assign the same value as the Video PID. Can be entered as a decimal or
                      hexadecimal value.

                      - **PmtInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream. A value of \\"0\\" writes out the
                      PMT once per segment file.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                      (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.

                      - **ProgramNum** *(integer) --* The value of the program number field in the
                      Program Map Table.

                      - **Scte35Behavior** *(string) --* If set to passthrough, passes any SCTE-35
                      signals from the input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in
                      the transport stream. Can be entered as a decimal or hexadecimal value.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata is passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                      stream in the transport stream. Can be entered as a decimal or hexadecimal
                      value.

                - **NameModifier** *(string) --* String concatenated to the end of the destination
                filename. Accepts \\"Format Identifiers\\":#formatIdentifierParameters.

                - **SegmentModifier** *(string) --* String concatenated to end of segment filenames.

              - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

              - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                - **H265PackagingType** *(string) --* Only applicable when this output is referencing
                an H.265 video description. Specifies whether MP4 segments should be packaged as HEV1
                or HVC1.

                - **NameModifier** *(string) --* String concatenated to the end of the destination
                filename. Required for multiple outputs of the same type.

              - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the tls
                certificate chain to a trusted Certificate Authority (CA). This will cause rtmps
                outputs with self-signed certificates to fail.

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying a connection to the Flash Media server if the connection is lost.

                - **Destination** *(dict) --* **[REQUIRED]** The RTMP endpoint excluding the stream
                name (eg. rtmp://host/appname). For connection to Akamai, a username and password
                must be supplied. URI fields accept format identifiers.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **NumRetries** *(integer) --* Number of retry attempts.

              - **UdpOutputSettings** *(dict) --* Udp Output Settings

                - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger values
                increase latency through the transcoder but simultaneously assist the transcoder in
                maintaining a constant, low-jitter UDP/RTP output while accommodating clock recovery,
                input switching, input disruptions, picture reordering, etc.

                - **ContainerSettings** *(dict) --* **[REQUIRED]** Udp Container Settings

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream is
                    removed from the input. This allows the output audio configuration to dynamically
                    change based on input configuration. If this is set to encodeSilence, all output
                    audio streams will output encoded silence when not connected to an active input
                    stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field muxing
                    and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB Captions in
                    the transport stream. Can be entered as a decimal or hexadecimal value. Valid
                    values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used for
                    ARIB Captions will be auto-selected from unused pids. If set to useConfigured,
                    ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model for
                    Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert for
                    each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary audio
                    stream(s) in the transport stream. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or 0x20)..8182
                    (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type = 0x81 for
                    AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream type = 0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in bits
                    per second. Setting to 0 lets the muxer automatically determine the appropriate
                    bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer model
                    for accurate interleaving. Setting to bufferModel to none can lead to lower
                    latency, but low-memory devices may not be able to play back the stream without
                    interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table (NIT) at
                    the specified table repetition interval.

                      - **NetworkId** *(integer) --* **[REQUIRED]** The numeric value placed in the
                      Network Information Table (NIT).

                      - **NetworkName** *(string) --* **[REQUIRED]** The network name text placed in
                      the networkNameDescriptor inside the Network Information Table. Maximum length
                      is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table (SDT) at
                    the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information into
                      output stream. The sdtFollow setting copies SDT information from input stream
                      to output stream. The sdtFollowIfPresent setting copies SDT information from
                      input stream to output stream if SDT information is present in the input,
                      otherwise it will fall back on the user-defined values. The sdtManual setting
                      means user will enter the SDT information. The sdtNone setting means output
                      stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be entered in
                    ranges and/or by comma separation. Can be entered as decimal or hexadecimal
                    values. Each PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at the
                    specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between instances
                      of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source DVB
                    Teletext data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from the
                    input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is selected,
                    audio EBP markers will be added to partitions 3 and 4. The interval between these
                    additional markers will be fixed, and will be slightly shorter than the video EBP
                    marker interval. Only available when EBP Cablelabs segmentation markers are
                    selected. Partitions 1 and 2 will always follow the video interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder Boundary
                    Points do not come within the specified time interval of each other by looking
                    ahead at input video. If another EBP is going to come in within the specified
                    time interval, the current EBP is not emitted, and the segment is "stretched" to
                    the next marker. The lookahead value does not add latency to the system. The Live
                    Event must be configured elsewhere to create sufficient latency to make the
                    lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs. If set
                    to videoAndAudioPids, EBP markers will be placed on the video PID and all audio
                    PIDs. If set to videoPid, EBP markers will be placed on only the video PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the PES
                    header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source ETV
                    Platform data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source ETV
                    Signal data to this output. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment. Only used
                    with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the input
                    source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source KLV data
                    to this output. Multiple values are accepted, and can be entered in ranges and/or
                    by comma separation. Can be entered as decimal or hexadecimal values. Each PID
                    specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a downstream
                    encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between instances of
                    this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program Clock
                    Reference value is inserted for every Packetized Elementary Stream (PES) header.
                    This parameter is effective only when the PCR PID is the same as the video or
                    audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program Clock
                    Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock Reference
                    (PCR) in the transport stream. When no value is given, the encoder will assign
                    the same value as the Video PID. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between instances of
                    this table in the output transport stream. Valid values are 0, 10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map Table
                    (PMT) in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in the
                    Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source SCTE-27
                    data to this output. Multiple values are accepted, and can be entered in ranges
                    and/or by comma separation. Can be entered as decimal or hexadecimal values. Each
                    PID specified must be in the range of 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the input
                    source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream in
                    the transport stream. Can be entered as a decimal or hexadecimal value. Valid
                    values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at each
                    segmentationTime period. raiSegstart sets the Random Access Indicator bit in the
                    adaptation field. raiAdapt sets the RAI bit and adds the current timecode in the
                    private data bytes. psiSegstart inserts PAT and PMT tables at the start of
                    segments. ebp adds Encoder Boundary Point information to the adaptation field as
                    per OpenCable specification OC-SP-EBP-I01-130118. ebpLegacy adds Encoder Boundary
                    Point information to the adaptation field using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter controls
                    how segmentation markers are inserted into the transport stream. With avails, it
                    is possible that segments may be truncated, which can influence where future
                    segmentation markers are inserted. When a segmentation style of "resetCadence" is
                    selected and a segment is truncated due to an avail, we will reset the
                    segmentation cadence. This means the subsequent segment will have a duration of
                    $segmentationTime seconds. When a segmentation style of "maintainCadence" is
                    selected and a segment is truncated due to an avail, we will not reset the
                    segmentation cadence. This means the subsequent segment will likely be truncated
                    as well. However, all segments after that will have a duration of
                    $segmentationTime seconds. Note that EBP lookahead is a slight exception to this
                    rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed metadata
                    will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID field
                    in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary video
                    stream in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Destination** *(dict) --* **[REQUIRED]** Destination address and port number for
                RTP or UDP packets. Can be unicast or multicast RTP or UDP (eg.
                rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward Error
                Correction on UDP outputs.

                  - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of the
                  FEC protection matrix. The number of transport stream packets per column error
                  correction packet. Must be between 4 and 20, inclusive.

                  - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                  - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of the FEC
                  protection matrix. Must be between 1 and 20, inclusive. If only Column FEC is used,
                  then larger values increase robustness. If Row FEC is used, then this is the number
                  of transport stream packets per row error correction packet, and the value must be
                  between 4 and 20, inclusive, if includeFec is columnAndRow. If includeFec is
                  column, this value must be 1 to 20, inclusive.

            - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as the
            source for this output.

    - **TimecodeConfig** *(dict) --* **[REQUIRED]** Contains settings used to acquire and adjust
    timecode information from inputs.

      - **Source** *(string) --* **[REQUIRED]** Identifies the source for the timecode that will be
      associated with the events outputs. -Embedded (embedded): Initialize the output timecode with
      timecode from the the source. If no embedded timecode is detected in the source, the system
      falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the UTC time.
      -Start at 0 (zerobased): The time of the first frame of the event will be 00:00:00:00.

      - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
      resynchronized to the input timecode. Discrepancies below this threshold are permitted to avoid
      unnecessary discontinuities in the output timecode. No timecode sync when this is not specified.

    - **VideoDescriptions** *(list) --* **[REQUIRED]** Placeholder documentation for
    __listOfVideoDescription

      - *(dict) --* Video settings for this stream.

        - **CodecSettings** *(dict) --* Video codec settings.

          - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

            - **CaptureInterval** *(integer) --* **[REQUIRED]** The frequency, in seconds, for
            capturing frames for inclusion in the output. For example, "10" means capture a frame
            every 10 seconds.

          - **H264Settings** *(dict) --* H264 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input AFD
            value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value
            will be the value configured in the fixedAfd parameter.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output
            must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.

            - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be filled
            (HRD buffer model).

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
              conversion to the output

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in Main or
            High profile) or cavlc.

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the
            output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each frame to
            reduce flicker or 'pop' on I-frames.

            - **FramerateControl** *(string) --* This field indicates how the output video frame rate
            is specified. If "specified" is selected then the output video frame rate is determined
            by framerateNumerator and framerateDenominator, else if "initializeFromSource" is
            selected then the output video frame rate will be set equal to the input video frame rate
            of the first input.

            - **FramerateDenominator** *(integer) --* Framerate denominator.

            - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a fraction,
            e.g. 24000 / 1001 = 23.976 fps.

            - **GopBReference** *(string) --* Documentation update needed

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining mid-stream
            will receive an IDR frame as quickly as possible. Setting this value to 0 will break
            output segmenting.

            - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
            seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run time.

            - **Level** *(string) --* H.264 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease
            latency and memory usage, while high can produce better quality for certain content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For VBR: Set
            the maximum bitrate in order to accommodate expected spikes in the complexity of the
            video.

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled.
            Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene
            Change Detection. If a scene change I-frame is within I-interval frames of a cadence
            I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch
            requires enabling lookahead as well as setting I-interval. The normal cadence resumes for
            the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1

            - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder may use
            more than requested if using B-frames and/or interlaced encoding.

            - **ParControl** *(string) --* This field indicates how the output pixel aspect ratio is
            specified. If "specified" is selected then the output video pixel aspect ratio is
            determined by parNumerator and parDenominator, else if "initializeFromSource" is selected
            then the output pixsel aspect ratio will be set equal to the input video pixel aspect
            ratio of the first input.

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.264 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode.
            Applies only when the rate control mode is QVBR. Set values for the QVBR quality level
            field and Max bitrate field that suit your most important viewing devices. Recommended
            values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet:
            Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M
            to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate. Recommended
            if you or your viewers pay for bandwidth. VBR: Quality and bitrate vary, depending on the
            video complexity. Recommended instead of QVBR if you want to maintain a specific average
            bitrate over the duration of the channel. CBR: Quality varies, depending on the video
            complexity. Recommended only if you distribute your assets to devices that cannot handle
            variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts I-frames when
            scene change is detected. - Off: does not force an I-frame when scene change is detected.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to
            the number of macroblock rows for progressive pictures, and less than or equal to half
            the number of macroblock rows for interlaced pictures. This field is optional; when no
            value is specified the encoder will choose the number of slices based on encode
            resolution.

            - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values reduce
            high-frequency content in the encoded image.

            - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each frame
            based on spatial variation of content complexity.

            - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per sub-GOP.
            If set to dynamic, optimize the number of B-frames used for each sub-GOP to improve
            visual quality.

            - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

            - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each frame
            based on temporal variation of content complexity.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into
            the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei':
            Pass through picture timing SEI messages from the source specified in Timecode Config

          - **H265Settings** *(dict) --* H265 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input AFD
            value (in cases where multiple AFD values are valid). If set to "fixed", the AFD value
            will be the value configured in the fixedAfd parameter.

            - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
            Alternative Transfer Function SEI message to support backwards compatibility with non-HDR
            decoders and displays.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each output
            must have a unique value when its bitrate is rounded down to the nearest multiple of 1000.

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color space
              conversion to the output

              - **Hdr10Settings** *(dict) --* Hdr10 Settings

                - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata value
                defining the maximum light level, in nits, of any single pixel within an encoded HDR
                video stream or file.

                - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer metadata
                value defining the maximum average light level, in nits, for any single frame within
                an encoded HDR video stream or file.

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in the
            output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each frame to
            reduce flicker or 'pop' on I-frames.

            - **FramerateDenominator** *(integer) --* **[REQUIRED]** Framerate denominator.

            - **FramerateNumerator** *(integer) --* **[REQUIRED]** Framerate numerator - framerate is
            a fraction, e.g. 24000 / 1001 = 23.976 fps.

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining mid-stream
            will receive an IDR frame as quickly as possible. Setting this value to 0 will break
            output segmenting.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames or
            seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run time.

            - **Level** *(string) --* H.265 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can decrease
            latency and memory usage, while high can produce better quality for certain content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to enabled.
            Enforces separation between repeated (cadence) I-frames and I-frames inserted by Scene
            Change Detection. If a scene change I-frame is within I-interval frames of a cadence
            I-frame, the GOP is shrunk and/or stretched to the scene change I-frame. GOP stretch
            requires enabling lookahead as well as setting I-interval. The normal cadence resumes for
            the next GOP. Note: Maximum GOP stretch = GOP size + Min-I-interval - 1

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.265 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video encode.
            Applies only when the rate control mode is QVBR. Set values for the QVBR quality level
            field and Max bitrate field that suit your most important viewing devices. Recommended
            values are: - Primary screen: Quality level: 8 to 10. Max bitrate: 4M - PC or tablet:
            Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone: Quality level: 6. Max bitrate: 1M
            to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate. Recommended
            if you or your viewers pay for bandwidth. CBR: Quality varies, depending on the video
            complexity. Recommended only if you distribute your assets to devices that cannot handle
            variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or equal to
            the number of macroblock rows for progressive pictures, and less than or equal to half
            the number of macroblock rows for interlaced pictures. This field is optional; when no
            value is specified the encoder will choose the number of slices based on encode
            resolution.

            - **Tier** *(string) --* H.265 Tier.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted into
            the video elementary stream. - 'disabled': Do not include timecodes - 'picTimingSei':
            Pass through picture timing SEI messages from the source specified in Timecode Config

        - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For most
        codecs, you can leave this field and width blank in order to use the height and width
        (resolution) from the source. Note, however, that leaving blank is not recommended. For the
        Frame Capture codec, height and width are required.

        - **Name** *(string) --* **[REQUIRED]** The name of this VideoDescription. Outputs will use
        this name to uniquely identify this Description. Description names should be unique within
        this Live Event.

        - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the input
        stream. RESPOND causes input video to be clipped, depending on the AFD value, input display
        aspect ratio, and output display aspect ratio, and (except for FRAMECAPTURE codec) includes
        the values in the output. PASSTHROUGH (does not apply to FRAMECAPTURE codec) ignores the AFD
        values and includes the values in the output, so input video is not clipped. NONE ignores the
        AFD values and does not include the values through to the output, so input video is not
        clipped.

        - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to stretch
        the video to the specified output resolution (height and width). This option will override
        any position value. DEFAULT may insert black boxes (pillar boxes or letter boxes) around the
        video to provide the specified output resolution.

        - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
        scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended for
        most content.

        - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For most
        codecs, you can leave this field and height blank in order to use the height and width
        (resolution) from the source. Note, however, that leaving blank is not recommended. For the
        Frame Capture codec, height and width are required.
    """


_ClientUpdateChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    {"HlsInputSettings": Dict[str, Any], "ServerValidation": str},
    total=False,
)


class ClientUpdateChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef(
    _ClientUpdateChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelInputAttachmentsInputSettings` `NetworkInputSettings`

    - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS
    manifest.

      - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that
      most closely matches this value will be chosen, otherwise the highest bandwidth stream in
      the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS
      manifest.

      - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin
      this many buffer segments from the end (most recently written segment). When not
      specified, the HLS input will begin with the first segment specified in the m3u8.

      - **Retries** *(integer) --* The number of consecutive times that attempts to read a
      manifest or segment must fail before the input is considered unavailable.

      - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt
      to read a manifest or segment fails.

    - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
    checkCryptographyOnly, cryptography in the certificate will be checked, but not the
    server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do
    not strictly match the corresponding certificate's wildcard pattern and would otherwise
    cause the event to error. This setting is ignored for protocols that do not use https.
    """


_ClientUpdateChannelInputAttachmentsInputSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelInputAttachmentsInputSettingsTypeDef",
    {
        "AudioSelectors": List[Any],
        "CaptionSelectors": List[Any],
        "DeblockFilter": str,
        "DenoiseFilter": str,
        "FilterStrength": int,
        "InputFilter": str,
        "NetworkInputSettings": ClientUpdateChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef,
        "SourceEndBehavior": str,
        "VideoSelector": Dict[str, Any],
    },
    total=False,
)


class ClientUpdateChannelInputAttachmentsInputSettingsTypeDef(
    _ClientUpdateChannelInputAttachmentsInputSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelInputAttachments` `InputSettings`

    - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs that
    have multiple available.

      - *(dict) --* Audio Selector

        - **Name** *(string) --* **[REQUIRED]** The name of this AudioSelector. AudioDescriptions
        will use this name to uniquely identify this Selector. Selector names should be unique
        per input.

        - **SelectorSettings** *(dict) --* The audio selector settings.

          - **AudioLanguageSelection** *(dict) --* Audio Language Selection

            - **LanguageCode** *(string) --* **[REQUIRED]** Selects a specific three-letter
            language code from within an audio source.

            - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
            stream demux strictly identifies audio streams by their language descriptor. If a PMT
            update occurs such that an audio stream matching the initially selected language is
            no longer present then mute will be encoded until the language returns. If "loose",
            then on a PMT update the demux will choose another audio stream in the program with
            the same stream type if it can't find one with the same language.

          - **AudioPidSelection** *(dict) --* Audio Pid Selection

            - **Pid** *(integer) --* **[REQUIRED]** Selects a specific PID from within a source.

    - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs that
    have multiple available.

      - *(dict) --* Output groups for this Live Event. Output groups contain information about
      where streams should be distributed.

        - **LanguageCode** *(string) --* When specified this field indicates the three letter
        language code of the caption track to extract from the source.

        - **Name** *(string) --* **[REQUIRED]** Name identifier for a caption selector. This name
        is used to associate this caption selector with one or more caption descriptions. Names
        must be unique within an event.

        - **SelectorSettings** *(dict) --* Caption selector settings.

          - **AribSourceSettings** *(dict) --* Arib Source Settings

          - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

            - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this PID
            for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed
            through, regardless of selectors.

          - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via
            the "608 compatibility bytes" fields of the 708 wrapper as well as translated into
            708. 708 data present in the source content will be discarded.

            - **Scte20Detection** *(string) --* Set to "auto" to handle streams with intermittent
            and/or non-aligned SCTE-20 and Embedded captions.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
            within the video track from which to extract captions. Unused for passthrough.

            - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

          - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via
            the "608 compatibility bytes" fields of the 708 wrapper as well as translated into
            708. 708 data present in the source content will be discarded.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
            within the video track from which to extract captions. Unused for passthrough.

          - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

            - **Pid** *(integer) --* The pid field is used in conjunction with the caption
            selector languageCode field as follows: - Specify PID and Language: Extracts captions
            from that PID; the language is "informational". - Specify PID and omit Language:
            Extracts the specified PID. - Omit PID and specify Language: Extracts the specified
            language, whichever PID that happens to be. - Omit PID and omit Language: Valid only
            if source is DVB-Sub that is being passed through; all languages will be passed
            through.

          - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

            - **PageNumber** *(string) --* Specifies the teletext page number within the data
            stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused
            for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.

    - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

    - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

    - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal) to 5
    (strongest).

    - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have the
    deblocking filter enabled by default. 1) auto - filtering will be applied depending on input
    type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering
    will be applied regardless of input type

    - **NetworkInputSettings** *(dict) --* Input settings.

      - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS
      manifest.

        - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that
        most closely matches this value will be chosen, otherwise the highest bandwidth stream in
        the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS
        manifest.

        - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin
        this many buffer segments from the end (most recently written segment). When not
        specified, the HLS input will begin with the first segment specified in the m3u8.

        - **Retries** *(integer) --* The number of consecutive times that attempts to read a
        manifest or segment must fail before the input is considered unavailable.

        - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt
        to read a manifest or segment fails.

      - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
      checkCryptographyOnly, cryptography in the certificate will be checked, but not the
      server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do
      not strictly match the corresponding certificate's wildcard pattern and would otherwise
      cause the event to error. This setting is ignored for protocols that do not use https.

    - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file input to
    be streamed indefinitely.

    - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input
    types that have multiple available.

      - **ColorSpace** *(string) --* Specifies the color space of an input. This setting works in
      tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine
      if any conversion will be performed.

      - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
      follow. This field controls how the value in the colorSpace field will be used. fallback
      means that when the input does include color space data, that data will be used, but when
      the input has no color space data, the value in colorSpace will be used. Choose fallback if
      your input is sometimes missing color space data, but when it does have color space data,
      that data is correct. force means to always use the value in colorSpace. Choose force if
      your input usually has no color space data or might have unreliable color space data.

      - **SelectorSettings** *(dict) --* The video selector settings.

        - **VideoSelectorPid** *(dict) --* Video Selector Pid

          - **Pid** *(integer) --* Selects a specific PID from within a video source.

        - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

          - **ProgramId** *(integer) --* Selects a specific program from within a multi-program
          transport stream. If the program doesn't exist, the first program within the transport
          stream will be selected by default.
    """


_ClientUpdateChannelInputAttachmentsTypeDef = TypedDict(
    "_ClientUpdateChannelInputAttachmentsTypeDef",
    {
        "InputAttachmentName": str,
        "InputId": str,
        "InputSettings": ClientUpdateChannelInputAttachmentsInputSettingsTypeDef,
    },
    total=False,
)


class ClientUpdateChannelInputAttachmentsTypeDef(
    _ClientUpdateChannelInputAttachmentsTypeDef
):
    """
    Type definition for `ClientUpdateChannel` `InputAttachments`

    - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
    required if the user wants to use this input in an input switch action.

    - **InputId** *(string) --* The ID of the input

    - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

      - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs that
      have multiple available.

        - *(dict) --* Audio Selector

          - **Name** *(string) --* **[REQUIRED]** The name of this AudioSelector. AudioDescriptions
          will use this name to uniquely identify this Selector. Selector names should be unique
          per input.

          - **SelectorSettings** *(dict) --* The audio selector settings.

            - **AudioLanguageSelection** *(dict) --* Audio Language Selection

              - **LanguageCode** *(string) --* **[REQUIRED]** Selects a specific three-letter
              language code from within an audio source.

              - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
              stream demux strictly identifies audio streams by their language descriptor. If a PMT
              update occurs such that an audio stream matching the initially selected language is
              no longer present then mute will be encoded until the language returns. If "loose",
              then on a PMT update the demux will choose another audio stream in the program with
              the same stream type if it can't find one with the same language.

            - **AudioPidSelection** *(dict) --* Audio Pid Selection

              - **Pid** *(integer) --* **[REQUIRED]** Selects a specific PID from within a source.

      - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs that
      have multiple available.

        - *(dict) --* Output groups for this Live Event. Output groups contain information about
        where streams should be distributed.

          - **LanguageCode** *(string) --* When specified this field indicates the three letter
          language code of the caption track to extract from the source.

          - **Name** *(string) --* **[REQUIRED]** Name identifier for a caption selector. This name
          is used to associate this caption selector with one or more caption descriptions. Names
          must be unique within an event.

          - **SelectorSettings** *(dict) --* Caption selector settings.

            - **AribSourceSettings** *(dict) --* Arib Source Settings

            - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

              - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this PID
              for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content is passed
              through, regardless of selectors.

            - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via
              the "608 compatibility bytes" fields of the 708 wrapper as well as translated into
              708. 708 data present in the source content will be discarded.

              - **Scte20Detection** *(string) --* Set to "auto" to handle streams with intermittent
              and/or non-aligned SCTE-20 and Embedded captions.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
              within the video track from which to extract captions. Unused for passthrough.

              - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

            - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed through via
              the "608 compatibility bytes" fields of the 708 wrapper as well as translated into
              708. 708 data present in the source content will be discarded.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel number
              within the video track from which to extract captions. Unused for passthrough.

            - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

              - **Pid** *(integer) --* The pid field is used in conjunction with the caption
              selector languageCode field as follows: - Specify PID and Language: Extracts captions
              from that PID; the language is "informational". - Specify PID and omit Language:
              Extracts the specified PID. - Omit PID and specify Language: Extracts the specified
              language, whichever PID that happens to be. - Omit PID and omit Language: Valid only
              if source is DVB-Sub that is being passed through; all languages will be passed
              through.

            - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

              - **PageNumber** *(string) --* Specifies the teletext page number within the data
              stream from which to extract captions. Range of 0x100 (256) to 0x8FF (2303). Unused
              for passthrough. Should be specified as a hexadecimal string with no "0x" prefix.

      - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

      - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

      - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal) to 5
      (strongest).

      - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have the
      deblocking filter enabled by default. 1) auto - filtering will be applied depending on input
      type/quality 2) disabled - no filtering will be applied to the input 3) forced - filtering
      will be applied regardless of input type

      - **NetworkInputSettings** *(dict) --* Input settings.

        - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a HLS
        manifest.

          - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8 BANDWIDTH that
          most closely matches this value will be chosen, otherwise the highest bandwidth stream in
          the m3u8 will be chosen. The bitrate is specified in bits per second, as in an HLS
          manifest.

          - **BufferSegments** *(integer) --* When specified, reading of the HLS input will begin
          this many buffer segments from the end (most recently written segment). When not
          specified, the HLS input will begin with the first segment specified in the m3u8.

          - **Retries** *(integer) --* The number of consecutive times that attempts to read a
          manifest or segment must fail before the input is considered unavailable.

          - **RetryInterval** *(integer) --* The number of seconds between retries when an attempt
          to read a manifest or segment fails.

        - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
        checkCryptographyOnly, cryptography in the certificate will be checked, but not the
        server's name. Certain subdomains (notably S3 buckets that use dots in the bucket name) do
        not strictly match the corresponding certificate's wildcard pattern and would otherwise
        cause the event to error. This setting is ignored for protocols that do not use https.

      - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file input to
      be streamed indefinitely.

      - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for input
      types that have multiple available.

        - **ColorSpace** *(string) --* Specifies the color space of an input. This setting works in
        tandem with colorSpaceUsage and a video description's colorSpaceSettingsChoice to determine
        if any conversion will be performed.

        - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
        follow. This field controls how the value in the colorSpace field will be used. fallback
        means that when the input does include color space data, that data will be used, but when
        the input has no color space data, the value in colorSpace will be used. Choose fallback if
        your input is sometimes missing color space data, but when it does have color space data,
        that data is correct. force means to always use the value in colorSpace. Choose force if
        your input usually has no color space data or might have unreliable color space data.

        - **SelectorSettings** *(dict) --* The video selector settings.

          - **VideoSelectorPid** *(dict) --* Video Selector Pid

            - **Pid** *(integer) --* Selects a specific PID from within a video source.

          - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

            - **ProgramId** *(integer) --* Selects a specific program from within a multi-program
            transport stream. If the program doesn't exist, the first program within the transport
            stream will be selected by default.
    """


_ClientUpdateChannelResponseChannelEgressEndpointsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEgressEndpointsTypeDef",
    {"SourceIp": str},
    total=False,
)


class ClientUpdateChannelResponseChannelEgressEndpointsTypeDef(
    _ClientUpdateChannelResponseChannelEgressEndpointsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannel` `EgressEndpoints`

    - **SourceIp** *(string) --* Public IP of where a channel's output comes from
    """


_ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef",
    {"Algorithm": str, "AlgorithmControl": str, "TargetLkfs": float},
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptions` `AudioNormalizationSettings`

    - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
    to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

    - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
    corrected using the chosen algorithm. If set to measureOnly, the audio will be
    measured but not adjusted.

    - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value
    is entered, a default value will be used according to the chosen algorithm. The CALM
    Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
    recommends a target of -23 LKFS.
    """


_ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef",
    {
        "Bitrate": float,
        "CodingMode": str,
        "InputType": str,
        "Profile": str,
        "RateControlMode": str,
        "RawFormat": str,
        "SampleRate": float,
        "Spec": str,
        "VbrQuality": str,
    },
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettings` `AacSettings`

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
    rate control mode and profile.

    - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
    depend on rate control mode and profile. The adReceiverMix setting receives a
    stereo description plus control track and emits a mono AAC encode of the
    description track, with control data emitted in the PES header as per ETSI TS 101
    154 Annex E.

    - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
    pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
    (audioType) will be set to 3, which signals to downstream systems that this stream
    contains "broadcaster mixed AD". Note that the input received by the encoder must
    contain pre-mixed audio; the encoder does not perform the mixing. The values in
    audioTypeControl and audioType (in AudioDescription) are ignored when set to
    broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
    audio + AD.

    - **Profile** *(string) --* AAC Profile.

    - **RateControlMode** *(string) --* Rate Control Mode.

    - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

    - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
    control mode and profile.

    - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
    or MPEG-2 Transport Stream containers.

    - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
    VBR.
    """


_ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef",
    {
        "Bitrate": float,
        "BitstreamMode": str,
        "CodingMode": str,
        "Dialnorm": int,
        "DrcProfile": str,
        "LfeFilter": str,
        "MetadataControl": str,
    },
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettings` `Ac3Settings`

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
    the coding mode.

    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
    emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

    - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
    channels.

    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
    input audio is Dolby Digital, dialnorm will be passed through.

    - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
    compression signaling to the output bitstream as defined in the Dolby Digital
    specification.

    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
    to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

    - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
    will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
    If audio was not supplied from one of these streams, then the static metadata
    settings will be used.
    """


_ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef",
    {
        "AttenuationControl": str,
        "Bitrate": float,
        "BitstreamMode": str,
        "CodingMode": str,
        "DcFilter": str,
        "Dialnorm": int,
        "DrcLine": str,
        "DrcRf": str,
        "LfeControl": str,
        "LfeFilter": str,
        "LoRoCenterMixLevel": float,
        "LoRoSurroundMixLevel": float,
        "LtRtCenterMixLevel": float,
        "LtRtSurroundMixLevel": float,
        "MetadataControl": str,
        "PassthroughControl": str,
        "PhaseControl": str,
        "StereoDownmix": str,
        "SurroundExMode": str,
        "SurroundMode": str,
    },
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettings` `Eac3Settings`

    - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
    attenuation to the surround channels. Only used for 3/2 coding mode.

    - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
    the coding mode.

    - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
    emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

    - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
    channels.

    - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
    for all input channels.

    - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
    audio is Dolby Digital Plus, dialnorm will be passed through.

    - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

    - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
    compression, ensures that the instantaneous signal peaks do not exceed specified
    levels.

    - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
    LFE channel

    - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
    to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

    - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
    used for 3/2 coding mode.

    - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
    Only used for 3/2 coding mode.

    - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
    used for 3/2 coding mode.

    - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
    Only used for 3/2 coding mode.

    - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
    be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
    audio was not supplied from one of these streams, then the static metadata settings
    will be used.

    - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
    will be passed through if it is present on the input. This detection is dynamic
    over the life of the transcode. Inputs that alternate between DD+ and non-DD+
    content will have a consistent DD+ output as the system alternates between
    passthrough and encoding.

    - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
    phase shift to the surround channels. Only used for 3/2 coding mode.

    - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
    coding mode.

    - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
    center back surround channel is matrix encoded into the left and right surround
    channels.

    - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
    Surround is matrix encoded into the two channels.
    """


_ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef",
    {"Bitrate": float, "CodingMode": str, "SampleRate": float},
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettings` `Mp2Settings`

    - **Bitrate** *(float) --* Average bitrate in bits/second.

    - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
    codingMode10 (for mono) or codingMode20 (for stereo).

    - **SampleRate** *(float) --* Sample rate in Hz.
    """


_ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef",
    {
        "AacSettings": ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsTypeDef,
        "Ac3Settings": ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsTypeDef,
        "Eac3Settings": ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsTypeDef,
        "Mp2Settings": ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsTypeDef,
        "PassThroughSettings": Dict[str, Any],
    },
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptions` `CodecSettings`

    - **AacSettings** *(dict) --* Aac Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
      rate control mode and profile.

      - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
      depend on rate control mode and profile. The adReceiverMix setting receives a
      stereo description plus control track and emits a mono AAC encode of the
      description track, with control data emitted in the PES header as per ETSI TS 101
      154 Annex E.

      - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
      pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
      (audioType) will be set to 3, which signals to downstream systems that this stream
      contains "broadcaster mixed AD". Note that the input received by the encoder must
      contain pre-mixed audio; the encoder does not perform the mixing. The values in
      audioTypeControl and audioType (in AudioDescription) are ignored when set to
      broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
      audio + AD.

      - **Profile** *(string) --* AAC Profile.

      - **RateControlMode** *(string) --* Rate Control Mode.

      - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

      - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
      control mode and profile.

      - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
      or MPEG-2 Transport Stream containers.

      - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
      VBR.

    - **Ac3Settings** *(dict) --* Ac3 Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
      the coding mode.

      - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
      emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

      - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
      channels.

      - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
      input audio is Dolby Digital, dialnorm will be passed through.

      - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
      compression signaling to the output bitstream as defined in the Dolby Digital
      specification.

      - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
      to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

      - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
      will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
      If audio was not supplied from one of these streams, then the static metadata
      settings will be used.

    - **Eac3Settings** *(dict) --* Eac3 Settings

      - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
      attenuation to the surround channels. Only used for 3/2 coding mode.

      - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
      the coding mode.

      - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
      emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

      - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
      channels.

      - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
      for all input channels.

      - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
      audio is Dolby Digital Plus, dialnorm will be passed through.

      - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

      - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
      compression, ensures that the instantaneous signal peaks do not exceed specified
      levels.

      - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
      LFE channel

      - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
      to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

      - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
      used for 3/2 coding mode.

      - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
      Only used for 3/2 coding mode.

      - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
      used for 3/2 coding mode.

      - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
      Only used for 3/2 coding mode.

      - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
      be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
      audio was not supplied from one of these streams, then the static metadata settings
      will be used.

      - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
      will be passed through if it is present on the input. This detection is dynamic
      over the life of the transcode. Inputs that alternate between DD+ and non-DD+
      content will have a consistent DD+ output as the system alternates between
      passthrough and encoding.

      - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
      phase shift to the surround channels. Only used for 3/2 coding mode.

      - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
      coding mode.

      - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
      center back surround channel is matrix encoded into the left and right surround
      channels.

      - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
      Surround is matrix encoded into the two channels.

    - **Mp2Settings** *(dict) --* Mp2 Settings

      - **Bitrate** *(float) --* Average bitrate in bits/second.

      - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
      codingMode10 (for mono) or codingMode20 (for stereo).

      - **SampleRate** *(float) --* Sample rate in Hz.

    - **PassThroughSettings** *(dict) --* Pass Through Settings
    """


_ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsTypeDef",
    {
        "AudioNormalizationSettings": ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsTypeDef,
        "AudioSelectorName": str,
        "AudioType": str,
        "AudioTypeControl": str,
        "CodecSettings": ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsCodecSettingsTypeDef,
        "LanguageCode": str,
        "LanguageCodeControl": str,
        "Name": str,
        "RemixSettings": Dict[str, Any],
        "StreamName": str,
    },
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettings` `AudioDescriptions`

    - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

      - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
      to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

      - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
      corrected using the chosen algorithm. If set to measureOnly, the audio will be
      measured but not adjusted.

      - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value
      is entered, a default value will be used according to the chosen algorithm. The CALM
      Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
      recommends a target of -23 LKFS.

    - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
    for this AudioDescription.

    - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
    values for audioType are defined in ISO-IEC 13818-1.

    - **AudioTypeControl** *(string) --* Determines how audio type is determined.
    followInput: If the input contains an ISO 639 audioType, then that value is passed
    through to the output. If the input contains no ISO 639 audioType, the value in Audio
    Type is included in the output. useConfigured: The value in Audio Type is included in
    the output. Note that this field and audioType are both ignored if inputType is
    broadcasterMixedAd.

    - **CodecSettings** *(dict) --* Audio codec settings.

      - **AacSettings** *(dict) --* Aac Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
        rate control mode and profile.

        - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
        depend on rate control mode and profile. The adReceiverMix setting receives a
        stereo description plus control track and emits a mono AAC encode of the
        description track, with control data emitted in the PES header as per ETSI TS 101
        154 Annex E.

        - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
        pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
        (audioType) will be set to 3, which signals to downstream systems that this stream
        contains "broadcaster mixed AD". Note that the input received by the encoder must
        contain pre-mixed audio; the encoder does not perform the mixing. The values in
        audioTypeControl and audioType (in AudioDescription) are ignored when set to
        broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
        audio + AD.

        - **Profile** *(string) --* AAC Profile.

        - **RateControlMode** *(string) --* Rate Control Mode.

        - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

        - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
        control mode and profile.

        - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
        or MPEG-2 Transport Stream containers.

        - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
        VBR.

      - **Ac3Settings** *(dict) --* Ac3 Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
        the coding mode.

        - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
        emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

        - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
        channels.

        - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
        input audio is Dolby Digital, dialnorm will be passed through.

        - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
        compression signaling to the output bitstream as defined in the Dolby Digital
        specification.

        - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
        to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

        - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
        will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
        If audio was not supplied from one of these streams, then the static metadata
        settings will be used.

      - **Eac3Settings** *(dict) --* Eac3 Settings

        - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
        attenuation to the surround channels. Only used for 3/2 coding mode.

        - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
        the coding mode.

        - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
        emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

        - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
        channels.

        - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
        for all input channels.

        - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
        audio is Dolby Digital Plus, dialnorm will be passed through.

        - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

        - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
        compression, ensures that the instantaneous signal peaks do not exceed specified
        levels.

        - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
        LFE channel

        - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
        to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

        - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
        used for 3/2 coding mode.

        - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
        Only used for 3/2 coding mode.

        - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
        used for 3/2 coding mode.

        - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
        Only used for 3/2 coding mode.

        - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
        be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
        audio was not supplied from one of these streams, then the static metadata settings
        will be used.

        - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
        will be passed through if it is present on the input. This detection is dynamic
        over the life of the transcode. Inputs that alternate between DD+ and non-DD+
        content will have a consistent DD+ output as the system alternates between
        passthrough and encoding.

        - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
        phase shift to the surround channels. Only used for 3/2 coding mode.

        - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
        coding mode.

        - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
        center back surround channel is matrix encoded into the left and right surround
        channels.

        - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
        Surround is matrix encoded into the two channels.

      - **Mp2Settings** *(dict) --* Mp2 Settings

        - **Bitrate** *(float) --* Average bitrate in bits/second.

        - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
        codingMode10 (for mono) or codingMode20 (for stereo).

        - **SampleRate** *(float) --* Sample rate in Hz.

      - **PassThroughSettings** *(dict) --* Pass Through Settings

    - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
    used if languageControlMode is useConfigured, or there is no ISO 639 language code
    specified in the input.

    - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
    language code of the output to follow the ISO 639 language code of the input. The
    languageCode will be used when useConfigured is set, or when followInput is selected
    but there is no ISO 639 language code specified by the input.

    - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name
    to uniquely identify this AudioDescription. Description names should be unique within
    this Live Event.

    - **RemixSettings** *(dict) --* Settings that control how input audio channels are
    remixed into the output audio channels.

      - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
      appropriate gain adjustments.

        - *(dict) --* Audio Channel Mapping

          - **InputChannelLevels** *(list) --* Indices and gain values for each input
          channel that should be remixed into this output channel.

            - *(dict) --* Input Channel Level

              - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable
              values are within the range from -60 (mute) and 6 dB.

              - **InputChannel** *(integer) --* The index of the input channel used as a
              source.

          - **OutputChannel** *(integer) --* The index of the output channel being produced.

      - **ChannelsIn** *(integer) --* Number of input channels to be used.

      - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
      values: 1, 2, 4, 6, 8

    - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
    name displayed by the player (eg. English, or Director Commentary).
    """


_ClientUpdateChannelResponseChannelEncoderSettingsAvailBlankingTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsAvailBlankingTypeDef",
    {"AvailBlankingImage": Dict[str, Any], "State": str},
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsAvailBlankingTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsAvailBlankingTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettings` `AvailBlanking`

    - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
    black. Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be
    blanked when insertion metadata is added.
    """


_ClientUpdateChannelResponseChannelEncoderSettingsBlackoutSlateTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsBlackoutSlateTypeDef",
    {
        "BlackoutSlateImage": Dict[str, Any],
        "NetworkEndBlackout": str,
        "NetworkEndBlackoutImage": Dict[str, Any],
        "NetworkId": str,
        "State": str,
    },
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsBlackoutSlateTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsBlackoutSlateTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettings` `BlackoutSlate`

    - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for
    solid black. Only bmp and png images are supported.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
    the video, audio, and captions, and raise the "Network Blackout Image" slate when an
    SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be
    lifted when the Network Start Segmentation Descriptor is encountered. The Network End and
    Network Start descriptors must contain a network ID that matches the value entered in
    "Network ID".

    - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End
    Blackout image. Image will be scaled to fill the entire output raster.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
    "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

    - **State** *(string) --* When set to enabled, causes video, audio and captions to be
    blanked when indicated by program metadata.
    """


_ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef",
    {"CaptureInterval": int},
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettings` `FrameCaptureSettings`

    - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
    frames for inclusion in the output. For example, "10" means capture a frame every
    10 seconds.
    """


_ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef",
    {
        "ColorSpacePassthroughSettings": Dict[str, Any],
        "Rec601Settings": Dict,
        "Rec709Settings": Dict[str, Any],
    },
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings` `ColorSpaceSettings`

    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
    space conversion to the output

    - **Rec601Settings** *(dict) --* Rec601 Settings

    - **Rec709Settings** *(dict) --* Rec709 Settings
    """


_ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef",
    {
        "AdaptiveQuantization": str,
        "AfdSignaling": str,
        "Bitrate": int,
        "BufFillPct": int,
        "BufSize": int,
        "ColorMetadata": str,
        "ColorSpaceSettings": ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsColorSpaceSettingsTypeDef,
        "EntropyEncoding": str,
        "FixedAfd": str,
        "FlickerAq": str,
        "FramerateControl": str,
        "FramerateDenominator": int,
        "FramerateNumerator": int,
        "GopBReference": str,
        "GopClosedCadence": int,
        "GopNumBFrames": int,
        "GopSize": float,
        "GopSizeUnits": str,
        "Level": str,
        "LookAheadRateControl": str,
        "MaxBitrate": int,
        "MinIInterval": int,
        "NumRefFrames": int,
        "ParControl": str,
        "ParDenominator": int,
        "ParNumerator": int,
        "Profile": str,
        "QvbrQualityLevel": int,
        "RateControlMode": str,
        "ScanType": str,
        "SceneChangeDetect": str,
        "Slices": int,
        "Softness": int,
        "SpatialAq": str,
        "SubgopLength": str,
        "Syntax": str,
        "TemporalAq": str,
        "TimecodeInsertion": str,
    },
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettings` `H264Settings`

    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
    quantizers to vary to improve visual quality.

    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
    output stream. If afdSignaling is "auto", the system will try to preserve the input
    AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
    AFD value will be the value configured in the fixedAfd parameter.

    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
    control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
    output must have a unique value when its bitrate is rounded down to the nearest
    multiple of 1000.

    - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
    filled (HRD buffer model).

    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

    - **ColorSpaceSettings** *(dict) --* Color Space settings

      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
      space conversion to the output

      - **Rec601Settings** *(dict) --* Rec601 Settings

      - **Rec709Settings** *(dict) --* Rec709 Settings

    - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
    Main or High profile) or cavlc.

    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
    the output stream. Only valid when afdSignaling is set to 'Fixed'.

    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
    frame to reduce flicker or 'pop' on I-frames.

    - **FramerateControl** *(string) --* This field indicates how the output video
    frame rate is specified. If "specified" is selected then the output video frame
    rate is determined by framerateNumerator and framerateDenominator, else if
    "initializeFromSource" is selected then the output video frame rate will be set
    equal to the input video frame rate of the first input.

    - **FramerateDenominator** *(integer) --* Framerate denominator.

    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
    fraction, e.g. 24000 / 1001 = 23.976 fps.

    - **GopBReference** *(string) --* Documentation update needed

    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
    applications, it is recommended that this be set to 1 so a decoder joining
    mid-stream will receive an IDR frame as quickly as possible. Setting this value to
    0 will break output segmenting.

    - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
    or seconds per gopSizeUnits. Must be greater than zero.

    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
    seconds. If seconds the system will convert the gopSize into a frame count at run
    time.

    - **Level** *(string) --* H.264 Level.

    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
    decrease latency and memory usage, while high can produce better quality for
    certain content.

    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
    VBR: Set the maximum bitrate in order to accommodate expected spikes in the
    complexity of the video.

    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
    enabled. Enforces separation between repeated (cadence) I-frames and I-frames
    inserted by Scene Change Detection. If a scene change I-frame is within I-interval
    frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
    I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
    normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
    Min-I-interval - 1

    - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
    may use more than requested if using B-frames and/or interlaced encoding.

    - **ParControl** *(string) --* This field indicates how the output pixel aspect
    ratio is specified. If "specified" is selected then the output video pixel aspect
    ratio is determined by parNumerator and parDenominator, else if
    "initializeFromSource" is selected then the output pixsel aspect ratio will be set
    equal to the input video pixel aspect ratio of the first input.

    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

    - **Profile** *(string) --* H.264 Profile.

    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
    encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
    quality level field and Max bitrate field that suit your most important viewing
    devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
    bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
    Quality level: 6. Max bitrate: 1M to 1.5M

    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
    specified quality level except when it is constrained by the maximum bitrate.
    Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
    vary, depending on the video complexity. Recommended instead of QVBR if you want to
    maintain a specific average bitrate over the duration of the channel. CBR: Quality
    varies, depending on the video complexity. Recommended only if you distribute your
    assets to devices that cannot handle variable bitrates.

    - **ScanType** *(string) --* Sets the scan type of the output to progressive or
    top-field-first interlaced.

    - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
    I-frames when scene change is detected. - Off: does not force an I-frame when scene
    change is detected.

    - **Slices** *(integer) --* Number of slices per picture. Must be less than or
    equal to the number of macroblock rows for progressive pictures, and less than or
    equal to half the number of macroblock rows for interlaced pictures. This field is
    optional; when no value is specified the encoder will choose the number of slices
    based on encode resolution.

    - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
    reduce high-frequency content in the encoded image.

    - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
    frame based on spatial variation of content complexity.

    - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
    sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
    to improve visual quality.

    - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

    - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
    frame based on temporal variation of content complexity.

    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
    into the video elementary stream. - 'disabled': Do not include timecodes -
    'picTimingSei': Pass through picture timing SEI messages from the source specified
    in Timecode Config
    """


_ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef",
    {"MaxCll": int, "MaxFall": int},
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings` `Hdr10Settings`

    - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
    value defining the maximum light level, in nits, of any single pixel within an
    encoded HDR video stream or file.

    - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
    metadata value defining the maximum average light level, in nits, for any
    single frame within an encoded HDR video stream or file.
    """


_ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef",
    {
        "ColorSpacePassthroughSettings": Dict[str, Any],
        "Hdr10Settings": ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsTypeDef,
        "Rec601Settings": Dict,
        "Rec709Settings": Dict[str, Any],
    },
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings` `ColorSpaceSettings`

    - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
    space conversion to the output

    - **Hdr10Settings** *(dict) --* Hdr10 Settings

      - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
      value defining the maximum light level, in nits, of any single pixel within an
      encoded HDR video stream or file.

      - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
      metadata value defining the maximum average light level, in nits, for any
      single frame within an encoded HDR video stream or file.

    - **Rec601Settings** *(dict) --* Rec601 Settings

    - **Rec709Settings** *(dict) --* Rec709 Settings
    """


_ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef",
    {
        "AdaptiveQuantization": str,
        "AfdSignaling": str,
        "AlternativeTransferFunction": str,
        "Bitrate": int,
        "BufSize": int,
        "ColorMetadata": str,
        "ColorSpaceSettings": ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsTypeDef,
        "FixedAfd": str,
        "FlickerAq": str,
        "FramerateDenominator": int,
        "FramerateNumerator": int,
        "GopClosedCadence": int,
        "GopSize": float,
        "GopSizeUnits": str,
        "Level": str,
        "LookAheadRateControl": str,
        "MaxBitrate": int,
        "MinIInterval": int,
        "ParDenominator": int,
        "ParNumerator": int,
        "Profile": str,
        "QvbrQualityLevel": int,
        "RateControlMode": str,
        "ScanType": str,
        "SceneChangeDetect": str,
        "Slices": int,
        "Tier": str,
        "TimecodeInsertion": str,
    },
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettings` `H265Settings`

    - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
    quantizers to vary to improve visual quality.

    - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
    output stream. If afdSignaling is "auto", the system will try to preserve the input
    AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
    AFD value will be the value configured in the fixedAfd parameter.

    - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
    Alternative Transfer Function SEI message to support backwards compatibility with
    non-HDR decoders and displays.

    - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
    control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
    output must have a unique value when its bitrate is rounded down to the nearest
    multiple of 1000.

    - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

    - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

    - **ColorSpaceSettings** *(dict) --* Color Space settings

      - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
      space conversion to the output

      - **Hdr10Settings** *(dict) --* Hdr10 Settings

        - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
        value defining the maximum light level, in nits, of any single pixel within an
        encoded HDR video stream or file.

        - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
        metadata value defining the maximum average light level, in nits, for any
        single frame within an encoded HDR video stream or file.

      - **Rec601Settings** *(dict) --* Rec601 Settings

      - **Rec709Settings** *(dict) --* Rec709 Settings

    - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
    the output stream. Only valid when afdSignaling is set to 'Fixed'.

    - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
    frame to reduce flicker or 'pop' on I-frames.

    - **FramerateDenominator** *(integer) --* Framerate denominator.

    - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
    fraction, e.g. 24000 / 1001 = 23.976 fps.

    - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
    applications, it is recommended that this be set to 1 so a decoder joining
    mid-stream will receive an IDR frame as quickly as possible. Setting this value to
    0 will break output segmenting.

    - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
    or seconds per gopSizeUnits. Must be greater than zero.

    - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
    seconds. If seconds the system will convert the gopSize into a frame count at run
    time.

    - **Level** *(string) --* H.265 Level.

    - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
    decrease latency and memory usage, while high can produce better quality for
    certain content.

    - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

    - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
    enabled. Enforces separation between repeated (cadence) I-frames and I-frames
    inserted by Scene Change Detection. If a scene change I-frame is within I-interval
    frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
    I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
    normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
    Min-I-interval - 1

    - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

    - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

    - **Profile** *(string) --* H.265 Profile.

    - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
    encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
    quality level field and Max bitrate field that suit your most important viewing
    devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
    bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
    Quality level: 6. Max bitrate: 1M to 1.5M

    - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
    specified quality level except when it is constrained by the maximum bitrate.
    Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
    depending on the video complexity. Recommended only if you distribute your assets
    to devices that cannot handle variable bitrates.

    - **ScanType** *(string) --* Sets the scan type of the output to progressive or
    top-field-first interlaced.

    - **SceneChangeDetect** *(string) --* Scene change detection.

    - **Slices** *(integer) --* Number of slices per picture. Must be less than or
    equal to the number of macroblock rows for progressive pictures, and less than or
    equal to half the number of macroblock rows for interlaced pictures. This field is
    optional; when no value is specified the encoder will choose the number of slices
    based on encode resolution.

    - **Tier** *(string) --* H.265 Tier.

    - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
    into the video elementary stream. - 'disabled': Do not include timecodes -
    'picTimingSei': Pass through picture timing SEI messages from the source specified
    in Timecode Config
    """


_ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef",
    {
        "FrameCaptureSettings": ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsTypeDef,
        "H264Settings": ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsTypeDef,
        "H265Settings": ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTypeDef,
    },
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptions` `CodecSettings`

    - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

      - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
      frames for inclusion in the output. For example, "10" means capture a frame every
      10 seconds.

    - **H264Settings** *(dict) --* H264 Settings

      - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
      quantizers to vary to improve visual quality.

      - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
      output stream. If afdSignaling is "auto", the system will try to preserve the input
      AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
      AFD value will be the value configured in the fixedAfd parameter.

      - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
      control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
      output must have a unique value when its bitrate is rounded down to the nearest
      multiple of 1000.

      - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
      filled (HRD buffer model).

      - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

      - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

      - **ColorSpaceSettings** *(dict) --* Color Space settings

        - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
        space conversion to the output

        - **Rec601Settings** *(dict) --* Rec601 Settings

        - **Rec709Settings** *(dict) --* Rec709 Settings

      - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
      Main or High profile) or cavlc.

      - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
      the output stream. Only valid when afdSignaling is set to 'Fixed'.

      - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
      frame to reduce flicker or 'pop' on I-frames.

      - **FramerateControl** *(string) --* This field indicates how the output video
      frame rate is specified. If "specified" is selected then the output video frame
      rate is determined by framerateNumerator and framerateDenominator, else if
      "initializeFromSource" is selected then the output video frame rate will be set
      equal to the input video frame rate of the first input.

      - **FramerateDenominator** *(integer) --* Framerate denominator.

      - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
      fraction, e.g. 24000 / 1001 = 23.976 fps.

      - **GopBReference** *(string) --* Documentation update needed

      - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
      applications, it is recommended that this be set to 1 so a decoder joining
      mid-stream will receive an IDR frame as quickly as possible. Setting this value to
      0 will break output segmenting.

      - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

      - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
      or seconds per gopSizeUnits. Must be greater than zero.

      - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
      seconds. If seconds the system will convert the gopSize into a frame count at run
      time.

      - **Level** *(string) --* H.264 Level.

      - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
      decrease latency and memory usage, while high can produce better quality for
      certain content.

      - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
      VBR: Set the maximum bitrate in order to accommodate expected spikes in the
      complexity of the video.

      - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
      enabled. Enforces separation between repeated (cadence) I-frames and I-frames
      inserted by Scene Change Detection. If a scene change I-frame is within I-interval
      frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
      I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
      normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
      Min-I-interval - 1

      - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
      may use more than requested if using B-frames and/or interlaced encoding.

      - **ParControl** *(string) --* This field indicates how the output pixel aspect
      ratio is specified. If "specified" is selected then the output video pixel aspect
      ratio is determined by parNumerator and parDenominator, else if
      "initializeFromSource" is selected then the output pixsel aspect ratio will be set
      equal to the input video pixel aspect ratio of the first input.

      - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

      - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

      - **Profile** *(string) --* H.264 Profile.

      - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
      encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
      quality level field and Max bitrate field that suit your most important viewing
      devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
      bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
      Quality level: 6. Max bitrate: 1M to 1.5M

      - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
      specified quality level except when it is constrained by the maximum bitrate.
      Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
      vary, depending on the video complexity. Recommended instead of QVBR if you want to
      maintain a specific average bitrate over the duration of the channel. CBR: Quality
      varies, depending on the video complexity. Recommended only if you distribute your
      assets to devices that cannot handle variable bitrates.

      - **ScanType** *(string) --* Sets the scan type of the output to progressive or
      top-field-first interlaced.

      - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
      I-frames when scene change is detected. - Off: does not force an I-frame when scene
      change is detected.

      - **Slices** *(integer) --* Number of slices per picture. Must be less than or
      equal to the number of macroblock rows for progressive pictures, and less than or
      equal to half the number of macroblock rows for interlaced pictures. This field is
      optional; when no value is specified the encoder will choose the number of slices
      based on encode resolution.

      - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
      reduce high-frequency content in the encoded image.

      - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
      frame based on spatial variation of content complexity.

      - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
      sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
      to improve visual quality.

      - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

      - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
      frame based on temporal variation of content complexity.

      - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
      into the video elementary stream. - 'disabled': Do not include timecodes -
      'picTimingSei': Pass through picture timing SEI messages from the source specified
      in Timecode Config

    - **H265Settings** *(dict) --* H265 Settings

      - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
      quantizers to vary to improve visual quality.

      - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
      output stream. If afdSignaling is "auto", the system will try to preserve the input
      AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
      AFD value will be the value configured in the fixedAfd parameter.

      - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
      Alternative Transfer Function SEI message to support backwards compatibility with
      non-HDR decoders and displays.

      - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
      control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
      output must have a unique value when its bitrate is rounded down to the nearest
      multiple of 1000.

      - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

      - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

      - **ColorSpaceSettings** *(dict) --* Color Space settings

        - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
        space conversion to the output

        - **Hdr10Settings** *(dict) --* Hdr10 Settings

          - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
          value defining the maximum light level, in nits, of any single pixel within an
          encoded HDR video stream or file.

          - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
          metadata value defining the maximum average light level, in nits, for any
          single frame within an encoded HDR video stream or file.

        - **Rec601Settings** *(dict) --* Rec601 Settings

        - **Rec709Settings** *(dict) --* Rec709 Settings

      - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
      the output stream. Only valid when afdSignaling is set to 'Fixed'.

      - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
      frame to reduce flicker or 'pop' on I-frames.

      - **FramerateDenominator** *(integer) --* Framerate denominator.

      - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
      fraction, e.g. 24000 / 1001 = 23.976 fps.

      - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
      applications, it is recommended that this be set to 1 so a decoder joining
      mid-stream will receive an IDR frame as quickly as possible. Setting this value to
      0 will break output segmenting.

      - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
      or seconds per gopSizeUnits. Must be greater than zero.

      - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
      seconds. If seconds the system will convert the gopSize into a frame count at run
      time.

      - **Level** *(string) --* H.265 Level.

      - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
      decrease latency and memory usage, while high can produce better quality for
      certain content.

      - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

      - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
      enabled. Enforces separation between repeated (cadence) I-frames and I-frames
      inserted by Scene Change Detection. If a scene change I-frame is within I-interval
      frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
      I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
      normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
      Min-I-interval - 1

      - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

      - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

      - **Profile** *(string) --* H.265 Profile.

      - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
      encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
      quality level field and Max bitrate field that suit your most important viewing
      devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
      bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
      Quality level: 6. Max bitrate: 1M to 1.5M

      - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
      specified quality level except when it is constrained by the maximum bitrate.
      Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
      depending on the video complexity. Recommended only if you distribute your assets
      to devices that cannot handle variable bitrates.

      - **ScanType** *(string) --* Sets the scan type of the output to progressive or
      top-field-first interlaced.

      - **SceneChangeDetect** *(string) --* Scene change detection.

      - **Slices** *(integer) --* Number of slices per picture. Must be less than or
      equal to the number of macroblock rows for progressive pictures, and less than or
      equal to half the number of macroblock rows for interlaced pictures. This field is
      optional; when no value is specified the encoder will choose the number of slices
      based on encode resolution.

      - **Tier** *(string) --* H.265 Tier.

      - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
      into the video elementary stream. - 'disabled': Do not include timecodes -
      'picTimingSei': Pass through picture timing SEI messages from the source specified
      in Timecode Config
    """


_ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsTypeDef",
    {
        "CodecSettings": ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsCodecSettingsTypeDef,
        "Height": int,
        "Name": str,
        "RespondToAfd": str,
        "ScalingBehavior": str,
        "Sharpness": int,
        "Width": int,
    },
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelEncoderSettings` `VideoDescriptions`

    - **CodecSettings** *(dict) --* Video codec settings.

      - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

        - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
        frames for inclusion in the output. For example, "10" means capture a frame every
        10 seconds.

      - **H264Settings** *(dict) --* H264 Settings

        - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
        quantizers to vary to improve visual quality.

        - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
        output stream. If afdSignaling is "auto", the system will try to preserve the input
        AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
        AFD value will be the value configured in the fixedAfd parameter.

        - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
        control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
        output must have a unique value when its bitrate is rounded down to the nearest
        multiple of 1000.

        - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
        filled (HRD buffer model).

        - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

        - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

        - **ColorSpaceSettings** *(dict) --* Color Space settings

          - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
          space conversion to the output

          - **Rec601Settings** *(dict) --* Rec601 Settings

          - **Rec709Settings** *(dict) --* Rec709 Settings

        - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
        Main or High profile) or cavlc.

        - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
        the output stream. Only valid when afdSignaling is set to 'Fixed'.

        - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
        frame to reduce flicker or 'pop' on I-frames.

        - **FramerateControl** *(string) --* This field indicates how the output video
        frame rate is specified. If "specified" is selected then the output video frame
        rate is determined by framerateNumerator and framerateDenominator, else if
        "initializeFromSource" is selected then the output video frame rate will be set
        equal to the input video frame rate of the first input.

        - **FramerateDenominator** *(integer) --* Framerate denominator.

        - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
        fraction, e.g. 24000 / 1001 = 23.976 fps.

        - **GopBReference** *(string) --* Documentation update needed

        - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
        applications, it is recommended that this be set to 1 so a decoder joining
        mid-stream will receive an IDR frame as quickly as possible. Setting this value to
        0 will break output segmenting.

        - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

        - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
        or seconds per gopSizeUnits. Must be greater than zero.

        - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
        seconds. If seconds the system will convert the gopSize into a frame count at run
        time.

        - **Level** *(string) --* H.264 Level.

        - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
        decrease latency and memory usage, while high can produce better quality for
        certain content.

        - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
        VBR: Set the maximum bitrate in order to accommodate expected spikes in the
        complexity of the video.

        - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
        enabled. Enforces separation between repeated (cadence) I-frames and I-frames
        inserted by Scene Change Detection. If a scene change I-frame is within I-interval
        frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
        I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
        normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
        Min-I-interval - 1

        - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
        may use more than requested if using B-frames and/or interlaced encoding.

        - **ParControl** *(string) --* This field indicates how the output pixel aspect
        ratio is specified. If "specified" is selected then the output video pixel aspect
        ratio is determined by parNumerator and parDenominator, else if
        "initializeFromSource" is selected then the output pixsel aspect ratio will be set
        equal to the input video pixel aspect ratio of the first input.

        - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

        - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

        - **Profile** *(string) --* H.264 Profile.

        - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
        encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
        quality level field and Max bitrate field that suit your most important viewing
        devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
        bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
        Quality level: 6. Max bitrate: 1M to 1.5M

        - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
        specified quality level except when it is constrained by the maximum bitrate.
        Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
        vary, depending on the video complexity. Recommended instead of QVBR if you want to
        maintain a specific average bitrate over the duration of the channel. CBR: Quality
        varies, depending on the video complexity. Recommended only if you distribute your
        assets to devices that cannot handle variable bitrates.

        - **ScanType** *(string) --* Sets the scan type of the output to progressive or
        top-field-first interlaced.

        - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
        I-frames when scene change is detected. - Off: does not force an I-frame when scene
        change is detected.

        - **Slices** *(integer) --* Number of slices per picture. Must be less than or
        equal to the number of macroblock rows for progressive pictures, and less than or
        equal to half the number of macroblock rows for interlaced pictures. This field is
        optional; when no value is specified the encoder will choose the number of slices
        based on encode resolution.

        - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
        reduce high-frequency content in the encoded image.

        - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
        frame based on spatial variation of content complexity.

        - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
        sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
        to improve visual quality.

        - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

        - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
        frame based on temporal variation of content complexity.

        - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
        into the video elementary stream. - 'disabled': Do not include timecodes -
        'picTimingSei': Pass through picture timing SEI messages from the source specified
        in Timecode Config

      - **H265Settings** *(dict) --* H265 Settings

        - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
        quantizers to vary to improve visual quality.

        - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
        output stream. If afdSignaling is "auto", the system will try to preserve the input
        AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
        AFD value will be the value configured in the fixedAfd parameter.

        - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
        Alternative Transfer Function SEI message to support backwards compatibility with
        non-HDR decoders and displays.

        - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
        control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
        output must have a unique value when its bitrate is rounded down to the nearest
        multiple of 1000.

        - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

        - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

        - **ColorSpaceSettings** *(dict) --* Color Space settings

          - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
          space conversion to the output

          - **Hdr10Settings** *(dict) --* Hdr10 Settings

            - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
            value defining the maximum light level, in nits, of any single pixel within an
            encoded HDR video stream or file.

            - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
            metadata value defining the maximum average light level, in nits, for any
            single frame within an encoded HDR video stream or file.

          - **Rec601Settings** *(dict) --* Rec601 Settings

          - **Rec709Settings** *(dict) --* Rec709 Settings

        - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
        the output stream. Only valid when afdSignaling is set to 'Fixed'.

        - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
        frame to reduce flicker or 'pop' on I-frames.

        - **FramerateDenominator** *(integer) --* Framerate denominator.

        - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
        fraction, e.g. 24000 / 1001 = 23.976 fps.

        - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
        applications, it is recommended that this be set to 1 so a decoder joining
        mid-stream will receive an IDR frame as quickly as possible. Setting this value to
        0 will break output segmenting.

        - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
        or seconds per gopSizeUnits. Must be greater than zero.

        - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
        seconds. If seconds the system will convert the gopSize into a frame count at run
        time.

        - **Level** *(string) --* H.265 Level.

        - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
        decrease latency and memory usage, while high can produce better quality for
        certain content.

        - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

        - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
        enabled. Enforces separation between repeated (cadence) I-frames and I-frames
        inserted by Scene Change Detection. If a scene change I-frame is within I-interval
        frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
        I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
        normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
        Min-I-interval - 1

        - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

        - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

        - **Profile** *(string) --* H.265 Profile.

        - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
        encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
        quality level field and Max bitrate field that suit your most important viewing
        devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
        bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
        Quality level: 6. Max bitrate: 1M to 1.5M

        - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
        specified quality level except when it is constrained by the maximum bitrate.
        Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
        depending on the video complexity. Recommended only if you distribute your assets
        to devices that cannot handle variable bitrates.

        - **ScanType** *(string) --* Sets the scan type of the output to progressive or
        top-field-first interlaced.

        - **SceneChangeDetect** *(string) --* Scene change detection.

        - **Slices** *(integer) --* Number of slices per picture. Must be less than or
        equal to the number of macroblock rows for progressive pictures, and less than or
        equal to half the number of macroblock rows for interlaced pictures. This field is
        optional; when no value is specified the encoder will choose the number of slices
        based on encode resolution.

        - **Tier** *(string) --* H.265 Tier.

        - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
        into the video elementary stream. - 'disabled': Do not include timecodes -
        'picTimingSei': Pass through picture timing SEI messages from the source specified
        in Timecode Config

    - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
    most codecs, you can leave this field and width blank in order to use the height and
    width (resolution) from the source. Note, however, that leaving blank is not
    recommended. For the Frame Capture codec, height and width are required.

    - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name
    to uniquely identify this Description. Description names should be unique within this
    Live Event.

    - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the
    input stream. RESPOND causes input video to be clipped, depending on the AFD value,
    input display aspect ratio, and output display aspect ratio, and (except for
    FRAMECAPTURE codec) includes the values in the output. PASSTHROUGH (does not apply to
    FRAMECAPTURE codec) ignores the AFD values and includes the values in the output, so
    input video is not clipped. NONE ignores the AFD values and does not include the values
    through to the output, so input video is not clipped.

    - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
    stretch the video to the specified output resolution (height and width). This option
    will override any position value. DEFAULT may insert black boxes (pillar boxes or
    letter boxes) around the video to provide the specified output resolution.

    - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
    scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
    for most content.

    - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
    most codecs, you can leave this field and height blank in order to use the height and
    width (resolution) from the source. Note, however, that leaving blank is not
    recommended. For the Frame Capture codec, height and width are required.
    """


_ClientUpdateChannelResponseChannelEncoderSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelEncoderSettingsTypeDef",
    {
        "AudioDescriptions": List[
            ClientUpdateChannelResponseChannelEncoderSettingsAudioDescriptionsTypeDef
        ],
        "AvailBlanking": ClientUpdateChannelResponseChannelEncoderSettingsAvailBlankingTypeDef,
        "AvailConfiguration": Dict[str, Any],
        "BlackoutSlate": ClientUpdateChannelResponseChannelEncoderSettingsBlackoutSlateTypeDef,
        "CaptionDescriptions": List[Dict],
        "GlobalConfiguration": Dict[str, Any],
        "OutputGroups": List[Dict],
        "TimecodeConfig": Dict[str, Any],
        "VideoDescriptions": List[
            ClientUpdateChannelResponseChannelEncoderSettingsVideoDescriptionsTypeDef
        ],
    },
    total=False,
)


class ClientUpdateChannelResponseChannelEncoderSettingsTypeDef(
    _ClientUpdateChannelResponseChannelEncoderSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannel` `EncoderSettings`

    - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

      - *(dict) --* Audio Description

        - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

          - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
          to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

          - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
          corrected using the chosen algorithm. If set to measureOnly, the audio will be
          measured but not adjusted.

          - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value
          is entered, a default value will be used according to the chosen algorithm. The CALM
          Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
          recommends a target of -23 LKFS.

        - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
        for this AudioDescription.

        - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
        values for audioType are defined in ISO-IEC 13818-1.

        - **AudioTypeControl** *(string) --* Determines how audio type is determined.
        followInput: If the input contains an ISO 639 audioType, then that value is passed
        through to the output. If the input contains no ISO 639 audioType, the value in Audio
        Type is included in the output. useConfigured: The value in Audio Type is included in
        the output. Note that this field and audioType are both ignored if inputType is
        broadcasterMixedAd.

        - **CodecSettings** *(dict) --* Audio codec settings.

          - **AacSettings** *(dict) --* Aac Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
            rate control mode and profile.

            - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
            depend on rate control mode and profile. The adReceiverMix setting receives a
            stereo description plus control track and emits a mono AAC encode of the
            description track, with control data emitted in the PES header as per ETSI TS 101
            154 Annex E.

            - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
            pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
            (audioType) will be set to 3, which signals to downstream systems that this stream
            contains "broadcaster mixed AD". Note that the input received by the encoder must
            contain pre-mixed audio; the encoder does not perform the mixing. The values in
            audioTypeControl and audioType (in AudioDescription) are ignored when set to
            broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
            audio + AD.

            - **Profile** *(string) --* AAC Profile.

            - **RateControlMode** *(string) --* Rate Control Mode.

            - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

            - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
            control mode and profile.

            - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
            or MPEG-2 Transport Stream containers.

            - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
            VBR.

          - **Ac3Settings** *(dict) --* Ac3 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
            the coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
            emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

            - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
            channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
            input audio is Dolby Digital, dialnorm will be passed through.

            - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
            compression signaling to the output bitstream as defined in the Dolby Digital
            specification.

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
            to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

            - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
            will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
            If audio was not supplied from one of these streams, then the static metadata
            settings will be used.

          - **Eac3Settings** *(dict) --* Eac3 Settings

            - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
            attenuation to the surround channels. Only used for 3/2 coding mode.

            - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
            the coding mode.

            - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
            emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

            - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
            channels.

            - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
            for all input channels.

            - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
            audio is Dolby Digital Plus, dialnorm will be passed through.

            - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

            - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
            compression, ensures that the instantaneous signal peaks do not exceed specified
            levels.

            - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
            LFE channel

            - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
            to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

            - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
            used for 3/2 coding mode.

            - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
            Only used for 3/2 coding mode.

            - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
            used for 3/2 coding mode.

            - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
            Only used for 3/2 coding mode.

            - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
            be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
            audio was not supplied from one of these streams, then the static metadata settings
            will be used.

            - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
            will be passed through if it is present on the input. This detection is dynamic
            over the life of the transcode. Inputs that alternate between DD+ and non-DD+
            content will have a consistent DD+ output as the system alternates between
            passthrough and encoding.

            - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
            phase shift to the surround channels. Only used for 3/2 coding mode.

            - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
            coding mode.

            - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
            center back surround channel is matrix encoded into the left and right surround
            channels.

            - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
            Surround is matrix encoded into the two channels.

          - **Mp2Settings** *(dict) --* Mp2 Settings

            - **Bitrate** *(float) --* Average bitrate in bits/second.

            - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
            codingMode10 (for mono) or codingMode20 (for stereo).

            - **SampleRate** *(float) --* Sample rate in Hz.

          - **PassThroughSettings** *(dict) --* Pass Through Settings

        - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
        used if languageControlMode is useConfigured, or there is no ISO 639 language code
        specified in the input.

        - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
        language code of the output to follow the ISO 639 language code of the input. The
        languageCode will be used when useConfigured is set, or when followInput is selected
        but there is no ISO 639 language code specified by the input.

        - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name
        to uniquely identify this AudioDescription. Description names should be unique within
        this Live Event.

        - **RemixSettings** *(dict) --* Settings that control how input audio channels are
        remixed into the output audio channels.

          - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
          appropriate gain adjustments.

            - *(dict) --* Audio Channel Mapping

              - **InputChannelLevels** *(list) --* Indices and gain values for each input
              channel that should be remixed into this output channel.

                - *(dict) --* Input Channel Level

                  - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable
                  values are within the range from -60 (mute) and 6 dB.

                  - **InputChannel** *(integer) --* The index of the input channel used as a
                  source.

              - **OutputChannel** *(integer) --* The index of the output channel being produced.

          - **ChannelsIn** *(integer) --* Number of input channels to be used.

          - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
          values: 1, 2, 4, 6, 8

        - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
        name displayed by the player (eg. English, or Director Commentary).

    - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

      - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
      black. Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be
      blanked when insertion metadata is added.

    - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail
    insertion.

      - **AvailSettings** *(dict) --* Ad avail settings.

        - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
          added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
          messages and does not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
          with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
          slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
          with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
          slates

        - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

          - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
          added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
          messages and does not apply to OOB messages.

          - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
          with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
          slates

          - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
          with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
          slates

    - **BlackoutSlate** *(dict) --* Settings for blackout slate.

      - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for
      solid black. Only bmp and png images are supported.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
      the video, audio, and captions, and raise the "Network Blackout Image" slate when an
      SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be
      lifted when the Network Start Segmentation Descriptor is encountered. The Network End and
      Network Start descriptors must contain a network ID that matches the value entered in
      "Network ID".

      - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End
      Blackout image. Image will be scaled to fill the entire output raster.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
      "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

      - **State** *(string) --* When set to enabled, causes video, audio and captions to be
      blanked when indicated by program metadata.

    - **CaptionDescriptions** *(list) --* Settings for caption decriptions

      - *(dict) --* Output groups for this Live Event. Output groups contain information about
      where streams should be distributed.

        - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use
        as a caption source when generating output captions. This field should match a
        captionSelector name.

        - **DestinationSettings** *(dict) --* Additional settings for captions destination that
        depend on the destination type.

          - **AribDestinationSettings** *(dict) --* Arib Destination Settings

          - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
            setting alignment to centered will place the captions at the bottom center of the
            output. Similarly, setting a left alignment will align captions to the bottom left
            of the output. If x and y positions are given in conjunction with the alignment
            parameter, the font will be justified (either left or centered) relative to those
            coordinates. Selecting "smart" justification will left-justify live subtitles and
            center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
            match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
            rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is
            equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
            must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension
            must be 'ttf' or 'tte'. Although the user can select output fonts for many
            different types of input captions, embedded, STL and teletext sources use a strict
            grid system. Using external fonts with these caption sources could cause unexpected
            display of proportional fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2
              Parameter store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
              file accessible to the Live system (eg. a http:// URI) depending on the output
              type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
            option is not valid for source captions that are STL, 608/embedded or teletext.
            These source settings are already pre-defined by the caption stream. All burn-in
            and DVB-Sub font settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
            255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
            is 96 dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on
            the size of the output. Giving a positive integer will specify the exact font size
            in points. All burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not
            valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
            font settings must match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
            is not valid for source captions that are either 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
            captions. All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
            opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to
            0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels to the left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels above the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
            used to generate the output subtitles bitmap. Only applicable for Teletext inputs
            and DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption
            relative to the left side of the output in pixels. A value of 10 would result in
            the captions starting 10 pixels from the left of the output. If no explicit
            xPosition is provided, the horizontal caption position will be determined by the
            alignment parameter. All burn-in and DVB-Sub font settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption
            relative to the top of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the top of the output. If no explicit yPosition is
            provided, the caption will be positioned towards the bottom of the output. All
            burn-in and DVB-Sub font settings must match.

          - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

            - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
            setting alignment to centered will place the captions at the bottom center of the
            output. Similarly, setting a left alignment will align captions to the bottom left
            of the output. If x and y positions are given in conjunction with the alignment
            parameter, the font will be justified (either left or centered) relative to those
            coordinates. Selecting "smart" justification will left-justify live subtitles and
            center-justify pre-recorded subtitles. This option is not valid for source captions
            that are STL or 608/embedded. These source settings are already pre-defined by the
            caption stream. All burn-in and DVB-Sub font settings must match.

            - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
            captions. All burn-in and DVB-Sub font settings must match.

            - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
            rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
            equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
            must match.

            - **Font** *(dict) --* External font file used for caption burn-in. File extension
            must be 'ttf' or 'tte'. Although the user can select output fonts for many
            different types of input captions, embedded, STL and teletext sources use a strict
            grid system. Using external fonts with these caption sources could cause unexpected
            display of proportional fonts. All burn-in and DVB-Sub font settings must match.

              - **PasswordParam** *(string) --* key used to extract the password from EC2
              Parameter store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
              file accessible to the Live system (eg. a http:// URI) depending on the output
              type. For example, a RTMP destination should have a uri simliar to:
              "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
            option is not valid for source captions that are STL, 608/embedded or teletext.
            These source settings are already pre-defined by the caption stream. All burn-in
            and DVB-Sub font settings must match.

            - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
            255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

            - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
            is 96 dpi. All burn-in and DVB-Sub font settings must match.

            - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
            size of the output. Giving a positive integer will specify the exact font size in
            points. All burn-in and DVB-Sub font settings must match.

            - **OutlineColor** *(string) --* Specifies font outline color. This option is not
            valid for source captions that are either 608/embedded or teletext. These source
            settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
            font settings must match.

            - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
            is not valid for source captions that are either 608/embedded or teletext. These
            source settings are already pre-defined by the caption stream. All burn-in and
            DVB-Sub font settings must match.

            - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
            captions. All burn-in and DVB-Sub font settings must match.

            - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
            opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it
            to 0 (transparent). All burn-in and DVB-Sub font settings must match.

            - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels to the left. All burn-in and DVB-Sub font settings must match.

            - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
            relative to the captions in pixels. A value of -2 would result in a shadow offset 2
            pixels above the text. All burn-in and DVB-Sub font settings must match.

            - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
            used to generate the output subtitles bitmap. Only applicable for Teletext inputs
            and DVB-Sub/Burn-in outputs.

            - **XPosition** *(integer) --* Specifies the horizontal position of the caption
            relative to the left side of the output in pixels. A value of 10 would result in
            the captions starting 10 pixels from the left of the output. If no explicit
            xPosition is provided, the horizontal caption position will be determined by the
            alignment parameter. This option is not valid for source captions that are STL,
            608/embedded or teletext. These source settings are already pre-defined by the
            caption stream. All burn-in and DVB-Sub font settings must match.

            - **YPosition** *(integer) --* Specifies the vertical position of the caption
            relative to the top of the output in pixels. A value of 10 would result in the
            captions starting 10 pixels from the top of the output. If no explicit yPosition is
            provided, the caption will be positioned towards the bottom of the output. This
            option is not valid for source captions that are STL, 608/embedded or teletext.
            These source settings are already pre-defined by the caption stream. All burn-in
            and DVB-Sub font settings must match.

          - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

          - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
          Destination Settings

          - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
          Settings

          - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
          Destination Settings

          - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

          - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

          - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

          - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

            - **StyleControl** *(string) --* When set to passthrough, passes through style and
            position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
            CFF-TT output or TTML output.

          - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

        - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
        http://www.loc.gov/standards/iso639-2/

        - **LanguageDescription** *(string) --* Human readable information to indicate captions
        available for players (eg. English, or Spanish).

        - **Name** *(string) --* Name of the caption description. Used to associate a caption
        description with an output. Names must be unique within an event.

    - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
    whole.

      - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
      Event.

      - **InputEndAction** *(string) --* Indicates the action to take when the current input
      completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
      restart at the beginning of the first input. When "none" is configured the encoder will
      transcode either black, a solid color, or a user specified slate images per the "Input
      Loss Behavior" configuration until the next input switch occurs (which is controlled
      through the Channel Schedule API).

      - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

        - **BlackFrameMsec** *(integer) --* Documentation update needed

        - **InputLossImageColor** *(string) --* When input loss image type is "color" this
        field specifies the color to use. Value: 6 hex characters representing the values of
        RGB.

        - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these
        fields specify the parameters for accessing the slate.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or
        a slate into the output after input loss exceeds blackFrameMsec.

        - **RepeatFrameMsec** *(integer) --* Documentation update needed

      - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
      PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to
      the other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each
      pipeline to the Unix epoch.

      - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by
      the Live encoder should be paced by its system clock (which optionally may be locked to
      another source via NTP) or should be locked to the clock of the source that is providing
      the input stream.

      - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
      very low video framerates. This is commonly set to enabled for music channels with less
      than one video frame per second.

    - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

      - *(dict) --* Output groups for this Live Event. Output groups contain information about
      where streams should be distributed.

        - **Name** *(string) --* Custom output group name optionally defined by the user. Only
        letters, numbers, and the underscore character allowed; only 32 characters allowed.

        - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

          - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

            - **Destination** *(dict) --* A directory and base filename where archive files
            should be written.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
            before closing and starting a new one.

          - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

            - **Destination** *(dict) --* The destination for the frame capture files. Either
            the URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
            s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
            container, plus a file name prefix (for example,
            mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
            the prefix from the destination field (for example, "curling_") + name modifier +
            the counter (5 digits, starting from 00001) + extension (which is always .jpg). For
            example, curlingLow.00001.jpg

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **HlsGroupSettings** *(dict) --* Hls Group Settings

            - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35
            signals through to this group of Apple HLS outputs.

              - *(string) --* Hls Ad Markers

            - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
            each output in the media .m3u8 file. Can be used if base manifest is delivered from
            a different URL than the main .m3u8 file.

            - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
            each output in the media .m3u8 file. Can be used if base manifest is delivered from
            a different URL than the main .m3u8 file.

            - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
            caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

              - *(dict) --* Maps a caption channel to an ISO 693-2 language code
              (http://www.loc.gov/standards/iso639-2), with an optional description.

                - **CaptionChannel** *(integer) --* The closed caption channel being described
                by this CaptionLanguageMapping. Each channel mapping must have a unique channel
                number (maximum of 4)

                - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                http://www.loc.gov/standards/iso639-2)

                - **LanguageDescription** *(string) --* Textual description of language

            - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
            captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least
            one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for
            each Language Code you specify. Make sure to specify the languages in the order in
            which they appear in the original source (if the source is embedded format) or the
            order of the caption selectors (if the source is other than embedded). Otherwise,
            languages in the manifest will not match up properly with the output captions.
            none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any
            CLOSED-CAPTIONS line from the manifest.

            - **ClientCache** *(string) --* When set to "disabled", sets the
            #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
            segments for later replay.

            - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the
            default RFC-4281) during m3u8 playlist generation.

            - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
            16-byte hex value represented by a 32-character text string. If ivSource is set to
            "explicit" then this parameter is required and is used as the IV for encryption.

            - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
            manifest files, and encryption keys (if enabled).

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **DirectoryStructure** *(string) --* Place segments in subdirectories.

            - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
            scheme. Exclude this parameter if no encryption is desired.

            - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

              - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                transfer encoding to Akamai. User should contact Akamai to enable this feature.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made
                before the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of
                seconds to wait until a restart is initiated. A value of 0 means never restart.

                - **Salt** *(string) --* Salt for authenticated Akamai.

                - **Token** *(string) --* Token parameter for authenticated akamai. If not
                specified, _gda_ is used.

              - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made
                before the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of
                seconds to wait until a restart is initiated. A value of 0 means never restart.

              - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **MediaStoreStorageClass** *(string) --* When set to temporal, output files
                are stored in non-persistent memory for faster reading and writing.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made
                before the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of
                seconds to wait until a restart is initiated. A value of 0 means never restart.

              - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the CDN if the connection is lost.

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                streaming outputs.

                - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                transfer encoding to WebDAV.

                - **NumRetries** *(integer) --* Number of retry attempts that will be made
                before the Live Event is put into an error state.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of
                seconds to wait until a restart is initiated. A value of 0 means never restart.

            - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
            manifest, but do create the master and media manifests (according to the Output
            Selection field). STANDARD: Create an I-frame-only manifest for each output that
            contains video, as well as the other manifests (according to the Output Selection
            field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
            I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
            position. For example, #EXT-X-BYTERANGE:160364@1461888"

            - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies
            the maximum number of segments in the media manifest file. After this maximum,
            older segments are removed from the media manifest. This number must be less than
            or equal to the Keep Segments field.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on
            input loss.

            - **IvInManifest** *(string) --* For use with encryptionType. The IV
            (Initialization Vector) is a 128-bit number used in conjunction with the key for
            encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the
            IV is not in the manifest.

            - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
            Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
            If this setting is "followsSegmentNumber", it will cause the IV to change every
            segment (to match the segment number). If this is set to "explicit", you must enter
            a constantIv value.

            - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
            number of media segments (.ts files) to retain in the destination directory.

            - **KeyFormat** *(string) --* The value specifies how the key is represented in the
            resource identified by the URI. If parameter is absent, an implicit value of
            "identity" is used. A reverse DNS string can also be given.

            - **KeyFormatVersions** *(string) --* Either a single positive integer version
            value or a slash delimited list of version values (1/2/3).

            - **KeyProviderSettings** *(dict) --* The key provider settings.

              - **StaticKeySettings** *(dict) --* Static Key Settings

                - **KeyProviderServer** *(dict) --* The URL of the license server used for
                protecting content.

                  - **PasswordParam** *(string) --* key used to extract the password from EC2
                  Parameter store

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                  to a file accessible to the Live system (eg. a http:// URI) depending on the
                  output type. For example, a RTMP destination should have a uri simliar to:
                  "rtmp://fmsserver/live".

                  - **Username** *(string) --* Documentation update needed

                - **StaticKeyValue** *(string) --* Static key value as a 32 character
                hexadecimal string.

            - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

            - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
            should use floating point or integer values for segment duration.

            - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
            looking ahead and back within the specified range for a nearby avail and extending
            the segment size if needed.

            - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
            the destination and manifest. If "live", only the number segments specified in
            keepSegments and indexNSegments are kept; newer segments replace older segments,
            which may prevent players from rewinding all the way to the beginning of the event.
            VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
            converting it to a "VOD" type manifest on completion of the stream.

            - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests
            (master manifest, if applicable, and media manifests) for this output group.
            SEGMENTSONLY: Does not generate any manifests for this output group.

            - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME
            tag in .m3u8 manifest files. The value is calculated as follows: either the program
            date and time are initialized using the input timecode source, or the time is
            initialized using the input timecode source and the date is initialized using the
            timestampOffset.

            - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
            EXT-X-PROGRAM-DATE-TIME entry, in seconds.

            - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
            each pipeline includes information about both pipelines: first its own media files,
            then the media files of the other pipeline. This feature allows playout device that
            support stale manifest detection to switch from one manifest to the other, when the
            current manifest seems to be stale. There are still two destinations and two master
            manifests, but both master manifests reference the media files from both pipelines.
            DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
            about its own pipeline only. For an HLS output group with MediaPackage as the
            destination, the DISABLED behavior is always followed. MediaPackage regenerates the
            manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

            - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
            create (in seconds). Note that segments will end on the next keyframe after this
            number of seconds, so actual segment length may be longer.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
            subdirectory before starting a new one. directoryStructure must be
            subdirectoryPerStream for this setting to have an effect.

            - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
            video in EXT-X-STREAM-INF tag of variant manifest.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

            - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
            offset to fine tune the timestamps.

            - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
            multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
            program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE
            tags to index segments for playback. A typical use for this value is when sending
            the output to AWS Elemental MediaConvert, which can accept only a single media
            file. Playback while the channel is running is not guaranteed due to HTTP server
            caching.

          - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

            - **Destination** *(dict) --* MediaPackage channel destination.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

          - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

            - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point
            Identity" element used in each message placed in the sparse track. Only enabled if
            sparseTrackType is not "none".

            - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an
            audio-only MS Smooth output, the fragment absolute time will be set to the current
            timecode. This option does not write timecodes to the audio elementary stream.

            - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
            certificate chain to a trusted Certificate Authority (CA). This will cause https
            outputs to self-signed certificates to fail.

            - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
            retrying connection to the IIS server if the connection is lost. Content will be
            cached during this time and the cache will be be delivered to the IIS server once
            the connection is re-established.

            - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
            Elemental Live acts as a "Push" encoder to IIS.

              - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
            only be specified if eventIdMode is set to useConfigured.

            - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
            IIS server. If no event ID is sent and the same Live Event is used without changing
            the publishing point, clients might see cached video from the previous run.
            Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" -
            generate and send an event ID based on the current timestamp - "noEventId" - do not
            send an event ID to the IIS server.

            - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
            server when stopping the event

            - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
            outputs.

            - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in
            seconds). Fragment length must be compatible with GOP size and framerate.

            - **InputLossAction** *(string) --* Parameter that control output group behavior on
            input loss.

            - **NumRetries** *(integer) --* Number of retry attempts.

            - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
            to output failure, due to exhausting the numRetries on one segment, or exceeding
            filecacheDuration.

            - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
            configured segment size is always used.

            - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from
            the second pipeline.

            - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
            to generate a sparse track in this group of MS-Smooth outputs.

            - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest
            so publishing point doesn't start until all streams start.

            - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
            timestampOffsetMode is set to useConfiguredOffset.

            - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
            useEventStartDate: Use the date the event was started as the offset -
            useConfiguredOffset: Use an explicitly configured date as the offset

          - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

            - **AuthenticationScheme** *(string) --* Authentication scheme to use when
            connecting with CDN

            - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills
            up. If remote origin server stalls the RTMP connection and does not accept content
            fast enough the 'Media Cache' will fill up. When the cache reaches the duration
            specified by cacheLength the cache will stop accepting new content. If set to
            disconnectImmediately, the RTMP output will force a disconnect. Clear the media
            cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
            output will wait up to 5 minutes to allow the origin server to begin accepting data
            again.

            - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
            buffer size.

            - **CaptionData** *(string) --* Controls the types of data that passes to
            onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
            passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but
            608 data from both fields will be passed. If set to 'field1608' then only the data
            carried in 608 from field 1 video will be passed.

            - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if
            input becomes unavailable. - emitOutput: Emit a slate until input returns. -
            pauseOutput: Stop transmitting data until input returns. This does not close the
            underlying RTMP connection.

            - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
            wait until a restart is initiated. A value of 0 means never restart.

          - **UdpGroupSettings** *(dict) --* Udp Group Settings

            - **InputLossAction** *(string) --* Specifies behavior of last resort when input
            video is lost, and no more backup inputs are available. When dropTs is selected the
            entire transport stream will stop being emitted. When dropProgram is selected the
            program can be dropped from the transport stream (and replaced with null packets to
            meet the TS bitrate requirement). Or, when emitProgram is chosen the transport
            stream will continue to be produced normally with repeat frames, black frames, or
            slate frames substituted for the absent input video.

            - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

            - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

        - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

          - *(dict) --* Output settings. There can be multiple outputs within a group.

            - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
            audio sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
            as caption sources for this output.

              - *(string) --* Placeholder documentation for __string

            - **OutputName** *(string) --* The name used to identify an output.

            - **OutputSettings** *(dict) --* Output type-specific settings.

              - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                - **ContainerSettings** *(dict) --* Settings specific to the container type of
                the file.

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream
                    is removed from the input. This allows the output audio configuration to
                    dynamically change based on input configuration. If this is set to
                    encodeSilence, all output audio streams will output encoded silence when
                    not connected to an active input stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                    muxing and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                    Captions in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                    for ARIB Captions will be auto-selected from unused pids. If set to
                    useConfigured, ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                    for Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                    for each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                    audio stream(s) in the transport stream. Multiple values are accepted, and
                    can be entered in ranges and/or by comma separation. Can be entered as
                    decimal or hexadecimal values. Each PID specified must be in the range of
                    32 (or 0x20)..8182 (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                    0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                    type = 0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                    bits per second. Setting to 0 lets the muxer automatically determine the
                    appropriate bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                    model for accurate interleaving. Setting to bufferModel to none can lead to
                    lower latency, but low-memory devices may not be able to play back the
                    stream without interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                    (NIT) at the specified table repetition interval.

                      - **NetworkId** *(integer) --* The numeric value placed in the Network
                      Information Table (NIT).

                      - **NetworkName** *(string) --* The network name text placed in the
                      networkNameDescriptor inside the Network Information Table. Maximum
                      length is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                    (SDT) at the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information
                      into output stream. The sdtFollow setting copies SDT information from
                      input stream to output stream. The sdtFollowIfPresent setting copies SDT
                      information from input stream to output stream if SDT information is
                      present in the input, otherwise it will fall back on the user-defined
                      values. The sdtManual setting means user will enter the SDT information.
                      The sdtNone setting means output stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed
                      in the serviceDescriptor in the Service Description Table. Maximum length
                      is 256 characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                    the specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                    DVB Teletext data to this output. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                    the input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                    selected, audio EBP markers will be added to partitions 3 and 4. The
                    interval between these additional markers will be fixed, and will be
                    slightly shorter than the video EBP marker interval. Only available when
                    EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                    always follow the video interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                    Boundary Points do not come within the specified time interval of each
                    other by looking ahead at input video. If another EBP is going to come in
                    within the specified time interval, the current EBP is not emitted, and the
                    segment is "stretched" to the next marker. The lookahead value does not add
                    latency to the system. The Live Event must be configured elsewhere to
                    create sufficient latency to make the lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                    If set to videoAndAudioPids, EBP markers will be placed on the video PID
                    and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                    the video PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                    PES header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Platform data to this output. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment.
                    Only used with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                    input source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                    KLV data to this output. Multiple values are accepted, and can be entered
                    in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a
                    downstream encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between
                    instances of this table in the output transport stream. Valid values are 0,
                    10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                    Clock Reference value is inserted for every Packetized Elementary Stream
                    (PES) header. This parameter is effective only when the PCR PID is the same
                    as the video or audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                    Clock Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                    Reference (PCR) in the transport stream. When no value is given, the
                    encoder will assign the same value as the Video PID. Can be entered as a
                    decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                    0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between
                    instances of this table in the output transport stream. Valid values are 0,
                    10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                    Table (PMT) in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in
                    the Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                    SCTE-27 data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                    input source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                    each segmentationTime period. raiSegstart sets the Random Access Indicator
                    bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                    timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                    at the start of segments. ebp adds Encoder Boundary Point information to
                    the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                    ebpLegacy adds Encoder Boundary Point information to the adaptation field
                    using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter
                    controls how segmentation markers are inserted into the transport stream.
                    With avails, it is possible that segments may be truncated, which can
                    influence where future segmentation markers are inserted. When a
                    segmentation style of "resetCadence" is selected and a segment is truncated
                    due to an avail, we will reset the segmentation cadence. This means the
                    subsequent segment will have a duration of $segmentationTime seconds. When
                    a segmentation style of "maintainCadence" is selected and a segment is
                    truncated due to an avail, we will not reset the segmentation cadence. This
                    means the subsequent segment will likely be truncated as well. However, all
                    segments after that will have a duration of $segmentationTime seconds. Note
                    that EBP lookahead is a slight exception to this rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                    metadata will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID
                    field in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                    video stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Extension** *(string) --* Output file extension. If excluded, this will be
                auto-selected from the container type.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Required for multiple outputs of the same type.

              - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                - **NameModifier** *(string) --* Required if the output group contains more
                than one output. This modifier forms part of the output file name.

              - **HlsOutputSettings** *(dict) --* Hls Output Settings

                - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                settings are different for audio-only outputs.

                  - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                    - **AudioGroupId** *(string) --* Specifies the group to which the audio
                    Rendition belongs.

                    - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                    to use as the cover art for an audio-only output. We recommend a low
                    bit-size file because the image increases the output audio bandwidth. The
                    image is attached to the audio as an ID3 tag, frame type APIC, picture type
                    0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.

                      - **PasswordParam** *(string) --* key used to extract the password from
                      EC2 Parameter store

                      - **Uri** *(string) --* Uniform Resource Identifier - This should be a
                      path to a file accessible to the Live system (eg. a http:// URI)
                      depending on the output type. For example, a RTMP destination should have
                      a uri simliar to: "rtmp://fmsserver/live".

                      - **Username** *(string) --* Documentation update needed

                    - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                    supported: Audio-Only Variant Stream The client can play back this
                    audio-only stream instead of video in low-bandwidth scenarios. Represented
                    as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select,
                    Default Alternate rendition that the client should try to play back by
                    default. Represented as an EXT-X-MEDIA in the HLS manifest with
                    DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default
                    Alternate rendition that the client may try to play back by default.
                    Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO,
                    AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that
                    the client will not try to play back by default. Represented as an
                    EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO

                  - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                    - **AudioRenditionSets** *(string) --* List all the audio groups that are
                    used with the video output stream. Input all the audio GROUP-IDs that are
                    associated to the video, separate by ','.

                    - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to
                      insert for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                      audio stream(s) in the transport stream. Multiple values are accepted,
                      and can be entered in ranges and/or by comma separation. Can be entered
                      as decimal or hexadecimal values.

                      - **EcmPid** *(string) --* This parameter is unused and deprecated.

                      - **PatInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. A value of
                      \\"0\\" writes out the PMT once per segment file.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                      Clock Reference value is inserted for every Packetized Elementary Stream
                      (PES) header. This parameter is effective only when the PCR PID is the
                      same as the video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between
                      Program Clock References (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the
                      encoder will assign the same value as the Video PID. Can be entered as a
                      decimal or hexadecimal value.

                      - **PmtInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. A value of
                      \\"0\\" writes out the PMT once per segment file.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                      Table (PMT) in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                      - **ProgramNum** *(integer) --* The value of the program number field in
                      the Program Map Table.

                      - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                      SCTE-35 signals from the input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35
                      stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata is passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream
                      ID field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                      video stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Accepts \\"Format
                Identifiers\\":#formatIdentifierParameters.

                - **SegmentModifier** *(string) --* String concatenated to end of segment
                filenames.

              - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

              - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                - **H265PackagingType** *(string) --* Only applicable when this output is
                referencing an H.265 video description. Specifies whether MP4 segments should
                be packaged as HEV1 or HVC1.

                - **NameModifier** *(string) --* String concatenated to the end of the
                destination filename. Required for multiple outputs of the same type.

              - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the
                tls certificate chain to a trusted Certificate Authority (CA). This will cause
                rtmps outputs with self-signed certificates to fail.

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying a connection to the Flash Media server if the connection is lost.

                - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                rtmp://host/appname). For connection to Akamai, a username and password must be
                supplied. URI fields accept format identifiers.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **NumRetries** *(integer) --* Number of retry attempts.

              - **UdpOutputSettings** *(dict) --* Udp Output Settings

                - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                values increase latency through the transcoder but simultaneously assist the
                transcoder in maintaining a constant, low-jitter UDP/RTP output while
                accommodating clock recovery, input switching, input disruptions, picture
                reordering, etc.

                - **ContainerSettings** *(dict) --* Udp Container Settings

                  - **M2tsSettings** *(dict) --* M2ts Settings

                    - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                    streams will be removed from the program if the selected input audio stream
                    is removed from the input. This allows the output audio configuration to
                    dynamically change based on input configuration. If this is set to
                    encodeSilence, all output audio streams will output encoded silence when
                    not connected to an active input stream.

                    - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                    muxing and removes video descriptor.

                    - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                    Captions in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                    for ARIB Captions will be auto-selected from unused pids. If set to
                    useConfigured, ARIB Captions will be on the configured pid number.

                    - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                    for Dolby Digital audio. When set to atsc, the ATSC model is used.

                    - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                    for each PES packet.

                    - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                    audio stream(s) in the transport stream. Multiple values are accepted, and
                    can be entered in ranges and/or by comma separation. Can be entered as
                    decimal or hexadecimal values. Each PID specified must be in the range of
                    32 (or 0x20)..8182 (or 0x1ff6).

                    - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                    0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                    type = 0x06.

                    - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                    bits per second. Setting to 0 lets the muxer automatically determine the
                    appropriate bitrate.

                    - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                    model for accurate interleaving. Setting to bufferModel to none can lead to
                    lower latency, but low-memory devices may not be able to play back the
                    stream without interruptions.

                    - **CcDescriptor** *(string) --* When set to enabled, generates
                    captionServiceDescriptor in PMT.

                    - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                    (NIT) at the specified table repetition interval.

                      - **NetworkId** *(integer) --* The numeric value placed in the Network
                      Information Table (NIT).

                      - **NetworkName** *(string) --* The network name text placed in the
                      networkNameDescriptor inside the Network Information Table. Maximum
                      length is 256 characters.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                    (SDT) at the specified table repetition interval.

                      - **OutputSdt** *(string) --* Selects method of inserting SDT information
                      into output stream. The sdtFollow setting copies SDT information from
                      input stream to output stream. The sdtFollowIfPresent setting copies SDT
                      information from input stream to output stream if SDT information is
                      present in the input, otherwise it will fall back on the user-defined
                      values. The sdtManual setting means user will enter the SDT information.
                      The sdtNone setting means output stream will not contain SDT information.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                      - **ServiceName** *(string) --* The service name placed in the
                      serviceDescriptor in the Service Description Table. Maximum length is 256
                      characters.

                      - **ServiceProviderName** *(string) --* The service provider name placed
                      in the serviceDescriptor in the Service Description Table. Maximum length
                      is 256 characters.

                    - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                    Subtitle data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                    the specified table repetition interval.

                      - **RepInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream.

                    - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                    DVB Teletext data to this output. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                    the input source to this output.

                    - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                    selected, audio EBP markers will be added to partitions 3 and 4. The
                    interval between these additional markers will be fixed, and will be
                    slightly shorter than the video EBP marker interval. Only available when
                    EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                    always follow the video interval.

                    - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                    Boundary Points do not come within the specified time interval of each
                    other by looking ahead at input video. If another EBP is going to come in
                    within the specified time interval, the current EBP is not emitted, and the
                    segment is "stretched" to the next marker. The lookahead value does not add
                    latency to the system. The Live Event must be configured elsewhere to
                    create sufficient latency to make the lookahead accurate.

                    - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                    If set to videoAndAudioPids, EBP markers will be placed on the video PID
                    and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                    the video PID.

                    - **EcmPid** *(string) --* This field is unused and deprecated.

                    - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                    PES header.

                    - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Platform data to this output. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                    ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                    value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **FragmentTime** *(float) --* The length in seconds of each fragment.
                    Only used with EBP markers.

                    - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                    input source to this output.

                    - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                    KLV data to this output. Multiple values are accepted, and can be entered
                    in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                    packets to insert into the transport stream. This can be used if a
                    downstream encryption system requires periodic null packets.

                    - **PatInterval** *(integer) --* The number of milliseconds between
                    instances of this table in the output transport stream. Valid values are 0,
                    10..1000.

                    - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                    Clock Reference value is inserted for every Packetized Elementary Stream
                    (PES) header. This parameter is effective only when the PCR PID is the same
                    as the video or audio elementary stream.

                    - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                    Clock Reference (PCRs) inserted into the transport stream.

                    - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                    Reference (PCR) in the transport stream. When no value is given, the
                    encoder will assign the same value as the Video PID. Can be entered as a
                    decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                    0x1ff6).

                    - **PmtInterval** *(integer) --* The number of milliseconds between
                    instances of this table in the output transport stream. Valid values are 0,
                    10..1000.

                    - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                    Table (PMT) in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **ProgramNum** *(integer) --* The value of the program number field in
                    the Program Map Table.

                    - **RateMode** *(string) --* When vbr, does not insert null packets into
                    transport stream to fill specified bitrate. The bitrate setting acts as the
                    maximum bitrate when vbr is set.

                    - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                    SCTE-27 data to this output. Multiple values are accepted, and can be
                    entered in ranges and/or by comma separation. Can be entered as decimal or
                    hexadecimal values. Each PID specified must be in the range of 32 (or
                    0x20)..8182 (or 0x1ff6).

                    - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                    input source to this output.

                    - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                    in the transport stream. Can be entered as a decimal or hexadecimal value.
                    Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                    each segmentationTime period. raiSegstart sets the Random Access Indicator
                    bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                    timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                    at the start of segments. ebp adds Encoder Boundary Point information to
                    the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                    ebpLegacy adds Encoder Boundary Point information to the adaptation field
                    using a legacy proprietary format.

                    - **SegmentationStyle** *(string) --* The segmentation style parameter
                    controls how segmentation markers are inserted into the transport stream.
                    With avails, it is possible that segments may be truncated, which can
                    influence where future segmentation markers are inserted. When a
                    segmentation style of "resetCadence" is selected and a segment is truncated
                    due to an avail, we will reset the segmentation cadence. This means the
                    subsequent segment will have a duration of $segmentationTime seconds. When
                    a segmentation style of "maintainCadence" is selected and a segment is
                    truncated due to an avail, we will not reset the segmentation cadence. This
                    means the subsequent segment will likely be truncated as well. However, all
                    segments after that will have a duration of $segmentationTime seconds. Note
                    that EBP lookahead is a slight exception to this rule.

                    - **SegmentationTime** *(float) --* The length in seconds of each segment.
                    Required unless markers is set to None_.

                    - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                    metadata will be passed through from input to output.

                    - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                    metadata stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **TransportStreamId** *(integer) --* The value of the transport stream ID
                    field in the Program Map Table.

                    - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                    video stream in the transport stream. Can be entered as a decimal or
                    hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                - **Destination** *(dict) --* Destination address and port number for RTP or
                UDP packets. Can be unicast or multicast RTP or UDP (eg.
                rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                Error Correction on UDP outputs.

                  - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                  the FEC protection matrix. The number of transport stream packets per column
                  error correction packet. Must be between 4 and 20, inclusive.

                  - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                  - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of
                  the FEC protection matrix. Must be between 1 and 20, inclusive. If only
                  Column FEC is used, then larger values increase robustness. If Row FEC is
                  used, then this is the number of transport stream packets per row error
                  correction packet, and the value must be between 4 and 20, inclusive, if
                  includeFec is columnAndRow. If includeFec is column, this value must be 1 to
                  20, inclusive.

            - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as
            the source for this output.

    - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
    information from inputs.

      - **Source** *(string) --* Identifies the source for the timecode that will be associated
      with the events outputs. -Embedded (embedded): Initialize the output timecode with
      timecode from the the source. If no embedded timecode is detected in the source, the
      system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the
      UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be
      00:00:00:00.

      - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
      resynchronized to the input timecode. Discrepancies below this threshold are permitted to
      avoid unnecessary discontinuities in the output timecode. No timecode sync when this is
      not specified.

    - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

      - *(dict) --* Video settings for this stream.

        - **CodecSettings** *(dict) --* Video codec settings.

          - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

            - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
            frames for inclusion in the output. For example, "10" means capture a frame every
            10 seconds.

          - **H264Settings** *(dict) --* H264 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input
            AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
            AFD value will be the value configured in the fixedAfd parameter.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
            output must have a unique value when its bitrate is rounded down to the nearest
            multiple of 1000.

            - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
            filled (HRD buffer model).

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
              space conversion to the output

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
            Main or High profile) or cavlc.

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
            the output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
            frame to reduce flicker or 'pop' on I-frames.

            - **FramerateControl** *(string) --* This field indicates how the output video
            frame rate is specified. If "specified" is selected then the output video frame
            rate is determined by framerateNumerator and framerateDenominator, else if
            "initializeFromSource" is selected then the output video frame rate will be set
            equal to the input video frame rate of the first input.

            - **FramerateDenominator** *(integer) --* Framerate denominator.

            - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
            fraction, e.g. 24000 / 1001 = 23.976 fps.

            - **GopBReference** *(string) --* Documentation update needed

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining
            mid-stream will receive an IDR frame as quickly as possible. Setting this value to
            0 will break output segmenting.

            - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
            or seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run
            time.

            - **Level** *(string) --* H.264 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
            decrease latency and memory usage, while high can produce better quality for
            certain content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
            VBR: Set the maximum bitrate in order to accommodate expected spikes in the
            complexity of the video.

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
            enabled. Enforces separation between repeated (cadence) I-frames and I-frames
            inserted by Scene Change Detection. If a scene change I-frame is within I-interval
            frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
            I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
            normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
            Min-I-interval - 1

            - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
            may use more than requested if using B-frames and/or interlaced encoding.

            - **ParControl** *(string) --* This field indicates how the output pixel aspect
            ratio is specified. If "specified" is selected then the output video pixel aspect
            ratio is determined by parNumerator and parDenominator, else if
            "initializeFromSource" is selected then the output pixsel aspect ratio will be set
            equal to the input video pixel aspect ratio of the first input.

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.264 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
            encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
            quality level field and Max bitrate field that suit your most important viewing
            devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
            bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
            Quality level: 6. Max bitrate: 1M to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate.
            Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
            vary, depending on the video complexity. Recommended instead of QVBR if you want to
            maintain a specific average bitrate over the duration of the channel. CBR: Quality
            varies, depending on the video complexity. Recommended only if you distribute your
            assets to devices that cannot handle variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
            I-frames when scene change is detected. - Off: does not force an I-frame when scene
            change is detected.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or
            equal to the number of macroblock rows for progressive pictures, and less than or
            equal to half the number of macroblock rows for interlaced pictures. This field is
            optional; when no value is specified the encoder will choose the number of slices
            based on encode resolution.

            - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
            reduce high-frequency content in the encoded image.

            - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
            frame based on spatial variation of content complexity.

            - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
            sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
            to improve visual quality.

            - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

            - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
            frame based on temporal variation of content complexity.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
            into the video elementary stream. - 'disabled': Do not include timecodes -
            'picTimingSei': Pass through picture timing SEI messages from the source specified
            in Timecode Config

          - **H265Settings** *(dict) --* H265 Settings

            - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
            quantizers to vary to improve visual quality.

            - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
            output stream. If afdSignaling is "auto", the system will try to preserve the input
            AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
            AFD value will be the value configured in the fixedAfd parameter.

            - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
            Alternative Transfer Function SEI message to support backwards compatibility with
            non-HDR decoders and displays.

            - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
            control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
            output must have a unique value when its bitrate is rounded down to the nearest
            multiple of 1000.

            - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

            - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

            - **ColorSpaceSettings** *(dict) --* Color Space settings

              - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
              space conversion to the output

              - **Hdr10Settings** *(dict) --* Hdr10 Settings

                - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
                value defining the maximum light level, in nits, of any single pixel within an
                encoded HDR video stream or file.

                - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                metadata value defining the maximum average light level, in nits, for any
                single frame within an encoded HDR video stream or file.

              - **Rec601Settings** *(dict) --* Rec601 Settings

              - **Rec709Settings** *(dict) --* Rec709 Settings

            - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
            the output stream. Only valid when afdSignaling is set to 'Fixed'.

            - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
            frame to reduce flicker or 'pop' on I-frames.

            - **FramerateDenominator** *(integer) --* Framerate denominator.

            - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
            fraction, e.g. 24000 / 1001 = 23.976 fps.

            - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
            applications, it is recommended that this be set to 1 so a decoder joining
            mid-stream will receive an IDR frame as quickly as possible. Setting this value to
            0 will break output segmenting.

            - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
            or seconds per gopSizeUnits. Must be greater than zero.

            - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
            seconds. If seconds the system will convert the gopSize into a frame count at run
            time.

            - **Level** *(string) --* H.265 Level.

            - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
            decrease latency and memory usage, while high can produce better quality for
            certain content.

            - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

            - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
            enabled. Enforces separation between repeated (cadence) I-frames and I-frames
            inserted by Scene Change Detection. If a scene change I-frame is within I-interval
            frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
            I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
            normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
            Min-I-interval - 1

            - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

            - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

            - **Profile** *(string) --* H.265 Profile.

            - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
            encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
            quality level field and Max bitrate field that suit your most important viewing
            devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
            bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
            Quality level: 6. Max bitrate: 1M to 1.5M

            - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
            specified quality level except when it is constrained by the maximum bitrate.
            Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
            depending on the video complexity. Recommended only if you distribute your assets
            to devices that cannot handle variable bitrates.

            - **ScanType** *(string) --* Sets the scan type of the output to progressive or
            top-field-first interlaced.

            - **SceneChangeDetect** *(string) --* Scene change detection.

            - **Slices** *(integer) --* Number of slices per picture. Must be less than or
            equal to the number of macroblock rows for progressive pictures, and less than or
            equal to half the number of macroblock rows for interlaced pictures. This field is
            optional; when no value is specified the encoder will choose the number of slices
            based on encode resolution.

            - **Tier** *(string) --* H.265 Tier.

            - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
            into the video elementary stream. - 'disabled': Do not include timecodes -
            'picTimingSei': Pass through picture timing SEI messages from the source specified
            in Timecode Config

        - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
        most codecs, you can leave this field and width blank in order to use the height and
        width (resolution) from the source. Note, however, that leaving blank is not
        recommended. For the Frame Capture codec, height and width are required.

        - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name
        to uniquely identify this Description. Description names should be unique within this
        Live Event.

        - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the
        input stream. RESPOND causes input video to be clipped, depending on the AFD value,
        input display aspect ratio, and output display aspect ratio, and (except for
        FRAMECAPTURE codec) includes the values in the output. PASSTHROUGH (does not apply to
        FRAMECAPTURE codec) ignores the AFD values and includes the values in the output, so
        input video is not clipped. NONE ignores the AFD values and does not include the values
        through to the output, so input video is not clipped.

        - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
        stretch the video to the specified output resolution (height and width). This option
        will override any position value. DEFAULT may insert black boxes (pillar boxes or
        letter boxes) around the video to provide the specified output resolution.

        - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
        scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
        for most content.

        - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
        most codecs, you can leave this field and height blank in order to use the height and
        width (resolution) from the source. Note, however, that leaving blank is not
        recommended. For the Frame Capture codec, height and width are required.
    """


_ClientUpdateChannelResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    {"HlsInputSettings": Dict[str, Any], "ServerValidation": str},
    total=False,
)


class ClientUpdateChannelResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef(
    _ClientUpdateChannelResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelInputAttachmentsInputSettings` `NetworkInputSettings`

    - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
    HLS manifest.

      - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
      BANDWIDTH that most closely matches this value will be chosen, otherwise the
      highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
      bits per second, as in an HLS manifest.

      - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
      begin this many buffer segments from the end (most recently written segment). When
      not specified, the HLS input will begin with the first segment specified in the
      m3u8.

      - **Retries** *(integer) --* The number of consecutive times that attempts to read
      a manifest or segment must fail before the input is considered unavailable.

      - **RetryInterval** *(integer) --* The number of seconds between retries when an
      attempt to read a manifest or segment fails.

    - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
    checkCryptographyOnly, cryptography in the certificate will be checked, but not the
    server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
    name) do not strictly match the corresponding certificate's wildcard pattern and
    would otherwise cause the event to error. This setting is ignored for protocols that
    do not use https.
    """


_ClientUpdateChannelResponseChannelInputAttachmentsInputSettingsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelInputAttachmentsInputSettingsTypeDef",
    {
        "AudioSelectors": List[Any],
        "CaptionSelectors": List[Any],
        "DeblockFilter": str,
        "DenoiseFilter": str,
        "FilterStrength": int,
        "InputFilter": str,
        "NetworkInputSettings": ClientUpdateChannelResponseChannelInputAttachmentsInputSettingsNetworkInputSettingsTypeDef,
        "SourceEndBehavior": str,
        "VideoSelector": Dict[str, Any],
    },
    total=False,
)


class ClientUpdateChannelResponseChannelInputAttachmentsInputSettingsTypeDef(
    _ClientUpdateChannelResponseChannelInputAttachmentsInputSettingsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannelInputAttachments` `InputSettings`

    - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
    that have multiple available.

      - *(dict) --* Audio Selector

        - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
        this name to uniquely identify this Selector. Selector names should be unique per
        input.

        - **SelectorSettings** *(dict) --* The audio selector settings.

          - **AudioLanguageSelection** *(dict) --* Audio Language Selection

            - **LanguageCode** *(string) --* Selects a specific three-letter language code
            from within an audio source.

            - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
            stream demux strictly identifies audio streams by their language descriptor. If
            a PMT update occurs such that an audio stream matching the initially selected
            language is no longer present then mute will be encoded until the language
            returns. If "loose", then on a PMT update the demux will choose another audio
            stream in the program with the same stream type if it can't find one with the
            same language.

          - **AudioPidSelection** *(dict) --* Audio Pid Selection

            - **Pid** *(integer) --* Selects a specific PID from within a source.

    - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
    that have multiple available.

      - *(dict) --* Output groups for this Live Event. Output groups contain information
      about where streams should be distributed.

        - **LanguageCode** *(string) --* When specified this field indicates the three
        letter language code of the caption track to extract from the source.

        - **Name** *(string) --* Name identifier for a caption selector. This name is used
        to associate this caption selector with one or more caption descriptions. Names
        must be unique within an event.

        - **SelectorSettings** *(dict) --* Caption selector settings.

          - **AribSourceSettings** *(dict) --* Arib Source Settings

          - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

            - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
            PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
            is passed through, regardless of selectors.

          - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
            through via the "608 compatibility bytes" fields of the 708 wrapper as well as
            translated into 708. 708 data present in the source content will be discarded.

            - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
            intermittent and/or non-aligned SCTE-20 and Embedded captions.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
            number within the video track from which to extract captions. Unused for
            passthrough.

            - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

          - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
            through via the "608 compatibility bytes" fields of the 708 wrapper as well as
            translated into 708. 708 data present in the source content will be discarded.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
            number within the video track from which to extract captions. Unused for
            passthrough.

          - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

            - **Pid** *(integer) --* The pid field is used in conjunction with the caption
            selector languageCode field as follows: - Specify PID and Language: Extracts
            captions from that PID; the language is "informational". - Specify PID and omit
            Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
            the specified language, whichever PID that happens to be. - Omit PID and omit
            Language: Valid only if source is DVB-Sub that is being passed through; all
            languages will be passed through.

          - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

            - **PageNumber** *(string) --* Specifies the teletext page number within the
            data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
            (2303). Unused for passthrough. Should be specified as a hexadecimal string
            with no "0x" prefix.

    - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

    - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

    - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
    to 5 (strongest).

    - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
    the deblocking filter enabled by default. 1) auto - filtering will be applied depending
    on input type/quality 2) disabled - no filtering will be applied to the input 3) forced
    - filtering will be applied regardless of input type

    - **NetworkInputSettings** *(dict) --* Input settings.

      - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
      HLS manifest.

        - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
        BANDWIDTH that most closely matches this value will be chosen, otherwise the
        highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
        bits per second, as in an HLS manifest.

        - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
        begin this many buffer segments from the end (most recently written segment). When
        not specified, the HLS input will begin with the first segment specified in the
        m3u8.

        - **Retries** *(integer) --* The number of consecutive times that attempts to read
        a manifest or segment must fail before the input is considered unavailable.

        - **RetryInterval** *(integer) --* The number of seconds between retries when an
        attempt to read a manifest or segment fails.

      - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
      checkCryptographyOnly, cryptography in the certificate will be checked, but not the
      server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
      name) do not strictly match the corresponding certificate's wildcard pattern and
      would otherwise cause the event to error. This setting is ignored for protocols that
      do not use https.

    - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
    input to be streamed indefinitely.

    - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
    input types that have multiple available.

      - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
      works in tandem with colorSpaceUsage and a video description's
      colorSpaceSettingsChoice to determine if any conversion will be performed.

      - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
      follow. This field controls how the value in the colorSpace field will be used.
      fallback means that when the input does include color space data, that data will be
      used, but when the input has no color space data, the value in colorSpace will be
      used. Choose fallback if your input is sometimes missing color space data, but when
      it does have color space data, that data is correct. force means to always use the
      value in colorSpace. Choose force if your input usually has no color space data or
      might have unreliable color space data.

      - **SelectorSettings** *(dict) --* The video selector settings.

        - **VideoSelectorPid** *(dict) --* Video Selector Pid

          - **Pid** *(integer) --* Selects a specific PID from within a video source.

        - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

          - **ProgramId** *(integer) --* Selects a specific program from within a
          multi-program transport stream. If the program doesn't exist, the first program
          within the transport stream will be selected by default.
    """


_ClientUpdateChannelResponseChannelInputAttachmentsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelInputAttachmentsTypeDef",
    {
        "InputAttachmentName": str,
        "InputId": str,
        "InputSettings": ClientUpdateChannelResponseChannelInputAttachmentsInputSettingsTypeDef,
    },
    total=False,
)


class ClientUpdateChannelResponseChannelInputAttachmentsTypeDef(
    _ClientUpdateChannelResponseChannelInputAttachmentsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannel` `InputAttachments`

    - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
    required if the user wants to use this input in an input switch action.

    - **InputId** *(string) --* The ID of the input

    - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

      - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
      that have multiple available.

        - *(dict) --* Audio Selector

          - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
          this name to uniquely identify this Selector. Selector names should be unique per
          input.

          - **SelectorSettings** *(dict) --* The audio selector settings.

            - **AudioLanguageSelection** *(dict) --* Audio Language Selection

              - **LanguageCode** *(string) --* Selects a specific three-letter language code
              from within an audio source.

              - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
              stream demux strictly identifies audio streams by their language descriptor. If
              a PMT update occurs such that an audio stream matching the initially selected
              language is no longer present then mute will be encoded until the language
              returns. If "loose", then on a PMT update the demux will choose another audio
              stream in the program with the same stream type if it can't find one with the
              same language.

            - **AudioPidSelection** *(dict) --* Audio Pid Selection

              - **Pid** *(integer) --* Selects a specific PID from within a source.

      - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
      that have multiple available.

        - *(dict) --* Output groups for this Live Event. Output groups contain information
        about where streams should be distributed.

          - **LanguageCode** *(string) --* When specified this field indicates the three
          letter language code of the caption track to extract from the source.

          - **Name** *(string) --* Name identifier for a caption selector. This name is used
          to associate this caption selector with one or more caption descriptions. Names
          must be unique within an event.

          - **SelectorSettings** *(dict) --* Caption selector settings.

            - **AribSourceSettings** *(dict) --* Arib Source Settings

            - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

              - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
              PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
              is passed through, regardless of selectors.

            - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
              through via the "608 compatibility bytes" fields of the 708 wrapper as well as
              translated into 708. 708 data present in the source content will be discarded.

              - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
              intermittent and/or non-aligned SCTE-20 and Embedded captions.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
              number within the video track from which to extract captions. Unused for
              passthrough.

              - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

            - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
              through via the "608 compatibility bytes" fields of the 708 wrapper as well as
              translated into 708. 708 data present in the source content will be discarded.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
              number within the video track from which to extract captions. Unused for
              passthrough.

            - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

              - **Pid** *(integer) --* The pid field is used in conjunction with the caption
              selector languageCode field as follows: - Specify PID and Language: Extracts
              captions from that PID; the language is "informational". - Specify PID and omit
              Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
              the specified language, whichever PID that happens to be. - Omit PID and omit
              Language: Valid only if source is DVB-Sub that is being passed through; all
              languages will be passed through.

            - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

              - **PageNumber** *(string) --* Specifies the teletext page number within the
              data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
              (2303). Unused for passthrough. Should be specified as a hexadecimal string
              with no "0x" prefix.

      - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

      - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

      - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
      to 5 (strongest).

      - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
      the deblocking filter enabled by default. 1) auto - filtering will be applied depending
      on input type/quality 2) disabled - no filtering will be applied to the input 3) forced
      - filtering will be applied regardless of input type

      - **NetworkInputSettings** *(dict) --* Input settings.

        - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
        HLS manifest.

          - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
          BANDWIDTH that most closely matches this value will be chosen, otherwise the
          highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
          bits per second, as in an HLS manifest.

          - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
          begin this many buffer segments from the end (most recently written segment). When
          not specified, the HLS input will begin with the first segment specified in the
          m3u8.

          - **Retries** *(integer) --* The number of consecutive times that attempts to read
          a manifest or segment must fail before the input is considered unavailable.

          - **RetryInterval** *(integer) --* The number of seconds between retries when an
          attempt to read a manifest or segment fails.

        - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
        checkCryptographyOnly, cryptography in the certificate will be checked, but not the
        server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
        name) do not strictly match the corresponding certificate's wildcard pattern and
        would otherwise cause the event to error. This setting is ignored for protocols that
        do not use https.

      - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
      input to be streamed indefinitely.

      - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
      input types that have multiple available.

        - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
        works in tandem with colorSpaceUsage and a video description's
        colorSpaceSettingsChoice to determine if any conversion will be performed.

        - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
        follow. This field controls how the value in the colorSpace field will be used.
        fallback means that when the input does include color space data, that data will be
        used, but when the input has no color space data, the value in colorSpace will be
        used. Choose fallback if your input is sometimes missing color space data, but when
        it does have color space data, that data is correct. force means to always use the
        value in colorSpace. Choose force if your input usually has no color space data or
        might have unreliable color space data.

        - **SelectorSettings** *(dict) --* The video selector settings.

          - **VideoSelectorPid** *(dict) --* Video Selector Pid

            - **Pid** *(integer) --* Selects a specific PID from within a video source.

          - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

            - **ProgramId** *(integer) --* Selects a specific program from within a
            multi-program transport stream. If the program doesn't exist, the first program
            within the transport stream will be selected by default.
    """


_ClientUpdateChannelResponseChannelInputSpecificationTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelInputSpecificationTypeDef",
    {"Codec": str, "MaximumBitrate": str, "Resolution": str},
    total=False,
)


class ClientUpdateChannelResponseChannelInputSpecificationTypeDef(
    _ClientUpdateChannelResponseChannelInputSpecificationTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannel` `InputSpecification`

    - **Codec** *(string) --* Input codec

    - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

    - **Resolution** *(string) --* Input resolution, categorized coarsely
    """


_ClientUpdateChannelResponseChannelPipelineDetailsTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelPipelineDetailsTypeDef",
    {
        "ActiveInputAttachmentName": str,
        "ActiveInputSwitchActionName": str,
        "PipelineId": str,
    },
    total=False,
)


class ClientUpdateChannelResponseChannelPipelineDetailsTypeDef(
    _ClientUpdateChannelResponseChannelPipelineDetailsTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponseChannel` `PipelineDetails`

    - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
    currently being ingested by this pipeline.

    - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
    action that occurred most recently and that resulted in the switch to the current input
    attachment for this pipeline.

    - **PipelineId** *(string) --* Pipeline ID
    """


_ClientUpdateChannelResponseChannelTypeDef = TypedDict(
    "_ClientUpdateChannelResponseChannelTypeDef",
    {
        "Arn": str,
        "ChannelClass": str,
        "Destinations": List[Any],
        "EgressEndpoints": List[
            ClientUpdateChannelResponseChannelEgressEndpointsTypeDef
        ],
        "EncoderSettings": ClientUpdateChannelResponseChannelEncoderSettingsTypeDef,
        "Id": str,
        "InputAttachments": List[
            ClientUpdateChannelResponseChannelInputAttachmentsTypeDef
        ],
        "InputSpecification": ClientUpdateChannelResponseChannelInputSpecificationTypeDef,
        "LogLevel": str,
        "Name": str,
        "PipelineDetails": List[
            ClientUpdateChannelResponseChannelPipelineDetailsTypeDef
        ],
        "PipelinesRunningCount": int,
        "RoleArn": str,
        "State": str,
        "Tags": Dict[str, str],
    },
    total=False,
)


class ClientUpdateChannelResponseChannelTypeDef(
    _ClientUpdateChannelResponseChannelTypeDef
):
    """
    Type definition for `ClientUpdateChannelResponse` `Channel`

    - **Arn** *(string) --* The unique arn of the channel.

    - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two
    pipelines or SINGLE_PIPELINE for a channel with one pipeline.

    - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there
    is one destination per output. For other types (HLS, for example), there is one destination
    per packager.

      - *(dict) --* Placeholder documentation for OutputDestination

        - **Id** *(string) --* User-specified id. This is used in an output group or an output.

        - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output;
        one destination for both encoders.

          - *(dict) --* MediaPackage Output Destination Settings

            - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the
            destination for this output group. You do not need to specify the individual inputs
            in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines
            to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must
            be in the same region.

        - **Settings** *(list) --* Destination settings for a standard output; one destination
        for each redundant encoder.

          - *(dict) --* Placeholder documentation for OutputDestinationSettings

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type
            rtmp://)

            - **Url** *(string) --* A URL specifying a destination

            - **Username** *(string) --* username for destination

    - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from

      - *(dict) --* Placeholder documentation for ChannelEgressEndpoint

        - **SourceIp** *(string) --* Public IP of where a channel's output comes from

    - **EncoderSettings** *(dict) --* Encoder Settings

      - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

        - *(dict) --* Audio Description

          - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

            - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
            to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

            - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
            corrected using the chosen algorithm. If set to measureOnly, the audio will be
            measured but not adjusted.

            - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value
            is entered, a default value will be used according to the chosen algorithm. The CALM
            Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
            recommends a target of -23 LKFS.

          - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
          for this AudioDescription.

          - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
          values for audioType are defined in ISO-IEC 13818-1.

          - **AudioTypeControl** *(string) --* Determines how audio type is determined.
          followInput: If the input contains an ISO 639 audioType, then that value is passed
          through to the output. If the input contains no ISO 639 audioType, the value in Audio
          Type is included in the output. useConfigured: The value in Audio Type is included in
          the output. Note that this field and audioType are both ignored if inputType is
          broadcasterMixedAd.

          - **CodecSettings** *(dict) --* Audio codec settings.

            - **AacSettings** *(dict) --* Aac Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
              rate control mode and profile.

              - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
              depend on rate control mode and profile. The adReceiverMix setting receives a
              stereo description plus control track and emits a mono AAC encode of the
              description track, with control data emitted in the PES header as per ETSI TS 101
              154 Annex E.

              - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
              pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
              (audioType) will be set to 3, which signals to downstream systems that this stream
              contains "broadcaster mixed AD". Note that the input received by the encoder must
              contain pre-mixed audio; the encoder does not perform the mixing. The values in
              audioTypeControl and audioType (in AudioDescription) are ignored when set to
              broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
              audio + AD.

              - **Profile** *(string) --* AAC Profile.

              - **RateControlMode** *(string) --* Rate Control Mode.

              - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

              - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
              control mode and profile.

              - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
              or MPEG-2 Transport Stream containers.

              - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
              VBR.

            - **Ac3Settings** *(dict) --* Ac3 Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
              the coding mode.

              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
              emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

              - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
              channels.

              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
              input audio is Dolby Digital, dialnorm will be passed through.

              - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
              compression signaling to the output bitstream as defined in the Dolby Digital
              specification.

              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
              to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

              - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
              will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
              If audio was not supplied from one of these streams, then the static metadata
              settings will be used.

            - **Eac3Settings** *(dict) --* Eac3 Settings

              - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
              attenuation to the surround channels. Only used for 3/2 coding mode.

              - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
              the coding mode.

              - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
              emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

              - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
              channels.

              - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
              for all input channels.

              - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
              audio is Dolby Digital Plus, dialnorm will be passed through.

              - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

              - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
              compression, ensures that the instantaneous signal peaks do not exceed specified
              levels.

              - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
              LFE channel

              - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
              to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

              - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
              used for 3/2 coding mode.

              - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
              Only used for 3/2 coding mode.

              - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
              used for 3/2 coding mode.

              - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
              Only used for 3/2 coding mode.

              - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
              be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
              audio was not supplied from one of these streams, then the static metadata settings
              will be used.

              - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
              will be passed through if it is present on the input. This detection is dynamic
              over the life of the transcode. Inputs that alternate between DD+ and non-DD+
              content will have a consistent DD+ output as the system alternates between
              passthrough and encoding.

              - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
              phase shift to the surround channels. Only used for 3/2 coding mode.

              - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
              coding mode.

              - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
              center back surround channel is matrix encoded into the left and right surround
              channels.

              - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
              Surround is matrix encoded into the two channels.

            - **Mp2Settings** *(dict) --* Mp2 Settings

              - **Bitrate** *(float) --* Average bitrate in bits/second.

              - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
              codingMode10 (for mono) or codingMode20 (for stereo).

              - **SampleRate** *(float) --* Sample rate in Hz.

            - **PassThroughSettings** *(dict) --* Pass Through Settings

          - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
          used if languageControlMode is useConfigured, or there is no ISO 639 language code
          specified in the input.

          - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
          language code of the output to follow the ISO 639 language code of the input. The
          languageCode will be used when useConfigured is set, or when followInput is selected
          but there is no ISO 639 language code specified by the input.

          - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name
          to uniquely identify this AudioDescription. Description names should be unique within
          this Live Event.

          - **RemixSettings** *(dict) --* Settings that control how input audio channels are
          remixed into the output audio channels.

            - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
            appropriate gain adjustments.

              - *(dict) --* Audio Channel Mapping

                - **InputChannelLevels** *(list) --* Indices and gain values for each input
                channel that should be remixed into this output channel.

                  - *(dict) --* Input Channel Level

                    - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable
                    values are within the range from -60 (mute) and 6 dB.

                    - **InputChannel** *(integer) --* The index of the input channel used as a
                    source.

                - **OutputChannel** *(integer) --* The index of the output channel being produced.

            - **ChannelsIn** *(integer) --* Number of input channels to be used.

            - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
            values: 1, 2, 4, 6, 8

          - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
          name displayed by the player (eg. English, or Director Commentary).

      - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

        - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
        black. Only bmp and png images are supported.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **State** *(string) --* When set to enabled, causes video, audio and captions to be
        blanked when insertion metadata is added.

      - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail
      insertion.

        - **AvailSettings** *(dict) --* Ad avail settings.

          - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
            added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
            messages and does not apply to OOB messages.

            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
            with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
            slates

            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
            with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
            slates

          - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

            - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
            added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
            messages and does not apply to OOB messages.

            - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
            with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
            slates

            - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
            with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
            slates

      - **BlackoutSlate** *(dict) --* Settings for blackout slate.

        - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for
        solid black. Only bmp and png images are supported.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
        the video, audio, and captions, and raise the "Network Blackout Image" slate when an
        SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be
        lifted when the Network Start Segmentation Descriptor is encountered. The Network End and
        Network Start descriptors must contain a network ID that matches the value entered in
        "Network ID".

        - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End
        Blackout image. Image will be scaled to fill the entire output raster.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
        "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

        - **State** *(string) --* When set to enabled, causes video, audio and captions to be
        blanked when indicated by program metadata.

      - **CaptionDescriptions** *(list) --* Settings for caption decriptions

        - *(dict) --* Output groups for this Live Event. Output groups contain information about
        where streams should be distributed.

          - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use
          as a caption source when generating output captions. This field should match a
          captionSelector name.

          - **DestinationSettings** *(dict) --* Additional settings for captions destination that
          depend on the destination type.

            - **AribDestinationSettings** *(dict) --* Arib Destination Settings

            - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
              setting alignment to centered will place the captions at the bottom center of the
              output. Similarly, setting a left alignment will align captions to the bottom left
              of the output. If x and y positions are given in conjunction with the alignment
              parameter, the font will be justified (either left or centered) relative to those
              coordinates. Selecting "smart" justification will left-justify live subtitles and
              center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
              match.

              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
              captions. All burn-in and DVB-Sub font settings must match.

              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
              rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is
              equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
              must match.

              - **Font** *(dict) --* External font file used for caption burn-in. File extension
              must be 'ttf' or 'tte'. Although the user can select output fonts for many
              different types of input captions, embedded, STL and teletext sources use a strict
              grid system. Using external fonts with these caption sources could cause unexpected
              display of proportional fonts. All burn-in and DVB-Sub font settings must match.

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                file accessible to the Live system (eg. a http:// URI) depending on the output
                type. For example, a RTMP destination should have a uri simliar to:
                "rtmp://fmsserver/live".

                - **Username** *(string) --* Documentation update needed

              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
              option is not valid for source captions that are STL, 608/embedded or teletext.
              These source settings are already pre-defined by the caption stream. All burn-in
              and DVB-Sub font settings must match.

              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
              255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
              is 96 dpi. All burn-in and DVB-Sub font settings must match.

              - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on
              the size of the output. Giving a positive integer will specify the exact font size
              in points. All burn-in and DVB-Sub font settings must match.

              - **OutlineColor** *(string) --* Specifies font outline color. This option is not
              valid for source captions that are either 608/embedded or teletext. These source
              settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
              font settings must match.

              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
              is not valid for source captions that are either 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
              captions. All burn-in and DVB-Sub font settings must match.

              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
              opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to
              0 (transparent). All burn-in and DVB-Sub font settings must match.

              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels to the left. All burn-in and DVB-Sub font settings must match.

              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels above the text. All burn-in and DVB-Sub font settings must match.

              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
              used to generate the output subtitles bitmap. Only applicable for Teletext inputs
              and DVB-Sub/Burn-in outputs.

              - **XPosition** *(integer) --* Specifies the horizontal position of the caption
              relative to the left side of the output in pixels. A value of 10 would result in
              the captions starting 10 pixels from the left of the output. If no explicit
              xPosition is provided, the horizontal caption position will be determined by the
              alignment parameter. All burn-in and DVB-Sub font settings must match.

              - **YPosition** *(integer) --* Specifies the vertical position of the caption
              relative to the top of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the top of the output. If no explicit yPosition is
              provided, the caption will be positioned towards the bottom of the output. All
              burn-in and DVB-Sub font settings must match.

            - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

              - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
              setting alignment to centered will place the captions at the bottom center of the
              output. Similarly, setting a left alignment will align captions to the bottom left
              of the output. If x and y positions are given in conjunction with the alignment
              parameter, the font will be justified (either left or centered) relative to those
              coordinates. Selecting "smart" justification will left-justify live subtitles and
              center-justify pre-recorded subtitles. This option is not valid for source captions
              that are STL or 608/embedded. These source settings are already pre-defined by the
              caption stream. All burn-in and DVB-Sub font settings must match.

              - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
              captions. All burn-in and DVB-Sub font settings must match.

              - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
              rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
              equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
              must match.

              - **Font** *(dict) --* External font file used for caption burn-in. File extension
              must be 'ttf' or 'tte'. Although the user can select output fonts for many
              different types of input captions, embedded, STL and teletext sources use a strict
              grid system. Using external fonts with these caption sources could cause unexpected
              display of proportional fonts. All burn-in and DVB-Sub font settings must match.

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                file accessible to the Live system (eg. a http:// URI) depending on the output
                type. For example, a RTMP destination should have a uri simliar to:
                "rtmp://fmsserver/live".

                - **Username** *(string) --* Documentation update needed

              - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
              option is not valid for source captions that are STL, 608/embedded or teletext.
              These source settings are already pre-defined by the caption stream. All burn-in
              and DVB-Sub font settings must match.

              - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
              255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

              - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
              is 96 dpi. All burn-in and DVB-Sub font settings must match.

              - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
              size of the output. Giving a positive integer will specify the exact font size in
              points. All burn-in and DVB-Sub font settings must match.

              - **OutlineColor** *(string) --* Specifies font outline color. This option is not
              valid for source captions that are either 608/embedded or teletext. These source
              settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
              font settings must match.

              - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
              is not valid for source captions that are either 608/embedded or teletext. These
              source settings are already pre-defined by the caption stream. All burn-in and
              DVB-Sub font settings must match.

              - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
              captions. All burn-in and DVB-Sub font settings must match.

              - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
              opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it
              to 0 (transparent). All burn-in and DVB-Sub font settings must match.

              - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels to the left. All burn-in and DVB-Sub font settings must match.

              - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
              relative to the captions in pixels. A value of -2 would result in a shadow offset 2
              pixels above the text. All burn-in and DVB-Sub font settings must match.

              - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
              used to generate the output subtitles bitmap. Only applicable for Teletext inputs
              and DVB-Sub/Burn-in outputs.

              - **XPosition** *(integer) --* Specifies the horizontal position of the caption
              relative to the left side of the output in pixels. A value of 10 would result in
              the captions starting 10 pixels from the left of the output. If no explicit
              xPosition is provided, the horizontal caption position will be determined by the
              alignment parameter. This option is not valid for source captions that are STL,
              608/embedded or teletext. These source settings are already pre-defined by the
              caption stream. All burn-in and DVB-Sub font settings must match.

              - **YPosition** *(integer) --* Specifies the vertical position of the caption
              relative to the top of the output in pixels. A value of 10 would result in the
              captions starting 10 pixels from the top of the output. If no explicit yPosition is
              provided, the caption will be positioned towards the bottom of the output. This
              option is not valid for source captions that are STL, 608/embedded or teletext.
              These source settings are already pre-defined by the caption stream. All burn-in
              and DVB-Sub font settings must match.

            - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

            - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
            Destination Settings

            - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
            Settings

            - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
            Destination Settings

            - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

            - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

            - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

            - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

              - **StyleControl** *(string) --* When set to passthrough, passes through style and
              position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
              CFF-TT output or TTML output.

            - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

          - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
          http://www.loc.gov/standards/iso639-2/

          - **LanguageDescription** *(string) --* Human readable information to indicate captions
          available for players (eg. English, or Spanish).

          - **Name** *(string) --* Name of the caption description. Used to associate a caption
          description with an output. Names must be unique within an event.

      - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
      whole.

        - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
        Event.

        - **InputEndAction** *(string) --* Indicates the action to take when the current input
        completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
        restart at the beginning of the first input. When "none" is configured the encoder will
        transcode either black, a solid color, or a user specified slate images per the "Input
        Loss Behavior" configuration until the next input switch occurs (which is controlled
        through the Channel Schedule API).

        - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

          - **BlackFrameMsec** *(integer) --* Documentation update needed

          - **InputLossImageColor** *(string) --* When input loss image type is "color" this
          field specifies the color to use. Value: 6 hex characters representing the values of
          RGB.

          - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these
          fields specify the parameters for accessing the slate.

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
            accessible to the Live system (eg. a http:// URI) depending on the output type. For
            example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            - **Username** *(string) --* Documentation update needed

          - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or
          a slate into the output after input loss exceeds blackFrameMsec.

          - **RepeatFrameMsec** *(integer) --* Documentation update needed

        - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
        PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to
        the other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each
        pipeline to the Unix epoch.

        - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by
        the Live encoder should be paced by its system clock (which optionally may be locked to
        another source via NTP) or should be locked to the clock of the source that is providing
        the input stream.

        - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
        very low video framerates. This is commonly set to enabled for music channels with less
        than one video frame per second.

      - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

        - *(dict) --* Output groups for this Live Event. Output groups contain information about
        where streams should be distributed.

          - **Name** *(string) --* Custom output group name optionally defined by the user. Only
          letters, numbers, and the underscore character allowed; only 32 characters allowed.

          - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

            - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

              - **Destination** *(dict) --* A directory and base filename where archive files
              should be written.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
              before closing and starting a new one.

            - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

              - **Destination** *(dict) --* The destination for the frame capture files. Either
              the URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
              s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
              container, plus a file name prefix (for example,
              mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
              the prefix from the destination field (for example, "curling_") + name modifier +
              the counter (5 digits, starting from 00001) + extension (which is always .jpg). For
              example, curlingLow.00001.jpg

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **HlsGroupSettings** *(dict) --* Hls Group Settings

              - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35
              signals through to this group of Apple HLS outputs.

                - *(string) --* Hls Ad Markers

              - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
              each output in the media .m3u8 file. Can be used if base manifest is delivered from
              a different URL than the main .m3u8 file.

              - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
              each output in the media .m3u8 file. Can be used if base manifest is delivered from
              a different URL than the main .m3u8 file.

              - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
              caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

                - *(dict) --* Maps a caption channel to an ISO 693-2 language code
                (http://www.loc.gov/standards/iso639-2), with an optional description.

                  - **CaptionChannel** *(integer) --* The closed caption channel being described
                  by this CaptionLanguageMapping. Each channel mapping must have a unique channel
                  number (maximum of 4)

                  - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                  http://www.loc.gov/standards/iso639-2)

                  - **LanguageDescription** *(string) --* Textual description of language

              - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
              captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least
              one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for
              each Language Code you specify. Make sure to specify the languages in the order in
              which they appear in the original source (if the source is embedded format) or the
              order of the caption selectors (if the source is other than embedded). Otherwise,
              languages in the manifest will not match up properly with the output captions.
              none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any
              CLOSED-CAPTIONS line from the manifest.

              - **ClientCache** *(string) --* When set to "disabled", sets the
              #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
              segments for later replay.

              - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the
              default RFC-4281) during m3u8 playlist generation.

              - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
              16-byte hex value represented by a 32-character text string. If ivSource is set to
              "explicit" then this parameter is required and is used as the IV for encryption.

              - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
              manifest files, and encryption keys (if enabled).

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **DirectoryStructure** *(string) --* Place segments in subdirectories.

              - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
              scheme. Exclude this parameter if no encryption is desired.

              - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

                - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                  transfer encoding to Akamai. User should contact Akamai to enable this feature.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made
                  before the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of
                  seconds to wait until a restart is initiated. A value of 0 means never restart.

                  - **Salt** *(string) --* Salt for authenticated Akamai.

                  - **Token** *(string) --* Token parameter for authenticated akamai. If not
                  specified, _gda_ is used.

                - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made
                  before the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of
                  seconds to wait until a restart is initiated. A value of 0 means never restart.

                - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **MediaStoreStorageClass** *(string) --* When set to temporal, output files
                  are stored in non-persistent memory for faster reading and writing.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made
                  before the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of
                  seconds to wait until a restart is initiated. A value of 0 means never restart.

                - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying connection to the CDN if the connection is lost.

                  - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                  streaming outputs.

                  - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                  transfer encoding to WebDAV.

                  - **NumRetries** *(integer) --* Number of retry attempts that will be made
                  before the Live Event is put into an error state.

                  - **RestartDelay** *(integer) --* If a streaming output fails, number of
                  seconds to wait until a restart is initiated. A value of 0 means never restart.

              - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
              manifest, but do create the master and media manifests (according to the Output
              Selection field). STANDARD: Create an I-frame-only manifest for each output that
              contains video, as well as the other manifests (according to the Output Selection
              field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
              I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
              position. For example, #EXT-X-BYTERANGE:160364@1461888"

              - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies
              the maximum number of segments in the media manifest file. After this maximum,
              older segments are removed from the media manifest. This number must be less than
              or equal to the Keep Segments field.

              - **InputLossAction** *(string) --* Parameter that control output group behavior on
              input loss.

              - **IvInManifest** *(string) --* For use with encryptionType. The IV
              (Initialization Vector) is a 128-bit number used in conjunction with the key for
              encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the
              IV is not in the manifest.

              - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
              Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
              If this setting is "followsSegmentNumber", it will cause the IV to change every
              segment (to match the segment number). If this is set to "explicit", you must enter
              a constantIv value.

              - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
              number of media segments (.ts files) to retain in the destination directory.

              - **KeyFormat** *(string) --* The value specifies how the key is represented in the
              resource identified by the URI. If parameter is absent, an implicit value of
              "identity" is used. A reverse DNS string can also be given.

              - **KeyFormatVersions** *(string) --* Either a single positive integer version
              value or a slash delimited list of version values (1/2/3).

              - **KeyProviderSettings** *(dict) --* The key provider settings.

                - **StaticKeySettings** *(dict) --* Static Key Settings

                  - **KeyProviderServer** *(dict) --* The URL of the license server used for
                  protecting content.

                    - **PasswordParam** *(string) --* key used to extract the password from EC2
                    Parameter store

                    - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                    to a file accessible to the Live system (eg. a http:// URI) depending on the
                    output type. For example, a RTMP destination should have a uri simliar to:
                    "rtmp://fmsserver/live".

                    - **Username** *(string) --* Documentation update needed

                  - **StaticKeyValue** *(string) --* Static key value as a 32 character
                  hexadecimal string.

              - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

              - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
              should use floating point or integer values for segment duration.

              - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
              looking ahead and back within the specified range for a nearby avail and extending
              the segment size if needed.

              - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
              the destination and manifest. If "live", only the number segments specified in
              keepSegments and indexNSegments are kept; newer segments replace older segments,
              which may prevent players from rewinding all the way to the beginning of the event.
              VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
              converting it to a "VOD" type manifest on completion of the stream.

              - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests
              (master manifest, if applicable, and media manifests) for this output group.
              SEGMENTSONLY: Does not generate any manifests for this output group.

              - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME
              tag in .m3u8 manifest files. The value is calculated as follows: either the program
              date and time are initialized using the input timecode source, or the time is
              initialized using the input timecode source and the date is initialized using the
              timestampOffset.

              - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
              EXT-X-PROGRAM-DATE-TIME entry, in seconds.

              - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
              each pipeline includes information about both pipelines: first its own media files,
              then the media files of the other pipeline. This feature allows playout device that
              support stale manifest detection to switch from one manifest to the other, when the
              current manifest seems to be stale. There are still two destinations and two master
              manifests, but both master manifests reference the media files from both pipelines.
              DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
              about its own pipeline only. For an HLS output group with MediaPackage as the
              destination, the DISABLED behavior is always followed. MediaPackage regenerates the
              manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

              - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
              create (in seconds). Note that segments will end on the next keyframe after this
              number of seconds, so actual segment length may be longer.

              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
              configured segment size is always used.

              - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
              subdirectory before starting a new one. directoryStructure must be
              subdirectoryPerStream for this setting to have an effect.

              - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
              video in EXT-X-STREAM-INF tag of variant manifest.

              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

              - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
              offset to fine tune the timestamps.

              - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
              multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
              program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE
              tags to index segments for playback. A typical use for this value is when sending
              the output to AWS Elemental MediaConvert, which can accept only a single media
              file. Playback while the channel is running is not guaranteed due to HTTP server
              caching.

            - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

              - **Destination** *(dict) --* MediaPackage channel destination.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

            - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

              - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point
              Identity" element used in each message placed in the sparse track. Only enabled if
              sparseTrackType is not "none".

              - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an
              audio-only MS Smooth output, the fragment absolute time will be set to the current
              timecode. This option does not write timecodes to the audio elementary stream.

              - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
              certificate chain to a trusted Certificate Authority (CA). This will cause https
              outputs to self-signed certificates to fail.

              - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
              retrying connection to the IIS server if the connection is lost. Content will be
              cached during this time and the cache will be be delivered to the IIS server once
              the connection is re-established.

              - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
              Elemental Live acts as a "Push" encoder to IIS.

                - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
              only be specified if eventIdMode is set to useConfigured.

              - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
              IIS server. If no event ID is sent and the same Live Event is used without changing
              the publishing point, clients might see cached video from the previous run.
              Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" -
              generate and send an event ID based on the current timestamp - "noEventId" - do not
              send an event ID to the IIS server.

              - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
              server when stopping the event

              - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
              outputs.

              - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in
              seconds). Fragment length must be compatible with GOP size and framerate.

              - **InputLossAction** *(string) --* Parameter that control output group behavior on
              input loss.

              - **NumRetries** *(integer) --* Number of retry attempts.

              - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
              to output failure, due to exhausting the numRetries on one segment, or exceeding
              filecacheDuration.

              - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
              configured segment size is always used.

              - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from
              the second pipeline.

              - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
              to generate a sparse track in this group of MS-Smooth outputs.

              - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest
              so publishing point doesn't start until all streams start.

              - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
              timestampOffsetMode is set to useConfiguredOffset.

              - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
              useEventStartDate: Use the date the event was started as the offset -
              useConfiguredOffset: Use an explicitly configured date as the offset

            - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

              - **AuthenticationScheme** *(string) --* Authentication scheme to use when
              connecting with CDN

              - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills
              up. If remote origin server stalls the RTMP connection and does not accept content
              fast enough the 'Media Cache' will fill up. When the cache reaches the duration
              specified by cacheLength the cache will stop accepting new content. If set to
              disconnectImmediately, the RTMP output will force a disconnect. Clear the media
              cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
              output will wait up to 5 minutes to allow the origin server to begin accepting data
              again.

              - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
              buffer size.

              - **CaptionData** *(string) --* Controls the types of data that passes to
              onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
              passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but
              608 data from both fields will be passed. If set to 'field1608' then only the data
              carried in 608 from field 1 video will be passed.

              - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if
              input becomes unavailable. - emitOutput: Emit a slate until input returns. -
              pauseOutput: Stop transmitting data until input returns. This does not close the
              underlying RTMP connection.

              - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
              wait until a restart is initiated. A value of 0 means never restart.

            - **UdpGroupSettings** *(dict) --* Udp Group Settings

              - **InputLossAction** *(string) --* Specifies behavior of last resort when input
              video is lost, and no more backup inputs are available. When dropTs is selected the
              entire transport stream will stop being emitted. When dropProgram is selected the
              program can be dropped from the transport stream (and replaced with null packets to
              meet the TS bitrate requirement). Or, when emitProgram is chosen the transport
              stream will continue to be produced normally with repeat frames, black frames, or
              slate frames substituted for the absent input video.

              - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

              - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

          - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

            - *(dict) --* Output settings. There can be multiple outputs within a group.

              - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
              audio sources for this output.

                - *(string) --* Placeholder documentation for __string

              - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
              as caption sources for this output.

                - *(string) --* Placeholder documentation for __string

              - **OutputName** *(string) --* The name used to identify an output.

              - **OutputSettings** *(dict) --* Output type-specific settings.

                - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                  - **ContainerSettings** *(dict) --* Settings specific to the container type of
                  the file.

                    - **M2tsSettings** *(dict) --* M2ts Settings

                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                      streams will be removed from the program if the selected input audio stream
                      is removed from the input. This allows the output audio configuration to
                      dynamically change based on input configuration. If this is set to
                      encodeSilence, all output audio streams will output encoded silence when
                      not connected to an active input stream.

                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                      muxing and removes video descriptor.

                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                      Captions in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                      for ARIB Captions will be auto-selected from unused pids. If set to
                      useConfigured, ARIB Captions will be on the configured pid number.

                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                      for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                      audio stream(s) in the transport stream. Multiple values are accepted, and
                      can be entered in ranges and/or by comma separation. Can be entered as
                      decimal or hexadecimal values. Each PID specified must be in the range of
                      32 (or 0x20)..8182 (or 0x1ff6).

                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                      0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                      type = 0x06.

                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                      bits per second. Setting to 0 lets the muxer automatically determine the
                      appropriate bitrate.

                      - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                      model for accurate interleaving. Setting to bufferModel to none can lead to
                      lower latency, but low-memory devices may not be able to play back the
                      stream without interruptions.

                      - **CcDescriptor** *(string) --* When set to enabled, generates
                      captionServiceDescriptor in PMT.

                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                      (NIT) at the specified table repetition interval.

                        - **NetworkId** *(integer) --* The numeric value placed in the Network
                        Information Table (NIT).

                        - **NetworkName** *(string) --* The network name text placed in the
                        networkNameDescriptor inside the Network Information Table. Maximum
                        length is 256 characters.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                      (SDT) at the specified table repetition interval.

                        - **OutputSdt** *(string) --* Selects method of inserting SDT information
                        into output stream. The sdtFollow setting copies SDT information from
                        input stream to output stream. The sdtFollowIfPresent setting copies SDT
                        information from input stream to output stream if SDT information is
                        present in the input, otherwise it will fall back on the user-defined
                        values. The sdtManual setting means user will enter the SDT information.
                        The sdtNone setting means output stream will not contain SDT information.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                        - **ServiceName** *(string) --* The service name placed in the
                        serviceDescriptor in the Service Description Table. Maximum length is 256
                        characters.

                        - **ServiceProviderName** *(string) --* The service provider name placed
                        in the serviceDescriptor in the Service Description Table. Maximum length
                        is 256 characters.

                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                      Subtitle data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                      the specified table repetition interval.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                      DVB Teletext data to this output. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                      the input source to this output.

                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                      selected, audio EBP markers will be added to partitions 3 and 4. The
                      interval between these additional markers will be fixed, and will be
                      slightly shorter than the video EBP marker interval. Only available when
                      EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                      always follow the video interval.

                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                      Boundary Points do not come within the specified time interval of each
                      other by looking ahead at input video. If another EBP is going to come in
                      within the specified time interval, the current EBP is not emitted, and the
                      segment is "stretched" to the next marker. The lookahead value does not add
                      latency to the system. The Live Event must be configured elsewhere to
                      create sufficient latency to make the lookahead accurate.

                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                      If set to videoAndAudioPids, EBP markers will be placed on the video PID
                      and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                      the video PID.

                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                      PES header.

                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Platform data to this output. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **FragmentTime** *(float) --* The length in seconds of each fragment.
                      Only used with EBP markers.

                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                      input source to this output.

                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                      KLV data to this output. Multiple values are accepted, and can be entered
                      in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                      packets to insert into the transport stream. This can be used if a
                      downstream encryption system requires periodic null packets.

                      - **PatInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. Valid values are 0,
                      10..1000.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                      Clock Reference value is inserted for every Packetized Elementary Stream
                      (PES) header. This parameter is effective only when the PCR PID is the same
                      as the video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock Reference (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the
                      encoder will assign the same value as the Video PID. Can be entered as a
                      decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                      0x1ff6).

                      - **PmtInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. Valid values are 0,
                      10..1000.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                      Table (PMT) in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **ProgramNum** *(integer) --* The value of the program number field in
                      the Program Map Table.

                      - **RateMode** *(string) --* When vbr, does not insert null packets into
                      transport stream to fill specified bitrate. The bitrate setting acts as the
                      maximum bitrate when vbr is set.

                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                      SCTE-27 data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                      input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                      each segmentationTime period. raiSegstart sets the Random Access Indicator
                      bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                      timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                      at the start of segments. ebp adds Encoder Boundary Point information to
                      the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                      ebpLegacy adds Encoder Boundary Point information to the adaptation field
                      using a legacy proprietary format.

                      - **SegmentationStyle** *(string) --* The segmentation style parameter
                      controls how segmentation markers are inserted into the transport stream.
                      With avails, it is possible that segments may be truncated, which can
                      influence where future segmentation markers are inserted. When a
                      segmentation style of "resetCadence" is selected and a segment is truncated
                      due to an avail, we will reset the segmentation cadence. This means the
                      subsequent segment will have a duration of $segmentationTime seconds. When
                      a segmentation style of "maintainCadence" is selected and a segment is
                      truncated due to an avail, we will not reset the segmentation cadence. This
                      means the subsequent segment will likely be truncated as well. However, all
                      segments after that will have a duration of $segmentationTime seconds. Note
                      that EBP lookahead is a slight exception to this rule.

                      - **SegmentationTime** *(float) --* The length in seconds of each segment.
                      Required unless markers is set to None_.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata will be passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                      video stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                  - **Extension** *(string) --* Output file extension. If excluded, this will be
                  auto-selected from the container type.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Required for multiple outputs of the same type.

                - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                  - **NameModifier** *(string) --* Required if the output group contains more
                  than one output. This modifier forms part of the output file name.

                - **HlsOutputSettings** *(dict) --* Hls Output Settings

                  - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                  settings are different for audio-only outputs.

                    - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                      - **AudioGroupId** *(string) --* Specifies the group to which the audio
                      Rendition belongs.

                      - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                      to use as the cover art for an audio-only output. We recommend a low
                      bit-size file because the image increases the output audio bandwidth. The
                      image is attached to the audio as an ID3 tag, frame type APIC, picture type
                      0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.

                        - **PasswordParam** *(string) --* key used to extract the password from
                        EC2 Parameter store

                        - **Uri** *(string) --* Uniform Resource Identifier - This should be a
                        path to a file accessible to the Live system (eg. a http:// URI)
                        depending on the output type. For example, a RTMP destination should have
                        a uri simliar to: "rtmp://fmsserver/live".

                        - **Username** *(string) --* Documentation update needed

                      - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                      supported: Audio-Only Variant Stream The client can play back this
                      audio-only stream instead of video in low-bandwidth scenarios. Represented
                      as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select,
                      Default Alternate rendition that the client should try to play back by
                      default. Represented as an EXT-X-MEDIA in the HLS manifest with
                      DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default
                      Alternate rendition that the client may try to play back by default.
                      Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO,
                      AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that
                      the client will not try to play back by default. Represented as an
                      EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO

                    - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                      - **AudioRenditionSets** *(string) --* List all the audio groups that are
                      used with the video output stream. Input all the audio GROUP-IDs that are
                      associated to the video, separate by ','.

                      - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                        - **AudioFramesPerPes** *(integer) --* The number of audio frames to
                        insert for each PES packet.

                        - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                        audio stream(s) in the transport stream. Multiple values are accepted,
                        and can be entered in ranges and/or by comma separation. Can be entered
                        as decimal or hexadecimal values.

                        - **EcmPid** *(string) --* This parameter is unused and deprecated.

                        - **PatInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. A value of
                        \\"0\\" writes out the PMT once per segment file.

                        - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                        Clock Reference value is inserted for every Packetized Elementary Stream
                        (PES) header. This parameter is effective only when the PCR PID is the
                        same as the video or audio elementary stream.

                        - **PcrPeriod** *(integer) --* Maximum time in milliseconds between
                        Program Clock References (PCRs) inserted into the transport stream.

                        - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                        Reference (PCR) in the transport stream. When no value is given, the
                        encoder will assign the same value as the Video PID. Can be entered as a
                        decimal or hexadecimal value.

                        - **PmtInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. A value of
                        \\"0\\" writes out the PMT once per segment file.

                        - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                        Table (PMT) in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                        - **ProgramNum** *(integer) --* The value of the program number field in
                        the Program Map Table.

                        - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                        SCTE-35 signals from the input source to this output.

                        - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35
                        stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                        - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                        metadata is passed through from input to output.

                        - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                        metadata stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **TransportStreamId** *(integer) --* The value of the transport stream
                        ID field in the Program Map Table.

                        - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                        video stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Accepts \\"Format
                  Identifiers\\":#formatIdentifierParameters.

                  - **SegmentModifier** *(string) --* String concatenated to end of segment
                  filenames.

                - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

                - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                  - **H265PackagingType** *(string) --* Only applicable when this output is
                  referencing an H.265 video description. Specifies whether MP4 segments should
                  be packaged as HEV1 or HVC1.

                  - **NameModifier** *(string) --* String concatenated to the end of the
                  destination filename. Required for multiple outputs of the same type.

                - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                  - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the
                  tls certificate chain to a trusted Certificate Authority (CA). This will cause
                  rtmps outputs with self-signed certificates to fail.

                  - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                  retrying a connection to the Flash Media server if the connection is lost.

                  - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                  rtmp://host/appname). For connection to Akamai, a username and password must be
                  supplied. URI fields accept format identifiers.

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                  - **NumRetries** *(integer) --* Number of retry attempts.

                - **UdpOutputSettings** *(dict) --* Udp Output Settings

                  - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                  values increase latency through the transcoder but simultaneously assist the
                  transcoder in maintaining a constant, low-jitter UDP/RTP output while
                  accommodating clock recovery, input switching, input disruptions, picture
                  reordering, etc.

                  - **ContainerSettings** *(dict) --* Udp Container Settings

                    - **M2tsSettings** *(dict) --* M2ts Settings

                      - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                      streams will be removed from the program if the selected input audio stream
                      is removed from the input. This allows the output audio configuration to
                      dynamically change based on input configuration. If this is set to
                      encodeSilence, all output audio streams will output encoded silence when
                      not connected to an active input stream.

                      - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                      muxing and removes video descriptor.

                      - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                      Captions in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                      for ARIB Captions will be auto-selected from unused pids. If set to
                      useConfigured, ARIB Captions will be on the configured pid number.

                      - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                      for Dolby Digital audio. When set to atsc, the ATSC model is used.

                      - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                      for each PES packet.

                      - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                      audio stream(s) in the transport stream. Multiple values are accepted, and
                      can be entered in ranges and/or by comma separation. Can be entered as
                      decimal or hexadecimal values. Each PID specified must be in the range of
                      32 (or 0x20)..8182 (or 0x1ff6).

                      - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                      0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                      type = 0x06.

                      - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                      bits per second. Setting to 0 lets the muxer automatically determine the
                      appropriate bitrate.

                      - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                      model for accurate interleaving. Setting to bufferModel to none can lead to
                      lower latency, but low-memory devices may not be able to play back the
                      stream without interruptions.

                      - **CcDescriptor** *(string) --* When set to enabled, generates
                      captionServiceDescriptor in PMT.

                      - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                      (NIT) at the specified table repetition interval.

                        - **NetworkId** *(integer) --* The numeric value placed in the Network
                        Information Table (NIT).

                        - **NetworkName** *(string) --* The network name text placed in the
                        networkNameDescriptor inside the Network Information Table. Maximum
                        length is 256 characters.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                      (SDT) at the specified table repetition interval.

                        - **OutputSdt** *(string) --* Selects method of inserting SDT information
                        into output stream. The sdtFollow setting copies SDT information from
                        input stream to output stream. The sdtFollowIfPresent setting copies SDT
                        information from input stream to output stream if SDT information is
                        present in the input, otherwise it will fall back on the user-defined
                        values. The sdtManual setting means user will enter the SDT information.
                        The sdtNone setting means output stream will not contain SDT information.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                        - **ServiceName** *(string) --* The service name placed in the
                        serviceDescriptor in the Service Description Table. Maximum length is 256
                        characters.

                        - **ServiceProviderName** *(string) --* The service provider name placed
                        in the serviceDescriptor in the Service Description Table. Maximum length
                        is 256 characters.

                      - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                      Subtitle data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                      the specified table repetition interval.

                        - **RepInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream.

                      - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                      DVB Teletext data to this output. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                      the input source to this output.

                      - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                      selected, audio EBP markers will be added to partitions 3 and 4. The
                      interval between these additional markers will be fixed, and will be
                      slightly shorter than the video EBP marker interval. Only available when
                      EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                      always follow the video interval.

                      - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                      Boundary Points do not come within the specified time interval of each
                      other by looking ahead at input video. If another EBP is going to come in
                      within the specified time interval, the current EBP is not emitted, and the
                      segment is "stretched" to the next marker. The lookahead value does not add
                      latency to the system. The Live Event must be configured elsewhere to
                      create sufficient latency to make the lookahead accurate.

                      - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                      If set to videoAndAudioPids, EBP markers will be placed on the video PID
                      and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                      the video PID.

                      - **EcmPid** *(string) --* This field is unused and deprecated.

                      - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                      PES header.

                      - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Platform data to this output. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                      ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                      value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **FragmentTime** *(float) --* The length in seconds of each fragment.
                      Only used with EBP markers.

                      - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                      input source to this output.

                      - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                      KLV data to this output. Multiple values are accepted, and can be entered
                      in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                      packets to insert into the transport stream. This can be used if a
                      downstream encryption system requires periodic null packets.

                      - **PatInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. Valid values are 0,
                      10..1000.

                      - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                      Clock Reference value is inserted for every Packetized Elementary Stream
                      (PES) header. This parameter is effective only when the PCR PID is the same
                      as the video or audio elementary stream.

                      - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                      Clock Reference (PCRs) inserted into the transport stream.

                      - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                      Reference (PCR) in the transport stream. When no value is given, the
                      encoder will assign the same value as the Video PID. Can be entered as a
                      decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                      0x1ff6).

                      - **PmtInterval** *(integer) --* The number of milliseconds between
                      instances of this table in the output transport stream. Valid values are 0,
                      10..1000.

                      - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                      Table (PMT) in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **ProgramNum** *(integer) --* The value of the program number field in
                      the Program Map Table.

                      - **RateMode** *(string) --* When vbr, does not insert null packets into
                      transport stream to fill specified bitrate. The bitrate setting acts as the
                      maximum bitrate when vbr is set.

                      - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                      SCTE-27 data to this output. Multiple values are accepted, and can be
                      entered in ranges and/or by comma separation. Can be entered as decimal or
                      hexadecimal values. Each PID specified must be in the range of 32 (or
                      0x20)..8182 (or 0x1ff6).

                      - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                      input source to this output.

                      - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                      in the transport stream. Can be entered as a decimal or hexadecimal value.
                      Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                      each segmentationTime period. raiSegstart sets the Random Access Indicator
                      bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                      timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                      at the start of segments. ebp adds Encoder Boundary Point information to
                      the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                      ebpLegacy adds Encoder Boundary Point information to the adaptation field
                      using a legacy proprietary format.

                      - **SegmentationStyle** *(string) --* The segmentation style parameter
                      controls how segmentation markers are inserted into the transport stream.
                      With avails, it is possible that segments may be truncated, which can
                      influence where future segmentation markers are inserted. When a
                      segmentation style of "resetCadence" is selected and a segment is truncated
                      due to an avail, we will reset the segmentation cadence. This means the
                      subsequent segment will have a duration of $segmentationTime seconds. When
                      a segmentation style of "maintainCadence" is selected and a segment is
                      truncated due to an avail, we will not reset the segmentation cadence. This
                      means the subsequent segment will likely be truncated as well. However, all
                      segments after that will have a duration of $segmentationTime seconds. Note
                      that EBP lookahead is a slight exception to this rule.

                      - **SegmentationTime** *(float) --* The length in seconds of each segment.
                      Required unless markers is set to None_.

                      - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                      metadata will be passed through from input to output.

                      - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                      metadata stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                      - **TransportStreamId** *(integer) --* The value of the transport stream ID
                      field in the Program Map Table.

                      - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                      video stream in the transport stream. Can be entered as a decimal or
                      hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                  - **Destination** *(dict) --* Destination address and port number for RTP or
                  UDP packets. Can be unicast or multicast RTP or UDP (eg.
                  rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).

                    - **DestinationRefId** *(string) --* Placeholder documentation for __string

                  - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                  Error Correction on UDP outputs.

                    - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                    the FEC protection matrix. The number of transport stream packets per column
                    error correction packet. Must be between 4 and 20, inclusive.

                    - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                    - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of
                    the FEC protection matrix. Must be between 1 and 20, inclusive. If only
                    Column FEC is used, then larger values increase robustness. If Row FEC is
                    used, then this is the number of transport stream packets per row error
                    correction packet, and the value must be between 4 and 20, inclusive, if
                    includeFec is columnAndRow. If includeFec is column, this value must be 1 to
                    20, inclusive.

              - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as
              the source for this output.

      - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
      information from inputs.

        - **Source** *(string) --* Identifies the source for the timecode that will be associated
        with the events outputs. -Embedded (embedded): Initialize the output timecode with
        timecode from the the source. If no embedded timecode is detected in the source, the
        system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the
        UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be
        00:00:00:00.

        - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
        resynchronized to the input timecode. Discrepancies below this threshold are permitted to
        avoid unnecessary discontinuities in the output timecode. No timecode sync when this is
        not specified.

      - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

        - *(dict) --* Video settings for this stream.

          - **CodecSettings** *(dict) --* Video codec settings.

            - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

              - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
              frames for inclusion in the output. For example, "10" means capture a frame every
              10 seconds.

            - **H264Settings** *(dict) --* H264 Settings

              - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
              quantizers to vary to improve visual quality.

              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
              output stream. If afdSignaling is "auto", the system will try to preserve the input
              AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
              AFD value will be the value configured in the fixedAfd parameter.

              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
              control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
              output must have a unique value when its bitrate is rounded down to the nearest
              multiple of 1000.

              - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
              filled (HRD buffer model).

              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              - **ColorSpaceSettings** *(dict) --* Color Space settings

                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
                space conversion to the output

                - **Rec601Settings** *(dict) --* Rec601 Settings

                - **Rec709Settings** *(dict) --* Rec709 Settings

              - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
              Main or High profile) or cavlc.

              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
              the output stream. Only valid when afdSignaling is set to 'Fixed'.

              - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
              frame to reduce flicker or 'pop' on I-frames.

              - **FramerateControl** *(string) --* This field indicates how the output video
              frame rate is specified. If "specified" is selected then the output video frame
              rate is determined by framerateNumerator and framerateDenominator, else if
              "initializeFromSource" is selected then the output video frame rate will be set
              equal to the input video frame rate of the first input.

              - **FramerateDenominator** *(integer) --* Framerate denominator.

              - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
              fraction, e.g. 24000 / 1001 = 23.976 fps.

              - **GopBReference** *(string) --* Documentation update needed

              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
              applications, it is recommended that this be set to 1 so a decoder joining
              mid-stream will receive an IDR frame as quickly as possible. Setting this value to
              0 will break output segmenting.

              - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
              or seconds per gopSizeUnits. Must be greater than zero.

              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
              seconds. If seconds the system will convert the gopSize into a frame count at run
              time.

              - **Level** *(string) --* H.264 Level.

              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
              decrease latency and memory usage, while high can produce better quality for
              certain content.

              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
              VBR: Set the maximum bitrate in order to accommodate expected spikes in the
              complexity of the video.

              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
              enabled. Enforces separation between repeated (cadence) I-frames and I-frames
              inserted by Scene Change Detection. If a scene change I-frame is within I-interval
              frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
              I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
              normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
              Min-I-interval - 1

              - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
              may use more than requested if using B-frames and/or interlaced encoding.

              - **ParControl** *(string) --* This field indicates how the output pixel aspect
              ratio is specified. If "specified" is selected then the output video pixel aspect
              ratio is determined by parNumerator and parDenominator, else if
              "initializeFromSource" is selected then the output pixsel aspect ratio will be set
              equal to the input video pixel aspect ratio of the first input.

              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              - **Profile** *(string) --* H.264 Profile.

              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
              encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
              quality level field and Max bitrate field that suit your most important viewing
              devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
              bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
              Quality level: 6. Max bitrate: 1M to 1.5M

              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
              specified quality level except when it is constrained by the maximum bitrate.
              Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
              vary, depending on the video complexity. Recommended instead of QVBR if you want to
              maintain a specific average bitrate over the duration of the channel. CBR: Quality
              varies, depending on the video complexity. Recommended only if you distribute your
              assets to devices that cannot handle variable bitrates.

              - **ScanType** *(string) --* Sets the scan type of the output to progressive or
              top-field-first interlaced.

              - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
              I-frames when scene change is detected. - Off: does not force an I-frame when scene
              change is detected.

              - **Slices** *(integer) --* Number of slices per picture. Must be less than or
              equal to the number of macroblock rows for progressive pictures, and less than or
              equal to half the number of macroblock rows for interlaced pictures. This field is
              optional; when no value is specified the encoder will choose the number of slices
              based on encode resolution.

              - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
              reduce high-frequency content in the encoded image.

              - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
              frame based on spatial variation of content complexity.

              - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
              sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
              to improve visual quality.

              - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

              - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
              frame based on temporal variation of content complexity.

              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
              into the video elementary stream. - 'disabled': Do not include timecodes -
              'picTimingSei': Pass through picture timing SEI messages from the source specified
              in Timecode Config

            - **H265Settings** *(dict) --* H265 Settings

              - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
              quantizers to vary to improve visual quality.

              - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
              output stream. If afdSignaling is "auto", the system will try to preserve the input
              AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
              AFD value will be the value configured in the fixedAfd parameter.

              - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
              Alternative Transfer Function SEI message to support backwards compatibility with
              non-HDR decoders and displays.

              - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
              control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
              output must have a unique value when its bitrate is rounded down to the nearest
              multiple of 1000.

              - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

              - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

              - **ColorSpaceSettings** *(dict) --* Color Space settings

                - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
                space conversion to the output

                - **Hdr10Settings** *(dict) --* Hdr10 Settings

                  - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
                  value defining the maximum light level, in nits, of any single pixel within an
                  encoded HDR video stream or file.

                  - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                  metadata value defining the maximum average light level, in nits, for any
                  single frame within an encoded HDR video stream or file.

                - **Rec601Settings** *(dict) --* Rec601 Settings

                - **Rec709Settings** *(dict) --* Rec709 Settings

              - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
              the output stream. Only valid when afdSignaling is set to 'Fixed'.

              - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
              frame to reduce flicker or 'pop' on I-frames.

              - **FramerateDenominator** *(integer) --* Framerate denominator.

              - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
              fraction, e.g. 24000 / 1001 = 23.976 fps.

              - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
              applications, it is recommended that this be set to 1 so a decoder joining
              mid-stream will receive an IDR frame as quickly as possible. Setting this value to
              0 will break output segmenting.

              - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
              or seconds per gopSizeUnits. Must be greater than zero.

              - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
              seconds. If seconds the system will convert the gopSize into a frame count at run
              time.

              - **Level** *(string) --* H.265 Level.

              - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
              decrease latency and memory usage, while high can produce better quality for
              certain content.

              - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

              - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
              enabled. Enforces separation between repeated (cadence) I-frames and I-frames
              inserted by Scene Change Detection. If a scene change I-frame is within I-interval
              frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
              I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
              normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
              Min-I-interval - 1

              - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

              - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

              - **Profile** *(string) --* H.265 Profile.

              - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
              encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
              quality level field and Max bitrate field that suit your most important viewing
              devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
              bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
              Quality level: 6. Max bitrate: 1M to 1.5M

              - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
              specified quality level except when it is constrained by the maximum bitrate.
              Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
              depending on the video complexity. Recommended only if you distribute your assets
              to devices that cannot handle variable bitrates.

              - **ScanType** *(string) --* Sets the scan type of the output to progressive or
              top-field-first interlaced.

              - **SceneChangeDetect** *(string) --* Scene change detection.

              - **Slices** *(integer) --* Number of slices per picture. Must be less than or
              equal to the number of macroblock rows for progressive pictures, and less than or
              equal to half the number of macroblock rows for interlaced pictures. This field is
              optional; when no value is specified the encoder will choose the number of slices
              based on encode resolution.

              - **Tier** *(string) --* H.265 Tier.

              - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
              into the video elementary stream. - 'disabled': Do not include timecodes -
              'picTimingSei': Pass through picture timing SEI messages from the source specified
              in Timecode Config

          - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
          most codecs, you can leave this field and width blank in order to use the height and
          width (resolution) from the source. Note, however, that leaving blank is not
          recommended. For the Frame Capture codec, height and width are required.

          - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name
          to uniquely identify this Description. Description names should be unique within this
          Live Event.

          - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the
          input stream. RESPOND causes input video to be clipped, depending on the AFD value,
          input display aspect ratio, and output display aspect ratio, and (except for
          FRAMECAPTURE codec) includes the values in the output. PASSTHROUGH (does not apply to
          FRAMECAPTURE codec) ignores the AFD values and includes the values in the output, so
          input video is not clipped. NONE ignores the AFD values and does not include the values
          through to the output, so input video is not clipped.

          - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
          stretch the video to the specified output resolution (height and width). This option
          will override any position value. DEFAULT may insert black boxes (pillar boxes or
          letter boxes) around the video to provide the specified output resolution.

          - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
          scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
          for most content.

          - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
          most codecs, you can leave this field and height blank in order to use the height and
          width (resolution) from the source. Note, however, that leaving blank is not
          recommended. For the Frame Capture codec, height and width are required.

    - **Id** *(string) --* The unique id of the channel.

    - **InputAttachments** *(list) --* List of input attachments for channel.

      - *(dict) --* Placeholder documentation for InputAttachment

        - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
        required if the user wants to use this input in an input switch action.

        - **InputId** *(string) --* The ID of the input

        - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

          - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
          that have multiple available.

            - *(dict) --* Audio Selector

              - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
              this name to uniquely identify this Selector. Selector names should be unique per
              input.

              - **SelectorSettings** *(dict) --* The audio selector settings.

                - **AudioLanguageSelection** *(dict) --* Audio Language Selection

                  - **LanguageCode** *(string) --* Selects a specific three-letter language code
                  from within an audio source.

                  - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
                  stream demux strictly identifies audio streams by their language descriptor. If
                  a PMT update occurs such that an audio stream matching the initially selected
                  language is no longer present then mute will be encoded until the language
                  returns. If "loose", then on a PMT update the demux will choose another audio
                  stream in the program with the same stream type if it can't find one with the
                  same language.

                - **AudioPidSelection** *(dict) --* Audio Pid Selection

                  - **Pid** *(integer) --* Selects a specific PID from within a source.

          - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
          that have multiple available.

            - *(dict) --* Output groups for this Live Event. Output groups contain information
            about where streams should be distributed.

              - **LanguageCode** *(string) --* When specified this field indicates the three
              letter language code of the caption track to extract from the source.

              - **Name** *(string) --* Name identifier for a caption selector. This name is used
              to associate this caption selector with one or more caption descriptions. Names
              must be unique within an event.

              - **SelectorSettings** *(dict) --* Caption selector settings.

                - **AribSourceSettings** *(dict) --* Arib Source Settings

                - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

                  - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
                  PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
                  is passed through, regardless of selectors.

                - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                  through via the "608 compatibility bytes" fields of the 708 wrapper as well as
                  translated into 708. 708 data present in the source content will be discarded.

                  - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
                  intermittent and/or non-aligned SCTE-20 and Embedded captions.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                  number within the video track from which to extract captions. Unused for
                  passthrough.

                  - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

                - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                  through via the "608 compatibility bytes" fields of the 708 wrapper as well as
                  translated into 708. 708 data present in the source content will be discarded.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                  number within the video track from which to extract captions. Unused for
                  passthrough.

                - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

                  - **Pid** *(integer) --* The pid field is used in conjunction with the caption
                  selector languageCode field as follows: - Specify PID and Language: Extracts
                  captions from that PID; the language is "informational". - Specify PID and omit
                  Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
                  the specified language, whichever PID that happens to be. - Omit PID and omit
                  Language: Valid only if source is DVB-Sub that is being passed through; all
                  languages will be passed through.

                - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

                  - **PageNumber** *(string) --* Specifies the teletext page number within the
                  data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
                  (2303). Unused for passthrough. Should be specified as a hexadecimal string
                  with no "0x" prefix.

          - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

          - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

          - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
          to 5 (strongest).

          - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
          the deblocking filter enabled by default. 1) auto - filtering will be applied depending
          on input type/quality 2) disabled - no filtering will be applied to the input 3) forced
          - filtering will be applied regardless of input type

          - **NetworkInputSettings** *(dict) --* Input settings.

            - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
            HLS manifest.

              - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
              BANDWIDTH that most closely matches this value will be chosen, otherwise the
              highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
              bits per second, as in an HLS manifest.

              - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
              begin this many buffer segments from the end (most recently written segment). When
              not specified, the HLS input will begin with the first segment specified in the
              m3u8.

              - **Retries** *(integer) --* The number of consecutive times that attempts to read
              a manifest or segment must fail before the input is considered unavailable.

              - **RetryInterval** *(integer) --* The number of seconds between retries when an
              attempt to read a manifest or segment fails.

            - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
            checkCryptographyOnly, cryptography in the certificate will be checked, but not the
            server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
            name) do not strictly match the corresponding certificate's wildcard pattern and
            would otherwise cause the event to error. This setting is ignored for protocols that
            do not use https.

          - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
          input to be streamed indefinitely.

          - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
          input types that have multiple available.

            - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
            works in tandem with colorSpaceUsage and a video description's
            colorSpaceSettingsChoice to determine if any conversion will be performed.

            - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
            follow. This field controls how the value in the colorSpace field will be used.
            fallback means that when the input does include color space data, that data will be
            used, but when the input has no color space data, the value in colorSpace will be
            used. Choose fallback if your input is sometimes missing color space data, but when
            it does have color space data, that data is correct. force means to always use the
            value in colorSpace. Choose force if your input usually has no color space data or
            might have unreliable color space data.

            - **SelectorSettings** *(dict) --* The video selector settings.

              - **VideoSelectorPid** *(dict) --* Video Selector Pid

                - **Pid** *(integer) --* Selects a specific PID from within a video source.

              - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

                - **ProgramId** *(integer) --* Selects a specific program from within a
                multi-program transport stream. If the program doesn't exist, the first program
                within the transport stream will be selected by default.

    - **InputSpecification** *(dict) --* Placeholder documentation for InputSpecification

      - **Codec** *(string) --* Input codec

      - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

      - **Resolution** *(string) --* Input resolution, categorized coarsely

    - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.

    - **Name** *(string) --* The name of the channel. (user-mutable)

    - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.

      - *(dict) --* Runtime details of a pipeline when a channel is running.

        - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
        currently being ingested by this pipeline.

        - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
        action that occurred most recently and that resulted in the switch to the current input
        attachment for this pipeline.

        - **PipelineId** *(string) --* Pipeline ID

    - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.

    - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running
    the Channel.

    - **State** *(string) --* Placeholder documentation for ChannelState

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string
    """


_ClientUpdateChannelResponseTypeDef = TypedDict(
    "_ClientUpdateChannelResponseTypeDef",
    {"Channel": ClientUpdateChannelResponseChannelTypeDef},
    total=False,
)


class ClientUpdateChannelResponseTypeDef(_ClientUpdateChannelResponseTypeDef):
    """
    Type definition for `ClientUpdateChannel` `Response`

    - **Channel** *(dict) --* Placeholder documentation for Channel

      - **Arn** *(string) --* The unique arn of the channel.

      - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with two
      pipelines or SINGLE_PIPELINE for a channel with one pipeline.

      - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs, there
      is one destination per output. For other types (HLS, for example), there is one destination
      per packager.

        - *(dict) --* Placeholder documentation for OutputDestination

          - **Id** *(string) --* User-specified id. This is used in an output group or an output.

          - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output;
          one destination for both encoders.

            - *(dict) --* MediaPackage Output Destination Settings

              - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the
              destination for this output group. You do not need to specify the individual inputs
              in MediaPackage; MediaLive will handle the connection of the two MediaLive pipelines
              to the two MediaPackage inputs. The MediaPackage channel and MediaLive channel must
              be in the same region.

          - **Settings** *(list) --* Destination settings for a standard output; one destination
          for each redundant encoder.

            - *(dict) --* Placeholder documentation for OutputDestinationSettings

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
              store

              - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type
              rtmp://)

              - **Url** *(string) --* A URL specifying a destination

              - **Username** *(string) --* username for destination

      - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from

        - *(dict) --* Placeholder documentation for ChannelEgressEndpoint

          - **SourceIp** *(string) --* Public IP of where a channel's output comes from

      - **EncoderSettings** *(dict) --* Encoder Settings

        - **AudioDescriptions** *(list) --* Placeholder documentation for __listOfAudioDescription

          - *(dict) --* Audio Description

            - **AudioNormalizationSettings** *(dict) --* Advanced audio normalization settings.

              - **Algorithm** *(string) --* Audio normalization algorithm to use. itu17701 conforms
              to the CALM Act specification, itu17702 conforms to the EBU R-128 specification.

              - **AlgorithmControl** *(string) --* When set to correctAudio the output audio is
              corrected using the chosen algorithm. If set to measureOnly, the audio will be
              measured but not adjusted.

              - **TargetLkfs** *(float) --* Target LKFS(loudness) to adjust volume to. If no value
              is entered, a default value will be used according to the chosen algorithm. The CALM
              Act (1770-1) recommends a target of -24 LKFS. The EBU R-128 specification (1770-2)
              recommends a target of -23 LKFS.

            - **AudioSelectorName** *(string) --* The name of the AudioSelector used as the source
            for this AudioDescription.

            - **AudioType** *(string) --* Applies only if audioTypeControl is useConfigured. The
            values for audioType are defined in ISO-IEC 13818-1.

            - **AudioTypeControl** *(string) --* Determines how audio type is determined.
            followInput: If the input contains an ISO 639 audioType, then that value is passed
            through to the output. If the input contains no ISO 639 audioType, the value in Audio
            Type is included in the output. useConfigured: The value in Audio Type is included in
            the output. Note that this field and audioType are both ignored if inputType is
            broadcasterMixedAd.

            - **CodecSettings** *(dict) --* Audio codec settings.

              - **AacSettings** *(dict) --* Aac Settings

                - **Bitrate** *(float) --* Average bitrate in bits/second. Valid values depend on
                rate control mode and profile.

                - **CodingMode** *(string) --* Mono, Stereo, or 5.1 channel layout. Valid values
                depend on rate control mode and profile. The adReceiverMix setting receives a
                stereo description plus control track and emits a mono AAC encode of the
                description track, with control data emitted in the PES header as per ETSI TS 101
                154 Annex E.

                - **InputType** *(string) --* Set to "broadcasterMixedAd" when input contains
                pre-mixed main audio + AD (narration) as a stereo pair. The Audio Type field
                (audioType) will be set to 3, which signals to downstream systems that this stream
                contains "broadcaster mixed AD". Note that the input received by the encoder must
                contain pre-mixed audio; the encoder does not perform the mixing. The values in
                audioTypeControl and audioType (in AudioDescription) are ignored when set to
                broadcasterMixedAd. Leave set to "normal" when input does not contain pre-mixed
                audio + AD.

                - **Profile** *(string) --* AAC Profile.

                - **RateControlMode** *(string) --* Rate Control Mode.

                - **RawFormat** *(string) --* Sets LATM / LOAS AAC output for raw containers.

                - **SampleRate** *(float) --* Sample rate in Hz. Valid values depend on rate
                control mode and profile.

                - **Spec** *(string) --* Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw
                or MPEG-2 Transport Stream containers.

                - **VbrQuality** *(string) --* VBR Quality Level - Only used if rateControlMode is
                VBR.

              - **Ac3Settings** *(dict) --* Ac3 Settings

                - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
                the coding mode.

                - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
                emitted AC-3 stream. See ATSC A/52-2012 for background on these values.

                - **CodingMode** *(string) --* Dolby Digital coding mode. Determines number of
                channels.

                - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If excluded and
                input audio is Dolby Digital, dialnorm will be passed through.

                - **DrcProfile** *(string) --* If set to filmStandard, adds dynamic range
                compression signaling to the output bitstream as defined in the Dolby Digital
                specification.

                - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
                to the LFE channel prior to encoding. Only valid in codingMode32Lfe mode.

                - **MetadataControl** *(string) --* When set to "followInput", encoder metadata
                will be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data.
                If audio was not supplied from one of these streams, then the static metadata
                settings will be used.

              - **Eac3Settings** *(dict) --* Eac3 Settings

                - **AttenuationControl** *(string) --* When set to attenuate3Db, applies a 3 dB
                attenuation to the surround channels. Only used for 3/2 coding mode.

                - **Bitrate** *(float) --* Average bitrate in bits/second. Valid bitrates depend on
                the coding mode.

                - **BitstreamMode** *(string) --* Specifies the bitstream mode (bsmod) for the
                emitted E-AC-3 stream. See ATSC A/52-2012 (Annex E) for background on these values.

                - **CodingMode** *(string) --* Dolby Digital Plus coding mode. Determines number of
                channels.

                - **DcFilter** *(string) --* When set to enabled, activates a DC highpass filter
                for all input channels.

                - **Dialnorm** *(integer) --* Sets the dialnorm for the output. If blank and input
                audio is Dolby Digital Plus, dialnorm will be passed through.

                - **DrcLine** *(string) --* Sets the Dolby dynamic range compression profile.

                - **DrcRf** *(string) --* Sets the profile for heavy Dolby dynamic range
                compression, ensures that the instantaneous signal peaks do not exceed specified
                levels.

                - **LfeControl** *(string) --* When encoding 3/2 audio, setting to lfe enables the
                LFE channel

                - **LfeFilter** *(string) --* When set to enabled, applies a 120Hz lowpass filter
                to the LFE channel prior to encoding. Only valid with codingMode32 coding mode.

                - **LoRoCenterMixLevel** *(float) --* Left only/Right only center mix level. Only
                used for 3/2 coding mode.

                - **LoRoSurroundMixLevel** *(float) --* Left only/Right only surround mix level.
                Only used for 3/2 coding mode.

                - **LtRtCenterMixLevel** *(float) --* Left total/Right total center mix level. Only
                used for 3/2 coding mode.

                - **LtRtSurroundMixLevel** *(float) --* Left total/Right total surround mix level.
                Only used for 3/2 coding mode.

                - **MetadataControl** *(string) --* When set to followInput, encoder metadata will
                be sourced from the DD, DD+, or DolbyE decoder that supplied this audio data. If
                audio was not supplied from one of these streams, then the static metadata settings
                will be used.

                - **PassthroughControl** *(string) --* When set to whenPossible, input DD+ audio
                will be passed through if it is present on the input. This detection is dynamic
                over the life of the transcode. Inputs that alternate between DD+ and non-DD+
                content will have a consistent DD+ output as the system alternates between
                passthrough and encoding.

                - **PhaseControl** *(string) --* When set to shift90Degrees, applies a 90-degree
                phase shift to the surround channels. Only used for 3/2 coding mode.

                - **StereoDownmix** *(string) --* Stereo downmix preference. Only used for 3/2
                coding mode.

                - **SurroundExMode** *(string) --* When encoding 3/2 audio, sets whether an extra
                center back surround channel is matrix encoded into the left and right surround
                channels.

                - **SurroundMode** *(string) --* When encoding 2/0 audio, sets whether Dolby
                Surround is matrix encoded into the two channels.

              - **Mp2Settings** *(dict) --* Mp2 Settings

                - **Bitrate** *(float) --* Average bitrate in bits/second.

                - **CodingMode** *(string) --* The MPEG2 Audio coding mode. Valid values are
                codingMode10 (for mono) or codingMode20 (for stereo).

                - **SampleRate** *(float) --* Sample rate in Hz.

              - **PassThroughSettings** *(dict) --* Pass Through Settings

            - **LanguageCode** *(string) --* Indicates the language of the audio output track. Only
            used if languageControlMode is useConfigured, or there is no ISO 639 language code
            specified in the input.

            - **LanguageCodeControl** *(string) --* Choosing followInput will cause the ISO 639
            language code of the output to follow the ISO 639 language code of the input. The
            languageCode will be used when useConfigured is set, or when followInput is selected
            but there is no ISO 639 language code specified by the input.

            - **Name** *(string) --* The name of this AudioDescription. Outputs will use this name
            to uniquely identify this AudioDescription. Description names should be unique within
            this Live Event.

            - **RemixSettings** *(dict) --* Settings that control how input audio channels are
            remixed into the output audio channels.

              - **ChannelMappings** *(list) --* Mapping of input channels to output channels, with
              appropriate gain adjustments.

                - *(dict) --* Audio Channel Mapping

                  - **InputChannelLevels** *(list) --* Indices and gain values for each input
                  channel that should be remixed into this output channel.

                    - *(dict) --* Input Channel Level

                      - **Gain** *(integer) --* Remixing value. Units are in dB and acceptable
                      values are within the range from -60 (mute) and 6 dB.

                      - **InputChannel** *(integer) --* The index of the input channel used as a
                      source.

                  - **OutputChannel** *(integer) --* The index of the output channel being produced.

              - **ChannelsIn** *(integer) --* Number of input channels to be used.

              - **ChannelsOut** *(integer) --* Number of output channels to be produced. Valid
              values: 1, 2, 4, 6, 8

            - **StreamName** *(string) --* Used for MS Smooth and Apple HLS outputs. Indicates the
            name displayed by the player (eg. English, or Director Commentary).

        - **AvailBlanking** *(dict) --* Settings for ad avail blanking.

          - **AvailBlankingImage** *(dict) --* Blanking image to be used. Leave empty for solid
          black. Only bmp and png images are supported.

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
            accessible to the Live system (eg. a http:// URI) depending on the output type. For
            example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            - **Username** *(string) --* Documentation update needed

          - **State** *(string) --* When set to enabled, causes video, audio and captions to be
          blanked when insertion metadata is added.

        - **AvailConfiguration** *(dict) --* Event-wide configuration settings for ad avail
        insertion.

          - **AvailSettings** *(dict) --* Ad avail settings.

            - **Scte35SpliceInsert** *(dict) --* Scte35 Splice Insert

              - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
              added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
              messages and does not apply to OOB messages.

              - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
              with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
              slates

              - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
              with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
              slates

            - **Scte35TimeSignalApos** *(dict) --* Scte35 Time Signal Apos

              - **AdAvailOffset** *(integer) --* When specified, this offset (in milliseconds) is
              added to the input Ad Avail PTS time. This only applies to embedded SCTE 104/35
              messages and does not apply to OOB messages.

              - **NoRegionalBlackoutFlag** *(string) --* When set to ignore, Segment Descriptors
              with noRegionalBlackoutFlag set to 0 will no longer trigger blackouts or Ad Avail
              slates

              - **WebDeliveryAllowedFlag** *(string) --* When set to ignore, Segment Descriptors
              with webDeliveryAllowedFlag set to 0 will no longer trigger blackouts or Ad Avail
              slates

        - **BlackoutSlate** *(dict) --* Settings for blackout slate.

          - **BlackoutSlateImage** *(dict) --* Blackout slate image to be used. Leave empty for
          solid black. Only bmp and png images are supported.

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
            accessible to the Live system (eg. a http:// URI) depending on the output type. For
            example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            - **Username** *(string) --* Documentation update needed

          - **NetworkEndBlackout** *(string) --* Setting to enabled causes the encoder to blackout
          the video, audio, and captions, and raise the "Network Blackout Image" slate when an
          SCTE104/35 Network End Segmentation Descriptor is encountered. The blackout will be
          lifted when the Network Start Segmentation Descriptor is encountered. The Network End and
          Network Start descriptors must contain a network ID that matches the value entered in
          "Network ID".

          - **NetworkEndBlackoutImage** *(dict) --* Path to local file to use as Network End
          Blackout image. Image will be scaled to fill the entire output raster.

            - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
            store

            - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
            accessible to the Live system (eg. a http:// URI) depending on the output type. For
            example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

            - **Username** *(string) --* Documentation update needed

          - **NetworkId** *(string) --* Provides Network ID that matches EIDR ID format (e.g.,
          "10.XXXX/XXXX-XXXX-XXXX-XXXX-XXXX-C").

          - **State** *(string) --* When set to enabled, causes video, audio and captions to be
          blanked when indicated by program metadata.

        - **CaptionDescriptions** *(list) --* Settings for caption decriptions

          - *(dict) --* Output groups for this Live Event. Output groups contain information about
          where streams should be distributed.

            - **CaptionSelectorName** *(string) --* Specifies which input caption selector to use
            as a caption source when generating output captions. This field should match a
            captionSelector name.

            - **DestinationSettings** *(dict) --* Additional settings for captions destination that
            depend on the destination type.

              - **AribDestinationSettings** *(dict) --* Arib Destination Settings

              - **BurnInDestinationSettings** *(dict) --* Burn In Destination Settings

                - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
                setting alignment to centered will place the captions at the bottom center of the
                output. Similarly, setting a left alignment will align captions to the bottom left
                of the output. If x and y positions are given in conjunction with the alignment
                parameter, the font will be justified (either left or centered) relative to those
                coordinates. Selecting "smart" justification will left-justify live subtitles and
                center-justify pre-recorded subtitles. All burn-in and DVB-Sub font settings must
                match.

                - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
                captions. All burn-in and DVB-Sub font settings must match.

                - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
                rectangle. 255 is opaque; 0 is transparent. Leaving this parameter out is
                equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
                must match.

                - **Font** *(dict) --* External font file used for caption burn-in. File extension
                must be 'ttf' or 'tte'. Although the user can select output fonts for many
                different types of input captions, embedded, STL and teletext sources use a strict
                grid system. Using external fonts with these caption sources could cause unexpected
                display of proportional fonts. All burn-in and DVB-Sub font settings must match.

                  - **PasswordParam** *(string) --* key used to extract the password from EC2
                  Parameter store

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                  file accessible to the Live system (eg. a http:// URI) depending on the output
                  type. For example, a RTMP destination should have a uri simliar to:
                  "rtmp://fmsserver/live".

                  - **Username** *(string) --* Documentation update needed

                - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
                option is not valid for source captions that are STL, 608/embedded or teletext.
                These source settings are already pre-defined by the caption stream. All burn-in
                and DVB-Sub font settings must match.

                - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
                255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

                - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
                is 96 dpi. All burn-in and DVB-Sub font settings must match.

                - **FontSize** *(string) --* When set to 'auto' fontSize will scale depending on
                the size of the output. Giving a positive integer will specify the exact font size
                in points. All burn-in and DVB-Sub font settings must match.

                - **OutlineColor** *(string) --* Specifies font outline color. This option is not
                valid for source captions that are either 608/embedded or teletext. These source
                settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
                font settings must match.

                - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
                is not valid for source captions that are either 608/embedded or teletext. These
                source settings are already pre-defined by the caption stream. All burn-in and
                DVB-Sub font settings must match.

                - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
                captions. All burn-in and DVB-Sub font settings must match.

                - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
                opaque; 0 is transparent. Leaving this parameter out is equivalent to setting it to
                0 (transparent). All burn-in and DVB-Sub font settings must match.

                - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
                relative to the captions in pixels. A value of -2 would result in a shadow offset 2
                pixels to the left. All burn-in and DVB-Sub font settings must match.

                - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
                relative to the captions in pixels. A value of -2 would result in a shadow offset 2
                pixels above the text. All burn-in and DVB-Sub font settings must match.

                - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
                used to generate the output subtitles bitmap. Only applicable for Teletext inputs
                and DVB-Sub/Burn-in outputs.

                - **XPosition** *(integer) --* Specifies the horizontal position of the caption
                relative to the left side of the output in pixels. A value of 10 would result in
                the captions starting 10 pixels from the left of the output. If no explicit
                xPosition is provided, the horizontal caption position will be determined by the
                alignment parameter. All burn-in and DVB-Sub font settings must match.

                - **YPosition** *(integer) --* Specifies the vertical position of the caption
                relative to the top of the output in pixels. A value of 10 would result in the
                captions starting 10 pixels from the top of the output. If no explicit yPosition is
                provided, the caption will be positioned towards the bottom of the output. All
                burn-in and DVB-Sub font settings must match.

              - **DvbSubDestinationSettings** *(dict) --* Dvb Sub Destination Settings

                - **Alignment** *(string) --* If no explicit xPosition or yPosition is provided,
                setting alignment to centered will place the captions at the bottom center of the
                output. Similarly, setting a left alignment will align captions to the bottom left
                of the output. If x and y positions are given in conjunction with the alignment
                parameter, the font will be justified (either left or centered) relative to those
                coordinates. Selecting "smart" justification will left-justify live subtitles and
                center-justify pre-recorded subtitles. This option is not valid for source captions
                that are STL or 608/embedded. These source settings are already pre-defined by the
                caption stream. All burn-in and DVB-Sub font settings must match.

                - **BackgroundColor** *(string) --* Specifies the color of the rectangle behind the
                captions. All burn-in and DVB-Sub font settings must match.

                - **BackgroundOpacity** *(integer) --* Specifies the opacity of the background
                rectangle. 255 is opaque; 0 is transparent. Leaving this parameter blank is
                equivalent to setting it to 0 (transparent). All burn-in and DVB-Sub font settings
                must match.

                - **Font** *(dict) --* External font file used for caption burn-in. File extension
                must be 'ttf' or 'tte'. Although the user can select output fonts for many
                different types of input captions, embedded, STL and teletext sources use a strict
                grid system. Using external fonts with these caption sources could cause unexpected
                display of proportional fonts. All burn-in and DVB-Sub font settings must match.

                  - **PasswordParam** *(string) --* key used to extract the password from EC2
                  Parameter store

                  - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a
                  file accessible to the Live system (eg. a http:// URI) depending on the output
                  type. For example, a RTMP destination should have a uri simliar to:
                  "rtmp://fmsserver/live".

                  - **Username** *(string) --* Documentation update needed

                - **FontColor** *(string) --* Specifies the color of the burned-in captions. This
                option is not valid for source captions that are STL, 608/embedded or teletext.
                These source settings are already pre-defined by the caption stream. All burn-in
                and DVB-Sub font settings must match.

                - **FontOpacity** *(integer) --* Specifies the opacity of the burned-in captions.
                255 is opaque; 0 is transparent. All burn-in and DVB-Sub font settings must match.

                - **FontResolution** *(integer) --* Font resolution in DPI (dots per inch); default
                is 96 dpi. All burn-in and DVB-Sub font settings must match.

                - **FontSize** *(string) --* When set to auto fontSize will scale depending on the
                size of the output. Giving a positive integer will specify the exact font size in
                points. All burn-in and DVB-Sub font settings must match.

                - **OutlineColor** *(string) --* Specifies font outline color. This option is not
                valid for source captions that are either 608/embedded or teletext. These source
                settings are already pre-defined by the caption stream. All burn-in and DVB-Sub
                font settings must match.

                - **OutlineSize** *(integer) --* Specifies font outline size in pixels. This option
                is not valid for source captions that are either 608/embedded or teletext. These
                source settings are already pre-defined by the caption stream. All burn-in and
                DVB-Sub font settings must match.

                - **ShadowColor** *(string) --* Specifies the color of the shadow cast by the
                captions. All burn-in and DVB-Sub font settings must match.

                - **ShadowOpacity** *(integer) --* Specifies the opacity of the shadow. 255 is
                opaque; 0 is transparent. Leaving this parameter blank is equivalent to setting it
                to 0 (transparent). All burn-in and DVB-Sub font settings must match.

                - **ShadowXOffset** *(integer) --* Specifies the horizontal offset of the shadow
                relative to the captions in pixels. A value of -2 would result in a shadow offset 2
                pixels to the left. All burn-in and DVB-Sub font settings must match.

                - **ShadowYOffset** *(integer) --* Specifies the vertical offset of the shadow
                relative to the captions in pixels. A value of -2 would result in a shadow offset 2
                pixels above the text. All burn-in and DVB-Sub font settings must match.

                - **TeletextGridControl** *(string) --* Controls whether a fixed grid size will be
                used to generate the output subtitles bitmap. Only applicable for Teletext inputs
                and DVB-Sub/Burn-in outputs.

                - **XPosition** *(integer) --* Specifies the horizontal position of the caption
                relative to the left side of the output in pixels. A value of 10 would result in
                the captions starting 10 pixels from the left of the output. If no explicit
                xPosition is provided, the horizontal caption position will be determined by the
                alignment parameter. This option is not valid for source captions that are STL,
                608/embedded or teletext. These source settings are already pre-defined by the
                caption stream. All burn-in and DVB-Sub font settings must match.

                - **YPosition** *(integer) --* Specifies the vertical position of the caption
                relative to the top of the output in pixels. A value of 10 would result in the
                captions starting 10 pixels from the top of the output. If no explicit yPosition is
                provided, the caption will be positioned towards the bottom of the output. This
                option is not valid for source captions that are STL, 608/embedded or teletext.
                These source settings are already pre-defined by the caption stream. All burn-in
                and DVB-Sub font settings must match.

              - **EmbeddedDestinationSettings** *(dict) --* Embedded Destination Settings

              - **EmbeddedPlusScte20DestinationSettings** *(dict) --* Embedded Plus Scte20
              Destination Settings

              - **RtmpCaptionInfoDestinationSettings** *(dict) --* Rtmp Caption Info Destination
              Settings

              - **Scte20PlusEmbeddedDestinationSettings** *(dict) --* Scte20 Plus Embedded
              Destination Settings

              - **Scte27DestinationSettings** *(dict) --* Scte27 Destination Settings

              - **SmpteTtDestinationSettings** *(dict) --* Smpte Tt Destination Settings

              - **TeletextDestinationSettings** *(dict) --* Teletext Destination Settings

              - **TtmlDestinationSettings** *(dict) --* Ttml Destination Settings

                - **StyleControl** *(string) --* When set to passthrough, passes through style and
                position information from a TTML-like input source (TTML, SMPTE-TT, CFF-TT) to the
                CFF-TT output or TTML output.

              - **WebvttDestinationSettings** *(dict) --* Webvtt Destination Settings

            - **LanguageCode** *(string) --* ISO 639-2 three-digit code:
            http://www.loc.gov/standards/iso639-2/

            - **LanguageDescription** *(string) --* Human readable information to indicate captions
            available for players (eg. English, or Spanish).

            - **Name** *(string) --* Name of the caption description. Used to associate a caption
            description with an output. Names must be unique within an event.

        - **GlobalConfiguration** *(dict) --* Configuration settings that apply to the event as a
        whole.

          - **InitialAudioGain** *(integer) --* Value to set the initial audio gain for the Live
          Event.

          - **InputEndAction** *(string) --* Indicates the action to take when the current input
          completes (e.g. end-of-file). When switchAndLoopInputs is configured the encoder will
          restart at the beginning of the first input. When "none" is configured the encoder will
          transcode either black, a solid color, or a user specified slate images per the "Input
          Loss Behavior" configuration until the next input switch occurs (which is controlled
          through the Channel Schedule API).

          - **InputLossBehavior** *(dict) --* Settings for system actions when input is lost.

            - **BlackFrameMsec** *(integer) --* Documentation update needed

            - **InputLossImageColor** *(string) --* When input loss image type is "color" this
            field specifies the color to use. Value: 6 hex characters representing the values of
            RGB.

            - **InputLossImageSlate** *(dict) --* When input loss image type is "slate" these
            fields specify the parameters for accessing the slate.

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
              store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
              accessible to the Live system (eg. a http:// URI) depending on the output type. For
              example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **InputLossImageType** *(string) --* Indicates whether to substitute a solid color or
            a slate into the output after input loss exceeds blackFrameMsec.

            - **RepeatFrameMsec** *(integer) --* Documentation update needed

          - **OutputLockingMode** *(string) --* Indicates how MediaLive pipelines are synchronized.
          PIPELINELOCKING - MediaLive will attempt to synchronize the output of each pipeline to
          the other. EPOCHLOCKING - MediaLive will attempt to synchronize the output of each
          pipeline to the Unix epoch.

          - **OutputTimingSource** *(string) --* Indicates whether the rate of frames emitted by
          the Live encoder should be paced by its system clock (which optionally may be locked to
          another source via NTP) or should be locked to the clock of the source that is providing
          the input stream.

          - **SupportLowFramerateInputs** *(string) --* Adjusts video input buffer for streams with
          very low video framerates. This is commonly set to enabled for music channels with less
          than one video frame per second.

        - **OutputGroups** *(list) --* Placeholder documentation for __listOfOutputGroup

          - *(dict) --* Output groups for this Live Event. Output groups contain information about
          where streams should be distributed.

            - **Name** *(string) --* Custom output group name optionally defined by the user. Only
            letters, numbers, and the underscore character allowed; only 32 characters allowed.

            - **OutputGroupSettings** *(dict) --* Settings associated with the output group.

              - **ArchiveGroupSettings** *(dict) --* Archive Group Settings

                - **Destination** *(dict) --* A directory and base filename where archive files
                should be written.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **RolloverInterval** *(integer) --* Number of seconds to write to archive file
                before closing and starting a new one.

              - **FrameCaptureGroupSettings** *(dict) --* Frame Capture Group Settings

                - **Destination** *(dict) --* The destination for the frame capture files. Either
                the URI for an Amazon S3 bucket and object, plus a file name prefix (for example,
                s3ssl://sportsDelivery/highlights/20180820/curling_) or the URI for a MediaStore
                container, plus a file name prefix (for example,
                mediastoressl://sportsDelivery/20180820/curling_). The final file names consist of
                the prefix from the destination field (for example, "curling_") + name modifier +
                the counter (5 digits, starting from 00001) + extension (which is always .jpg). For
                example, curlingLow.00001.jpg

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **HlsGroupSettings** *(dict) --* Hls Group Settings

                - **AdMarkers** *(list) --* Choose one or more ad marker types to pass SCTE35
                signals through to this group of Apple HLS outputs.

                  - *(string) --* Hls Ad Markers

                - **BaseUrlContent** *(string) --* A partial URI prefix that will be prepended to
                each output in the media .m3u8 file. Can be used if base manifest is delivered from
                a different URL than the main .m3u8 file.

                - **BaseUrlManifest** *(string) --* A partial URI prefix that will be prepended to
                each output in the media .m3u8 file. Can be used if base manifest is delivered from
                a different URL than the main .m3u8 file.

                - **CaptionLanguageMappings** *(list) --* Mapping of up to 4 caption channels to
                caption languages. Is only meaningful if captionLanguageSetting is set to "insert".

                  - *(dict) --* Maps a caption channel to an ISO 693-2 language code
                  (http://www.loc.gov/standards/iso639-2), with an optional description.

                    - **CaptionChannel** *(integer) --* The closed caption channel being described
                    by this CaptionLanguageMapping. Each channel mapping must have a unique channel
                    number (maximum of 4)

                    - **LanguageCode** *(string) --* Three character ISO 639-2 language code (see
                    http://www.loc.gov/standards/iso639-2)

                    - **LanguageDescription** *(string) --* Textual description of language

                - **CaptionLanguageSetting** *(string) --* Applies only to 608 Embedded output
                captions. insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least
                one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for
                each Language Code you specify. Make sure to specify the languages in the order in
                which they appear in the original source (if the source is embedded format) or the
                order of the caption selectors (if the source is other than embedded). Otherwise,
                languages in the manifest will not match up properly with the output captions.
                none: Include CLOSED-CAPTIONS=NONE line in the manifest. omit: Omit any
                CLOSED-CAPTIONS line from the manifest.

                - **ClientCache** *(string) --* When set to "disabled", sets the
                #EXT-X-ALLOW-CACHE:no tag in the manifest, which prevents clients from saving media
                segments for later replay.

                - **CodecSpecification** *(string) --* Specification to use (RFC-6381 or the
                default RFC-4281) during m3u8 playlist generation.

                - **ConstantIv** *(string) --* For use with encryptionType. This is a 128-bit,
                16-byte hex value represented by a 32-character text string. If ivSource is set to
                "explicit" then this parameter is required and is used as the IV for encryption.

                - **Destination** *(dict) --* A directory or HTTP destination for the HLS segments,
                manifest files, and encryption keys (if enabled).

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **DirectoryStructure** *(string) --* Place segments in subdirectories.

                - **EncryptionType** *(string) --* Encrypts the segments with the given encryption
                scheme. Exclude this parameter if no encryption is desired.

                - **HlsCdnSettings** *(dict) --* Parameters that control interactions with the CDN.

                  - **HlsAkamaiSettings** *(dict) --* Hls Akamai Settings

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                    retrying connection to the CDN if the connection is lost.

                    - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                    streaming outputs.

                    - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                    transfer encoding to Akamai. User should contact Akamai to enable this feature.

                    - **NumRetries** *(integer) --* Number of retry attempts that will be made
                    before the Live Event is put into an error state.

                    - **RestartDelay** *(integer) --* If a streaming output fails, number of
                    seconds to wait until a restart is initiated. A value of 0 means never restart.

                    - **Salt** *(string) --* Salt for authenticated Akamai.

                    - **Token** *(string) --* Token parameter for authenticated akamai. If not
                    specified, _gda_ is used.

                  - **HlsBasicPutSettings** *(dict) --* Hls Basic Put Settings

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                    retrying connection to the CDN if the connection is lost.

                    - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                    streaming outputs.

                    - **NumRetries** *(integer) --* Number of retry attempts that will be made
                    before the Live Event is put into an error state.

                    - **RestartDelay** *(integer) --* If a streaming output fails, number of
                    seconds to wait until a restart is initiated. A value of 0 means never restart.

                  - **HlsMediaStoreSettings** *(dict) --* Hls Media Store Settings

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                    retrying connection to the CDN if the connection is lost.

                    - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                    streaming outputs.

                    - **MediaStoreStorageClass** *(string) --* When set to temporal, output files
                    are stored in non-persistent memory for faster reading and writing.

                    - **NumRetries** *(integer) --* Number of retry attempts that will be made
                    before the Live Event is put into an error state.

                    - **RestartDelay** *(integer) --* If a streaming output fails, number of
                    seconds to wait until a restart is initiated. A value of 0 means never restart.

                  - **HlsWebdavSettings** *(dict) --* Hls Webdav Settings

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                    retrying connection to the CDN if the connection is lost.

                    - **FilecacheDuration** *(integer) --* Size in seconds of file cache for
                    streaming outputs.

                    - **HttpTransferMode** *(string) --* Specify whether or not to use chunked
                    transfer encoding to WebDAV.

                    - **NumRetries** *(integer) --* Number of retry attempts that will be made
                    before the Live Event is put into an error state.

                    - **RestartDelay** *(integer) --* If a streaming output fails, number of
                    seconds to wait until a restart is initiated. A value of 0 means never restart.

                - **IFrameOnlyPlaylists** *(string) --* DISABLED: Do not create an I-frame-only
                manifest, but do create the master and media manifests (according to the Output
                Selection field). STANDARD: Create an I-frame-only manifest for each output that
                contains video, as well as the other manifests (according to the Output Selection
                field). The I-frame manifest contains a #EXT-X-I-FRAMES-ONLY tag to indicate it is
                I-frame only, and one or more #EXT-X-BYTERANGE entries identifying the I-frame
                position. For example, #EXT-X-BYTERANGE:160364@1461888"

                - **IndexNSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies
                the maximum number of segments in the media manifest file. After this maximum,
                older segments are removed from the media manifest. This number must be less than
                or equal to the Keep Segments field.

                - **InputLossAction** *(string) --* Parameter that control output group behavior on
                input loss.

                - **IvInManifest** *(string) --* For use with encryptionType. The IV
                (Initialization Vector) is a 128-bit number used in conjunction with the key for
                encrypting blocks. If set to "include", IV is listed in the manifest, otherwise the
                IV is not in the manifest.

                - **IvSource** *(string) --* For use with encryptionType. The IV (Initialization
                Vector) is a 128-bit number used in conjunction with the key for encrypting blocks.
                If this setting is "followsSegmentNumber", it will cause the IV to change every
                segment (to match the segment number). If this is set to "explicit", you must enter
                a constantIv value.

                - **KeepSegments** *(integer) --* Applies only if Mode field is LIVE. Specifies the
                number of media segments (.ts files) to retain in the destination directory.

                - **KeyFormat** *(string) --* The value specifies how the key is represented in the
                resource identified by the URI. If parameter is absent, an implicit value of
                "identity" is used. A reverse DNS string can also be given.

                - **KeyFormatVersions** *(string) --* Either a single positive integer version
                value or a slash delimited list of version values (1/2/3).

                - **KeyProviderSettings** *(dict) --* The key provider settings.

                  - **StaticKeySettings** *(dict) --* Static Key Settings

                    - **KeyProviderServer** *(dict) --* The URL of the license server used for
                    protecting content.

                      - **PasswordParam** *(string) --* key used to extract the password from EC2
                      Parameter store

                      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path
                      to a file accessible to the Live system (eg. a http:// URI) depending on the
                      output type. For example, a RTMP destination should have a uri simliar to:
                      "rtmp://fmsserver/live".

                      - **Username** *(string) --* Documentation update needed

                    - **StaticKeyValue** *(string) --* Static key value as a 32 character
                    hexadecimal string.

                - **ManifestCompression** *(string) --* When set to gzip, compresses HLS playlist.

                - **ManifestDurationFormat** *(string) --* Indicates whether the output manifest
                should use floating point or integer values for segment duration.

                - **MinSegmentLength** *(integer) --* When set, minimumSegmentLength is enforced by
                looking ahead and back within the specified range for a nearby avail and extending
                the segment size if needed.

                - **Mode** *(string) --* If "vod", all segments are indexed and kept permanently in
                the destination and manifest. If "live", only the number segments specified in
                keepSegments and indexNSegments are kept; newer segments replace older segments,
                which may prevent players from rewinding all the way to the beginning of the event.
                VOD mode uses HLS EXT-X-PLAYLIST-TYPE of EVENT while the channel is running,
                converting it to a "VOD" type manifest on completion of the stream.

                - **OutputSelection** *(string) --* MANIFESTSANDSEGMENTS: Generates manifests
                (master manifest, if applicable, and media manifests) for this output group.
                SEGMENTSONLY: Does not generate any manifests for this output group.

                - **ProgramDateTime** *(string) --* Includes or excludes EXT-X-PROGRAM-DATE-TIME
                tag in .m3u8 manifest files. The value is calculated as follows: either the program
                date and time are initialized using the input timecode source, or the time is
                initialized using the input timecode source and the date is initialized using the
                timestampOffset.

                - **ProgramDateTimePeriod** *(integer) --* Period of insertion of
                EXT-X-PROGRAM-DATE-TIME entry, in seconds.

                - **RedundantManifest** *(string) --* ENABLED: The master manifest (.m3u8 file) for
                each pipeline includes information about both pipelines: first its own media files,
                then the media files of the other pipeline. This feature allows playout device that
                support stale manifest detection to switch from one manifest to the other, when the
                current manifest seems to be stale. There are still two destinations and two master
                manifests, but both master manifests reference the media files from both pipelines.
                DISABLED: The master manifest (.m3u8 file) for each pipeline includes information
                about its own pipeline only. For an HLS output group with MediaPackage as the
                destination, the DISABLED behavior is always followed. MediaPackage regenerates the
                manifests it serves to players so a redundant manifest from MediaLive is irrelevant.

                - **SegmentLength** *(integer) --* Length of MPEG-2 Transport Stream segments to
                create (in seconds). Note that segments will end on the next keyframe after this
                number of seconds, so actual segment length may be longer.

                - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
                configured segment size is always used.

                - **SegmentsPerSubdirectory** *(integer) --* Number of segments to write to a
                subdirectory before starting a new one. directoryStructure must be
                subdirectoryPerStream for this setting to have an effect.

                - **StreamInfResolution** *(string) --* Include or exclude RESOLUTION attribute for
                video in EXT-X-STREAM-INF tag of variant manifest.

                - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

                - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

                - **TimestampDeltaMilliseconds** *(integer) --* Provides an extra millisecond delta
                offset to fine tune the timestamps.

                - **TsFileMode** *(string) --* SEGMENTEDFILES: Emit the program as segments -
                multiple .ts media files. SINGLEFILE: Applies only if Mode field is VOD. Emit the
                program as a single .ts media file. The media manifest includes #EXT-X-BYTERANGE
                tags to index segments for playback. A typical use for this value is when sending
                the output to AWS Elemental MediaConvert, which can accept only a single media
                file. Playback while the channel is running is not guaranteed due to HTTP server
                caching.

              - **MediaPackageGroupSettings** *(dict) --* Media Package Group Settings

                - **Destination** *(dict) --* MediaPackage channel destination.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

              - **MsSmoothGroupSettings** *(dict) --* Ms Smooth Group Settings

                - **AcquisitionPointId** *(string) --* The value of the "Acquisition Point
                Identity" element used in each message placed in the sparse track. Only enabled if
                sparseTrackType is not "none".

                - **AudioOnlyTimecodeControl** *(string) --* If set to passthrough for an
                audio-only MS Smooth output, the fragment absolute time will be set to the current
                timecode. This option does not write timecodes to the audio elementary stream.

                - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the https
                certificate chain to a trusted Certificate Authority (CA). This will cause https
                outputs to self-signed certificates to fail.

                - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                retrying connection to the IIS server if the connection is lost. Content will be
                cached during this time and the cache will be be delivered to the IIS server once
                the connection is re-established.

                - **Destination** *(dict) --* Smooth Streaming publish point on an IIS server.
                Elemental Live acts as a "Push" encoder to IIS.

                  - **DestinationRefId** *(string) --* Placeholder documentation for __string

                - **EventId** *(string) --* MS Smooth event ID to be sent to the IIS server. Should
                only be specified if eventIdMode is set to useConfigured.

                - **EventIdMode** *(string) --* Specifies whether or not to send an event ID to the
                IIS server. If no event ID is sent and the same Live Event is used without changing
                the publishing point, clients might see cached video from the previous run.
                Options: - "useConfigured" - use the value provided in eventId - "useTimestamp" -
                generate and send an event ID based on the current timestamp - "noEventId" - do not
                send an event ID to the IIS server.

                - **EventStopBehavior** *(string) --* When set to sendEos, send EOS signal to IIS
                server when stopping the event

                - **FilecacheDuration** *(integer) --* Size in seconds of file cache for streaming
                outputs.

                - **FragmentLength** *(integer) --* Length of mp4 fragments to generate (in
                seconds). Fragment length must be compatible with GOP size and framerate.

                - **InputLossAction** *(string) --* Parameter that control output group behavior on
                input loss.

                - **NumRetries** *(integer) --* Number of retry attempts.

                - **RestartDelay** *(integer) --* Number of seconds before initiating a restart due
                to output failure, due to exhausting the numRetries on one segment, or exceeding
                filecacheDuration.

                - **SegmentationMode** *(string) --* useInputSegmentation has been deprecated. The
                configured segment size is always used.

                - **SendDelayMs** *(integer) --* Number of milliseconds to delay the output from
                the second pipeline.

                - **SparseTrackType** *(string) --* If set to scte35, use incoming SCTE-35 messages
                to generate a sparse track in this group of MS-Smooth outputs.

                - **StreamManifestBehavior** *(string) --* When set to send, send stream manifest
                so publishing point doesn't start until all streams start.

                - **TimestampOffset** *(string) --* Timestamp offset for the event. Only used if
                timestampOffsetMode is set to useConfiguredOffset.

                - **TimestampOffsetMode** *(string) --* Type of timestamp date offset to use. -
                useEventStartDate: Use the date the event was started as the offset -
                useConfiguredOffset: Use an explicitly configured date as the offset

              - **RtmpGroupSettings** *(dict) --* Rtmp Group Settings

                - **AuthenticationScheme** *(string) --* Authentication scheme to use when
                connecting with CDN

                - **CacheFullBehavior** *(string) --* Controls behavior when content cache fills
                up. If remote origin server stalls the RTMP connection and does not accept content
                fast enough the 'Media Cache' will fill up. When the cache reaches the duration
                specified by cacheLength the cache will stop accepting new content. If set to
                disconnectImmediately, the RTMP output will force a disconnect. Clear the media
                cache, and reconnect after restartDelay seconds. If set to waitForServer, the RTMP
                output will wait up to 5 minutes to allow the origin server to begin accepting data
                again.

                - **CacheLength** *(integer) --* Cache length, in seconds, is used to calculate
                buffer size.

                - **CaptionData** *(string) --* Controls the types of data that passes to
                onCaptionInfo outputs. If set to 'all' then 608 and 708 carried DTVCC data will be
                passed. If set to 'field1AndField2608' then DTVCC data will be stripped out, but
                608 data from both fields will be passed. If set to 'field1608' then only the data
                carried in 608 from field 1 video will be passed.

                - **InputLossAction** *(string) --* Controls the behavior of this RTMP group if
                input becomes unavailable. - emitOutput: Emit a slate until input returns. -
                pauseOutput: Stop transmitting data until input returns. This does not close the
                underlying RTMP connection.

                - **RestartDelay** *(integer) --* If a streaming output fails, number of seconds to
                wait until a restart is initiated. A value of 0 means never restart.

              - **UdpGroupSettings** *(dict) --* Udp Group Settings

                - **InputLossAction** *(string) --* Specifies behavior of last resort when input
                video is lost, and no more backup inputs are available. When dropTs is selected the
                entire transport stream will stop being emitted. When dropProgram is selected the
                program can be dropped from the transport stream (and replaced with null packets to
                meet the TS bitrate requirement). Or, when emitProgram is chosen the transport
                stream will continue to be produced normally with repeat frames, black frames, or
                slate frames substituted for the absent input video.

                - **TimedMetadataId3Frame** *(string) --* Indicates ID3 frame that has the timecode.

                - **TimedMetadataId3Period** *(integer) --* Timed Metadata interval in seconds.

            - **Outputs** *(list) --* Placeholder documentation for __listOfOutput

              - *(dict) --* Output settings. There can be multiple outputs within a group.

                - **AudioDescriptionNames** *(list) --* The names of the AudioDescriptions used as
                audio sources for this output.

                  - *(string) --* Placeholder documentation for __string

                - **CaptionDescriptionNames** *(list) --* The names of the CaptionDescriptions used
                as caption sources for this output.

                  - *(string) --* Placeholder documentation for __string

                - **OutputName** *(string) --* The name used to identify an output.

                - **OutputSettings** *(dict) --* Output type-specific settings.

                  - **ArchiveOutputSettings** *(dict) --* Archive Output Settings

                    - **ContainerSettings** *(dict) --* Settings specific to the container type of
                    the file.

                      - **M2tsSettings** *(dict) --* M2ts Settings

                        - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                        streams will be removed from the program if the selected input audio stream
                        is removed from the input. This allows the output audio configuration to
                        dynamically change based on input configuration. If this is set to
                        encodeSilence, all output audio streams will output encoded silence when
                        not connected to an active input stream.

                        - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                        muxing and removes video descriptor.

                        - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                        Captions in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                        for ARIB Captions will be auto-selected from unused pids. If set to
                        useConfigured, ARIB Captions will be on the configured pid number.

                        - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                        for Dolby Digital audio. When set to atsc, the ATSC model is used.

                        - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                        for each PES packet.

                        - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                        audio stream(s) in the transport stream. Multiple values are accepted, and
                        can be entered in ranges and/or by comma separation. Can be entered as
                        decimal or hexadecimal values. Each PID specified must be in the range of
                        32 (or 0x20)..8182 (or 0x1ff6).

                        - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                        0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                        type = 0x06.

                        - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                        bits per second. Setting to 0 lets the muxer automatically determine the
                        appropriate bitrate.

                        - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                        model for accurate interleaving. Setting to bufferModel to none can lead to
                        lower latency, but low-memory devices may not be able to play back the
                        stream without interruptions.

                        - **CcDescriptor** *(string) --* When set to enabled, generates
                        captionServiceDescriptor in PMT.

                        - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                        (NIT) at the specified table repetition interval.

                          - **NetworkId** *(integer) --* The numeric value placed in the Network
                          Information Table (NIT).

                          - **NetworkName** *(string) --* The network name text placed in the
                          networkNameDescriptor inside the Network Information Table. Maximum
                          length is 256 characters.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                        - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                        (SDT) at the specified table repetition interval.

                          - **OutputSdt** *(string) --* Selects method of inserting SDT information
                          into output stream. The sdtFollow setting copies SDT information from
                          input stream to output stream. The sdtFollowIfPresent setting copies SDT
                          information from input stream to output stream if SDT information is
                          present in the input, otherwise it will fall back on the user-defined
                          values. The sdtManual setting means user will enter the SDT information.
                          The sdtNone setting means output stream will not contain SDT information.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                          - **ServiceName** *(string) --* The service name placed in the
                          serviceDescriptor in the Service Description Table. Maximum length is 256
                          characters.

                          - **ServiceProviderName** *(string) --* The service provider name placed
                          in the serviceDescriptor in the Service Description Table. Maximum length
                          is 256 characters.

                        - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                        Subtitle data to this output. Multiple values are accepted, and can be
                        entered in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                        the specified table repetition interval.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                        - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                        DVB Teletext data to this output. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                        the input source to this output.

                        - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                        selected, audio EBP markers will be added to partitions 3 and 4. The
                        interval between these additional markers will be fixed, and will be
                        slightly shorter than the video EBP marker interval. Only available when
                        EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                        always follow the video interval.

                        - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                        Boundary Points do not come within the specified time interval of each
                        other by looking ahead at input video. If another EBP is going to come in
                        within the specified time interval, the current EBP is not emitted, and the
                        segment is "stretched" to the next marker. The lookahead value does not add
                        latency to the system. The Live Event must be configured elsewhere to
                        create sufficient latency to make the lookahead accurate.

                        - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                        If set to videoAndAudioPids, EBP markers will be placed on the video PID
                        and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                        the video PID.

                        - **EcmPid** *(string) --* This field is unused and deprecated.

                        - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                        PES header.

                        - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                        ETV Platform data to this output. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                        ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                        value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **FragmentTime** *(float) --* The length in seconds of each fragment.
                        Only used with EBP markers.

                        - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                        input source to this output.

                        - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                        KLV data to this output. Multiple values are accepted, and can be entered
                        in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                        packets to insert into the transport stream. This can be used if a
                        downstream encryption system requires periodic null packets.

                        - **PatInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. Valid values are 0,
                        10..1000.

                        - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                        Clock Reference value is inserted for every Packetized Elementary Stream
                        (PES) header. This parameter is effective only when the PCR PID is the same
                        as the video or audio elementary stream.

                        - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                        Clock Reference (PCRs) inserted into the transport stream.

                        - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                        Reference (PCR) in the transport stream. When no value is given, the
                        encoder will assign the same value as the Video PID. Can be entered as a
                        decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                        0x1ff6).

                        - **PmtInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. Valid values are 0,
                        10..1000.

                        - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                        Table (PMT) in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **ProgramNum** *(integer) --* The value of the program number field in
                        the Program Map Table.

                        - **RateMode** *(string) --* When vbr, does not insert null packets into
                        transport stream to fill specified bitrate. The bitrate setting acts as the
                        maximum bitrate when vbr is set.

                        - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                        SCTE-27 data to this output. Multiple values are accepted, and can be
                        entered in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                        input source to this output.

                        - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                        in the transport stream. Can be entered as a decimal or hexadecimal value.
                        Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                        each segmentationTime period. raiSegstart sets the Random Access Indicator
                        bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                        timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                        at the start of segments. ebp adds Encoder Boundary Point information to
                        the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                        ebpLegacy adds Encoder Boundary Point information to the adaptation field
                        using a legacy proprietary format.

                        - **SegmentationStyle** *(string) --* The segmentation style parameter
                        controls how segmentation markers are inserted into the transport stream.
                        With avails, it is possible that segments may be truncated, which can
                        influence where future segmentation markers are inserted. When a
                        segmentation style of "resetCadence" is selected and a segment is truncated
                        due to an avail, we will reset the segmentation cadence. This means the
                        subsequent segment will have a duration of $segmentationTime seconds. When
                        a segmentation style of "maintainCadence" is selected and a segment is
                        truncated due to an avail, we will not reset the segmentation cadence. This
                        means the subsequent segment will likely be truncated as well. However, all
                        segments after that will have a duration of $segmentationTime seconds. Note
                        that EBP lookahead is a slight exception to this rule.

                        - **SegmentationTime** *(float) --* The length in seconds of each segment.
                        Required unless markers is set to None_.

                        - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                        metadata will be passed through from input to output.

                        - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                        metadata stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **TransportStreamId** *(integer) --* The value of the transport stream ID
                        field in the Program Map Table.

                        - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                        video stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Extension** *(string) --* Output file extension. If excluded, this will be
                    auto-selected from the container type.

                    - **NameModifier** *(string) --* String concatenated to the end of the
                    destination filename. Required for multiple outputs of the same type.

                  - **FrameCaptureOutputSettings** *(dict) --* Frame Capture Output Settings

                    - **NameModifier** *(string) --* Required if the output group contains more
                    than one output. This modifier forms part of the output file name.

                  - **HlsOutputSettings** *(dict) --* Hls Output Settings

                    - **HlsSettings** *(dict) --* Settings regarding the underlying stream. These
                    settings are different for audio-only outputs.

                      - **AudioOnlyHlsSettings** *(dict) --* Audio Only Hls Settings

                        - **AudioGroupId** *(string) --* Specifies the group to which the audio
                        Rendition belongs.

                        - **AudioOnlyImage** *(dict) --* Optional. Specifies the .jpg or .png image
                        to use as the cover art for an audio-only output. We recommend a low
                        bit-size file because the image increases the output audio bandwidth. The
                        image is attached to the audio as an ID3 tag, frame type APIC, picture type
                        0x10, as per the "ID3 tag version 2.4.0 - Native Frames" standard.

                          - **PasswordParam** *(string) --* key used to extract the password from
                          EC2 Parameter store

                          - **Uri** *(string) --* Uniform Resource Identifier - This should be a
                          path to a file accessible to the Live system (eg. a http:// URI)
                          depending on the output type. For example, a RTMP destination should have
                          a uri simliar to: "rtmp://fmsserver/live".

                          - **Username** *(string) --* Documentation update needed

                        - **AudioTrackType** *(string) --* Four types of audio-only tracks are
                        supported: Audio-Only Variant Stream The client can play back this
                        audio-only stream instead of video in low-bandwidth scenarios. Represented
                        as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select,
                        Default Alternate rendition that the client should try to play back by
                        default. Represented as an EXT-X-MEDIA in the HLS manifest with
                        DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default
                        Alternate rendition that the client may try to play back by default.
                        Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO,
                        AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that
                        the client will not try to play back by default. Represented as an
                        EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO

                      - **StandardHlsSettings** *(dict) --* Standard Hls Settings

                        - **AudioRenditionSets** *(string) --* List all the audio groups that are
                        used with the video output stream. Input all the audio GROUP-IDs that are
                        associated to the video, separate by ','.

                        - **M3u8Settings** *(dict) --* Settings information for the .m3u8 container

                          - **AudioFramesPerPes** *(integer) --* The number of audio frames to
                          insert for each PES packet.

                          - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                          audio stream(s) in the transport stream. Multiple values are accepted,
                          and can be entered in ranges and/or by comma separation. Can be entered
                          as decimal or hexadecimal values.

                          - **EcmPid** *(string) --* This parameter is unused and deprecated.

                          - **PatInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream. A value of
                          \\"0\\" writes out the PMT once per segment file.

                          - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                          Clock Reference value is inserted for every Packetized Elementary Stream
                          (PES) header. This parameter is effective only when the PCR PID is the
                          same as the video or audio elementary stream.

                          - **PcrPeriod** *(integer) --* Maximum time in milliseconds between
                          Program Clock References (PCRs) inserted into the transport stream.

                          - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                          Reference (PCR) in the transport stream. When no value is given, the
                          encoder will assign the same value as the Video PID. Can be entered as a
                          decimal or hexadecimal value.

                          - **PmtInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream. A value of
                          \\"0\\" writes out the PMT once per segment file.

                          - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                          Table (PMT) in the transport stream. Can be entered as a decimal or
                          hexadecimal value.

                          - **ProgramNum** *(integer) --* The value of the program number field in
                          the Program Map Table.

                          - **Scte35Behavior** *(string) --* If set to passthrough, passes any
                          SCTE-35 signals from the input source to this output.

                          - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35
                          stream in the transport stream. Can be entered as a decimal or
                          hexadecimal value.

                          - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                          metadata is passed through from input to output.

                          - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                          metadata stream in the transport stream. Can be entered as a decimal or
                          hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                          - **TransportStreamId** *(integer) --* The value of the transport stream
                          ID field in the Program Map Table.

                          - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                          video stream in the transport stream. Can be entered as a decimal or
                          hexadecimal value.

                    - **NameModifier** *(string) --* String concatenated to the end of the
                    destination filename. Accepts \\"Format
                    Identifiers\\":#formatIdentifierParameters.

                    - **SegmentModifier** *(string) --* String concatenated to end of segment
                    filenames.

                  - **MediaPackageOutputSettings** *(dict) --* Media Package Output Settings

                  - **MsSmoothOutputSettings** *(dict) --* Ms Smooth Output Settings

                    - **H265PackagingType** *(string) --* Only applicable when this output is
                    referencing an H.265 video description. Specifies whether MP4 segments should
                    be packaged as HEV1 or HVC1.

                    - **NameModifier** *(string) --* String concatenated to the end of the
                    destination filename. Required for multiple outputs of the same type.

                  - **RtmpOutputSettings** *(dict) --* Rtmp Output Settings

                    - **CertificateMode** *(string) --* If set to verifyAuthenticity, verify the
                    tls certificate chain to a trusted Certificate Authority (CA). This will cause
                    rtmps outputs with self-signed certificates to fail.

                    - **ConnectionRetryInterval** *(integer) --* Number of seconds to wait before
                    retrying a connection to the Flash Media server if the connection is lost.

                    - **Destination** *(dict) --* The RTMP endpoint excluding the stream name (eg.
                    rtmp://host/appname). For connection to Akamai, a username and password must be
                    supplied. URI fields accept format identifiers.

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string

                    - **NumRetries** *(integer) --* Number of retry attempts.

                  - **UdpOutputSettings** *(dict) --* Udp Output Settings

                    - **BufferMsec** *(integer) --* UDP output buffering in milliseconds. Larger
                    values increase latency through the transcoder but simultaneously assist the
                    transcoder in maintaining a constant, low-jitter UDP/RTP output while
                    accommodating clock recovery, input switching, input disruptions, picture
                    reordering, etc.

                    - **ContainerSettings** *(dict) --* Udp Container Settings

                      - **M2tsSettings** *(dict) --* M2ts Settings

                        - **AbsentInputAudioBehavior** *(string) --* When set to drop, output audio
                        streams will be removed from the program if the selected input audio stream
                        is removed from the input. This allows the output audio configuration to
                        dynamically change based on input configuration. If this is set to
                        encodeSilence, all output audio streams will output encoded silence when
                        not connected to an active input stream.

                        - **Arib** *(string) --* When set to enabled, uses ARIB-compliant field
                        muxing and removes video descriptor.

                        - **AribCaptionsPid** *(string) --* Packet Identifier (PID) for ARIB
                        Captions in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **AribCaptionsPidControl** *(string) --* If set to auto, pid number used
                        for ARIB Captions will be auto-selected from unused pids. If set to
                        useConfigured, ARIB Captions will be on the configured pid number.

                        - **AudioBufferModel** *(string) --* When set to dvb, uses DVB buffer model
                        for Dolby Digital audio. When set to atsc, the ATSC model is used.

                        - **AudioFramesPerPes** *(integer) --* The number of audio frames to insert
                        for each PES packet.

                        - **AudioPids** *(string) --* Packet Identifier (PID) of the elementary
                        audio stream(s) in the transport stream. Multiple values are accepted, and
                        can be entered in ranges and/or by comma separation. Can be entered as
                        decimal or hexadecimal values. Each PID specified must be in the range of
                        32 (or 0x20)..8182 (or 0x1ff6).

                        - **AudioStreamType** *(string) --* When set to atsc, uses stream type =
                        0x81 for AC3 and stream type = 0x87 for EAC3. When set to dvb, uses stream
                        type = 0x06.

                        - **Bitrate** *(integer) --* The output bitrate of the transport stream in
                        bits per second. Setting to 0 lets the muxer automatically determine the
                        appropriate bitrate.

                        - **BufferModel** *(string) --* If set to multiplex, use multiplex buffer
                        model for accurate interleaving. Setting to bufferModel to none can lead to
                        lower latency, but low-memory devices may not be able to play back the
                        stream without interruptions.

                        - **CcDescriptor** *(string) --* When set to enabled, generates
                        captionServiceDescriptor in PMT.

                        - **DvbNitSettings** *(dict) --* Inserts DVB Network Information Table
                        (NIT) at the specified table repetition interval.

                          - **NetworkId** *(integer) --* The numeric value placed in the Network
                          Information Table (NIT).

                          - **NetworkName** *(string) --* The network name text placed in the
                          networkNameDescriptor inside the Network Information Table. Maximum
                          length is 256 characters.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                        - **DvbSdtSettings** *(dict) --* Inserts DVB Service Description Table
                        (SDT) at the specified table repetition interval.

                          - **OutputSdt** *(string) --* Selects method of inserting SDT information
                          into output stream. The sdtFollow setting copies SDT information from
                          input stream to output stream. The sdtFollowIfPresent setting copies SDT
                          information from input stream to output stream if SDT information is
                          present in the input, otherwise it will fall back on the user-defined
                          values. The sdtManual setting means user will enter the SDT information.
                          The sdtNone setting means output stream will not contain SDT information.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                          - **ServiceName** *(string) --* The service name placed in the
                          serviceDescriptor in the Service Description Table. Maximum length is 256
                          characters.

                          - **ServiceProviderName** *(string) --* The service provider name placed
                          in the serviceDescriptor in the Service Description Table. Maximum length
                          is 256 characters.

                        - **DvbSubPids** *(string) --* Packet Identifier (PID) for input source DVB
                        Subtitle data to this output. Multiple values are accepted, and can be
                        entered in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **DvbTdtSettings** *(dict) --* Inserts DVB Time and Date Table (TDT) at
                        the specified table repetition interval.

                          - **RepInterval** *(integer) --* The number of milliseconds between
                          instances of this table in the output transport stream.

                        - **DvbTeletextPid** *(string) --* Packet Identifier (PID) for input source
                        DVB Teletext data to this output. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **Ebif** *(string) --* If set to passthrough, passes any EBIF data from
                        the input source to this output.

                        - **EbpAudioInterval** *(string) --* When videoAndFixedIntervals is
                        selected, audio EBP markers will be added to partitions 3 and 4. The
                        interval between these additional markers will be fixed, and will be
                        slightly shorter than the video EBP marker interval. Only available when
                        EBP Cablelabs segmentation markers are selected. Partitions 1 and 2 will
                        always follow the video interval.

                        - **EbpLookaheadMs** *(integer) --* When set, enforces that Encoder
                        Boundary Points do not come within the specified time interval of each
                        other by looking ahead at input video. If another EBP is going to come in
                        within the specified time interval, the current EBP is not emitted, and the
                        segment is "stretched" to the next marker. The lookahead value does not add
                        latency to the system. The Live Event must be configured elsewhere to
                        create sufficient latency to make the lookahead accurate.

                        - **EbpPlacement** *(string) --* Controls placement of EBP on Audio PIDs.
                        If set to videoAndAudioPids, EBP markers will be placed on the video PID
                        and all audio PIDs. If set to videoPid, EBP markers will be placed on only
                        the video PID.

                        - **EcmPid** *(string) --* This field is unused and deprecated.

                        - **EsRateInPes** *(string) --* Include or exclude the ES Rate field in the
                        PES header.

                        - **EtvPlatformPid** *(string) --* Packet Identifier (PID) for input source
                        ETV Platform data to this output. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **EtvSignalPid** *(string) --* Packet Identifier (PID) for input source
                        ETV Signal data to this output. Can be entered as a decimal or hexadecimal
                        value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **FragmentTime** *(float) --* The length in seconds of each fragment.
                        Only used with EBP markers.

                        - **Klv** *(string) --* If set to passthrough, passes any KLV data from the
                        input source to this output.

                        - **KlvDataPids** *(string) --* Packet Identifier (PID) for input source
                        KLV data to this output. Multiple values are accepted, and can be entered
                        in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **NullPacketBitrate** *(float) --* Value in bits per second of extra null
                        packets to insert into the transport stream. This can be used if a
                        downstream encryption system requires periodic null packets.

                        - **PatInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. Valid values are 0,
                        10..1000.

                        - **PcrControl** *(string) --* When set to pcrEveryPesPacket, a Program
                        Clock Reference value is inserted for every Packetized Elementary Stream
                        (PES) header. This parameter is effective only when the PCR PID is the same
                        as the video or audio elementary stream.

                        - **PcrPeriod** *(integer) --* Maximum time in milliseconds between Program
                        Clock Reference (PCRs) inserted into the transport stream.

                        - **PcrPid** *(string) --* Packet Identifier (PID) of the Program Clock
                        Reference (PCR) in the transport stream. When no value is given, the
                        encoder will assign the same value as the Video PID. Can be entered as a
                        decimal or hexadecimal value. Valid values are 32 (or 0x20)..8182 (or
                        0x1ff6).

                        - **PmtInterval** *(integer) --* The number of milliseconds between
                        instances of this table in the output transport stream. Valid values are 0,
                        10..1000.

                        - **PmtPid** *(string) --* Packet Identifier (PID) for the Program Map
                        Table (PMT) in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **ProgramNum** *(integer) --* The value of the program number field in
                        the Program Map Table.

                        - **RateMode** *(string) --* When vbr, does not insert null packets into
                        transport stream to fill specified bitrate. The bitrate setting acts as the
                        maximum bitrate when vbr is set.

                        - **Scte27Pids** *(string) --* Packet Identifier (PID) for input source
                        SCTE-27 data to this output. Multiple values are accepted, and can be
                        entered in ranges and/or by comma separation. Can be entered as decimal or
                        hexadecimal values. Each PID specified must be in the range of 32 (or
                        0x20)..8182 (or 0x1ff6).

                        - **Scte35Control** *(string) --* Optionally pass SCTE-35 signals from the
                        input source to this output.

                        - **Scte35Pid** *(string) --* Packet Identifier (PID) of the SCTE-35 stream
                        in the transport stream. Can be entered as a decimal or hexadecimal value.
                        Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **SegmentationMarkers** *(string) --* Inserts segmentation markers at
                        each segmentationTime period. raiSegstart sets the Random Access Indicator
                        bit in the adaptation field. raiAdapt sets the RAI bit and adds the current
                        timecode in the private data bytes. psiSegstart inserts PAT and PMT tables
                        at the start of segments. ebp adds Encoder Boundary Point information to
                        the adaptation field as per OpenCable specification OC-SP-EBP-I01-130118.
                        ebpLegacy adds Encoder Boundary Point information to the adaptation field
                        using a legacy proprietary format.

                        - **SegmentationStyle** *(string) --* The segmentation style parameter
                        controls how segmentation markers are inserted into the transport stream.
                        With avails, it is possible that segments may be truncated, which can
                        influence where future segmentation markers are inserted. When a
                        segmentation style of "resetCadence" is selected and a segment is truncated
                        due to an avail, we will reset the segmentation cadence. This means the
                        subsequent segment will have a duration of $segmentationTime seconds. When
                        a segmentation style of "maintainCadence" is selected and a segment is
                        truncated due to an avail, we will not reset the segmentation cadence. This
                        means the subsequent segment will likely be truncated as well. However, all
                        segments after that will have a duration of $segmentationTime seconds. Note
                        that EBP lookahead is a slight exception to this rule.

                        - **SegmentationTime** *(float) --* The length in seconds of each segment.
                        Required unless markers is set to None_.

                        - **TimedMetadataBehavior** *(string) --* When set to passthrough, timed
                        metadata will be passed through from input to output.

                        - **TimedMetadataPid** *(string) --* Packet Identifier (PID) of the timed
                        metadata stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                        - **TransportStreamId** *(integer) --* The value of the transport stream ID
                        field in the Program Map Table.

                        - **VideoPid** *(string) --* Packet Identifier (PID) of the elementary
                        video stream in the transport stream. Can be entered as a decimal or
                        hexadecimal value. Valid values are 32 (or 0x20)..8182 (or 0x1ff6).

                    - **Destination** *(dict) --* Destination address and port number for RTP or
                    UDP packets. Can be unicast or multicast RTP or UDP (eg.
                    rtp://239.10.10.10:5001 or udp://10.100.100.100:5002).

                      - **DestinationRefId** *(string) --* Placeholder documentation for __string

                    - **FecOutputSettings** *(dict) --* Settings for enabling and adjusting Forward
                    Error Correction on UDP outputs.

                      - **ColumnDepth** *(integer) --* Parameter D from SMPTE 2022-1. The height of
                      the FEC protection matrix. The number of transport stream packets per column
                      error correction packet. Must be between 4 and 20, inclusive.

                      - **IncludeFec** *(string) --* Enables column only or column and row based FEC

                      - **RowLength** *(integer) --* Parameter L from SMPTE 2022-1. The width of
                      the FEC protection matrix. Must be between 1 and 20, inclusive. If only
                      Column FEC is used, then larger values increase robustness. If Row FEC is
                      used, then this is the number of transport stream packets per row error
                      correction packet, and the value must be between 4 and 20, inclusive, if
                      includeFec is columnAndRow. If includeFec is column, this value must be 1 to
                      20, inclusive.

                - **VideoDescriptionName** *(string) --* The name of the VideoDescription used as
                the source for this output.

        - **TimecodeConfig** *(dict) --* Contains settings used to acquire and adjust timecode
        information from inputs.

          - **Source** *(string) --* Identifies the source for the timecode that will be associated
          with the events outputs. -Embedded (embedded): Initialize the output timecode with
          timecode from the the source. If no embedded timecode is detected in the source, the
          system falls back to using "Start at 0" (zerobased). -System Clock (systemclock): Use the
          UTC time. -Start at 0 (zerobased): The time of the first frame of the event will be
          00:00:00:00.

          - **SyncThreshold** *(integer) --* Threshold in frames beyond which output timecode is
          resynchronized to the input timecode. Discrepancies below this threshold are permitted to
          avoid unnecessary discontinuities in the output timecode. No timecode sync when this is
          not specified.

        - **VideoDescriptions** *(list) --* Placeholder documentation for __listOfVideoDescription

          - *(dict) --* Video settings for this stream.

            - **CodecSettings** *(dict) --* Video codec settings.

              - **FrameCaptureSettings** *(dict) --* Frame Capture Settings

                - **CaptureInterval** *(integer) --* The frequency, in seconds, for capturing
                frames for inclusion in the output. For example, "10" means capture a frame every
                10 seconds.

              - **H264Settings** *(dict) --* H264 Settings

                - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
                quantizers to vary to improve visual quality.

                - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
                output stream. If afdSignaling is "auto", the system will try to preserve the input
                AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
                AFD value will be the value configured in the fixedAfd parameter.

                - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
                control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
                output must have a unique value when its bitrate is rounded down to the nearest
                multiple of 1000.

                - **BufFillPct** *(integer) --* Percentage of the buffer that should initially be
                filled (HRD buffer model).

                - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

                - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

                - **ColorSpaceSettings** *(dict) --* Color Space settings

                  - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
                  space conversion to the output

                  - **Rec601Settings** *(dict) --* Rec601 Settings

                  - **Rec709Settings** *(dict) --* Rec709 Settings

                - **EntropyEncoding** *(string) --* Entropy encoding mode. Use cabac (must be in
                Main or High profile) or cavlc.

                - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
                the output stream. Only valid when afdSignaling is set to 'Fixed'.

                - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
                frame to reduce flicker or 'pop' on I-frames.

                - **FramerateControl** *(string) --* This field indicates how the output video
                frame rate is specified. If "specified" is selected then the output video frame
                rate is determined by framerateNumerator and framerateDenominator, else if
                "initializeFromSource" is selected then the output video frame rate will be set
                equal to the input video frame rate of the first input.

                - **FramerateDenominator** *(integer) --* Framerate denominator.

                - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
                fraction, e.g. 24000 / 1001 = 23.976 fps.

                - **GopBReference** *(string) --* Documentation update needed

                - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
                applications, it is recommended that this be set to 1 so a decoder joining
                mid-stream will receive an IDR frame as quickly as possible. Setting this value to
                0 will break output segmenting.

                - **GopNumBFrames** *(integer) --* Number of B-frames between reference frames.

                - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
                or seconds per gopSizeUnits. Must be greater than zero.

                - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
                seconds. If seconds the system will convert the gopSize into a frame count at run
                time.

                - **Level** *(string) --* H.264 Level.

                - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
                decrease latency and memory usage, while high can produce better quality for
                certain content.

                - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level For
                VBR: Set the maximum bitrate in order to accommodate expected spikes in the
                complexity of the video.

                - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
                enabled. Enforces separation between repeated (cadence) I-frames and I-frames
                inserted by Scene Change Detection. If a scene change I-frame is within I-interval
                frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
                I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
                normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
                Min-I-interval - 1

                - **NumRefFrames** *(integer) --* Number of reference frames to use. The encoder
                may use more than requested if using B-frames and/or interlaced encoding.

                - **ParControl** *(string) --* This field indicates how the output pixel aspect
                ratio is specified. If "specified" is selected then the output video pixel aspect
                ratio is determined by parNumerator and parDenominator, else if
                "initializeFromSource" is selected then the output pixsel aspect ratio will be set
                equal to the input video pixel aspect ratio of the first input.

                - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

                - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

                - **Profile** *(string) --* H.264 Profile.

                - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
                encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
                quality level field and Max bitrate field that suit your most important viewing
                devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
                bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
                Quality level: 6. Max bitrate: 1M to 1.5M

                - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
                specified quality level except when it is constrained by the maximum bitrate.
                Recommended if you or your viewers pay for bandwidth. VBR: Quality and bitrate
                vary, depending on the video complexity. Recommended instead of QVBR if you want to
                maintain a specific average bitrate over the duration of the channel. CBR: Quality
                varies, depending on the video complexity. Recommended only if you distribute your
                assets to devices that cannot handle variable bitrates.

                - **ScanType** *(string) --* Sets the scan type of the output to progressive or
                top-field-first interlaced.

                - **SceneChangeDetect** *(string) --* Scene change detection. - On: inserts
                I-frames when scene change is detected. - Off: does not force an I-frame when scene
                change is detected.

                - **Slices** *(integer) --* Number of slices per picture. Must be less than or
                equal to the number of macroblock rows for progressive pictures, and less than or
                equal to half the number of macroblock rows for interlaced pictures. This field is
                optional; when no value is specified the encoder will choose the number of slices
                based on encode resolution.

                - **Softness** *(integer) --* Softness. Selects quantizer matrix, larger values
                reduce high-frequency content in the encoded image.

                - **SpatialAq** *(string) --* If set to enabled, adjust quantization within each
                frame based on spatial variation of content complexity.

                - **SubgopLength** *(string) --* If set to fixed, use gopNumBFrames B-frames per
                sub-GOP. If set to dynamic, optimize the number of B-frames used for each sub-GOP
                to improve visual quality.

                - **Syntax** *(string) --* Produces a bitstream compliant with SMPTE RP-2027.

                - **TemporalAq** *(string) --* If set to enabled, adjust quantization within each
                frame based on temporal variation of content complexity.

                - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
                into the video elementary stream. - 'disabled': Do not include timecodes -
                'picTimingSei': Pass through picture timing SEI messages from the source specified
                in Timecode Config

              - **H265Settings** *(dict) --* H265 Settings

                - **AdaptiveQuantization** *(string) --* Adaptive quantization. Allows intra-frame
                quantizers to vary to improve visual quality.

                - **AfdSignaling** *(string) --* Indicates that AFD values will be written into the
                output stream. If afdSignaling is "auto", the system will try to preserve the input
                AFD value (in cases where multiple AFD values are valid). If set to "fixed", the
                AFD value will be the value configured in the fixedAfd parameter.

                - **AlternativeTransferFunction** *(string) --* Whether or not EML should insert an
                Alternative Transfer Function SEI message to support backwards compatibility with
                non-HDR decoders and displays.

                - **Bitrate** *(integer) --* Average bitrate in bits/second. Required when the rate
                control mode is VBR or CBR. Not used for QVBR. In an MS Smooth output group, each
                output must have a unique value when its bitrate is rounded down to the nearest
                multiple of 1000.

                - **BufSize** *(integer) --* Size of buffer (HRD buffer model) in bits.

                - **ColorMetadata** *(string) --* Includes colorspace metadata in the output.

                - **ColorSpaceSettings** *(dict) --* Color Space settings

                  - **ColorSpacePassthroughSettings** *(dict) --* Passthrough applies no color
                  space conversion to the output

                  - **Hdr10Settings** *(dict) --* Hdr10 Settings

                    - **MaxCll** *(integer) --* Maximum Content Light Level An integer metadata
                    value defining the maximum light level, in nits, of any single pixel within an
                    encoded HDR video stream or file.

                    - **MaxFall** *(integer) --* Maximum Frame Average Light Level An integer
                    metadata value defining the maximum average light level, in nits, for any
                    single frame within an encoded HDR video stream or file.

                  - **Rec601Settings** *(dict) --* Rec601 Settings

                  - **Rec709Settings** *(dict) --* Rec709 Settings

                - **FixedAfd** *(string) --* Four bit AFD value to write on all frames of video in
                the output stream. Only valid when afdSignaling is set to 'Fixed'.

                - **FlickerAq** *(string) --* If set to enabled, adjust quantization within each
                frame to reduce flicker or 'pop' on I-frames.

                - **FramerateDenominator** *(integer) --* Framerate denominator.

                - **FramerateNumerator** *(integer) --* Framerate numerator - framerate is a
                fraction, e.g. 24000 / 1001 = 23.976 fps.

                - **GopClosedCadence** *(integer) --* Frequency of closed GOPs. In streaming
                applications, it is recommended that this be set to 1 so a decoder joining
                mid-stream will receive an IDR frame as quickly as possible. Setting this value to
                0 will break output segmenting.

                - **GopSize** *(float) --* GOP size (keyframe interval) in units of either frames
                or seconds per gopSizeUnits. Must be greater than zero.

                - **GopSizeUnits** *(string) --* Indicates if the gopSize is specified in frames or
                seconds. If seconds the system will convert the gopSize into a frame count at run
                time.

                - **Level** *(string) --* H.265 Level.

                - **LookAheadRateControl** *(string) --* Amount of lookahead. A value of low can
                decrease latency and memory usage, while high can produce better quality for
                certain content.

                - **MaxBitrate** *(integer) --* For QVBR: See the tooltip for Quality level

                - **MinIInterval** *(integer) --* Only meaningful if sceneChangeDetect is set to
                enabled. Enforces separation between repeated (cadence) I-frames and I-frames
                inserted by Scene Change Detection. If a scene change I-frame is within I-interval
                frames of a cadence I-frame, the GOP is shrunk and/or stretched to the scene change
                I-frame. GOP stretch requires enabling lookahead as well as setting I-interval. The
                normal cadence resumes for the next GOP. Note: Maximum GOP stretch = GOP size +
                Min-I-interval - 1

                - **ParDenominator** *(integer) --* Pixel Aspect Ratio denominator.

                - **ParNumerator** *(integer) --* Pixel Aspect Ratio numerator.

                - **Profile** *(string) --* H.265 Profile.

                - **QvbrQualityLevel** *(integer) --* Controls the target quality for the video
                encode. Applies only when the rate control mode is QVBR. Set values for the QVBR
                quality level field and Max bitrate field that suit your most important viewing
                devices. Recommended values are: - Primary screen: Quality level: 8 to 10. Max
                bitrate: 4M - PC or tablet: Quality level: 7. Max bitrate: 1.5M to 3M - Smartphone:
                Quality level: 6. Max bitrate: 1M to 1.5M

                - **RateControlMode** *(string) --* Rate control mode. QVBR: Quality will match the
                specified quality level except when it is constrained by the maximum bitrate.
                Recommended if you or your viewers pay for bandwidth. CBR: Quality varies,
                depending on the video complexity. Recommended only if you distribute your assets
                to devices that cannot handle variable bitrates.

                - **ScanType** *(string) --* Sets the scan type of the output to progressive or
                top-field-first interlaced.

                - **SceneChangeDetect** *(string) --* Scene change detection.

                - **Slices** *(integer) --* Number of slices per picture. Must be less than or
                equal to the number of macroblock rows for progressive pictures, and less than or
                equal to half the number of macroblock rows for interlaced pictures. This field is
                optional; when no value is specified the encoder will choose the number of slices
                based on encode resolution.

                - **Tier** *(string) --* H.265 Tier.

                - **TimecodeInsertion** *(string) --* Determines how timecodes should be inserted
                into the video elementary stream. - 'disabled': Do not include timecodes -
                'picTimingSei': Pass through picture timing SEI messages from the source specified
                in Timecode Config

            - **Height** *(integer) --* Output video height, in pixels. Must be an even number. For
            most codecs, you can leave this field and width blank in order to use the height and
            width (resolution) from the source. Note, however, that leaving blank is not
            recommended. For the Frame Capture codec, height and width are required.

            - **Name** *(string) --* The name of this VideoDescription. Outputs will use this name
            to uniquely identify this Description. Description names should be unique within this
            Live Event.

            - **RespondToAfd** *(string) --* Indicates how to respond to the AFD values in the
            input stream. RESPOND causes input video to be clipped, depending on the AFD value,
            input display aspect ratio, and output display aspect ratio, and (except for
            FRAMECAPTURE codec) includes the values in the output. PASSTHROUGH (does not apply to
            FRAMECAPTURE codec) ignores the AFD values and includes the values in the output, so
            input video is not clipped. NONE ignores the AFD values and does not include the values
            through to the output, so input video is not clipped.

            - **ScalingBehavior** *(string) --* STRETCHTOOUTPUT configures the output position to
            stretch the video to the specified output resolution (height and width). This option
            will override any position value. DEFAULT may insert black boxes (pillar boxes or
            letter boxes) around the video to provide the specified output resolution.

            - **Sharpness** *(integer) --* Changes the strength of the anti-alias filter used for
            scaling. 0 is the softest setting, 100 is the sharpest. A setting of 50 is recommended
            for most content.

            - **Width** *(integer) --* Output video width, in pixels. Must be an even number. For
            most codecs, you can leave this field and height blank in order to use the height and
            width (resolution) from the source. Note, however, that leaving blank is not
            recommended. For the Frame Capture codec, height and width are required.

      - **Id** *(string) --* The unique id of the channel.

      - **InputAttachments** *(list) --* List of input attachments for channel.

        - *(dict) --* Placeholder documentation for InputAttachment

          - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
          required if the user wants to use this input in an input switch action.

          - **InputId** *(string) --* The ID of the input

          - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

            - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
            that have multiple available.

              - *(dict) --* Audio Selector

                - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will use
                this name to uniquely identify this Selector. Selector names should be unique per
                input.

                - **SelectorSettings** *(dict) --* The audio selector settings.

                  - **AudioLanguageSelection** *(dict) --* Audio Language Selection

                    - **LanguageCode** *(string) --* Selects a specific three-letter language code
                    from within an audio source.

                    - **LanguageSelectionPolicy** *(string) --* When set to "strict", the transport
                    stream demux strictly identifies audio streams by their language descriptor. If
                    a PMT update occurs such that an audio stream matching the initially selected
                    language is no longer present then mute will be encoded until the language
                    returns. If "loose", then on a PMT update the demux will choose another audio
                    stream in the program with the same stream type if it can't find one with the
                    same language.

                  - **AudioPidSelection** *(dict) --* Audio Pid Selection

                    - **Pid** *(integer) --* Selects a specific PID from within a source.

            - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
            that have multiple available.

              - *(dict) --* Output groups for this Live Event. Output groups contain information
              about where streams should be distributed.

                - **LanguageCode** *(string) --* When specified this field indicates the three
                letter language code of the caption track to extract from the source.

                - **Name** *(string) --* Name identifier for a caption selector. This name is used
                to associate this caption selector with one or more caption descriptions. Names
                must be unique within an event.

                - **SelectorSettings** *(dict) --* Caption selector settings.

                  - **AribSourceSettings** *(dict) --* Arib Source Settings

                  - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

                    - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use this
                    PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub content
                    is passed through, regardless of selectors.

                  - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

                    - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                    through via the "608 compatibility bytes" fields of the 708 wrapper as well as
                    translated into 708. 708 data present in the source content will be discarded.

                    - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
                    intermittent and/or non-aligned SCTE-20 and Embedded captions.

                    - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                    number within the video track from which to extract captions. Unused for
                    passthrough.

                    - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

                  - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

                    - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                    through via the "608 compatibility bytes" fields of the 708 wrapper as well as
                    translated into 708. 708 data present in the source content will be discarded.

                    - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                    number within the video track from which to extract captions. Unused for
                    passthrough.

                  - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

                    - **Pid** *(integer) --* The pid field is used in conjunction with the caption
                    selector languageCode field as follows: - Specify PID and Language: Extracts
                    captions from that PID; the language is "informational". - Specify PID and omit
                    Language: Extracts the specified PID. - Omit PID and specify Language: Extracts
                    the specified language, whichever PID that happens to be. - Omit PID and omit
                    Language: Valid only if source is DVB-Sub that is being passed through; all
                    languages will be passed through.

                  - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

                    - **PageNumber** *(string) --* Specifies the teletext page number within the
                    data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
                    (2303). Unused for passthrough. Should be specified as a hexadecimal string
                    with no "0x" prefix.

            - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

            - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

            - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1 (minimal)
            to 5 (strongest).

            - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs have
            the deblocking filter enabled by default. 1) auto - filtering will be applied depending
            on input type/quality 2) disabled - no filtering will be applied to the input 3) forced
            - filtering will be applied regardless of input type

            - **NetworkInputSettings** *(dict) --* Input settings.

              - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for a
              HLS manifest.

                - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
                BANDWIDTH that most closely matches this value will be chosen, otherwise the
                highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
                bits per second, as in an HLS manifest.

                - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
                begin this many buffer segments from the end (most recently written segment). When
                not specified, the HLS input will begin with the first segment specified in the
                m3u8.

                - **Retries** *(integer) --* The number of consecutive times that attempts to read
                a manifest or segment must fail before the input is considered unavailable.

                - **RetryInterval** *(integer) --* The number of seconds between retries when an
                attempt to read a manifest or segment fails.

              - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
              checkCryptographyOnly, cryptography in the certificate will be checked, but not the
              server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
              name) do not strictly match the corresponding certificate's wildcard pattern and
              would otherwise cause the event to error. This setting is ignored for protocols that
              do not use https.

            - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
            input to be streamed indefinitely.

            - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
            input types that have multiple available.

              - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
              works in tandem with colorSpaceUsage and a video description's
              colorSpaceSettingsChoice to determine if any conversion will be performed.

              - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other than
              follow. This field controls how the value in the colorSpace field will be used.
              fallback means that when the input does include color space data, that data will be
              used, but when the input has no color space data, the value in colorSpace will be
              used. Choose fallback if your input is sometimes missing color space data, but when
              it does have color space data, that data is correct. force means to always use the
              value in colorSpace. Choose force if your input usually has no color space data or
              might have unreliable color space data.

              - **SelectorSettings** *(dict) --* The video selector settings.

                - **VideoSelectorPid** *(dict) --* Video Selector Pid

                  - **Pid** *(integer) --* Selects a specific PID from within a video source.

                - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

                  - **ProgramId** *(integer) --* Selects a specific program from within a
                  multi-program transport stream. If the program doesn't exist, the first program
                  within the transport stream will be selected by default.

      - **InputSpecification** *(dict) --* Placeholder documentation for InputSpecification

        - **Codec** *(string) --* Input codec

        - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

        - **Resolution** *(string) --* Input resolution, categorized coarsely

      - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.

      - **Name** *(string) --* The name of the channel. (user-mutable)

      - **PipelineDetails** *(list) --* Runtime details for the pipelines of a running channel.

        - *(dict) --* Runtime details of a pipeline when a channel is running.

          - **ActiveInputAttachmentName** *(string) --* The name of the active input attachment
          currently being ingested by this pipeline.

          - **ActiveInputSwitchActionName** *(string) --* The name of the input switch schedule
          action that occurred most recently and that resulted in the switch to the current input
          attachment for this pipeline.

          - **PipelineId** *(string) --* Pipeline ID

      - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.

      - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running
      the Channel.

      - **State** *(string) --* Placeholder documentation for ChannelState

      - **Tags** *(dict) --* A collection of key-value pairs.

        - *(string) --* Placeholder documentation for __string

          - *(string) --* Placeholder documentation for __string
    """


_ClientUpdateInputDestinationsTypeDef = TypedDict(
    "_ClientUpdateInputDestinationsTypeDef", {"StreamName": str}, total=False
)


class ClientUpdateInputDestinationsTypeDef(_ClientUpdateInputDestinationsTypeDef):
    """
    Type definition for `ClientUpdateInput` `Destinations`

    - **StreamName** *(string) --* A unique name for the location the RTMP stream is being pushed
    to.
    """


_ClientUpdateInputResponseInputDestinationsVpcTypeDef = TypedDict(
    "_ClientUpdateInputResponseInputDestinationsVpcTypeDef",
    {"AvailabilityZone": str, "NetworkInterfaceId": str},
    total=False,
)


class ClientUpdateInputResponseInputDestinationsVpcTypeDef(
    _ClientUpdateInputResponseInputDestinationsVpcTypeDef
):
    """
    Type definition for `ClientUpdateInputResponseInputDestinations` `Vpc`

    - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

    - **NetworkInterfaceId** *(string) --* The network interface ID of the Input
    destination in the VPC.
    """


_ClientUpdateInputResponseInputDestinationsTypeDef = TypedDict(
    "_ClientUpdateInputResponseInputDestinationsTypeDef",
    {
        "Ip": str,
        "Port": str,
        "Url": str,
        "Vpc": ClientUpdateInputResponseInputDestinationsVpcTypeDef,
    },
    total=False,
)


class ClientUpdateInputResponseInputDestinationsTypeDef(
    _ClientUpdateInputResponseInputDestinationsTypeDef
):
    """
    Type definition for `ClientUpdateInputResponseInput` `Destinations`

    - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains
    fixed for the lifetime of the input.

    - **Port** *(string) --* The port number for the input.

    - **Url** *(string) --* This represents the endpoint that the customer stream will be
    pushed to.

    - **Vpc** *(dict) --* The properties for a VPC type input destination.

      - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

      - **NetworkInterfaceId** *(string) --* The network interface ID of the Input
      destination in the VPC.
    """


_ClientUpdateInputResponseInputMediaConnectFlowsTypeDef = TypedDict(
    "_ClientUpdateInputResponseInputMediaConnectFlowsTypeDef",
    {"FlowArn": str},
    total=False,
)


class ClientUpdateInputResponseInputMediaConnectFlowsTypeDef(
    _ClientUpdateInputResponseInputMediaConnectFlowsTypeDef
):
    """
    Type definition for `ClientUpdateInputResponseInput` `MediaConnectFlows`

    - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a
    source.
    """


_ClientUpdateInputResponseInputSourcesTypeDef = TypedDict(
    "_ClientUpdateInputResponseInputSourcesTypeDef",
    {"PasswordParam": str, "Url": str, "Username": str},
    total=False,
)


class ClientUpdateInputResponseInputSourcesTypeDef(
    _ClientUpdateInputResponseInputSourcesTypeDef
):
    """
    Type definition for `ClientUpdateInputResponseInput` `Sources`

    - **PasswordParam** *(string) --* The key used to extract the password from EC2 Parameter
    store.

    - **Url** *(string) --* This represents the customer's source URL where stream is pulled
    from.

    - **Username** *(string) --* The username for the input source.
    """


_ClientUpdateInputResponseInputTypeDef = TypedDict(
    "_ClientUpdateInputResponseInputTypeDef",
    {
        "Arn": str,
        "AttachedChannels": List[Any],
        "Destinations": List[ClientUpdateInputResponseInputDestinationsTypeDef],
        "Id": str,
        "InputClass": str,
        "InputSourceType": str,
        "MediaConnectFlows": List[
            ClientUpdateInputResponseInputMediaConnectFlowsTypeDef
        ],
        "Name": str,
        "RoleArn": str,
        "SecurityGroups": List[Any],
        "Sources": List[ClientUpdateInputResponseInputSourcesTypeDef],
        "State": str,
        "Tags": Dict[str, str],
        "Type": str,
    },
    total=False,
)


class ClientUpdateInputResponseInputTypeDef(_ClientUpdateInputResponseInputTypeDef):
    """
    Type definition for `ClientUpdateInputResponse` `Input`

    - **Arn** *(string) --* The Unique ARN of the input (generated, immutable).

    - **AttachedChannels** *(list) --* A list of channel IDs that that input is attached to
    (currently an input can only be attached to one channel).

      - *(string) --* Placeholder documentation for __string

    - **Destinations** *(list) --* A list of the destinations of the input (PUSH-type).

      - *(dict) --* The settings for a PUSH type input.

        - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains
        fixed for the lifetime of the input.

        - **Port** *(string) --* The port number for the input.

        - **Url** *(string) --* This represents the endpoint that the customer stream will be
        pushed to.

        - **Vpc** *(dict) --* The properties for a VPC type input destination.

          - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

          - **NetworkInterfaceId** *(string) --* The network interface ID of the Input
          destination in the VPC.

    - **Id** *(string) --* The generated ID of the input (unique for user account, immutable).

    - **InputClass** *(string) --* STANDARD - MediaLive expects two sources to be connected to
    this input. If the channel is also STANDARD, both sources will be ingested. If the channel is
    SINGLE_PIPELINE, only the first source will be ingested; the second source will always be
    ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one source to
    this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If the
    ChannelClass is STANDARD, this value is not valid because the channel requires two sources in
    the input.

    - **InputSourceType** *(string) --* Certain pull input sources can be dynamic, meaning that
    they can have their URL's dynamically changes during input switch actions. Presently, this
    functionality only works with MP4_FILE inputs.

    - **MediaConnectFlows** *(list) --* A list of MediaConnect Flows for this input.

      - *(dict) --* The settings for a MediaConnect Flow.

        - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a
        source.

    - **Name** *(string) --* The user-assigned name (This is a mutable value).

    - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role this input assumes
    during and after creation.

    - **SecurityGroups** *(list) --* A list of IDs for all the Input Security Groups attached to
    the input.

      - *(string) --* Placeholder documentation for __string

    - **Sources** *(list) --* A list of the sources of the input (PULL-type).

      - *(dict) --* The settings for a PULL type input.

        - **PasswordParam** *(string) --* The key used to extract the password from EC2 Parameter
        store.

        - **Url** *(string) --* This represents the customer's source URL where stream is pulled
        from.

        - **Username** *(string) --* The username for the input source.

    - **State** *(string) --* Placeholder documentation for InputState

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string

    - **Type** *(string) --* Placeholder documentation for InputType
    """


_ClientUpdateInputResponseTypeDef = TypedDict(
    "_ClientUpdateInputResponseTypeDef",
    {"Input": ClientUpdateInputResponseInputTypeDef},
    total=False,
)


class ClientUpdateInputResponseTypeDef(_ClientUpdateInputResponseTypeDef):
    """
    Type definition for `ClientUpdateInput` `Response`

    - **Input** *(dict) --* Placeholder documentation for Input

      - **Arn** *(string) --* The Unique ARN of the input (generated, immutable).

      - **AttachedChannels** *(list) --* A list of channel IDs that that input is attached to
      (currently an input can only be attached to one channel).

        - *(string) --* Placeholder documentation for __string

      - **Destinations** *(list) --* A list of the destinations of the input (PUSH-type).

        - *(dict) --* The settings for a PUSH type input.

          - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains
          fixed for the lifetime of the input.

          - **Port** *(string) --* The port number for the input.

          - **Url** *(string) --* This represents the endpoint that the customer stream will be
          pushed to.

          - **Vpc** *(dict) --* The properties for a VPC type input destination.

            - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

            - **NetworkInterfaceId** *(string) --* The network interface ID of the Input
            destination in the VPC.

      - **Id** *(string) --* The generated ID of the input (unique for user account, immutable).

      - **InputClass** *(string) --* STANDARD - MediaLive expects two sources to be connected to
      this input. If the channel is also STANDARD, both sources will be ingested. If the channel is
      SINGLE_PIPELINE, only the first source will be ingested; the second source will always be
      ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one source to
      this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If the
      ChannelClass is STANDARD, this value is not valid because the channel requires two sources in
      the input.

      - **InputSourceType** *(string) --* Certain pull input sources can be dynamic, meaning that
      they can have their URL's dynamically changes during input switch actions. Presently, this
      functionality only works with MP4_FILE inputs.

      - **MediaConnectFlows** *(list) --* A list of MediaConnect Flows for this input.

        - *(dict) --* The settings for a MediaConnect Flow.

          - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a
          source.

      - **Name** *(string) --* The user-assigned name (This is a mutable value).

      - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role this input assumes
      during and after creation.

      - **SecurityGroups** *(list) --* A list of IDs for all the Input Security Groups attached to
      the input.

        - *(string) --* Placeholder documentation for __string

      - **Sources** *(list) --* A list of the sources of the input (PULL-type).

        - *(dict) --* The settings for a PULL type input.

          - **PasswordParam** *(string) --* The key used to extract the password from EC2 Parameter
          store.

          - **Url** *(string) --* This represents the customer's source URL where stream is pulled
          from.

          - **Username** *(string) --* The username for the input source.

      - **State** *(string) --* Placeholder documentation for InputState

      - **Tags** *(dict) --* A collection of key-value pairs.

        - *(string) --* Placeholder documentation for __string

          - *(string) --* Placeholder documentation for __string

      - **Type** *(string) --* Placeholder documentation for InputType
    """


_ClientUpdateInputSecurityGroupResponseSecurityGroupWhitelistRulesTypeDef = TypedDict(
    "_ClientUpdateInputSecurityGroupResponseSecurityGroupWhitelistRulesTypeDef",
    {"Cidr": str},
    total=False,
)


class ClientUpdateInputSecurityGroupResponseSecurityGroupWhitelistRulesTypeDef(
    _ClientUpdateInputSecurityGroupResponseSecurityGroupWhitelistRulesTypeDef
):
    """
    Type definition for `ClientUpdateInputSecurityGroupResponseSecurityGroup` `WhitelistRules`

    - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
    """


_ClientUpdateInputSecurityGroupResponseSecurityGroupTypeDef = TypedDict(
    "_ClientUpdateInputSecurityGroupResponseSecurityGroupTypeDef",
    {
        "Arn": str,
        "Id": str,
        "Inputs": List[str],
        "State": str,
        "Tags": Dict[str, str],
        "WhitelistRules": List[
            ClientUpdateInputSecurityGroupResponseSecurityGroupWhitelistRulesTypeDef
        ],
    },
    total=False,
)


class ClientUpdateInputSecurityGroupResponseSecurityGroupTypeDef(
    _ClientUpdateInputSecurityGroupResponseSecurityGroupTypeDef
):
    """
    Type definition for `ClientUpdateInputSecurityGroupResponse` `SecurityGroup`

    - **Arn** *(string) --* Unique ARN of Input Security Group

    - **Id** *(string) --* The Id of the Input Security Group

    - **Inputs** *(list) --* The list of inputs currently using this Input Security Group.

      - *(string) --* Placeholder documentation for __string

    - **State** *(string) --* The current state of the Input Security Group.

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string

    - **WhitelistRules** *(list) --* Whitelist rules and their sync status

      - *(dict) --* Whitelist rule

        - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
    """


_ClientUpdateInputSecurityGroupResponseTypeDef = TypedDict(
    "_ClientUpdateInputSecurityGroupResponseTypeDef",
    {"SecurityGroup": ClientUpdateInputSecurityGroupResponseSecurityGroupTypeDef},
    total=False,
)


class ClientUpdateInputSecurityGroupResponseTypeDef(
    _ClientUpdateInputSecurityGroupResponseTypeDef
):
    """
    Type definition for `ClientUpdateInputSecurityGroup` `Response`

    - **SecurityGroup** *(dict) --* An Input Security Group

      - **Arn** *(string) --* Unique ARN of Input Security Group

      - **Id** *(string) --* The Id of the Input Security Group

      - **Inputs** *(list) --* The list of inputs currently using this Input Security Group.

        - *(string) --* Placeholder documentation for __string

      - **State** *(string) --* The current state of the Input Security Group.

      - **Tags** *(dict) --* A collection of key-value pairs.

        - *(string) --* Placeholder documentation for __string

          - *(string) --* Placeholder documentation for __string

      - **WhitelistRules** *(list) --* Whitelist rules and their sync status

        - *(dict) --* Whitelist rule

          - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
    """


_ClientUpdateInputSecurityGroupWhitelistRulesTypeDef = TypedDict(
    "_ClientUpdateInputSecurityGroupWhitelistRulesTypeDef", {"Cidr": str}, total=False
)


class ClientUpdateInputSecurityGroupWhitelistRulesTypeDef(
    _ClientUpdateInputSecurityGroupWhitelistRulesTypeDef
):
    """
    Type definition for `ClientUpdateInputSecurityGroup` `WhitelistRules`

    - **Cidr** *(string) --* The IPv4 CIDR to whitelist.
    """


_ClientUpdateReservationResponseReservationResourceSpecificationTypeDef = TypedDict(
    "_ClientUpdateReservationResponseReservationResourceSpecificationTypeDef",
    {
        "ChannelClass": str,
        "Codec": str,
        "MaximumBitrate": str,
        "MaximumFramerate": str,
        "Resolution": str,
        "ResourceType": str,
        "SpecialFeature": str,
        "VideoQuality": str,
    },
    total=False,
)


class ClientUpdateReservationResponseReservationResourceSpecificationTypeDef(
    _ClientUpdateReservationResponseReservationResourceSpecificationTypeDef
):
    """
    Type definition for `ClientUpdateReservationResponseReservation` `ResourceSpecification`

    - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

    - **Codec** *(string) --* Codec, e.g. 'AVC'

    - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

    - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

    - **Resolution** *(string) --* Resolution, e.g. 'HD'

    - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

    - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
    only)

    - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
    """


_ClientUpdateReservationResponseReservationTypeDef = TypedDict(
    "_ClientUpdateReservationResponseReservationTypeDef",
    {
        "Arn": str,
        "Count": int,
        "CurrencyCode": str,
        "Duration": int,
        "DurationUnits": str,
        "End": str,
        "FixedPrice": float,
        "Name": str,
        "OfferingDescription": str,
        "OfferingId": str,
        "OfferingType": str,
        "Region": str,
        "ReservationId": str,
        "ResourceSpecification": ClientUpdateReservationResponseReservationResourceSpecificationTypeDef,
        "Start": str,
        "State": str,
        "Tags": Dict[str, str],
        "UsagePrice": float,
    },
    total=False,
)


class ClientUpdateReservationResponseReservationTypeDef(
    _ClientUpdateReservationResponseReservationTypeDef
):
    """
    Type definition for `ClientUpdateReservationResponse` `Reservation`

    - **Arn** *(string) --* Unique reservation ARN, e.g.
    'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'

    - **Count** *(integer) --* Number of reserved resources

    - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217
    format, e.g. 'USD'

    - **Duration** *(integer) --* Lease duration, e.g. '12'

    - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'

    - **End** *(string) --* Reservation UTC end date and time in ISO-8601 format, e.g.
    '2019-03-01T00:00:00'

    - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a
    NO_UPFRONT offering

    - **Name** *(string) --* User specified reservation name

    - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20
    Mbps, 30 fps, and standard VQ in US West (Oregon)'

    - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'

    - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'

    - **Region** *(string) --* AWS region, e.g. 'us-west-2'

    - **ReservationId** *(string) --* Unique reservation ID, e.g. '1234567'

    - **ResourceSpecification** *(dict) --* Resource configuration details

      - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

      - **Codec** *(string) --* Codec, e.g. 'AVC'

      - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

      - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

      - **Resolution** *(string) --* Resolution, e.g. 'HD'

      - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

      - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
      only)

      - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)

    - **Start** *(string) --* Reservation UTC start date and time in ISO-8601 format, e.g.
    '2018-03-01T00:00:00'

    - **State** *(string) --* Current state of reservation, e.g. 'ACTIVE'

    - **Tags** *(dict) --* A collection of key-value pairs

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string

    - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g. '157.0'
    """


_ClientUpdateReservationResponseTypeDef = TypedDict(
    "_ClientUpdateReservationResponseTypeDef",
    {"Reservation": ClientUpdateReservationResponseReservationTypeDef},
    total=False,
)


class ClientUpdateReservationResponseTypeDef(_ClientUpdateReservationResponseTypeDef):
    """
    Type definition for `ClientUpdateReservation` `Response`

    - **Reservation** *(dict) --* Reserved resources available to use

      - **Arn** *(string) --* Unique reservation ARN, e.g.
      'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'

      - **Count** *(integer) --* Number of reserved resources

      - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217
      format, e.g. 'USD'

      - **Duration** *(integer) --* Lease duration, e.g. '12'

      - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'

      - **End** *(string) --* Reservation UTC end date and time in ISO-8601 format, e.g.
      '2019-03-01T00:00:00'

      - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a
      NO_UPFRONT offering

      - **Name** *(string) --* User specified reservation name

      - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20
      Mbps, 30 fps, and standard VQ in US West (Oregon)'

      - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'

      - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'

      - **Region** *(string) --* AWS region, e.g. 'us-west-2'

      - **ReservationId** *(string) --* Unique reservation ID, e.g. '1234567'

      - **ResourceSpecification** *(dict) --* Resource configuration details

        - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

        - **Codec** *(string) --* Codec, e.g. 'AVC'

        - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

        - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

        - **Resolution** *(string) --* Resolution, e.g. 'HD'

        - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

        - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
        only)

        - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)

      - **Start** *(string) --* Reservation UTC start date and time in ISO-8601 format, e.g.
      '2018-03-01T00:00:00'

      - **State** *(string) --* Current state of reservation, e.g. 'ACTIVE'

      - **Tags** *(dict) --* A collection of key-value pairs

        - *(string) --* Placeholder documentation for __string

          - *(string) --* Placeholder documentation for __string

      - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g. '157.0'
    """


_DescribeSchedulePaginatePaginationConfigTypeDef = TypedDict(
    "_DescribeSchedulePaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class DescribeSchedulePaginatePaginationConfigTypeDef(
    _DescribeSchedulePaginatePaginationConfigTypeDef
):
    """
    Type definition for `DescribeSchedulePaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef = TypedDict(
    "_DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef",
    {"Id3": str},
    total=False,
)


class DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef(
    _DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef
):
    """
    Type definition for `DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettings` `HlsTimedMetadataSettings`

    - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
    http://id3.org/id3v2.4.0-structure
    """


_DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef = TypedDict(
    "_DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef",
    {
        "InputAttachmentNameReference": str,
        "InputClippingSettings": Dict[str, Any],
        "UrlPath": List[Any],
    },
    total=False,
)


class DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef(
    _DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef
):
    """
    Type definition for `DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettings` `InputSwitchSettings`

    - **InputAttachmentNameReference** *(string) --* The name of the input attachment (not
    the name of the input!) to switch to. The name is specified in the channel
    configuration.

    - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
    input, in order to set up the input to ingest only a portion of the file.

      - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
      being clipped.

      - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

        - **Timecode** *(string) --* The timecode for the frame where you want to start the
        clip. Optional; if not specified, the clip starts at first frame in the file. Enter
        the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

      - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

        - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
        input (in order to clip the file), you can specify if you want the clip to exclude
        (the default) or include the frame specified by the timecode.

        - **Timecode** *(string) --* The timecode for the frame where you want to stop the
        clip. Optional; if not specified, the clip continues to the end of the file. Enter
        the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

    - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic
    input, for this instance of the input. Each time you use the same dynamic input in an
    input switch action, you can provide a different value, in order to connect the input
    to a different content source.

      - *(string) --* Placeholder documentation for __string
    """


_DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef = TypedDict(
    "_DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef",
    {"Scte35Descriptors": List[Any]},
    total=False,
)


class DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef(
    _DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef
):
    """
    Type definition for `DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettings` `Scte35TimeSignalSettings`

    - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
    SCTE-35 time_signal.

      - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

        - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

          - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
          Segmentation Descriptor.

            - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
            restriction parameters.

              - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
              archive_allowed_flag.

              - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
              device_restrictions parameter.

              - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
              no_regional_blackout_flag parameter.

              - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
              web_delivery_allowed_flag parameter.

            - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
            that is valid for the specified segmentation_type_id.

            - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
            segmentation_event_cancel_indicator.

            - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
            segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
            ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time
            in 90 KHz clock ticks. If you do not enter a duration, the time_signal will
            continue until you insert a cancellation message.

            - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
            segmentation_event_id.

            - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
            segmentation_type_id. One of the segmentation_type_id values listed in the
            SCTE-35 specification. On the console, enter the ID in decimal (for example,
            "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or
            decimal (for example, "52").

            - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid.
            Enter a string containing the hexadecimal representation of the characters that
            make up the SCTE-35 segmentation_upid value. Must contain an even number of hex
            characters. Do not include spaces between each hex pair. For example, the ASCII
            "ADS Information" becomes hex "41445320496e666f726d6174696f6e.

            - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
            segmentation_upid_type. On the console, enter one of the types listed in the
            SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the
            specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the
            types listed in the SCTE-35 specification, in either hex (for example, "0x0C" )
            or in decimal (for example, "12").

            - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected.
            A value that is valid for the specified segmentation_type_id.

            - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
            value that is valid for the specified segmentation_type_id.

            - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
            sub_segments_expected. A value that is valid for the specified
            segmentation_type_id.
    """


_DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef = TypedDict(
    "_DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef",
    {
        "Duration": int,
        "FadeIn": int,
        "FadeOut": int,
        "Height": int,
        "Image": Dict[str, Any],
        "ImageX": int,
        "ImageY": int,
        "Layer": int,
        "Opacity": int,
        "Width": int,
    },
    total=False,
)


class DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef(
    _DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef
):
    """
    Type definition for `DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettings` `StaticImageActivateSettings`

    - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
    the video. If omitted or set to 0 the duration is unlimited and the image will remain
    until it is explicitly deactivated.

    - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
    fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

    - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
    milliseconds for the image to fade out. The fade-out starts when the duration time is
    hit, so it effectively extends the duration. Default is 0 (no fade-out).

    - **Height** *(integer) --* The height of the image when inserted into the video, in
    pixels. The overlay will be scaled up or down to the specified height. Leave blank to
    use the native height of the overlay.

    - **Image** *(dict) --* The location and filename of the image file to overlay on the
    video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
    pixels) than the input video.

      - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
      store

      - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
      accessible to the Live system (eg. a http:// URI) depending on the output type. For
      example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

      - **Username** *(string) --* Documentation update needed

    - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
    left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame.
    If the placement causes the overlay to extend beyond the right edge of the underlying
    video, then the overlay is cropped on the right.

    - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
    top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
    If the placement causes the overlay to extend beyond the bottom edge of the underlying
    video, then the overlay is cropped on the bottom.

    - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can
    be overlaid on the video, each layer with a different image. The layers are in Z order,
    which means that overlays with higher values of layer are inserted on top of overlays
    with lower values of layer. Default is 0.

    - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
    opaque. Default is 100.

    - **Width** *(integer) --* The width of the image when inserted into the video, in
    pixels. The overlay will be scaled up or down to the specified width. Leave blank to
    use the native width of the overlay.
    """


_DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsTypeDef = TypedDict(
    "_DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsTypeDef",
    {
        "HlsTimedMetadataSettings": DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsHlsTimedMetadataSettingsTypeDef,
        "InputSwitchSettings": DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsInputSwitchSettingsTypeDef,
        "PauseStateSettings": Dict[str, Any],
        "Scte35ReturnToNetworkSettings": Dict[str, Any],
        "Scte35SpliceInsertSettings": Dict[str, Any],
        "Scte35TimeSignalSettings": DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsScte35TimeSignalSettingsTypeDef,
        "StaticImageActivateSettings": DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsStaticImageActivateSettingsTypeDef,
        "StaticImageDeactivateSettings": Dict[str, Any],
    },
    total=False,
)


class DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsTypeDef(
    _DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsTypeDef
):
    """
    Type definition for `DescribeSchedulePaginateResponseScheduleActions` `ScheduleActionSettings`

    - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

      - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
      http://id3.org/id3v2.4.0-structure

    - **InputSwitchSettings** *(dict) --* Action to switch the input

      - **InputAttachmentNameReference** *(string) --* The name of the input attachment (not
      the name of the input!) to switch to. The name is specified in the channel
      configuration.

      - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
      input, in order to set up the input to ingest only a portion of the file.

        - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
        being clipped.

        - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

          - **Timecode** *(string) --* The timecode for the frame where you want to start the
          clip. Optional; if not specified, the clip starts at first frame in the file. Enter
          the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

        - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

          - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
          input (in order to clip the file), you can specify if you want the clip to exclude
          (the default) or include the frame specified by the timecode.

          - **Timecode** *(string) --* The timecode for the frame where you want to stop the
          clip. Optional; if not specified, the clip continues to the end of the file. Enter
          the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

      - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic
      input, for this instance of the input. Each time you use the same dynamic input in an
      input switch action, you can provide a different value, in order to connect the input
      to a different content source.

        - *(string) --* Placeholder documentation for __string

    - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
    pipelines

      - **Pipelines** *(list) --* Placeholder documentation for
      __listOfPipelinePauseStateSettings

        - *(dict) --* Settings for pausing a pipeline.

          - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or "PIPELINE_1").

    - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35
    return_to_network message

      - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
      as defined in SCTE-35.

    - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert
    message

      - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
      ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
      duration, there is an expectation that the downstream system can read the duration and
      cue in at that time. If you do not enter a duration, the splice_insert will continue
      indefinitely and there is an expectation that you will enter a return_to_network to end
      the splice_insert at the appropriate time.

      - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
      as defined in SCTE-35.

    - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

      - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
      SCTE-35 time_signal.

        - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

          - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

            - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
            Segmentation Descriptor.

              - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
              restriction parameters.

                - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
                archive_allowed_flag.

                - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
                device_restrictions parameter.

                - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
                no_regional_blackout_flag parameter.

                - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
                web_delivery_allowed_flag parameter.

              - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
              that is valid for the specified segmentation_type_id.

              - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
              segmentation_event_cancel_indicator.

              - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
              segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
              ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time
              in 90 KHz clock ticks. If you do not enter a duration, the time_signal will
              continue until you insert a cancellation message.

              - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
              segmentation_event_id.

              - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
              segmentation_type_id. One of the segmentation_type_id values listed in the
              SCTE-35 specification. On the console, enter the ID in decimal (for example,
              "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or
              decimal (for example, "52").

              - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid.
              Enter a string containing the hexadecimal representation of the characters that
              make up the SCTE-35 segmentation_upid value. Must contain an even number of hex
              characters. Do not include spaces between each hex pair. For example, the ASCII
              "ADS Information" becomes hex "41445320496e666f726d6174696f6e.

              - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
              segmentation_upid_type. On the console, enter one of the types listed in the
              SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the
              specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the
              types listed in the SCTE-35 specification, in either hex (for example, "0x0C" )
              or in decimal (for example, "12").

              - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected.
              A value that is valid for the specified segmentation_type_id.

              - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
              value that is valid for the specified segmentation_type_id.

              - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
              sub_segments_expected. A value that is valid for the specified
              segmentation_type_id.

    - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

      - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
      the video. If omitted or set to 0 the duration is unlimited and the image will remain
      until it is explicitly deactivated.

      - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
      fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

      - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
      milliseconds for the image to fade out. The fade-out starts when the duration time is
      hit, so it effectively extends the duration. Default is 0 (no fade-out).

      - **Height** *(integer) --* The height of the image when inserted into the video, in
      pixels. The overlay will be scaled up or down to the specified height. Leave blank to
      use the native height of the overlay.

      - **Image** *(dict) --* The location and filename of the image file to overlay on the
      video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
      pixels) than the input video.

        - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
        store

        - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
        accessible to the Live system (eg. a http:// URI) depending on the output type. For
        example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

        - **Username** *(string) --* Documentation update needed

      - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
      left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame.
      If the placement causes the overlay to extend beyond the right edge of the underlying
      video, then the overlay is cropped on the right.

      - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
      top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
      If the placement causes the overlay to extend beyond the bottom edge of the underlying
      video, then the overlay is cropped on the bottom.

      - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can
      be overlaid on the video, each layer with a different image. The layers are in Z order,
      which means that overlays with higher values of layer are inserted on top of overlays
      with lower values of layer. Default is 0.

      - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
      opaque. Default is 100.

      - **Width** *(integer) --* The width of the image when inserted into the video, in
      pixels. The overlay will be scaled up or down to the specified width. Leave blank to
      use the native width of the overlay.

    - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image
    overlay

      - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out.
      Default is 0 (no fade-out).

      - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is 0.
    """


_DescribeSchedulePaginateResponseScheduleActionsTypeDef = TypedDict(
    "_DescribeSchedulePaginateResponseScheduleActionsTypeDef",
    {
        "ActionName": str,
        "ScheduleActionSettings": DescribeSchedulePaginateResponseScheduleActionsScheduleActionSettingsTypeDef,
        "ScheduleActionStartSettings": Dict[str, Any],
    },
    total=False,
)


class DescribeSchedulePaginateResponseScheduleActionsTypeDef(
    _DescribeSchedulePaginateResponseScheduleActionsTypeDef
):
    """
    Type definition for `DescribeSchedulePaginateResponse` `ScheduleActions`

    - **ActionName** *(string) --* The name of the action, must be unique within the schedule.
    This name provides the main reference to an action once it is added to the schedule. A name
    is unique if it is no longer in the schedule. The schedule is automatically cleaned up to
    remove actions with a start time of more than 1 hour ago (approximately) so at that point a
    name can be reused.

    - **ScheduleActionSettings** *(dict) --* Settings for this schedule action.

      - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

        - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
        http://id3.org/id3v2.4.0-structure

      - **InputSwitchSettings** *(dict) --* Action to switch the input

        - **InputAttachmentNameReference** *(string) --* The name of the input attachment (not
        the name of the input!) to switch to. The name is specified in the channel
        configuration.

        - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
        input, in order to set up the input to ingest only a portion of the file.

          - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
          being clipped.

          - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

            - **Timecode** *(string) --* The timecode for the frame where you want to start the
            clip. Optional; if not specified, the clip starts at first frame in the file. Enter
            the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

          - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

            - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
            input (in order to clip the file), you can specify if you want the clip to exclude
            (the default) or include the frame specified by the timecode.

            - **Timecode** *(string) --* The timecode for the frame where you want to stop the
            clip. Optional; if not specified, the clip continues to the end of the file. Enter
            the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

        - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic
        input, for this instance of the input. Each time you use the same dynamic input in an
        input switch action, you can provide a different value, in order to connect the input
        to a different content source.

          - *(string) --* Placeholder documentation for __string

      - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
      pipelines

        - **Pipelines** *(list) --* Placeholder documentation for
        __listOfPipelinePauseStateSettings

          - *(dict) --* Settings for pausing a pipeline.

            - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or "PIPELINE_1").

      - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35
      return_to_network message

        - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
        as defined in SCTE-35.

      - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert
      message

        - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
        ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
        duration, there is an expectation that the downstream system can read the duration and
        cue in at that time. If you do not enter a duration, the splice_insert will continue
        indefinitely and there is an expectation that you will enter a return_to_network to end
        the splice_insert at the appropriate time.

        - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
        as defined in SCTE-35.

      - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

        - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
        SCTE-35 time_signal.

          - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

            - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

              - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
              Segmentation Descriptor.

                - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
                restriction parameters.

                  - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
                  archive_allowed_flag.

                  - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
                  device_restrictions parameter.

                  - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
                  no_regional_blackout_flag parameter.

                  - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
                  web_delivery_allowed_flag parameter.

                - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
                that is valid for the specified segmentation_type_id.

                - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
                segmentation_event_cancel_indicator.

                - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
                segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
                ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time
                in 90 KHz clock ticks. If you do not enter a duration, the time_signal will
                continue until you insert a cancellation message.

                - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
                segmentation_event_id.

                - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
                segmentation_type_id. One of the segmentation_type_id values listed in the
                SCTE-35 specification. On the console, enter the ID in decimal (for example,
                "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or
                decimal (for example, "52").

                - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid.
                Enter a string containing the hexadecimal representation of the characters that
                make up the SCTE-35 segmentation_upid value. Must contain an even number of hex
                characters. Do not include spaces between each hex pair. For example, the ASCII
                "ADS Information" becomes hex "41445320496e666f726d6174696f6e.

                - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
                segmentation_upid_type. On the console, enter one of the types listed in the
                SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the
                specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the
                types listed in the SCTE-35 specification, in either hex (for example, "0x0C" )
                or in decimal (for example, "12").

                - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected.
                A value that is valid for the specified segmentation_type_id.

                - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
                value that is valid for the specified segmentation_type_id.

                - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
                sub_segments_expected. A value that is valid for the specified
                segmentation_type_id.

      - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

        - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
        the video. If omitted or set to 0 the duration is unlimited and the image will remain
        until it is explicitly deactivated.

        - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
        fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

        - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
        milliseconds for the image to fade out. The fade-out starts when the duration time is
        hit, so it effectively extends the duration. Default is 0 (no fade-out).

        - **Height** *(integer) --* The height of the image when inserted into the video, in
        pixels. The overlay will be scaled up or down to the specified height. Leave blank to
        use the native height of the overlay.

        - **Image** *(dict) --* The location and filename of the image file to overlay on the
        video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
        pixels) than the input video.

          - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
          store

          - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
          accessible to the Live system (eg. a http:// URI) depending on the output type. For
          example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

          - **Username** *(string) --* Documentation update needed

        - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
        left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame.
        If the placement causes the overlay to extend beyond the right edge of the underlying
        video, then the overlay is cropped on the right.

        - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
        top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
        If the placement causes the overlay to extend beyond the bottom edge of the underlying
        video, then the overlay is cropped on the bottom.

        - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can
        be overlaid on the video, each layer with a different image. The layers are in Z order,
        which means that overlays with higher values of layer are inserted on top of overlays
        with lower values of layer. Default is 0.

        - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
        opaque. Default is 100.

        - **Width** *(integer) --* The width of the image when inserted into the video, in
        pixels. The overlay will be scaled up or down to the specified width. Leave blank to
        use the native width of the overlay.

      - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image
      overlay

        - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out.
        Default is 0 (no fade-out).

        - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is 0.

    - **ScheduleActionStartSettings** *(dict) --* The time for the action to start in the
    channel.

      - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start
      time for an action.

        - **Time** *(string) --* Start time for the action to start in the channel. (Not the
        time for the action to be added to the schedule: actions are always added to the
        schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits
        (for example, mm might be 01) except for the two constants "T" for time and "Z" for
        "UTC format".

      - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action
      as relative to another action.

        - **FollowPoint** *(string) --* Identifies whether this action starts relative to the
        start or relative to the end of the reference action.

        - **ReferenceActionName** *(string) --* The action name of another action that this one
        refers to.

      - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an
      action that should be applied immediately.
    """


_DescribeSchedulePaginateResponseTypeDef = TypedDict(
    "_DescribeSchedulePaginateResponseTypeDef",
    {"ScheduleActions": List[DescribeSchedulePaginateResponseScheduleActionsTypeDef]},
    total=False,
)


class DescribeSchedulePaginateResponseTypeDef(_DescribeSchedulePaginateResponseTypeDef):
    """
    Type definition for `DescribeSchedulePaginate` `Response`

    - **ScheduleActions** *(list) --* The list of actions in the schedule.

      - *(dict) --* Contains information on a single schedule action.

        - **ActionName** *(string) --* The name of the action, must be unique within the schedule.
        This name provides the main reference to an action once it is added to the schedule. A name
        is unique if it is no longer in the schedule. The schedule is automatically cleaned up to
        remove actions with a start time of more than 1 hour ago (approximately) so at that point a
        name can be reused.

        - **ScheduleActionSettings** *(dict) --* Settings for this schedule action.

          - **HlsTimedMetadataSettings** *(dict) --* Action to insert HLS metadata

            - **Id3** *(string) --* Base64 string formatted according to the ID3 specification:
            http://id3.org/id3v2.4.0-structure

          - **InputSwitchSettings** *(dict) --* Action to switch the input

            - **InputAttachmentNameReference** *(string) --* The name of the input attachment (not
            the name of the input!) to switch to. The name is specified in the channel
            configuration.

            - **InputClippingSettings** *(dict) --* Settings to let you create a clip of the file
            input, in order to set up the input to ingest only a portion of the file.

              - **InputTimecodeSource** *(string) --* The source of the timecodes in the source
              being clipped.

              - **StartTimecode** *(dict) --* Settings to identify the start of the clip.

                - **Timecode** *(string) --* The timecode for the frame where you want to start the
                clip. Optional; if not specified, the clip starts at first frame in the file. Enter
                the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

              - **StopTimecode** *(dict) --* Settings to identify the end of the clip.

                - **LastFrameClippingBehavior** *(string) --* If you specify a StopTimecode in an
                input (in order to clip the file), you can specify if you want the clip to exclude
                (the default) or include the frame specified by the timecode.

                - **Timecode** *(string) --* The timecode for the frame where you want to stop the
                clip. Optional; if not specified, the clip continues to the end of the file. Enter
                the timecode as HH:MM:SS:FF or HH:MM:SS;FF.

            - **UrlPath** *(list) --* The value for the variable portion of the URL for the dynamic
            input, for this instance of the input. Each time you use the same dynamic input in an
            input switch action, you can provide a different value, in order to connect the input
            to a different content source.

              - *(string) --* Placeholder documentation for __string

          - **PauseStateSettings** *(dict) --* Action to pause or unpause one or both channel
          pipelines

            - **Pipelines** *(list) --* Placeholder documentation for
            __listOfPipelinePauseStateSettings

              - *(dict) --* Settings for pausing a pipeline.

                - **PipelineId** *(string) --* Pipeline ID to pause ("PIPELINE_0" or "PIPELINE_1").

          - **Scte35ReturnToNetworkSettings** *(dict) --* Action to insert SCTE-35
          return_to_network message

            - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
            as defined in SCTE-35.

          - **Scte35SpliceInsertSettings** *(dict) --* Action to insert SCTE-35 splice_insert
          message

            - **Duration** *(integer) --* Optional, the duration for the splice_insert, in 90 KHz
            ticks. To convert seconds to ticks, multiple the seconds by 90,000. If you enter a
            duration, there is an expectation that the downstream system can read the duration and
            cue in at that time. If you do not enter a duration, the splice_insert will continue
            indefinitely and there is an expectation that you will enter a return_to_network to end
            the splice_insert at the appropriate time.

            - **SpliceEventId** *(integer) --* The splice_event_id for the SCTE-35 splice_insert,
            as defined in SCTE-35.

          - **Scte35TimeSignalSettings** *(dict) --* Action to insert SCTE-35 time_signal message

            - **Scte35Descriptors** *(list) --* The list of SCTE-35 descriptors accompanying the
            SCTE-35 time_signal.

              - *(dict) --* Holds one set of SCTE-35 Descriptor Settings.

                - **Scte35DescriptorSettings** *(dict) --* SCTE-35 Descriptor Settings.

                  - **SegmentationDescriptorScte35DescriptorSettings** *(dict) --* SCTE-35
                  Segmentation Descriptor.

                    - **DeliveryRestrictions** *(dict) --* Holds the four SCTE-35 delivery
                    restriction parameters.

                      - **ArchiveAllowedFlag** *(string) --* Corresponds to SCTE-35
                      archive_allowed_flag.

                      - **DeviceRestrictions** *(string) --* Corresponds to SCTE-35
                      device_restrictions parameter.

                      - **NoRegionalBlackoutFlag** *(string) --* Corresponds to SCTE-35
                      no_regional_blackout_flag parameter.

                      - **WebDeliveryAllowedFlag** *(string) --* Corresponds to SCTE-35
                      web_delivery_allowed_flag parameter.

                    - **SegmentNum** *(integer) --* Corresponds to SCTE-35 segment_num. A value
                    that is valid for the specified segmentation_type_id.

                    - **SegmentationCancelIndicator** *(string) --* Corresponds to SCTE-35
                    segmentation_event_cancel_indicator.

                    - **SegmentationDuration** *(integer) --* Corresponds to SCTE-35
                    segmentation_duration. Optional. The duration for the time_signal, in 90 KHz
                    ticks. To convert seconds to ticks, multiple the seconds by 90,000. Enter time
                    in 90 KHz clock ticks. If you do not enter a duration, the time_signal will
                    continue until you insert a cancellation message.

                    - **SegmentationEventId** *(integer) --* Corresponds to SCTE-35
                    segmentation_event_id.

                    - **SegmentationTypeId** *(integer) --* Corresponds to SCTE-35
                    segmentation_type_id. One of the segmentation_type_id values listed in the
                    SCTE-35 specification. On the console, enter the ID in decimal (for example,
                    "52"). In the CLI, API, or an SDK, enter the ID in hex (for example, "0x34") or
                    decimal (for example, "52").

                    - **SegmentationUpid** *(string) --* Corresponds to SCTE-35 segmentation_upid.
                    Enter a string containing the hexadecimal representation of the characters that
                    make up the SCTE-35 segmentation_upid value. Must contain an even number of hex
                    characters. Do not include spaces between each hex pair. For example, the ASCII
                    "ADS Information" becomes hex "41445320496e666f726d6174696f6e.

                    - **SegmentationUpidType** *(integer) --* Corresponds to SCTE-35
                    segmentation_upid_type. On the console, enter one of the types listed in the
                    SCTE-35 specification, converted to a decimal. For example, "0x0C" hex from the
                    specification is "12" in decimal. In the CLI, API, or an SDK, enter one of the
                    types listed in the SCTE-35 specification, in either hex (for example, "0x0C" )
                    or in decimal (for example, "12").

                    - **SegmentsExpected** *(integer) --* Corresponds to SCTE-35 segments_expected.
                    A value that is valid for the specified segmentation_type_id.

                    - **SubSegmentNum** *(integer) --* Corresponds to SCTE-35 sub_segment_num. A
                    value that is valid for the specified segmentation_type_id.

                    - **SubSegmentsExpected** *(integer) --* Corresponds to SCTE-35
                    sub_segments_expected. A value that is valid for the specified
                    segmentation_type_id.

          - **StaticImageActivateSettings** *(dict) --* Action to activate a static image overlay

            - **Duration** *(integer) --* The duration in milliseconds for the image to remain on
            the video. If omitted or set to 0 the duration is unlimited and the image will remain
            until it is explicitly deactivated.

            - **FadeIn** *(integer) --* The time in milliseconds for the image to fade in. The
            fade-in starts at the start time of the overlay. Default is 0 (no fade-in).

            - **FadeOut** *(integer) --* Applies only if a duration is specified. The time in
            milliseconds for the image to fade out. The fade-out starts when the duration time is
            hit, so it effectively extends the duration. Default is 0 (no fade-out).

            - **Height** *(integer) --* The height of the image when inserted into the video, in
            pixels. The overlay will be scaled up or down to the specified height. Leave blank to
            use the native height of the overlay.

            - **Image** *(dict) --* The location and filename of the image file to overlay on the
            video. The file must be a 32-bit BMP, PNG, or TGA file, and must not be larger (in
            pixels) than the input video.

              - **PasswordParam** *(string) --* key used to extract the password from EC2 Parameter
              store

              - **Uri** *(string) --* Uniform Resource Identifier - This should be a path to a file
              accessible to the Live system (eg. a http:// URI) depending on the output type. For
              example, a RTMP destination should have a uri simliar to: "rtmp://fmsserver/live".

              - **Username** *(string) --* Documentation update needed

            - **ImageX** *(integer) --* Placement of the left edge of the overlay relative to the
            left edge of the video frame, in pixels. 0 (the default) is the left edge of the frame.
            If the placement causes the overlay to extend beyond the right edge of the underlying
            video, then the overlay is cropped on the right.

            - **ImageY** *(integer) --* Placement of the top edge of the overlay relative to the
            top edge of the video frame, in pixels. 0 (the default) is the top edge of the frame.
            If the placement causes the overlay to extend beyond the bottom edge of the underlying
            video, then the overlay is cropped on the bottom.

            - **Layer** *(integer) --* The number of the layer, 0 to 7. There are 8 layers that can
            be overlaid on the video, each layer with a different image. The layers are in Z order,
            which means that overlays with higher values of layer are inserted on top of overlays
            with lower values of layer. Default is 0.

            - **Opacity** *(integer) --* Opacity of image where 0 is transparent and 100 is fully
            opaque. Default is 100.

            - **Width** *(integer) --* The width of the image when inserted into the video, in
            pixels. The overlay will be scaled up or down to the specified width. Leave blank to
            use the native width of the overlay.

          - **StaticImageDeactivateSettings** *(dict) --* Action to deactivate a static image
          overlay

            - **FadeOut** *(integer) --* The time in milliseconds for the image to fade out.
            Default is 0 (no fade-out).

            - **Layer** *(integer) --* The image overlay layer to deactivate, 0 to 7. Default is 0.

        - **ScheduleActionStartSettings** *(dict) --* The time for the action to start in the
        channel.

          - **FixedModeScheduleActionStartSettings** *(dict) --* Option for specifying the start
          time for an action.

            - **Time** *(string) --* Start time for the action to start in the channel. (Not the
            time for the action to be added to the schedule: actions are always added to the
            schedule immediately.) UTC format: yyyy-mm-ddThh:mm:ss.nnnZ. All the letters are digits
            (for example, mm might be 01) except for the two constants "T" for time and "Z" for
            "UTC format".

          - **FollowModeScheduleActionStartSettings** *(dict) --* Option for specifying an action
          as relative to another action.

            - **FollowPoint** *(string) --* Identifies whether this action starts relative to the
            start or relative to the end of the reference action.

            - **ReferenceActionName** *(string) --* The action name of another action that this one
            refers to.

          - **ImmediateModeScheduleActionStartSettings** *(dict) --* Option for specifying an
          action that should be applied immediately.
    """


_ListChannelsPaginatePaginationConfigTypeDef = TypedDict(
    "_ListChannelsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListChannelsPaginatePaginationConfigTypeDef(
    _ListChannelsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListChannelsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListChannelsPaginateResponseChannelsEgressEndpointsTypeDef = TypedDict(
    "_ListChannelsPaginateResponseChannelsEgressEndpointsTypeDef",
    {"SourceIp": str},
    total=False,
)


class ListChannelsPaginateResponseChannelsEgressEndpointsTypeDef(
    _ListChannelsPaginateResponseChannelsEgressEndpointsTypeDef
):
    """
    Type definition for `ListChannelsPaginateResponseChannels` `EgressEndpoints`

    - **SourceIp** *(string) --* Public IP of where a channel's output comes from
    """


_ListChannelsPaginateResponseChannelsInputAttachmentsInputSettingsNetworkInputSettingsTypeDef = TypedDict(
    "_ListChannelsPaginateResponseChannelsInputAttachmentsInputSettingsNetworkInputSettingsTypeDef",
    {"HlsInputSettings": Dict[str, Any], "ServerValidation": str},
    total=False,
)


class ListChannelsPaginateResponseChannelsInputAttachmentsInputSettingsNetworkInputSettingsTypeDef(
    _ListChannelsPaginateResponseChannelsInputAttachmentsInputSettingsNetworkInputSettingsTypeDef
):
    """
    Type definition for `ListChannelsPaginateResponseChannelsInputAttachmentsInputSettings` `NetworkInputSettings`

    - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for
    a HLS manifest.

      - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
      BANDWIDTH that most closely matches this value will be chosen, otherwise the
      highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
      bits per second, as in an HLS manifest.

      - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
      begin this many buffer segments from the end (most recently written segment).
      When not specified, the HLS input will begin with the first segment specified in
      the m3u8.

      - **Retries** *(integer) --* The number of consecutive times that attempts to
      read a manifest or segment must fail before the input is considered unavailable.

      - **RetryInterval** *(integer) --* The number of seconds between retries when an
      attempt to read a manifest or segment fails.

    - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
    checkCryptographyOnly, cryptography in the certificate will be checked, but not the
    server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
    name) do not strictly match the corresponding certificate's wildcard pattern and
    would otherwise cause the event to error. This setting is ignored for protocols
    that do not use https.
    """


_ListChannelsPaginateResponseChannelsInputAttachmentsInputSettingsTypeDef = TypedDict(
    "_ListChannelsPaginateResponseChannelsInputAttachmentsInputSettingsTypeDef",
    {
        "AudioSelectors": List[Any],
        "CaptionSelectors": List[Any],
        "DeblockFilter": str,
        "DenoiseFilter": str,
        "FilterStrength": int,
        "InputFilter": str,
        "NetworkInputSettings": ListChannelsPaginateResponseChannelsInputAttachmentsInputSettingsNetworkInputSettingsTypeDef,
        "SourceEndBehavior": str,
        "VideoSelector": Dict[str, Any],
    },
    total=False,
)


class ListChannelsPaginateResponseChannelsInputAttachmentsInputSettingsTypeDef(
    _ListChannelsPaginateResponseChannelsInputAttachmentsInputSettingsTypeDef
):
    """
    Type definition for `ListChannelsPaginateResponseChannelsInputAttachments` `InputSettings`

    - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
    that have multiple available.

      - *(dict) --* Audio Selector

        - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will
        use this name to uniquely identify this Selector. Selector names should be unique
        per input.

        - **SelectorSettings** *(dict) --* The audio selector settings.

          - **AudioLanguageSelection** *(dict) --* Audio Language Selection

            - **LanguageCode** *(string) --* Selects a specific three-letter language
            code from within an audio source.

            - **LanguageSelectionPolicy** *(string) --* When set to "strict", the
            transport stream demux strictly identifies audio streams by their language
            descriptor. If a PMT update occurs such that an audio stream matching the
            initially selected language is no longer present then mute will be encoded
            until the language returns. If "loose", then on a PMT update the demux will
            choose another audio stream in the program with the same stream type if it
            can't find one with the same language.

          - **AudioPidSelection** *(dict) --* Audio Pid Selection

            - **Pid** *(integer) --* Selects a specific PID from within a source.

    - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
    that have multiple available.

      - *(dict) --* Output groups for this Live Event. Output groups contain information
      about where streams should be distributed.

        - **LanguageCode** *(string) --* When specified this field indicates the three
        letter language code of the caption track to extract from the source.

        - **Name** *(string) --* Name identifier for a caption selector. This name is
        used to associate this caption selector with one or more caption descriptions.
        Names must be unique within an event.

        - **SelectorSettings** *(dict) --* Caption selector settings.

          - **AribSourceSettings** *(dict) --* Arib Source Settings

          - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

            - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use
            this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub
            content is passed through, regardless of selectors.

          - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
            through via the "608 compatibility bytes" fields of the 708 wrapper as well
            as translated into 708. 708 data present in the source content will be
            discarded.

            - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
            intermittent and/or non-aligned SCTE-20 and Embedded captions.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
            number within the video track from which to extract captions. Unused for
            passthrough.

            - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

          - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

            - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
            through via the "608 compatibility bytes" fields of the 708 wrapper as well
            as translated into 708. 708 data present in the source content will be
            discarded.

            - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
            number within the video track from which to extract captions. Unused for
            passthrough.

          - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

            - **Pid** *(integer) --* The pid field is used in conjunction with the
            caption selector languageCode field as follows: - Specify PID and Language:
            Extracts captions from that PID; the language is "informational". - Specify
            PID and omit Language: Extracts the specified PID. - Omit PID and specify
            Language: Extracts the specified language, whichever PID that happens to be.
            - Omit PID and omit Language: Valid only if source is DVB-Sub that is being
            passed through; all languages will be passed through.

          - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

            - **PageNumber** *(string) --* Specifies the teletext page number within the
            data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
            (2303). Unused for passthrough. Should be specified as a hexadecimal string
            with no "0x" prefix.

    - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

    - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

    - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1
    (minimal) to 5 (strongest).

    - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs
    have the deblocking filter enabled by default. 1) auto - filtering will be applied
    depending on input type/quality 2) disabled - no filtering will be applied to the
    input 3) forced - filtering will be applied regardless of input type

    - **NetworkInputSettings** *(dict) --* Input settings.

      - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for
      a HLS manifest.

        - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
        BANDWIDTH that most closely matches this value will be chosen, otherwise the
        highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
        bits per second, as in an HLS manifest.

        - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
        begin this many buffer segments from the end (most recently written segment).
        When not specified, the HLS input will begin with the first segment specified in
        the m3u8.

        - **Retries** *(integer) --* The number of consecutive times that attempts to
        read a manifest or segment must fail before the input is considered unavailable.

        - **RetryInterval** *(integer) --* The number of seconds between retries when an
        attempt to read a manifest or segment fails.

      - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
      checkCryptographyOnly, cryptography in the certificate will be checked, but not the
      server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
      name) do not strictly match the corresponding certificate's wildcard pattern and
      would otherwise cause the event to error. This setting is ignored for protocols
      that do not use https.

    - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
    input to be streamed indefinitely.

    - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
    input types that have multiple available.

      - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
      works in tandem with colorSpaceUsage and a video description's
      colorSpaceSettingsChoice to determine if any conversion will be performed.

      - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other
      than follow. This field controls how the value in the colorSpace field will be
      used. fallback means that when the input does include color space data, that data
      will be used, but when the input has no color space data, the value in colorSpace
      will be used. Choose fallback if your input is sometimes missing color space data,
      but when it does have color space data, that data is correct. force means to always
      use the value in colorSpace. Choose force if your input usually has no color space
      data or might have unreliable color space data.

      - **SelectorSettings** *(dict) --* The video selector settings.

        - **VideoSelectorPid** *(dict) --* Video Selector Pid

          - **Pid** *(integer) --* Selects a specific PID from within a video source.

        - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

          - **ProgramId** *(integer) --* Selects a specific program from within a
          multi-program transport stream. If the program doesn't exist, the first program
          within the transport stream will be selected by default.
    """


_ListChannelsPaginateResponseChannelsInputAttachmentsTypeDef = TypedDict(
    "_ListChannelsPaginateResponseChannelsInputAttachmentsTypeDef",
    {
        "InputAttachmentName": str,
        "InputId": str,
        "InputSettings": ListChannelsPaginateResponseChannelsInputAttachmentsInputSettingsTypeDef,
    },
    total=False,
)


class ListChannelsPaginateResponseChannelsInputAttachmentsTypeDef(
    _ListChannelsPaginateResponseChannelsInputAttachmentsTypeDef
):
    """
    Type definition for `ListChannelsPaginateResponseChannels` `InputAttachments`

    - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
    required if the user wants to use this input in an input switch action.

    - **InputId** *(string) --* The ID of the input

    - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

      - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
      that have multiple available.

        - *(dict) --* Audio Selector

          - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will
          use this name to uniquely identify this Selector. Selector names should be unique
          per input.

          - **SelectorSettings** *(dict) --* The audio selector settings.

            - **AudioLanguageSelection** *(dict) --* Audio Language Selection

              - **LanguageCode** *(string) --* Selects a specific three-letter language
              code from within an audio source.

              - **LanguageSelectionPolicy** *(string) --* When set to "strict", the
              transport stream demux strictly identifies audio streams by their language
              descriptor. If a PMT update occurs such that an audio stream matching the
              initially selected language is no longer present then mute will be encoded
              until the language returns. If "loose", then on a PMT update the demux will
              choose another audio stream in the program with the same stream type if it
              can't find one with the same language.

            - **AudioPidSelection** *(dict) --* Audio Pid Selection

              - **Pid** *(integer) --* Selects a specific PID from within a source.

      - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
      that have multiple available.

        - *(dict) --* Output groups for this Live Event. Output groups contain information
        about where streams should be distributed.

          - **LanguageCode** *(string) --* When specified this field indicates the three
          letter language code of the caption track to extract from the source.

          - **Name** *(string) --* Name identifier for a caption selector. This name is
          used to associate this caption selector with one or more caption descriptions.
          Names must be unique within an event.

          - **SelectorSettings** *(dict) --* Caption selector settings.

            - **AribSourceSettings** *(dict) --* Arib Source Settings

            - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

              - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use
              this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub
              content is passed through, regardless of selectors.

            - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
              through via the "608 compatibility bytes" fields of the 708 wrapper as well
              as translated into 708. 708 data present in the source content will be
              discarded.

              - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
              intermittent and/or non-aligned SCTE-20 and Embedded captions.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
              number within the video track from which to extract captions. Unused for
              passthrough.

              - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

            - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

              - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
              through via the "608 compatibility bytes" fields of the 708 wrapper as well
              as translated into 708. 708 data present in the source content will be
              discarded.

              - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
              number within the video track from which to extract captions. Unused for
              passthrough.

            - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

              - **Pid** *(integer) --* The pid field is used in conjunction with the
              caption selector languageCode field as follows: - Specify PID and Language:
              Extracts captions from that PID; the language is "informational". - Specify
              PID and omit Language: Extracts the specified PID. - Omit PID and specify
              Language: Extracts the specified language, whichever PID that happens to be.
              - Omit PID and omit Language: Valid only if source is DVB-Sub that is being
              passed through; all languages will be passed through.

            - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

              - **PageNumber** *(string) --* Specifies the teletext page number within the
              data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
              (2303). Unused for passthrough. Should be specified as a hexadecimal string
              with no "0x" prefix.

      - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

      - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

      - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1
      (minimal) to 5 (strongest).

      - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs
      have the deblocking filter enabled by default. 1) auto - filtering will be applied
      depending on input type/quality 2) disabled - no filtering will be applied to the
      input 3) forced - filtering will be applied regardless of input type

      - **NetworkInputSettings** *(dict) --* Input settings.

        - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for
        a HLS manifest.

          - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
          BANDWIDTH that most closely matches this value will be chosen, otherwise the
          highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
          bits per second, as in an HLS manifest.

          - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
          begin this many buffer segments from the end (most recently written segment).
          When not specified, the HLS input will begin with the first segment specified in
          the m3u8.

          - **Retries** *(integer) --* The number of consecutive times that attempts to
          read a manifest or segment must fail before the input is considered unavailable.

          - **RetryInterval** *(integer) --* The number of seconds between retries when an
          attempt to read a manifest or segment fails.

        - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
        checkCryptographyOnly, cryptography in the certificate will be checked, but not the
        server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
        name) do not strictly match the corresponding certificate's wildcard pattern and
        would otherwise cause the event to error. This setting is ignored for protocols
        that do not use https.

      - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
      input to be streamed indefinitely.

      - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
      input types that have multiple available.

        - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
        works in tandem with colorSpaceUsage and a video description's
        colorSpaceSettingsChoice to determine if any conversion will be performed.

        - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other
        than follow. This field controls how the value in the colorSpace field will be
        used. fallback means that when the input does include color space data, that data
        will be used, but when the input has no color space data, the value in colorSpace
        will be used. Choose fallback if your input is sometimes missing color space data,
        but when it does have color space data, that data is correct. force means to always
        use the value in colorSpace. Choose force if your input usually has no color space
        data or might have unreliable color space data.

        - **SelectorSettings** *(dict) --* The video selector settings.

          - **VideoSelectorPid** *(dict) --* Video Selector Pid

            - **Pid** *(integer) --* Selects a specific PID from within a video source.

          - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

            - **ProgramId** *(integer) --* Selects a specific program from within a
            multi-program transport stream. If the program doesn't exist, the first program
            within the transport stream will be selected by default.
    """


_ListChannelsPaginateResponseChannelsInputSpecificationTypeDef = TypedDict(
    "_ListChannelsPaginateResponseChannelsInputSpecificationTypeDef",
    {"Codec": str, "MaximumBitrate": str, "Resolution": str},
    total=False,
)


class ListChannelsPaginateResponseChannelsInputSpecificationTypeDef(
    _ListChannelsPaginateResponseChannelsInputSpecificationTypeDef
):
    """
    Type definition for `ListChannelsPaginateResponseChannels` `InputSpecification`

    - **Codec** *(string) --* Input codec

    - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

    - **Resolution** *(string) --* Input resolution, categorized coarsely
    """


_ListChannelsPaginateResponseChannelsTypeDef = TypedDict(
    "_ListChannelsPaginateResponseChannelsTypeDef",
    {
        "Arn": str,
        "ChannelClass": str,
        "Destinations": List[Any],
        "EgressEndpoints": List[
            ListChannelsPaginateResponseChannelsEgressEndpointsTypeDef
        ],
        "Id": str,
        "InputAttachments": List[
            ListChannelsPaginateResponseChannelsInputAttachmentsTypeDef
        ],
        "InputSpecification": ListChannelsPaginateResponseChannelsInputSpecificationTypeDef,
        "LogLevel": str,
        "Name": str,
        "PipelinesRunningCount": int,
        "RoleArn": str,
        "State": str,
        "Tags": Dict[str, str],
    },
    total=False,
)


class ListChannelsPaginateResponseChannelsTypeDef(
    _ListChannelsPaginateResponseChannelsTypeDef
):
    """
    Type definition for `ListChannelsPaginateResponse` `Channels`

    - **Arn** *(string) --* The unique arn of the channel.

    - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with
    two pipelines or SINGLE_PIPELINE for a channel with one pipeline.

    - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs,
    there is one destination per output. For other types (HLS, for example), there is one
    destination per packager.

      - *(dict) --* Placeholder documentation for OutputDestination

        - **Id** *(string) --* User-specified id. This is used in an output group or an output.

        - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output;
        one destination for both encoders.

          - *(dict) --* MediaPackage Output Destination Settings

            - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the
            destination for this output group. You do not need to specify the individual inputs
            in MediaPackage; MediaLive will handle the connection of the two MediaLive
            pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive
            channel must be in the same region.

        - **Settings** *(list) --* Destination settings for a standard output; one destination
        for each redundant encoder.

          - *(dict) --* Placeholder documentation for OutputDestinationSettings

            - **PasswordParam** *(string) --* key used to extract the password from EC2
            Parameter store

            - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type
            rtmp://)

            - **Url** *(string) --* A URL specifying a destination

            - **Username** *(string) --* username for destination

    - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from

      - *(dict) --* Placeholder documentation for ChannelEgressEndpoint

        - **SourceIp** *(string) --* Public IP of where a channel's output comes from

    - **Id** *(string) --* The unique id of the channel.

    - **InputAttachments** *(list) --* List of input attachments for channel.

      - *(dict) --* Placeholder documentation for InputAttachment

        - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
        required if the user wants to use this input in an input switch action.

        - **InputId** *(string) --* The ID of the input

        - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

          - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
          that have multiple available.

            - *(dict) --* Audio Selector

              - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will
              use this name to uniquely identify this Selector. Selector names should be unique
              per input.

              - **SelectorSettings** *(dict) --* The audio selector settings.

                - **AudioLanguageSelection** *(dict) --* Audio Language Selection

                  - **LanguageCode** *(string) --* Selects a specific three-letter language
                  code from within an audio source.

                  - **LanguageSelectionPolicy** *(string) --* When set to "strict", the
                  transport stream demux strictly identifies audio streams by their language
                  descriptor. If a PMT update occurs such that an audio stream matching the
                  initially selected language is no longer present then mute will be encoded
                  until the language returns. If "loose", then on a PMT update the demux will
                  choose another audio stream in the program with the same stream type if it
                  can't find one with the same language.

                - **AudioPidSelection** *(dict) --* Audio Pid Selection

                  - **Pid** *(integer) --* Selects a specific PID from within a source.

          - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
          that have multiple available.

            - *(dict) --* Output groups for this Live Event. Output groups contain information
            about where streams should be distributed.

              - **LanguageCode** *(string) --* When specified this field indicates the three
              letter language code of the caption track to extract from the source.

              - **Name** *(string) --* Name identifier for a caption selector. This name is
              used to associate this caption selector with one or more caption descriptions.
              Names must be unique within an event.

              - **SelectorSettings** *(dict) --* Caption selector settings.

                - **AribSourceSettings** *(dict) --* Arib Source Settings

                - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

                  - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use
                  this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub
                  content is passed through, regardless of selectors.

                - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                  through via the "608 compatibility bytes" fields of the 708 wrapper as well
                  as translated into 708. 708 data present in the source content will be
                  discarded.

                  - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
                  intermittent and/or non-aligned SCTE-20 and Embedded captions.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                  number within the video track from which to extract captions. Unused for
                  passthrough.

                  - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

                - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

                  - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                  through via the "608 compatibility bytes" fields of the 708 wrapper as well
                  as translated into 708. 708 data present in the source content will be
                  discarded.

                  - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                  number within the video track from which to extract captions. Unused for
                  passthrough.

                - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

                  - **Pid** *(integer) --* The pid field is used in conjunction with the
                  caption selector languageCode field as follows: - Specify PID and Language:
                  Extracts captions from that PID; the language is "informational". - Specify
                  PID and omit Language: Extracts the specified PID. - Omit PID and specify
                  Language: Extracts the specified language, whichever PID that happens to be.
                  - Omit PID and omit Language: Valid only if source is DVB-Sub that is being
                  passed through; all languages will be passed through.

                - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

                  - **PageNumber** *(string) --* Specifies the teletext page number within the
                  data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
                  (2303). Unused for passthrough. Should be specified as a hexadecimal string
                  with no "0x" prefix.

          - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

          - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

          - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1
          (minimal) to 5 (strongest).

          - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs
          have the deblocking filter enabled by default. 1) auto - filtering will be applied
          depending on input type/quality 2) disabled - no filtering will be applied to the
          input 3) forced - filtering will be applied regardless of input type

          - **NetworkInputSettings** *(dict) --* Input settings.

            - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for
            a HLS manifest.

              - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
              BANDWIDTH that most closely matches this value will be chosen, otherwise the
              highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
              bits per second, as in an HLS manifest.

              - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
              begin this many buffer segments from the end (most recently written segment).
              When not specified, the HLS input will begin with the first segment specified in
              the m3u8.

              - **Retries** *(integer) --* The number of consecutive times that attempts to
              read a manifest or segment must fail before the input is considered unavailable.

              - **RetryInterval** *(integer) --* The number of seconds between retries when an
              attempt to read a manifest or segment fails.

            - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
            checkCryptographyOnly, cryptography in the certificate will be checked, but not the
            server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
            name) do not strictly match the corresponding certificate's wildcard pattern and
            would otherwise cause the event to error. This setting is ignored for protocols
            that do not use https.

          - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
          input to be streamed indefinitely.

          - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
          input types that have multiple available.

            - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
            works in tandem with colorSpaceUsage and a video description's
            colorSpaceSettingsChoice to determine if any conversion will be performed.

            - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other
            than follow. This field controls how the value in the colorSpace field will be
            used. fallback means that when the input does include color space data, that data
            will be used, but when the input has no color space data, the value in colorSpace
            will be used. Choose fallback if your input is sometimes missing color space data,
            but when it does have color space data, that data is correct. force means to always
            use the value in colorSpace. Choose force if your input usually has no color space
            data or might have unreliable color space data.

            - **SelectorSettings** *(dict) --* The video selector settings.

              - **VideoSelectorPid** *(dict) --* Video Selector Pid

                - **Pid** *(integer) --* Selects a specific PID from within a video source.

              - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

                - **ProgramId** *(integer) --* Selects a specific program from within a
                multi-program transport stream. If the program doesn't exist, the first program
                within the transport stream will be selected by default.

    - **InputSpecification** *(dict) --* Placeholder documentation for InputSpecification

      - **Codec** *(string) --* Input codec

      - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

      - **Resolution** *(string) --* Input resolution, categorized coarsely

    - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.

    - **Name** *(string) --* The name of the channel. (user-mutable)

    - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.

    - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running
    the Channel.

    - **State** *(string) --* Placeholder documentation for ChannelState

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string
    """


_ListChannelsPaginateResponseTypeDef = TypedDict(
    "_ListChannelsPaginateResponseTypeDef",
    {"Channels": List[ListChannelsPaginateResponseChannelsTypeDef]},
    total=False,
)


class ListChannelsPaginateResponseTypeDef(_ListChannelsPaginateResponseTypeDef):
    """
    Type definition for `ListChannelsPaginate` `Response`

    - **Channels** *(list) --* Placeholder documentation for __listOfChannelSummary

      - *(dict) --* Placeholder documentation for ChannelSummary

        - **Arn** *(string) --* The unique arn of the channel.

        - **ChannelClass** *(string) --* The class for this channel. STANDARD for a channel with
        two pipelines or SINGLE_PIPELINE for a channel with one pipeline.

        - **Destinations** *(list) --* A list of destinations of the channel. For UDP outputs,
        there is one destination per output. For other types (HLS, for example), there is one
        destination per packager.

          - *(dict) --* Placeholder documentation for OutputDestination

            - **Id** *(string) --* User-specified id. This is used in an output group or an output.

            - **MediaPackageSettings** *(list) --* Destination settings for a MediaPackage output;
            one destination for both encoders.

              - *(dict) --* MediaPackage Output Destination Settings

                - **ChannelId** *(string) --* ID of the channel in MediaPackage that is the
                destination for this output group. You do not need to specify the individual inputs
                in MediaPackage; MediaLive will handle the connection of the two MediaLive
                pipelines to the two MediaPackage inputs. The MediaPackage channel and MediaLive
                channel must be in the same region.

            - **Settings** *(list) --* Destination settings for a standard output; one destination
            for each redundant encoder.

              - *(dict) --* Placeholder documentation for OutputDestinationSettings

                - **PasswordParam** *(string) --* key used to extract the password from EC2
                Parameter store

                - **StreamName** *(string) --* Stream name for RTMP destinations (URLs of type
                rtmp://)

                - **Url** *(string) --* A URL specifying a destination

                - **Username** *(string) --* username for destination

        - **EgressEndpoints** *(list) --* The endpoints where outgoing connections initiate from

          - *(dict) --* Placeholder documentation for ChannelEgressEndpoint

            - **SourceIp** *(string) --* Public IP of where a channel's output comes from

        - **Id** *(string) --* The unique id of the channel.

        - **InputAttachments** *(list) --* List of input attachments for channel.

          - *(dict) --* Placeholder documentation for InputAttachment

            - **InputAttachmentName** *(string) --* User-specified name for the attachment. This is
            required if the user wants to use this input in an input switch action.

            - **InputId** *(string) --* The ID of the input

            - **InputSettings** *(dict) --* Settings of an input (caption selector, etc.)

              - **AudioSelectors** *(list) --* Used to select the audio stream to decode for inputs
              that have multiple available.

                - *(dict) --* Audio Selector

                  - **Name** *(string) --* The name of this AudioSelector. AudioDescriptions will
                  use this name to uniquely identify this Selector. Selector names should be unique
                  per input.

                  - **SelectorSettings** *(dict) --* The audio selector settings.

                    - **AudioLanguageSelection** *(dict) --* Audio Language Selection

                      - **LanguageCode** *(string) --* Selects a specific three-letter language
                      code from within an audio source.

                      - **LanguageSelectionPolicy** *(string) --* When set to "strict", the
                      transport stream demux strictly identifies audio streams by their language
                      descriptor. If a PMT update occurs such that an audio stream matching the
                      initially selected language is no longer present then mute will be encoded
                      until the language returns. If "loose", then on a PMT update the demux will
                      choose another audio stream in the program with the same stream type if it
                      can't find one with the same language.

                    - **AudioPidSelection** *(dict) --* Audio Pid Selection

                      - **Pid** *(integer) --* Selects a specific PID from within a source.

              - **CaptionSelectors** *(list) --* Used to select the caption input to use for inputs
              that have multiple available.

                - *(dict) --* Output groups for this Live Event. Output groups contain information
                about where streams should be distributed.

                  - **LanguageCode** *(string) --* When specified this field indicates the three
                  letter language code of the caption track to extract from the source.

                  - **Name** *(string) --* Name identifier for a caption selector. This name is
                  used to associate this caption selector with one or more caption descriptions.
                  Names must be unique within an event.

                  - **SelectorSettings** *(dict) --* Caption selector settings.

                    - **AribSourceSettings** *(dict) --* Arib Source Settings

                    - **DvbSubSourceSettings** *(dict) --* Dvb Sub Source Settings

                      - **Pid** *(integer) --* When using DVB-Sub with Burn-In or SMPTE-TT, use
                      this PID for the source content. Unused for DVB-Sub passthrough. All DVB-Sub
                      content is passed through, regardless of selectors.

                    - **EmbeddedSourceSettings** *(dict) --* Embedded Source Settings

                      - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                      through via the "608 compatibility bytes" fields of the 708 wrapper as well
                      as translated into 708. 708 data present in the source content will be
                      discarded.

                      - **Scte20Detection** *(string) --* Set to "auto" to handle streams with
                      intermittent and/or non-aligned SCTE-20 and Embedded captions.

                      - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                      number within the video track from which to extract captions. Unused for
                      passthrough.

                      - **Source608TrackNumber** *(integer) --* This field is unused and deprecated.

                    - **Scte20SourceSettings** *(dict) --* Scte20 Source Settings

                      - **Convert608To708** *(string) --* If upconvert, 608 data is both passed
                      through via the "608 compatibility bytes" fields of the 708 wrapper as well
                      as translated into 708. 708 data present in the source content will be
                      discarded.

                      - **Source608ChannelNumber** *(integer) --* Specifies the 608/708 channel
                      number within the video track from which to extract captions. Unused for
                      passthrough.

                    - **Scte27SourceSettings** *(dict) --* Scte27 Source Settings

                      - **Pid** *(integer) --* The pid field is used in conjunction with the
                      caption selector languageCode field as follows: - Specify PID and Language:
                      Extracts captions from that PID; the language is "informational". - Specify
                      PID and omit Language: Extracts the specified PID. - Omit PID and specify
                      Language: Extracts the specified language, whichever PID that happens to be.
                      - Omit PID and omit Language: Valid only if source is DVB-Sub that is being
                      passed through; all languages will be passed through.

                    - **TeletextSourceSettings** *(dict) --* Teletext Source Settings

                      - **PageNumber** *(string) --* Specifies the teletext page number within the
                      data stream from which to extract captions. Range of 0x100 (256) to 0x8FF
                      (2303). Unused for passthrough. Should be specified as a hexadecimal string
                      with no "0x" prefix.

              - **DeblockFilter** *(string) --* Enable or disable the deblock filter when filtering.

              - **DenoiseFilter** *(string) --* Enable or disable the denoise filter when filtering.

              - **FilterStrength** *(integer) --* Adjusts the magnitude of filtering from 1
              (minimal) to 5 (strongest).

              - **InputFilter** *(string) --* Turns on the filter for this input. MPEG-2 inputs
              have the deblocking filter enabled by default. 1) auto - filtering will be applied
              depending on input type/quality 2) disabled - no filtering will be applied to the
              input 3) forced - filtering will be applied regardless of input type

              - **NetworkInputSettings** *(dict) --* Input settings.

                - **HlsInputSettings** *(dict) --* Specifies HLS input settings when the uri is for
                a HLS manifest.

                  - **Bandwidth** *(integer) --* When specified the HLS stream with the m3u8
                  BANDWIDTH that most closely matches this value will be chosen, otherwise the
                  highest bandwidth stream in the m3u8 will be chosen. The bitrate is specified in
                  bits per second, as in an HLS manifest.

                  - **BufferSegments** *(integer) --* When specified, reading of the HLS input will
                  begin this many buffer segments from the end (most recently written segment).
                  When not specified, the HLS input will begin with the first segment specified in
                  the m3u8.

                  - **Retries** *(integer) --* The number of consecutive times that attempts to
                  read a manifest or segment must fail before the input is considered unavailable.

                  - **RetryInterval** *(integer) --* The number of seconds between retries when an
                  attempt to read a manifest or segment fails.

                - **ServerValidation** *(string) --* Check HTTPS server certificates. When set to
                checkCryptographyOnly, cryptography in the certificate will be checked, but not the
                server's name. Certain subdomains (notably S3 buckets that use dots in the bucket
                name) do not strictly match the corresponding certificate's wildcard pattern and
                would otherwise cause the event to error. This setting is ignored for protocols
                that do not use https.

              - **SourceEndBehavior** *(string) --* Loop input if it is a file. This allows a file
              input to be streamed indefinitely.

              - **VideoSelector** *(dict) --* Informs which video elementary stream to decode for
              input types that have multiple available.

                - **ColorSpace** *(string) --* Specifies the color space of an input. This setting
                works in tandem with colorSpaceUsage and a video description's
                colorSpaceSettingsChoice to determine if any conversion will be performed.

                - **ColorSpaceUsage** *(string) --* Applies only if colorSpace is a value other
                than follow. This field controls how the value in the colorSpace field will be
                used. fallback means that when the input does include color space data, that data
                will be used, but when the input has no color space data, the value in colorSpace
                will be used. Choose fallback if your input is sometimes missing color space data,
                but when it does have color space data, that data is correct. force means to always
                use the value in colorSpace. Choose force if your input usually has no color space
                data or might have unreliable color space data.

                - **SelectorSettings** *(dict) --* The video selector settings.

                  - **VideoSelectorPid** *(dict) --* Video Selector Pid

                    - **Pid** *(integer) --* Selects a specific PID from within a video source.

                  - **VideoSelectorProgramId** *(dict) --* Video Selector Program Id

                    - **ProgramId** *(integer) --* Selects a specific program from within a
                    multi-program transport stream. If the program doesn't exist, the first program
                    within the transport stream will be selected by default.

        - **InputSpecification** *(dict) --* Placeholder documentation for InputSpecification

          - **Codec** *(string) --* Input codec

          - **MaximumBitrate** *(string) --* Maximum input bitrate, categorized coarsely

          - **Resolution** *(string) --* Input resolution, categorized coarsely

        - **LogLevel** *(string) --* The log level being written to CloudWatch Logs.

        - **Name** *(string) --* The name of the channel. (user-mutable)

        - **PipelinesRunningCount** *(integer) --* The number of currently healthy pipelines.

        - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role assumed when running
        the Channel.

        - **State** *(string) --* Placeholder documentation for ChannelState

        - **Tags** *(dict) --* A collection of key-value pairs.

          - *(string) --* Placeholder documentation for __string

            - *(string) --* Placeholder documentation for __string
    """


_ListInputSecurityGroupsPaginatePaginationConfigTypeDef = TypedDict(
    "_ListInputSecurityGroupsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListInputSecurityGroupsPaginatePaginationConfigTypeDef(
    _ListInputSecurityGroupsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListInputSecurityGroupsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListInputSecurityGroupsPaginateResponseInputSecurityGroupsWhitelistRulesTypeDef = TypedDict(
    "_ListInputSecurityGroupsPaginateResponseInputSecurityGroupsWhitelistRulesTypeDef",
    {"Cidr": str},
    total=False,
)


class ListInputSecurityGroupsPaginateResponseInputSecurityGroupsWhitelistRulesTypeDef(
    _ListInputSecurityGroupsPaginateResponseInputSecurityGroupsWhitelistRulesTypeDef
):
    """
    Type definition for `ListInputSecurityGroupsPaginateResponseInputSecurityGroups` `WhitelistRules`

    - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
    """


_ListInputSecurityGroupsPaginateResponseInputSecurityGroupsTypeDef = TypedDict(
    "_ListInputSecurityGroupsPaginateResponseInputSecurityGroupsTypeDef",
    {
        "Arn": str,
        "Id": str,
        "Inputs": List[str],
        "State": str,
        "Tags": Dict[str, str],
        "WhitelistRules": List[
            ListInputSecurityGroupsPaginateResponseInputSecurityGroupsWhitelistRulesTypeDef
        ],
    },
    total=False,
)


class ListInputSecurityGroupsPaginateResponseInputSecurityGroupsTypeDef(
    _ListInputSecurityGroupsPaginateResponseInputSecurityGroupsTypeDef
):
    """
    Type definition for `ListInputSecurityGroupsPaginateResponse` `InputSecurityGroups`

    - **Arn** *(string) --* Unique ARN of Input Security Group

    - **Id** *(string) --* The Id of the Input Security Group

    - **Inputs** *(list) --* The list of inputs currently using this Input Security Group.

      - *(string) --* Placeholder documentation for __string

    - **State** *(string) --* The current state of the Input Security Group.

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string

    - **WhitelistRules** *(list) --* Whitelist rules and their sync status

      - *(dict) --* Whitelist rule

        - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
    """


_ListInputSecurityGroupsPaginateResponseTypeDef = TypedDict(
    "_ListInputSecurityGroupsPaginateResponseTypeDef",
    {
        "InputSecurityGroups": List[
            ListInputSecurityGroupsPaginateResponseInputSecurityGroupsTypeDef
        ]
    },
    total=False,
)


class ListInputSecurityGroupsPaginateResponseTypeDef(
    _ListInputSecurityGroupsPaginateResponseTypeDef
):
    """
    Type definition for `ListInputSecurityGroupsPaginate` `Response`

    - **InputSecurityGroups** *(list) --* List of input security groups

      - *(dict) --* An Input Security Group

        - **Arn** *(string) --* Unique ARN of Input Security Group

        - **Id** *(string) --* The Id of the Input Security Group

        - **Inputs** *(list) --* The list of inputs currently using this Input Security Group.

          - *(string) --* Placeholder documentation for __string

        - **State** *(string) --* The current state of the Input Security Group.

        - **Tags** *(dict) --* A collection of key-value pairs.

          - *(string) --* Placeholder documentation for __string

            - *(string) --* Placeholder documentation for __string

        - **WhitelistRules** *(list) --* Whitelist rules and their sync status

          - *(dict) --* Whitelist rule

            - **Cidr** *(string) --* The IPv4 CIDR that's whitelisted.
    """


_ListInputsPaginatePaginationConfigTypeDef = TypedDict(
    "_ListInputsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListInputsPaginatePaginationConfigTypeDef(
    _ListInputsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListInputsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListInputsPaginateResponseInputsDestinationsVpcTypeDef = TypedDict(
    "_ListInputsPaginateResponseInputsDestinationsVpcTypeDef",
    {"AvailabilityZone": str, "NetworkInterfaceId": str},
    total=False,
)


class ListInputsPaginateResponseInputsDestinationsVpcTypeDef(
    _ListInputsPaginateResponseInputsDestinationsVpcTypeDef
):
    """
    Type definition for `ListInputsPaginateResponseInputsDestinations` `Vpc`

    - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

    - **NetworkInterfaceId** *(string) --* The network interface ID of the Input
    destination in the VPC.
    """


_ListInputsPaginateResponseInputsDestinationsTypeDef = TypedDict(
    "_ListInputsPaginateResponseInputsDestinationsTypeDef",
    {
        "Ip": str,
        "Port": str,
        "Url": str,
        "Vpc": ListInputsPaginateResponseInputsDestinationsVpcTypeDef,
    },
    total=False,
)


class ListInputsPaginateResponseInputsDestinationsTypeDef(
    _ListInputsPaginateResponseInputsDestinationsTypeDef
):
    """
    Type definition for `ListInputsPaginateResponseInputs` `Destinations`

    - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains
    fixed for the lifetime of the input.

    - **Port** *(string) --* The port number for the input.

    - **Url** *(string) --* This represents the endpoint that the customer stream will be
    pushed to.

    - **Vpc** *(dict) --* The properties for a VPC type input destination.

      - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

      - **NetworkInterfaceId** *(string) --* The network interface ID of the Input
      destination in the VPC.
    """


_ListInputsPaginateResponseInputsMediaConnectFlowsTypeDef = TypedDict(
    "_ListInputsPaginateResponseInputsMediaConnectFlowsTypeDef",
    {"FlowArn": str},
    total=False,
)


class ListInputsPaginateResponseInputsMediaConnectFlowsTypeDef(
    _ListInputsPaginateResponseInputsMediaConnectFlowsTypeDef
):
    """
    Type definition for `ListInputsPaginateResponseInputs` `MediaConnectFlows`

    - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a
    source.
    """


_ListInputsPaginateResponseInputsSourcesTypeDef = TypedDict(
    "_ListInputsPaginateResponseInputsSourcesTypeDef",
    {"PasswordParam": str, "Url": str, "Username": str},
    total=False,
)


class ListInputsPaginateResponseInputsSourcesTypeDef(
    _ListInputsPaginateResponseInputsSourcesTypeDef
):
    """
    Type definition for `ListInputsPaginateResponseInputs` `Sources`

    - **PasswordParam** *(string) --* The key used to extract the password from EC2
    Parameter store.

    - **Url** *(string) --* This represents the customer's source URL where stream is
    pulled from.

    - **Username** *(string) --* The username for the input source.
    """


_ListInputsPaginateResponseInputsTypeDef = TypedDict(
    "_ListInputsPaginateResponseInputsTypeDef",
    {
        "Arn": str,
        "AttachedChannels": List[Any],
        "Destinations": List[ListInputsPaginateResponseInputsDestinationsTypeDef],
        "Id": str,
        "InputClass": str,
        "InputSourceType": str,
        "MediaConnectFlows": List[
            ListInputsPaginateResponseInputsMediaConnectFlowsTypeDef
        ],
        "Name": str,
        "RoleArn": str,
        "SecurityGroups": List[Any],
        "Sources": List[ListInputsPaginateResponseInputsSourcesTypeDef],
        "State": str,
        "Tags": Dict[str, str],
        "Type": str,
    },
    total=False,
)


class ListInputsPaginateResponseInputsTypeDef(_ListInputsPaginateResponseInputsTypeDef):
    """
    Type definition for `ListInputsPaginateResponse` `Inputs`

    - **Arn** *(string) --* The Unique ARN of the input (generated, immutable).

    - **AttachedChannels** *(list) --* A list of channel IDs that that input is attached to
    (currently an input can only be attached to one channel).

      - *(string) --* Placeholder documentation for __string

    - **Destinations** *(list) --* A list of the destinations of the input (PUSH-type).

      - *(dict) --* The settings for a PUSH type input.

        - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains
        fixed for the lifetime of the input.

        - **Port** *(string) --* The port number for the input.

        - **Url** *(string) --* This represents the endpoint that the customer stream will be
        pushed to.

        - **Vpc** *(dict) --* The properties for a VPC type input destination.

          - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

          - **NetworkInterfaceId** *(string) --* The network interface ID of the Input
          destination in the VPC.

    - **Id** *(string) --* The generated ID of the input (unique for user account, immutable).

    - **InputClass** *(string) --* STANDARD - MediaLive expects two sources to be connected to
    this input. If the channel is also STANDARD, both sources will be ingested. If the channel
    is SINGLE_PIPELINE, only the first source will be ingested; the second source will always
    be ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one
    source to this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If
    the ChannelClass is STANDARD, this value is not valid because the channel requires two
    sources in the input.

    - **InputSourceType** *(string) --* Certain pull input sources can be dynamic, meaning that
    they can have their URL's dynamically changes during input switch actions. Presently, this
    functionality only works with MP4_FILE inputs.

    - **MediaConnectFlows** *(list) --* A list of MediaConnect Flows for this input.

      - *(dict) --* The settings for a MediaConnect Flow.

        - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a
        source.

    - **Name** *(string) --* The user-assigned name (This is a mutable value).

    - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role this input assumes
    during and after creation.

    - **SecurityGroups** *(list) --* A list of IDs for all the Input Security Groups attached
    to the input.

      - *(string) --* Placeholder documentation for __string

    - **Sources** *(list) --* A list of the sources of the input (PULL-type).

      - *(dict) --* The settings for a PULL type input.

        - **PasswordParam** *(string) --* The key used to extract the password from EC2
        Parameter store.

        - **Url** *(string) --* This represents the customer's source URL where stream is
        pulled from.

        - **Username** *(string) --* The username for the input source.

    - **State** *(string) --* Placeholder documentation for InputState

    - **Tags** *(dict) --* A collection of key-value pairs.

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string

    - **Type** *(string) --* Placeholder documentation for InputType
    """


_ListInputsPaginateResponseTypeDef = TypedDict(
    "_ListInputsPaginateResponseTypeDef",
    {"Inputs": List[ListInputsPaginateResponseInputsTypeDef]},
    total=False,
)


class ListInputsPaginateResponseTypeDef(_ListInputsPaginateResponseTypeDef):
    """
    Type definition for `ListInputsPaginate` `Response`

    - **Inputs** *(list) --* Placeholder documentation for __listOfInput

      - *(dict) --* Placeholder documentation for Input

        - **Arn** *(string) --* The Unique ARN of the input (generated, immutable).

        - **AttachedChannels** *(list) --* A list of channel IDs that that input is attached to
        (currently an input can only be attached to one channel).

          - *(string) --* Placeholder documentation for __string

        - **Destinations** *(list) --* A list of the destinations of the input (PUSH-type).

          - *(dict) --* The settings for a PUSH type input.

            - **Ip** *(string) --* The system-generated static IP address of endpoint. It remains
            fixed for the lifetime of the input.

            - **Port** *(string) --* The port number for the input.

            - **Url** *(string) --* This represents the endpoint that the customer stream will be
            pushed to.

            - **Vpc** *(dict) --* The properties for a VPC type input destination.

              - **AvailabilityZone** *(string) --* The availability zone of the Input destination.

              - **NetworkInterfaceId** *(string) --* The network interface ID of the Input
              destination in the VPC.

        - **Id** *(string) --* The generated ID of the input (unique for user account, immutable).

        - **InputClass** *(string) --* STANDARD - MediaLive expects two sources to be connected to
        this input. If the channel is also STANDARD, both sources will be ingested. If the channel
        is SINGLE_PIPELINE, only the first source will be ingested; the second source will always
        be ignored, even if the first source fails. SINGLE_PIPELINE - You can connect only one
        source to this input. If the ChannelClass is also SINGLE_PIPELINE, this value is valid. If
        the ChannelClass is STANDARD, this value is not valid because the channel requires two
        sources in the input.

        - **InputSourceType** *(string) --* Certain pull input sources can be dynamic, meaning that
        they can have their URL's dynamically changes during input switch actions. Presently, this
        functionality only works with MP4_FILE inputs.

        - **MediaConnectFlows** *(list) --* A list of MediaConnect Flows for this input.

          - *(dict) --* The settings for a MediaConnect Flow.

            - **FlowArn** *(string) --* The unique ARN of the MediaConnect Flow being used as a
            source.

        - **Name** *(string) --* The user-assigned name (This is a mutable value).

        - **RoleArn** *(string) --* The Amazon Resource Name (ARN) of the role this input assumes
        during and after creation.

        - **SecurityGroups** *(list) --* A list of IDs for all the Input Security Groups attached
        to the input.

          - *(string) --* Placeholder documentation for __string

        - **Sources** *(list) --* A list of the sources of the input (PULL-type).

          - *(dict) --* The settings for a PULL type input.

            - **PasswordParam** *(string) --* The key used to extract the password from EC2
            Parameter store.

            - **Url** *(string) --* This represents the customer's source URL where stream is
            pulled from.

            - **Username** *(string) --* The username for the input source.

        - **State** *(string) --* Placeholder documentation for InputState

        - **Tags** *(dict) --* A collection of key-value pairs.

          - *(string) --* Placeholder documentation for __string

            - *(string) --* Placeholder documentation for __string

        - **Type** *(string) --* Placeholder documentation for InputType
    """


_ListOfferingsPaginatePaginationConfigTypeDef = TypedDict(
    "_ListOfferingsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListOfferingsPaginatePaginationConfigTypeDef(
    _ListOfferingsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListOfferingsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListOfferingsPaginateResponseOfferingsResourceSpecificationTypeDef = TypedDict(
    "_ListOfferingsPaginateResponseOfferingsResourceSpecificationTypeDef",
    {
        "ChannelClass": str,
        "Codec": str,
        "MaximumBitrate": str,
        "MaximumFramerate": str,
        "Resolution": str,
        "ResourceType": str,
        "SpecialFeature": str,
        "VideoQuality": str,
    },
    total=False,
)


class ListOfferingsPaginateResponseOfferingsResourceSpecificationTypeDef(
    _ListOfferingsPaginateResponseOfferingsResourceSpecificationTypeDef
):
    """
    Type definition for `ListOfferingsPaginateResponseOfferings` `ResourceSpecification`

    - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

    - **Codec** *(string) --* Codec, e.g. 'AVC'

    - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

    - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

    - **Resolution** *(string) --* Resolution, e.g. 'HD'

    - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

    - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
    only)

    - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
    """


_ListOfferingsPaginateResponseOfferingsTypeDef = TypedDict(
    "_ListOfferingsPaginateResponseOfferingsTypeDef",
    {
        "Arn": str,
        "CurrencyCode": str,
        "Duration": int,
        "DurationUnits": str,
        "FixedPrice": float,
        "OfferingDescription": str,
        "OfferingId": str,
        "OfferingType": str,
        "Region": str,
        "ResourceSpecification": ListOfferingsPaginateResponseOfferingsResourceSpecificationTypeDef,
        "UsagePrice": float,
    },
    total=False,
)


class ListOfferingsPaginateResponseOfferingsTypeDef(
    _ListOfferingsPaginateResponseOfferingsTypeDef
):
    """
    Type definition for `ListOfferingsPaginateResponse` `Offerings`

    - **Arn** *(string) --* Unique offering ARN, e.g.
    'arn:aws:medialive:us-west-2:123456789012:offering:87654321'

    - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217
    format, e.g. 'USD'

    - **Duration** *(integer) --* Lease duration, e.g. '12'

    - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'

    - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a
    NO_UPFRONT offering

    - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20
    Mbps, 30 fps, and standard VQ in US West (Oregon)'

    - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'

    - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'

    - **Region** *(string) --* AWS region, e.g. 'us-west-2'

    - **ResourceSpecification** *(dict) --* Resource configuration details

      - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

      - **Codec** *(string) --* Codec, e.g. 'AVC'

      - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

      - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

      - **Resolution** *(string) --* Resolution, e.g. 'HD'

      - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

      - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
      only)

      - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)

    - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g.
    '157.0'
    """


_ListOfferingsPaginateResponseTypeDef = TypedDict(
    "_ListOfferingsPaginateResponseTypeDef",
    {"Offerings": List[ListOfferingsPaginateResponseOfferingsTypeDef]},
    total=False,
)


class ListOfferingsPaginateResponseTypeDef(_ListOfferingsPaginateResponseTypeDef):
    """
    Type definition for `ListOfferingsPaginate` `Response`

    - **Offerings** *(list) --* List of offerings

      - *(dict) --* Reserved resources available for purchase

        - **Arn** *(string) --* Unique offering ARN, e.g.
        'arn:aws:medialive:us-west-2:123456789012:offering:87654321'

        - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217
        format, e.g. 'USD'

        - **Duration** *(integer) --* Lease duration, e.g. '12'

        - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'

        - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a
        NO_UPFRONT offering

        - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20
        Mbps, 30 fps, and standard VQ in US West (Oregon)'

        - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'

        - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'

        - **Region** *(string) --* AWS region, e.g. 'us-west-2'

        - **ResourceSpecification** *(dict) --* Resource configuration details

          - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

          - **Codec** *(string) --* Codec, e.g. 'AVC'

          - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

          - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

          - **Resolution** *(string) --* Resolution, e.g. 'HD'

          - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

          - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
          only)

          - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)

        - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g.
        '157.0'
    """


_ListReservationsPaginatePaginationConfigTypeDef = TypedDict(
    "_ListReservationsPaginatePaginationConfigTypeDef",
    {"MaxItems": int, "PageSize": int, "StartingToken": str},
    total=False,
)


class ListReservationsPaginatePaginationConfigTypeDef(
    _ListReservationsPaginatePaginationConfigTypeDef
):
    """
    Type definition for `ListReservationsPaginate` `PaginationConfig`

    A dictionary that provides parameters to control pagination.

    - **MaxItems** *(integer) --*

      The total number of items to return. If the total number of items available is more than the
      value specified in max-items then a ``NextToken`` will be provided in the output that you can
      use to resume pagination.

    - **PageSize** *(integer) --*

      The size of each page.

    - **StartingToken** *(string) --*

      A token to specify where to start paginating. This is the ``NextToken`` from a previous
      response.
    """


_ListReservationsPaginateResponseReservationsResourceSpecificationTypeDef = TypedDict(
    "_ListReservationsPaginateResponseReservationsResourceSpecificationTypeDef",
    {
        "ChannelClass": str,
        "Codec": str,
        "MaximumBitrate": str,
        "MaximumFramerate": str,
        "Resolution": str,
        "ResourceType": str,
        "SpecialFeature": str,
        "VideoQuality": str,
    },
    total=False,
)


class ListReservationsPaginateResponseReservationsResourceSpecificationTypeDef(
    _ListReservationsPaginateResponseReservationsResourceSpecificationTypeDef
):
    """
    Type definition for `ListReservationsPaginateResponseReservations` `ResourceSpecification`

    - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

    - **Codec** *(string) --* Codec, e.g. 'AVC'

    - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

    - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

    - **Resolution** *(string) --* Resolution, e.g. 'HD'

    - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

    - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
    only)

    - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)
    """


_ListReservationsPaginateResponseReservationsTypeDef = TypedDict(
    "_ListReservationsPaginateResponseReservationsTypeDef",
    {
        "Arn": str,
        "Count": int,
        "CurrencyCode": str,
        "Duration": int,
        "DurationUnits": str,
        "End": str,
        "FixedPrice": float,
        "Name": str,
        "OfferingDescription": str,
        "OfferingId": str,
        "OfferingType": str,
        "Region": str,
        "ReservationId": str,
        "ResourceSpecification": ListReservationsPaginateResponseReservationsResourceSpecificationTypeDef,
        "Start": str,
        "State": str,
        "Tags": Dict[str, str],
        "UsagePrice": float,
    },
    total=False,
)


class ListReservationsPaginateResponseReservationsTypeDef(
    _ListReservationsPaginateResponseReservationsTypeDef
):
    """
    Type definition for `ListReservationsPaginateResponse` `Reservations`

    - **Arn** *(string) --* Unique reservation ARN, e.g.
    'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'

    - **Count** *(integer) --* Number of reserved resources

    - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217
    format, e.g. 'USD'

    - **Duration** *(integer) --* Lease duration, e.g. '12'

    - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'

    - **End** *(string) --* Reservation UTC end date and time in ISO-8601 format, e.g.
    '2019-03-01T00:00:00'

    - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a
    NO_UPFRONT offering

    - **Name** *(string) --* User specified reservation name

    - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20
    Mbps, 30 fps, and standard VQ in US West (Oregon)'

    - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'

    - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'

    - **Region** *(string) --* AWS region, e.g. 'us-west-2'

    - **ReservationId** *(string) --* Unique reservation ID, e.g. '1234567'

    - **ResourceSpecification** *(dict) --* Resource configuration details

      - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

      - **Codec** *(string) --* Codec, e.g. 'AVC'

      - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

      - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

      - **Resolution** *(string) --* Resolution, e.g. 'HD'

      - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

      - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
      only)

      - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)

    - **Start** *(string) --* Reservation UTC start date and time in ISO-8601 format, e.g.
    '2018-03-01T00:00:00'

    - **State** *(string) --* Current state of reservation, e.g. 'ACTIVE'

    - **Tags** *(dict) --* A collection of key-value pairs

      - *(string) --* Placeholder documentation for __string

        - *(string) --* Placeholder documentation for __string

    - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g.
    '157.0'
    """


_ListReservationsPaginateResponseTypeDef = TypedDict(
    "_ListReservationsPaginateResponseTypeDef",
    {"Reservations": List[ListReservationsPaginateResponseReservationsTypeDef]},
    total=False,
)


class ListReservationsPaginateResponseTypeDef(_ListReservationsPaginateResponseTypeDef):
    """
    Type definition for `ListReservationsPaginate` `Response`

    - **Reservations** *(list) --* List of reservations

      - *(dict) --* Reserved resources available to use

        - **Arn** *(string) --* Unique reservation ARN, e.g.
        'arn:aws:medialive:us-west-2:123456789012:reservation:1234567'

        - **Count** *(integer) --* Number of reserved resources

        - **CurrencyCode** *(string) --* Currency code for usagePrice and fixedPrice in ISO-4217
        format, e.g. 'USD'

        - **Duration** *(integer) --* Lease duration, e.g. '12'

        - **DurationUnits** *(string) --* Units for duration, e.g. 'MONTHS'

        - **End** *(string) --* Reservation UTC end date and time in ISO-8601 format, e.g.
        '2019-03-01T00:00:00'

        - **FixedPrice** *(float) --* One-time charge for each reserved resource, e.g. '0.0' for a
        NO_UPFRONT offering

        - **Name** *(string) --* User specified reservation name

        - **OfferingDescription** *(string) --* Offering description, e.g. 'HD AVC output at 10-20
        Mbps, 30 fps, and standard VQ in US West (Oregon)'

        - **OfferingId** *(string) --* Unique offering ID, e.g. '87654321'

        - **OfferingType** *(string) --* Offering type, e.g. 'NO_UPFRONT'

        - **Region** *(string) --* AWS region, e.g. 'us-west-2'

        - **ReservationId** *(string) --* Unique reservation ID, e.g. '1234567'

        - **ResourceSpecification** *(dict) --* Resource configuration details

          - **ChannelClass** *(string) --* Channel class, e.g. 'STANDARD'

          - **Codec** *(string) --* Codec, e.g. 'AVC'

          - **MaximumBitrate** *(string) --* Maximum bitrate, e.g. 'MAX_20_MBPS'

          - **MaximumFramerate** *(string) --* Maximum framerate, e.g. 'MAX_30_FPS' (Outputs only)

          - **Resolution** *(string) --* Resolution, e.g. 'HD'

          - **ResourceType** *(string) --* Resource type, 'INPUT', 'OUTPUT', or 'CHANNEL'

          - **SpecialFeature** *(string) --* Special feature, e.g. 'AUDIO_NORMALIZATION' (Channels
          only)

          - **VideoQuality** *(string) --* Video quality, e.g. 'STANDARD' (Outputs only)

        - **Start** *(string) --* Reservation UTC start date and time in ISO-8601 format, e.g.
        '2018-03-01T00:00:00'

        - **State** *(string) --* Current state of reservation, e.g. 'ACTIVE'

        - **Tags** *(dict) --* A collection of key-value pairs

          - *(string) --* Placeholder documentation for __string

            - *(string) --* Placeholder documentation for __string

        - **UsagePrice** *(float) --* Recurring usage charge for each reserved resource, e.g.
        '157.0'
    """
