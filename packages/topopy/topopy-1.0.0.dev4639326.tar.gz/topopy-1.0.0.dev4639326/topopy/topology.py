# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _topology
else:
    import _topology

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _topology.delete_SwigPyIterator

    def value(self):
        return _topology.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _topology.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _topology.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _topology.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _topology.SwigPyIterator_equal(self, x)

    def copy(self):
        return _topology.SwigPyIterator_copy(self)

    def next(self):
        return _topology.SwigPyIterator_next(self)

    def __next__(self):
        return _topology.SwigPyIterator___next__(self)

    def previous(self):
        return _topology.SwigPyIterator_previous(self)

    def advance(self, n):
        return _topology.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _topology.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _topology.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _topology.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _topology.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _topology.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _topology.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _topology:
_topology.SwigPyIterator_swigregister(SwigPyIterator)

class MorseComplexFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Xin, yin, gradientMethod, persistenceType, win, neighborhoods, verbosity=False):
        _topology.MorseComplexFloat_swiginit(self, _topology.new_MorseComplexFloat(Xin, yin, gradientMethod, persistenceType, win, neighborhoods, verbosity))

    def Dimension(self):
        return _topology.MorseComplexFloat_Dimension(self)

    def Size(self):
        return _topology.MorseComplexFloat_Size(self)

    def MaxY(self):
        return _topology.MorseComplexFloat_MaxY(self)

    def MinY(self):
        return _topology.MorseComplexFloat_MinY(self)

    def RangeY(self):
        return _topology.MorseComplexFloat_RangeY(self)

    def MaxX(self, dim):
        return _topology.MorseComplexFloat_MaxX(self, dim)

    def MinX(self, dim):
        return _topology.MorseComplexFloat_MinX(self, dim)

    def RangeX(self, dim):
        return _topology.MorseComplexFloat_RangeX(self, dim)

    def GetX(self, *args):
        return _topology.MorseComplexFloat_GetX(self, *args)

    def GetY(self, i):
        return _topology.MorseComplexFloat_GetY(self, i)

    def MaxLabel(self, i, pers):
        return _topology.MorseComplexFloat_MaxLabel(self, i, pers)

    def to_json(self):
        return _topology.MorseComplexFloat_to_json(self)

    def SortedPersistences(self):
        return _topology.MorseComplexFloat_SortedPersistences(self)

    def GetPartitions(self, persistence):
        return _topology.MorseComplexFloat_GetPartitions(self, persistence)
    __swig_destroy__ = _topology.delete_MorseComplexFloat

# Register MorseComplexFloat in _topology:
_topology.MorseComplexFloat_swigregister(MorseComplexFloat)

class MorseComplexDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Xin, yin, gradientMethod, persistenceType, win, neighborhoods, verbosity=False):
        _topology.MorseComplexDouble_swiginit(self, _topology.new_MorseComplexDouble(Xin, yin, gradientMethod, persistenceType, win, neighborhoods, verbosity))

    def Dimension(self):
        return _topology.MorseComplexDouble_Dimension(self)

    def Size(self):
        return _topology.MorseComplexDouble_Size(self)

    def MaxY(self):
        return _topology.MorseComplexDouble_MaxY(self)

    def MinY(self):
        return _topology.MorseComplexDouble_MinY(self)

    def RangeY(self):
        return _topology.MorseComplexDouble_RangeY(self)

    def MaxX(self, dim):
        return _topology.MorseComplexDouble_MaxX(self, dim)

    def MinX(self, dim):
        return _topology.MorseComplexDouble_MinX(self, dim)

    def RangeX(self, dim):
        return _topology.MorseComplexDouble_RangeX(self, dim)

    def GetX(self, *args):
        return _topology.MorseComplexDouble_GetX(self, *args)

    def GetY(self, i):
        return _topology.MorseComplexDouble_GetY(self, i)

    def MaxLabel(self, i, pers):
        return _topology.MorseComplexDouble_MaxLabel(self, i, pers)

    def to_json(self):
        return _topology.MorseComplexDouble_to_json(self)

    def SortedPersistences(self):
        return _topology.MorseComplexDouble_SortedPersistences(self)

    def GetPartitions(self, persistence):
        return _topology.MorseComplexDouble_GetPartitions(self, persistence)
    __swig_destroy__ = _topology.delete_MorseComplexDouble

# Register MorseComplexDouble in _topology:
_topology.MorseComplexDouble_swigregister(MorseComplexDouble)

class MergeTreeFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Xin, yin, gradientMethod, neighborhoods, verbosity=False):
        _topology.MergeTreeFloat_swiginit(self, _topology.new_MergeTreeFloat(Xin, yin, gradientMethod, neighborhoods, verbosity))

    def Dimension(self):
        return _topology.MergeTreeFloat_Dimension(self)

    def Neighbors(self, index):
        return _topology.MergeTreeFloat_Neighbors(self, index)

    def Nodes(self):
        return _topology.MergeTreeFloat_Nodes(self)

    def Root(self):
        return _topology.MergeTreeFloat_Root(self)

    def Edges(self):
        return _topology.MergeTreeFloat_Edges(self)

    def AugmentedEdges(self):
        return _topology.MergeTreeFloat_AugmentedEdges(self)

    def Size(self):
        return _topology.MergeTreeFloat_Size(self)
    __swig_destroy__ = _topology.delete_MergeTreeFloat

# Register MergeTreeFloat in _topology:
_topology.MergeTreeFloat_swigregister(MergeTreeFloat)

class MergeTreeDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Xin, yin, gradientMethod, neighborhoods, verbosity=False):
        _topology.MergeTreeDouble_swiginit(self, _topology.new_MergeTreeDouble(Xin, yin, gradientMethod, neighborhoods, verbosity))

    def Dimension(self):
        return _topology.MergeTreeDouble_Dimension(self)

    def Neighbors(self, index):
        return _topology.MergeTreeDouble_Neighbors(self, index)

    def Nodes(self):
        return _topology.MergeTreeDouble_Nodes(self)

    def Root(self):
        return _topology.MergeTreeDouble_Root(self)

    def Edges(self):
        return _topology.MergeTreeDouble_Edges(self)

    def AugmentedEdges(self):
        return _topology.MergeTreeDouble_AugmentedEdges(self)

    def Size(self):
        return _topology.MergeTreeDouble_Size(self)
    __swig_destroy__ = _topology.delete_MergeTreeDouble

# Register MergeTreeDouble in _topology:
_topology.MergeTreeDouble_swigregister(MergeTreeDouble)

class vectorFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _topology.vectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _topology.vectorFloat___nonzero__(self)

    def __bool__(self):
        return _topology.vectorFloat___bool__(self)

    def __len__(self):
        return _topology.vectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _topology.vectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _topology.vectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _topology.vectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _topology.vectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _topology.vectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _topology.vectorFloat___setitem__(self, *args)

    def pop(self):
        return _topology.vectorFloat_pop(self)

    def append(self, x):
        return _topology.vectorFloat_append(self, x)

    def empty(self):
        return _topology.vectorFloat_empty(self)

    def size(self):
        return _topology.vectorFloat_size(self)

    def swap(self, v):
        return _topology.vectorFloat_swap(self, v)

    def begin(self):
        return _topology.vectorFloat_begin(self)

    def end(self):
        return _topology.vectorFloat_end(self)

    def rbegin(self):
        return _topology.vectorFloat_rbegin(self)

    def rend(self):
        return _topology.vectorFloat_rend(self)

    def clear(self):
        return _topology.vectorFloat_clear(self)

    def get_allocator(self):
        return _topology.vectorFloat_get_allocator(self)

    def pop_back(self):
        return _topology.vectorFloat_pop_back(self)

    def erase(self, *args):
        return _topology.vectorFloat_erase(self, *args)

    def __init__(self, *args):
        _topology.vectorFloat_swiginit(self, _topology.new_vectorFloat(*args))

    def push_back(self, x):
        return _topology.vectorFloat_push_back(self, x)

    def front(self):
        return _topology.vectorFloat_front(self)

    def back(self):
        return _topology.vectorFloat_back(self)

    def assign(self, n, x):
        return _topology.vectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _topology.vectorFloat_resize(self, *args)

    def insert(self, *args):
        return _topology.vectorFloat_insert(self, *args)

    def reserve(self, n):
        return _topology.vectorFloat_reserve(self, n)

    def capacity(self):
        return _topology.vectorFloat_capacity(self)
    __swig_destroy__ = _topology.delete_vectorFloat

# Register vectorFloat in _topology:
_topology.vectorFloat_swigregister(vectorFloat)

class vectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _topology.vectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _topology.vectorDouble___nonzero__(self)

    def __bool__(self):
        return _topology.vectorDouble___bool__(self)

    def __len__(self):
        return _topology.vectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _topology.vectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _topology.vectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _topology.vectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _topology.vectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _topology.vectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _topology.vectorDouble___setitem__(self, *args)

    def pop(self):
        return _topology.vectorDouble_pop(self)

    def append(self, x):
        return _topology.vectorDouble_append(self, x)

    def empty(self):
        return _topology.vectorDouble_empty(self)

    def size(self):
        return _topology.vectorDouble_size(self)

    def swap(self, v):
        return _topology.vectorDouble_swap(self, v)

    def begin(self):
        return _topology.vectorDouble_begin(self)

    def end(self):
        return _topology.vectorDouble_end(self)

    def rbegin(self):
        return _topology.vectorDouble_rbegin(self)

    def rend(self):
        return _topology.vectorDouble_rend(self)

    def clear(self):
        return _topology.vectorDouble_clear(self)

    def get_allocator(self):
        return _topology.vectorDouble_get_allocator(self)

    def pop_back(self):
        return _topology.vectorDouble_pop_back(self)

    def erase(self, *args):
        return _topology.vectorDouble_erase(self, *args)

    def __init__(self, *args):
        _topology.vectorDouble_swiginit(self, _topology.new_vectorDouble(*args))

    def push_back(self, x):
        return _topology.vectorDouble_push_back(self, x)

    def front(self):
        return _topology.vectorDouble_front(self)

    def back(self):
        return _topology.vectorDouble_back(self)

    def assign(self, n, x):
        return _topology.vectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _topology.vectorDouble_resize(self, *args)

    def insert(self, *args):
        return _topology.vectorDouble_insert(self, *args)

    def reserve(self, n):
        return _topology.vectorDouble_reserve(self, n)

    def capacity(self):
        return _topology.vectorDouble_capacity(self)
    __swig_destroy__ = _topology.delete_vectorDouble

# Register vectorDouble in _topology:
_topology.vectorDouble_swigregister(vectorDouble)

class vectorString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _topology.vectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _topology.vectorString___nonzero__(self)

    def __bool__(self):
        return _topology.vectorString___bool__(self)

    def __len__(self):
        return _topology.vectorString___len__(self)

    def __getslice__(self, i, j):
        return _topology.vectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _topology.vectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _topology.vectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _topology.vectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _topology.vectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _topology.vectorString___setitem__(self, *args)

    def pop(self):
        return _topology.vectorString_pop(self)

    def append(self, x):
        return _topology.vectorString_append(self, x)

    def empty(self):
        return _topology.vectorString_empty(self)

    def size(self):
        return _topology.vectorString_size(self)

    def swap(self, v):
        return _topology.vectorString_swap(self, v)

    def begin(self):
        return _topology.vectorString_begin(self)

    def end(self):
        return _topology.vectorString_end(self)

    def rbegin(self):
        return _topology.vectorString_rbegin(self)

    def rend(self):
        return _topology.vectorString_rend(self)

    def clear(self):
        return _topology.vectorString_clear(self)

    def get_allocator(self):
        return _topology.vectorString_get_allocator(self)

    def pop_back(self):
        return _topology.vectorString_pop_back(self)

    def erase(self, *args):
        return _topology.vectorString_erase(self, *args)

    def __init__(self, *args):
        _topology.vectorString_swiginit(self, _topology.new_vectorString(*args))

    def push_back(self, x):
        return _topology.vectorString_push_back(self, x)

    def front(self):
        return _topology.vectorString_front(self)

    def back(self):
        return _topology.vectorString_back(self)

    def assign(self, n, x):
        return _topology.vectorString_assign(self, n, x)

    def resize(self, *args):
        return _topology.vectorString_resize(self, *args)

    def insert(self, *args):
        return _topology.vectorString_insert(self, *args)

    def reserve(self, n):
        return _topology.vectorString_reserve(self, n)

    def capacity(self):
        return _topology.vectorString_capacity(self)
    __swig_destroy__ = _topology.delete_vectorString

# Register vectorString in _topology:
_topology.vectorString_swigregister(vectorString)

class vectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _topology.vectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _topology.vectorInt___nonzero__(self)

    def __bool__(self):
        return _topology.vectorInt___bool__(self)

    def __len__(self):
        return _topology.vectorInt___len__(self)

    def __getslice__(self, i, j):
        return _topology.vectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _topology.vectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _topology.vectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _topology.vectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _topology.vectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _topology.vectorInt___setitem__(self, *args)

    def pop(self):
        return _topology.vectorInt_pop(self)

    def append(self, x):
        return _topology.vectorInt_append(self, x)

    def empty(self):
        return _topology.vectorInt_empty(self)

    def size(self):
        return _topology.vectorInt_size(self)

    def swap(self, v):
        return _topology.vectorInt_swap(self, v)

    def begin(self):
        return _topology.vectorInt_begin(self)

    def end(self):
        return _topology.vectorInt_end(self)

    def rbegin(self):
        return _topology.vectorInt_rbegin(self)

    def rend(self):
        return _topology.vectorInt_rend(self)

    def clear(self):
        return _topology.vectorInt_clear(self)

    def get_allocator(self):
        return _topology.vectorInt_get_allocator(self)

    def pop_back(self):
        return _topology.vectorInt_pop_back(self)

    def erase(self, *args):
        return _topology.vectorInt_erase(self, *args)

    def __init__(self, *args):
        _topology.vectorInt_swiginit(self, _topology.new_vectorInt(*args))

    def push_back(self, x):
        return _topology.vectorInt_push_back(self, x)

    def front(self):
        return _topology.vectorInt_front(self)

    def back(self):
        return _topology.vectorInt_back(self)

    def assign(self, n, x):
        return _topology.vectorInt_assign(self, n, x)

    def resize(self, *args):
        return _topology.vectorInt_resize(self, *args)

    def insert(self, *args):
        return _topology.vectorInt_insert(self, *args)

    def reserve(self, n):
        return _topology.vectorInt_reserve(self, n)

    def capacity(self):
        return _topology.vectorInt_capacity(self)
    __swig_destroy__ = _topology.delete_vectorInt

# Register vectorInt in _topology:
_topology.vectorInt_swigregister(vectorInt)

class setInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _topology.setInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _topology.setInt___nonzero__(self)

    def __bool__(self):
        return _topology.setInt___bool__(self)

    def __len__(self):
        return _topology.setInt___len__(self)

    def append(self, x):
        return _topology.setInt_append(self, x)

    def __contains__(self, x):
        return _topology.setInt___contains__(self, x)

    def __getitem__(self, i):
        return _topology.setInt___getitem__(self, i)

    def add(self, x):
        return _topology.setInt_add(self, x)

    def discard(self, x):
        return _topology.setInt_discard(self, x)

    def __init__(self, *args):
        _topology.setInt_swiginit(self, _topology.new_setInt(*args))

    def empty(self):
        return _topology.setInt_empty(self)

    def size(self):
        return _topology.setInt_size(self)

    def clear(self):
        return _topology.setInt_clear(self)

    def swap(self, v):
        return _topology.setInt_swap(self, v)

    def count(self, x):
        return _topology.setInt_count(self, x)

    def begin(self):
        return _topology.setInt_begin(self)

    def end(self):
        return _topology.setInt_end(self)

    def rbegin(self):
        return _topology.setInt_rbegin(self)

    def rend(self):
        return _topology.setInt_rend(self)

    def erase(self, *args):
        return _topology.setInt_erase(self, *args)

    def find(self, x):
        return _topology.setInt_find(self, x)

    def lower_bound(self, x):
        return _topology.setInt_lower_bound(self, x)

    def upper_bound(self, x):
        return _topology.setInt_upper_bound(self, x)

    def equal_range(self, x):
        return _topology.setInt_equal_range(self, x)

    def insert(self, __x):
        return _topology.setInt_insert(self, __x)
    __swig_destroy__ = _topology.delete_setInt

# Register setInt in _topology:
_topology.setInt_swigregister(setInt)

class mapPartition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _topology.mapPartition_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _topology.mapPartition___nonzero__(self)

    def __bool__(self):
        return _topology.mapPartition___bool__(self)

    def __len__(self):
        return _topology.mapPartition___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _topology.mapPartition___getitem__(self, key)

    def __delitem__(self, key):
        return _topology.mapPartition___delitem__(self, key)

    def has_key(self, key):
        return _topology.mapPartition_has_key(self, key)

    def keys(self):
        return _topology.mapPartition_keys(self)

    def values(self):
        return _topology.mapPartition_values(self)

    def items(self):
        return _topology.mapPartition_items(self)

    def __contains__(self, key):
        return _topology.mapPartition___contains__(self, key)

    def key_iterator(self):
        return _topology.mapPartition_key_iterator(self)

    def value_iterator(self):
        return _topology.mapPartition_value_iterator(self)

    def __setitem__(self, *args):
        return _topology.mapPartition___setitem__(self, *args)

    def asdict(self):
        return _topology.mapPartition_asdict(self)

    def __init__(self, *args):
        _topology.mapPartition_swiginit(self, _topology.new_mapPartition(*args))

    def empty(self):
        return _topology.mapPartition_empty(self)

    def size(self):
        return _topology.mapPartition_size(self)

    def swap(self, v):
        return _topology.mapPartition_swap(self, v)

    def begin(self):
        return _topology.mapPartition_begin(self)

    def end(self):
        return _topology.mapPartition_end(self)

    def rbegin(self):
        return _topology.mapPartition_rbegin(self)

    def rend(self):
        return _topology.mapPartition_rend(self)

    def clear(self):
        return _topology.mapPartition_clear(self)

    def get_allocator(self):
        return _topology.mapPartition_get_allocator(self)

    def count(self, x):
        return _topology.mapPartition_count(self, x)

    def erase(self, *args):
        return _topology.mapPartition_erase(self, *args)

    def find(self, x):
        return _topology.mapPartition_find(self, x)

    def lower_bound(self, x):
        return _topology.mapPartition_lower_bound(self, x)

    def upper_bound(self, x):
        return _topology.mapPartition_upper_bound(self, x)
    __swig_destroy__ = _topology.delete_mapPartition

# Register mapPartition in _topology:
_topology.mapPartition_swigregister(mapPartition)

class mapManifolds(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _topology.mapManifolds_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _topology.mapManifolds___nonzero__(self)

    def __bool__(self):
        return _topology.mapManifolds___bool__(self)

    def __len__(self):
        return _topology.mapManifolds___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _topology.mapManifolds___getitem__(self, key)

    def __delitem__(self, key):
        return _topology.mapManifolds___delitem__(self, key)

    def has_key(self, key):
        return _topology.mapManifolds_has_key(self, key)

    def keys(self):
        return _topology.mapManifolds_keys(self)

    def values(self):
        return _topology.mapManifolds_values(self)

    def items(self):
        return _topology.mapManifolds_items(self)

    def __contains__(self, key):
        return _topology.mapManifolds___contains__(self, key)

    def key_iterator(self):
        return _topology.mapManifolds_key_iterator(self)

    def value_iterator(self):
        return _topology.mapManifolds_value_iterator(self)

    def __setitem__(self, *args):
        return _topology.mapManifolds___setitem__(self, *args)

    def asdict(self):
        return _topology.mapManifolds_asdict(self)

    def __init__(self, *args):
        _topology.mapManifolds_swiginit(self, _topology.new_mapManifolds(*args))

    def empty(self):
        return _topology.mapManifolds_empty(self)

    def size(self):
        return _topology.mapManifolds_size(self)

    def swap(self, v):
        return _topology.mapManifolds_swap(self, v)

    def begin(self):
        return _topology.mapManifolds_begin(self)

    def end(self):
        return _topology.mapManifolds_end(self)

    def rbegin(self):
        return _topology.mapManifolds_rbegin(self)

    def rend(self):
        return _topology.mapManifolds_rend(self)

    def clear(self):
        return _topology.mapManifolds_clear(self)

    def get_allocator(self):
        return _topology.mapManifolds_get_allocator(self)

    def count(self, x):
        return _topology.mapManifolds_count(self, x)

    def erase(self, *args):
        return _topology.mapManifolds_erase(self, *args)

    def find(self, x):
        return _topology.mapManifolds_find(self, x)

    def lower_bound(self, x):
        return _topology.mapManifolds_lower_bound(self, x)

    def upper_bound(self, x):
        return _topology.mapManifolds_upper_bound(self, x)
    __swig_destroy__ = _topology.delete_mapManifolds

# Register mapManifolds in _topology:
_topology.mapManifolds_swigregister(mapManifolds)

class mapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _topology.mapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _topology.mapIntFloat___nonzero__(self)

    def __bool__(self):
        return _topology.mapIntFloat___bool__(self)

    def __len__(self):
        return _topology.mapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _topology.mapIntFloat___getitem__(self, key)

    def __delitem__(self, key):
        return _topology.mapIntFloat___delitem__(self, key)

    def has_key(self, key):
        return _topology.mapIntFloat_has_key(self, key)

    def keys(self):
        return _topology.mapIntFloat_keys(self)

    def values(self):
        return _topology.mapIntFloat_values(self)

    def items(self):
        return _topology.mapIntFloat_items(self)

    def __contains__(self, key):
        return _topology.mapIntFloat___contains__(self, key)

    def key_iterator(self):
        return _topology.mapIntFloat_key_iterator(self)

    def value_iterator(self):
        return _topology.mapIntFloat_value_iterator(self)

    def __setitem__(self, *args):
        return _topology.mapIntFloat___setitem__(self, *args)

    def asdict(self):
        return _topology.mapIntFloat_asdict(self)

    def __init__(self, *args):
        _topology.mapIntFloat_swiginit(self, _topology.new_mapIntFloat(*args))

    def empty(self):
        return _topology.mapIntFloat_empty(self)

    def size(self):
        return _topology.mapIntFloat_size(self)

    def swap(self, v):
        return _topology.mapIntFloat_swap(self, v)

    def begin(self):
        return _topology.mapIntFloat_begin(self)

    def end(self):
        return _topology.mapIntFloat_end(self)

    def rbegin(self):
        return _topology.mapIntFloat_rbegin(self)

    def rend(self):
        return _topology.mapIntFloat_rend(self)

    def clear(self):
        return _topology.mapIntFloat_clear(self)

    def get_allocator(self):
        return _topology.mapIntFloat_get_allocator(self)

    def count(self, x):
        return _topology.mapIntFloat_count(self, x)

    def erase(self, *args):
        return _topology.mapIntFloat_erase(self, *args)

    def find(self, x):
        return _topology.mapIntFloat_find(self, x)

    def lower_bound(self, x):
        return _topology.mapIntFloat_lower_bound(self, x)

    def upper_bound(self, x):
        return _topology.mapIntFloat_upper_bound(self, x)
    __swig_destroy__ = _topology.delete_mapIntFloat

# Register mapIntFloat in _topology:
_topology.mapIntFloat_swigregister(mapIntFloat)

class setIntPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _topology.setIntPair_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _topology.setIntPair___nonzero__(self)

    def __bool__(self):
        return _topology.setIntPair___bool__(self)

    def __len__(self):
        return _topology.setIntPair___len__(self)

    def append(self, x):
        return _topology.setIntPair_append(self, x)

    def __contains__(self, x):
        return _topology.setIntPair___contains__(self, x)

    def __getitem__(self, i):
        return _topology.setIntPair___getitem__(self, i)

    def add(self, x):
        return _topology.setIntPair_add(self, x)

    def discard(self, x):
        return _topology.setIntPair_discard(self, x)

    def __init__(self, *args):
        _topology.setIntPair_swiginit(self, _topology.new_setIntPair(*args))

    def empty(self):
        return _topology.setIntPair_empty(self)

    def size(self):
        return _topology.setIntPair_size(self)

    def clear(self):
        return _topology.setIntPair_clear(self)

    def swap(self, v):
        return _topology.setIntPair_swap(self, v)

    def count(self, x):
        return _topology.setIntPair_count(self, x)

    def begin(self):
        return _topology.setIntPair_begin(self)

    def end(self):
        return _topology.setIntPair_end(self)

    def rbegin(self):
        return _topology.setIntPair_rbegin(self)

    def rend(self):
        return _topology.setIntPair_rend(self)

    def erase(self, *args):
        return _topology.setIntPair_erase(self, *args)

    def find(self, x):
        return _topology.setIntPair_find(self, x)

    def lower_bound(self, x):
        return _topology.setIntPair_lower_bound(self, x)

    def upper_bound(self, x):
        return _topology.setIntPair_upper_bound(self, x)

    def equal_range(self, x):
        return _topology.setIntPair_equal_range(self, x)

    def insert(self, __x):
        return _topology.setIntPair_insert(self, __x)
    __swig_destroy__ = _topology.delete_setIntPair

# Register setIntPair in _topology:
_topology.setIntPair_swigregister(setIntPair)

class mapIntSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _topology.mapIntSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _topology.mapIntSetInt___nonzero__(self)

    def __bool__(self):
        return _topology.mapIntSetInt___bool__(self)

    def __len__(self):
        return _topology.mapIntSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _topology.mapIntSetInt___getitem__(self, key)

    def __delitem__(self, key):
        return _topology.mapIntSetInt___delitem__(self, key)

    def has_key(self, key):
        return _topology.mapIntSetInt_has_key(self, key)

    def keys(self):
        return _topology.mapIntSetInt_keys(self)

    def values(self):
        return _topology.mapIntSetInt_values(self)

    def items(self):
        return _topology.mapIntSetInt_items(self)

    def __contains__(self, key):
        return _topology.mapIntSetInt___contains__(self, key)

    def key_iterator(self):
        return _topology.mapIntSetInt_key_iterator(self)

    def value_iterator(self):
        return _topology.mapIntSetInt_value_iterator(self)

    def __setitem__(self, *args):
        return _topology.mapIntSetInt___setitem__(self, *args)

    def asdict(self):
        return _topology.mapIntSetInt_asdict(self)

    def __init__(self, *args):
        _topology.mapIntSetInt_swiginit(self, _topology.new_mapIntSetInt(*args))

    def empty(self):
        return _topology.mapIntSetInt_empty(self)

    def size(self):
        return _topology.mapIntSetInt_size(self)

    def swap(self, v):
        return _topology.mapIntSetInt_swap(self, v)

    def begin(self):
        return _topology.mapIntSetInt_begin(self)

    def end(self):
        return _topology.mapIntSetInt_end(self)

    def rbegin(self):
        return _topology.mapIntSetInt_rbegin(self)

    def rend(self):
        return _topology.mapIntSetInt_rend(self)

    def clear(self):
        return _topology.mapIntSetInt_clear(self)

    def get_allocator(self):
        return _topology.mapIntSetInt_get_allocator(self)

    def count(self, x):
        return _topology.mapIntSetInt_count(self, x)

    def erase(self, *args):
        return _topology.mapIntSetInt_erase(self, *args)

    def find(self, x):
        return _topology.mapIntSetInt_find(self, x)

    def lower_bound(self, x):
        return _topology.mapIntSetInt_lower_bound(self, x)

    def upper_bound(self, x):
        return _topology.mapIntSetInt_upper_bound(self, x)
    __swig_destroy__ = _topology.delete_mapIntSetInt

# Register mapIntSetInt in _topology:
_topology.mapIntSetInt_swigregister(mapIntSetInt)

class mapIntPairVectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _topology.mapIntPairVectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _topology.mapIntPairVectorInt___nonzero__(self)

    def __bool__(self):
        return _topology.mapIntPairVectorInt___bool__(self)

    def __len__(self):
        return _topology.mapIntPairVectorInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _topology.mapIntPairVectorInt___getitem__(self, key)

    def __delitem__(self, key):
        return _topology.mapIntPairVectorInt___delitem__(self, key)

    def has_key(self, key):
        return _topology.mapIntPairVectorInt_has_key(self, key)

    def keys(self):
        return _topology.mapIntPairVectorInt_keys(self)

    def values(self):
        return _topology.mapIntPairVectorInt_values(self)

    def items(self):
        return _topology.mapIntPairVectorInt_items(self)

    def __contains__(self, key):
        return _topology.mapIntPairVectorInt___contains__(self, key)

    def key_iterator(self):
        return _topology.mapIntPairVectorInt_key_iterator(self)

    def value_iterator(self):
        return _topology.mapIntPairVectorInt_value_iterator(self)

    def __setitem__(self, *args):
        return _topology.mapIntPairVectorInt___setitem__(self, *args)

    def asdict(self):
        return _topology.mapIntPairVectorInt_asdict(self)

    def __init__(self, *args):
        _topology.mapIntPairVectorInt_swiginit(self, _topology.new_mapIntPairVectorInt(*args))

    def empty(self):
        return _topology.mapIntPairVectorInt_empty(self)

    def size(self):
        return _topology.mapIntPairVectorInt_size(self)

    def swap(self, v):
        return _topology.mapIntPairVectorInt_swap(self, v)

    def begin(self):
        return _topology.mapIntPairVectorInt_begin(self)

    def end(self):
        return _topology.mapIntPairVectorInt_end(self)

    def rbegin(self):
        return _topology.mapIntPairVectorInt_rbegin(self)

    def rend(self):
        return _topology.mapIntPairVectorInt_rend(self)

    def clear(self):
        return _topology.mapIntPairVectorInt_clear(self)

    def get_allocator(self):
        return _topology.mapIntPairVectorInt_get_allocator(self)

    def count(self, x):
        return _topology.mapIntPairVectorInt_count(self, x)

    def erase(self, *args):
        return _topology.mapIntPairVectorInt_erase(self, *args)

    def find(self, x):
        return _topology.mapIntPairVectorInt_find(self, x)

    def lower_bound(self, x):
        return _topology.mapIntPairVectorInt_lower_bound(self, x)

    def upper_bound(self, x):
        return _topology.mapIntPairVectorInt_upper_bound(self, x)
    __swig_destroy__ = _topology.delete_mapIntPairVectorInt

# Register mapIntPairVectorInt in _topology:
_topology.mapIntPairVectorInt_swigregister(mapIntPairVectorInt)



