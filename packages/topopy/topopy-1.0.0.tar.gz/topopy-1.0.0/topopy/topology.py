# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_topology')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_topology')
    _topology = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_topology', [dirname(__file__)])
        except ImportError:
            import _topology
            return _topology
        try:
            _mod = imp.load_module('_topology', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _topology = swig_import_helper()
    del swig_import_helper
else:
    import _topology
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _topology.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _topology.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _topology.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _topology.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _topology.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _topology.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _topology.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _topology.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _topology.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _topology.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _topology.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _topology.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _topology.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _topology.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _topology.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _topology.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _topology.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _topology.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class MorseComplexFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MorseComplexFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MorseComplexFloat, name)
    __repr__ = _swig_repr

    def __init__(self, Xin: 'vectorFloat', yin: 'vectorFloat', gradientMethod: 'std::string', persistenceType: 'std::string', win: 'vectorFloat', neighborhoods: 'mapIntSetInt', verbosity: 'bool'=False):
        this = _topology.new_MorseComplexFloat(Xin, yin, gradientMethod, persistenceType, win, neighborhoods, verbosity)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Dimension(self) -> "int":
        return _topology.MorseComplexFloat_Dimension(self)

    def Size(self) -> "int":
        return _topology.MorseComplexFloat_Size(self)

    def MaxY(self) -> "float":
        return _topology.MorseComplexFloat_MaxY(self)

    def MinY(self) -> "float":
        return _topology.MorseComplexFloat_MinY(self)

    def RangeY(self) -> "float":
        return _topology.MorseComplexFloat_RangeY(self)

    def MaxX(self, dim: 'int') -> "float":
        return _topology.MorseComplexFloat_MaxX(self, dim)

    def MinX(self, dim: 'int') -> "float":
        return _topology.MorseComplexFloat_MinX(self, dim)

    def RangeX(self, dim: 'int') -> "float":
        return _topology.MorseComplexFloat_RangeX(self, dim)

    def GetX(self, *args) -> "float":
        return _topology.MorseComplexFloat_GetX(self, *args)

    def GetY(self, i: 'int') -> "float":
        return _topology.MorseComplexFloat_GetY(self, i)

    def MaxLabel(self, i: 'int', pers: 'float') -> "int":
        return _topology.MorseComplexFloat_MaxLabel(self, i, pers)

    def to_json(self) -> "std::string":
        return _topology.MorseComplexFloat_to_json(self)

    def SortedPersistences(self) -> "std::vector< float,std::allocator< float > >":
        return _topology.MorseComplexFloat_SortedPersistences(self)

    def GetPartitions(self, persistence: 'float') -> "std::map< int,std::vector< int,std::allocator< int > >,std::less< int >,std::allocator< std::pair< int const,std::vector< int,std::allocator< int > > > > >":
        return _topology.MorseComplexFloat_GetPartitions(self, persistence)
    __swig_destroy__ = _topology.delete_MorseComplexFloat
    __del__ = lambda self: None
MorseComplexFloat_swigregister = _topology.MorseComplexFloat_swigregister
MorseComplexFloat_swigregister(MorseComplexFloat)

class MorseComplexDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MorseComplexDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MorseComplexDouble, name)
    __repr__ = _swig_repr

    def __init__(self, Xin: 'vectorDouble', yin: 'vectorDouble', gradientMethod: 'std::string', persistenceType: 'std::string', win: 'vectorDouble', neighborhoods: 'mapIntSetInt', verbosity: 'bool'=False):
        this = _topology.new_MorseComplexDouble(Xin, yin, gradientMethod, persistenceType, win, neighborhoods, verbosity)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Dimension(self) -> "int":
        return _topology.MorseComplexDouble_Dimension(self)

    def Size(self) -> "int":
        return _topology.MorseComplexDouble_Size(self)

    def MaxY(self) -> "double":
        return _topology.MorseComplexDouble_MaxY(self)

    def MinY(self) -> "double":
        return _topology.MorseComplexDouble_MinY(self)

    def RangeY(self) -> "double":
        return _topology.MorseComplexDouble_RangeY(self)

    def MaxX(self, dim: 'int') -> "double":
        return _topology.MorseComplexDouble_MaxX(self, dim)

    def MinX(self, dim: 'int') -> "double":
        return _topology.MorseComplexDouble_MinX(self, dim)

    def RangeX(self, dim: 'int') -> "double":
        return _topology.MorseComplexDouble_RangeX(self, dim)

    def GetX(self, *args) -> "double":
        return _topology.MorseComplexDouble_GetX(self, *args)

    def GetY(self, i: 'int') -> "double":
        return _topology.MorseComplexDouble_GetY(self, i)

    def MaxLabel(self, i: 'int', pers: 'double') -> "int":
        return _topology.MorseComplexDouble_MaxLabel(self, i, pers)

    def to_json(self) -> "std::string":
        return _topology.MorseComplexDouble_to_json(self)

    def SortedPersistences(self) -> "std::vector< double,std::allocator< double > >":
        return _topology.MorseComplexDouble_SortedPersistences(self)

    def GetPartitions(self, persistence: 'double') -> "std::map< int,std::vector< int,std::allocator< int > >,std::less< int >,std::allocator< std::pair< int const,std::vector< int,std::allocator< int > > > > >":
        return _topology.MorseComplexDouble_GetPartitions(self, persistence)
    __swig_destroy__ = _topology.delete_MorseComplexDouble
    __del__ = lambda self: None
MorseComplexDouble_swigregister = _topology.MorseComplexDouble_swigregister
MorseComplexDouble_swigregister(MorseComplexDouble)

class MergeTreeFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MergeTreeFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MergeTreeFloat, name)
    __repr__ = _swig_repr

    def __init__(self, Xin: 'vectorFloat', yin: 'vectorFloat', gradientMethod: 'std::string', neighborhoods: 'mapIntSetInt', verbosity: 'bool'=False):
        this = _topology.new_MergeTreeFloat(Xin, yin, gradientMethod, neighborhoods, verbosity)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Dimension(self) -> "int":
        return _topology.MergeTreeFloat_Dimension(self)

    def Neighbors(self, index: 'int') -> "std::set< int,std::less< int >,std::allocator< int > >":
        return _topology.MergeTreeFloat_Neighbors(self, index)

    def Nodes(self) -> "std::map< int,float,std::less< int >,std::allocator< std::pair< int const,float > > >":
        return _topology.MergeTreeFloat_Nodes(self)

    def Root(self) -> "int":
        return _topology.MergeTreeFloat_Root(self)

    def Edges(self) -> "std::set< MergeTree< float >::int_pair,std::less< MergeTree< float >::int_pair >,std::allocator< MergeTree< float >::int_pair > >":
        return _topology.MergeTreeFloat_Edges(self)

    def AugmentedEdges(self) -> "std::map< MergeTree< float >::int_pair,std::vector< int,std::allocator< int > >,std::less< MergeTree< float >::int_pair >,std::allocator< std::pair< MergeTree< float >::int_pair const,std::vector< int,std::allocator< int > > > > >":
        return _topology.MergeTreeFloat_AugmentedEdges(self)

    def Size(self) -> "int":
        return _topology.MergeTreeFloat_Size(self)
    __swig_destroy__ = _topology.delete_MergeTreeFloat
    __del__ = lambda self: None
MergeTreeFloat_swigregister = _topology.MergeTreeFloat_swigregister
MergeTreeFloat_swigregister(MergeTreeFloat)

class MergeTreeDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MergeTreeDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MergeTreeDouble, name)
    __repr__ = _swig_repr

    def __init__(self, Xin: 'vectorDouble', yin: 'vectorDouble', gradientMethod: 'std::string', neighborhoods: 'mapIntSetInt', verbosity: 'bool'=False):
        this = _topology.new_MergeTreeDouble(Xin, yin, gradientMethod, neighborhoods, verbosity)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Dimension(self) -> "int":
        return _topology.MergeTreeDouble_Dimension(self)

    def Neighbors(self, index: 'int') -> "std::set< int,std::less< int >,std::allocator< int > >":
        return _topology.MergeTreeDouble_Neighbors(self, index)

    def Nodes(self) -> "std::map< int,double,std::less< int >,std::allocator< std::pair< int const,double > > >":
        return _topology.MergeTreeDouble_Nodes(self)

    def Root(self) -> "int":
        return _topology.MergeTreeDouble_Root(self)

    def Edges(self) -> "std::set< MergeTree< double >::int_pair,std::less< MergeTree< double >::int_pair >,std::allocator< MergeTree< double >::int_pair > >":
        return _topology.MergeTreeDouble_Edges(self)

    def AugmentedEdges(self) -> "std::map< MergeTree< double >::int_pair,std::vector< int,std::allocator< int > >,std::less< MergeTree< double >::int_pair >,std::allocator< std::pair< MergeTree< double >::int_pair const,std::vector< int,std::allocator< int > > > > >":
        return _topology.MergeTreeDouble_AugmentedEdges(self)

    def Size(self) -> "int":
        return _topology.MergeTreeDouble_Size(self)
    __swig_destroy__ = _topology.delete_MergeTreeDouble
    __del__ = lambda self: None
MergeTreeDouble_swigregister = _topology.MergeTreeDouble_swigregister
MergeTreeDouble_swigregister(MergeTreeDouble)

class vectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _topology.vectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _topology.vectorFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _topology.vectorFloat___bool__(self)

    def __len__(self) -> "std::vector< float >::size_type":
        return _topology.vectorFloat___len__(self)

    def __getslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "std::vector< float,std::allocator< float > > *":
        return _topology.vectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _topology.vectorFloat___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< float >::difference_type', j: 'std::vector< float >::difference_type') -> "void":
        return _topology.vectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _topology.vectorFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        return _topology.vectorFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _topology.vectorFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< float >::value_type":
        return _topology.vectorFloat_pop(self)

    def append(self, x: 'std::vector< float >::value_type const &') -> "void":
        return _topology.vectorFloat_append(self, x)

    def empty(self) -> "bool":
        return _topology.vectorFloat_empty(self)

    def size(self) -> "std::vector< float >::size_type":
        return _topology.vectorFloat_size(self)

    def swap(self, v: 'vectorFloat') -> "void":
        return _topology.vectorFloat_swap(self, v)

    def begin(self) -> "std::vector< float >::iterator":
        return _topology.vectorFloat_begin(self)

    def end(self) -> "std::vector< float >::iterator":
        return _topology.vectorFloat_end(self)

    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        return _topology.vectorFloat_rbegin(self)

    def rend(self) -> "std::vector< float >::reverse_iterator":
        return _topology.vectorFloat_rend(self)

    def clear(self) -> "void":
        return _topology.vectorFloat_clear(self)

    def get_allocator(self) -> "std::vector< float >::allocator_type":
        return _topology.vectorFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _topology.vectorFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< float >::iterator":
        return _topology.vectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _topology.new_vectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< float >::value_type const &') -> "void":
        return _topology.vectorFloat_push_back(self, x)

    def front(self) -> "std::vector< float >::value_type const &":
        return _topology.vectorFloat_front(self)

    def back(self) -> "std::vector< float >::value_type const &":
        return _topology.vectorFloat_back(self)

    def assign(self, n: 'std::vector< float >::size_type', x: 'std::vector< float >::value_type const &') -> "void":
        return _topology.vectorFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _topology.vectorFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _topology.vectorFloat_insert(self, *args)

    def reserve(self, n: 'std::vector< float >::size_type') -> "void":
        return _topology.vectorFloat_reserve(self, n)

    def capacity(self) -> "std::vector< float >::size_type":
        return _topology.vectorFloat_capacity(self)
    __swig_destroy__ = _topology.delete_vectorFloat
    __del__ = lambda self: None
vectorFloat_swigregister = _topology.vectorFloat_swigregister
vectorFloat_swigregister(vectorFloat)

class vectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _topology.vectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _topology.vectorDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _topology.vectorDouble___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _topology.vectorDouble___len__(self)

    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        return _topology.vectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _topology.vectorDouble___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        return _topology.vectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _topology.vectorDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _topology.vectorDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _topology.vectorDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _topology.vectorDouble_pop(self)

    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _topology.vectorDouble_append(self, x)

    def empty(self) -> "bool":
        return _topology.vectorDouble_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _topology.vectorDouble_size(self)

    def swap(self, v: 'vectorDouble') -> "void":
        return _topology.vectorDouble_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _topology.vectorDouble_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _topology.vectorDouble_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _topology.vectorDouble_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _topology.vectorDouble_rend(self)

    def clear(self) -> "void":
        return _topology.vectorDouble_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _topology.vectorDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _topology.vectorDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _topology.vectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _topology.new_vectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _topology.vectorDouble_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _topology.vectorDouble_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _topology.vectorDouble_back(self)

    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        return _topology.vectorDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _topology.vectorDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _topology.vectorDouble_insert(self, *args)

    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        return _topology.vectorDouble_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _topology.vectorDouble_capacity(self)
    __swig_destroy__ = _topology.delete_vectorDouble
    __del__ = lambda self: None
vectorDouble_swigregister = _topology.vectorDouble_swigregister
vectorDouble_swigregister(vectorDouble)

class vectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorString, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _topology.vectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _topology.vectorString___nonzero__(self)

    def __bool__(self) -> "bool":
        return _topology.vectorString___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _topology.vectorString___len__(self)

    def __getslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "std::vector< std::string,std::allocator< std::string > > *":
        return _topology.vectorString___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _topology.vectorString___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "void":
        return _topology.vectorString___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _topology.vectorString___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _topology.vectorString___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _topology.vectorString___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _topology.vectorString_pop(self)

    def append(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _topology.vectorString_append(self, x)

    def empty(self) -> "bool":
        return _topology.vectorString_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _topology.vectorString_size(self)

    def swap(self, v: 'vectorString') -> "void":
        return _topology.vectorString_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _topology.vectorString_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _topology.vectorString_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _topology.vectorString_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _topology.vectorString_rend(self)

    def clear(self) -> "void":
        return _topology.vectorString_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _topology.vectorString_get_allocator(self)

    def pop_back(self) -> "void":
        return _topology.vectorString_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _topology.vectorString_erase(self, *args)

    def __init__(self, *args):
        this = _topology.new_vectorString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _topology.vectorString_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _topology.vectorString_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _topology.vectorString_back(self)

    def assign(self, n: 'std::vector< std::string >::size_type', x: 'std::vector< std::string >::value_type const &') -> "void":
        return _topology.vectorString_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _topology.vectorString_resize(self, *args)

    def insert(self, *args) -> "void":
        return _topology.vectorString_insert(self, *args)

    def reserve(self, n: 'std::vector< std::string >::size_type') -> "void":
        return _topology.vectorString_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _topology.vectorString_capacity(self)
    __swig_destroy__ = _topology.delete_vectorString
    __del__ = lambda self: None
vectorString_swigregister = _topology.vectorString_swigregister
vectorString_swigregister(vectorString)

class vectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorInt, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _topology.vectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _topology.vectorInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _topology.vectorInt___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _topology.vectorInt___len__(self)

    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":
        return _topology.vectorInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _topology.vectorInt___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":
        return _topology.vectorInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _topology.vectorInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _topology.vectorInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _topology.vectorInt___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _topology.vectorInt_pop(self)

    def append(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _topology.vectorInt_append(self, x)

    def empty(self) -> "bool":
        return _topology.vectorInt_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _topology.vectorInt_size(self)

    def swap(self, v: 'vectorInt') -> "void":
        return _topology.vectorInt_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _topology.vectorInt_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _topology.vectorInt_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _topology.vectorInt_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _topology.vectorInt_rend(self)

    def clear(self) -> "void":
        return _topology.vectorInt_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _topology.vectorInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _topology.vectorInt_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _topology.vectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _topology.new_vectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _topology.vectorInt_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _topology.vectorInt_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _topology.vectorInt_back(self)

    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":
        return _topology.vectorInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _topology.vectorInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _topology.vectorInt_insert(self, *args)

    def reserve(self, n: 'std::vector< int >::size_type') -> "void":
        return _topology.vectorInt_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _topology.vectorInt_capacity(self)
    __swig_destroy__ = _topology.delete_vectorInt
    __del__ = lambda self: None
vectorInt_swigregister = _topology.vectorInt_swigregister
vectorInt_swigregister(vectorInt)

class setInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, setInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, setInt, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _topology.setInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _topology.setInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _topology.setInt___bool__(self)

    def __len__(self) -> "std::set< int >::size_type":
        return _topology.setInt___len__(self)

    def append(self, x: 'std::set< int >::value_type') -> "void":
        return _topology.setInt_append(self, x)

    def __contains__(self, x: 'std::set< int >::value_type') -> "bool":
        return _topology.setInt___contains__(self, x)

    def __getitem__(self, i: 'std::set< int >::difference_type') -> "std::set< int >::value_type":
        return _topology.setInt___getitem__(self, i)

    def add(self, x: 'std::set< int >::value_type') -> "void":
        return _topology.setInt_add(self, x)

    def discard(self, x: 'std::set< int >::value_type') -> "void":
        return _topology.setInt_discard(self, x)

    def __init__(self, *args):
        this = _topology.new_setInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _topology.setInt_empty(self)

    def size(self) -> "std::set< int >::size_type":
        return _topology.setInt_size(self)

    def clear(self) -> "void":
        return _topology.setInt_clear(self)

    def swap(self, v: 'setInt') -> "void":
        return _topology.setInt_swap(self, v)

    def count(self, x: 'std::set< int >::key_type const &') -> "std::set< int >::size_type":
        return _topology.setInt_count(self, x)

    def begin(self) -> "std::set< int >::iterator":
        return _topology.setInt_begin(self)

    def end(self) -> "std::set< int >::iterator":
        return _topology.setInt_end(self)

    def rbegin(self) -> "std::set< int >::reverse_iterator":
        return _topology.setInt_rbegin(self)

    def rend(self) -> "std::set< int >::reverse_iterator":
        return _topology.setInt_rend(self)

    def erase(self, *args) -> "void":
        return _topology.setInt_erase(self, *args)

    def find(self, x: 'std::set< int >::key_type const &') -> "std::set< int >::iterator":
        return _topology.setInt_find(self, x)

    def lower_bound(self, x: 'std::set< int >::key_type const &') -> "std::set< int >::iterator":
        return _topology.setInt_lower_bound(self, x)

    def upper_bound(self, x: 'std::set< int >::key_type const &') -> "std::set< int >::iterator":
        return _topology.setInt_upper_bound(self, x)

    def equal_range(self, x: 'std::set< int >::key_type const &') -> "std::pair< std::set< int >::iterator,std::set< int >::iterator >":
        return _topology.setInt_equal_range(self, x)

    def insert(self, __x: 'std::set< int >::value_type const &') -> "std::pair< std::set< int >::iterator,bool >":
        return _topology.setInt_insert(self, __x)
    __swig_destroy__ = _topology.delete_setInt
    __del__ = lambda self: None
setInt_swigregister = _topology.setInt_swigregister
setInt_swigregister(setInt)

class mapPartition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapPartition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapPartition, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _topology.mapPartition_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _topology.mapPartition___nonzero__(self)

    def __bool__(self) -> "bool":
        return _topology.mapPartition___bool__(self)

    def __len__(self) -> "std::map< std::string,std::vector< int > >::size_type":
        return _topology.mapPartition___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< std::string,std::vector< int > >::key_type const &') -> "std::map< std::string,std::vector< int > >::mapped_type const &":
        return _topology.mapPartition___getitem__(self, key)

    def __delitem__(self, key: 'std::map< std::string,std::vector< int > >::key_type const &') -> "void":
        return _topology.mapPartition___delitem__(self, key)

    def has_key(self, key: 'std::map< std::string,std::vector< int > >::key_type const &') -> "bool":
        return _topology.mapPartition_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _topology.mapPartition_keys(self)

    def values(self) -> "PyObject *":
        return _topology.mapPartition_values(self)

    def items(self) -> "PyObject *":
        return _topology.mapPartition_items(self)

    def __contains__(self, key: 'std::map< std::string,std::vector< int > >::key_type const &') -> "bool":
        return _topology.mapPartition___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _topology.mapPartition_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _topology.mapPartition_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _topology.mapPartition___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _topology.mapPartition_asdict(self)

    def __init__(self, *args):
        this = _topology.new_mapPartition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _topology.mapPartition_empty(self)

    def size(self) -> "std::map< std::string,std::vector< int > >::size_type":
        return _topology.mapPartition_size(self)

    def swap(self, v: 'mapPartition') -> "void":
        return _topology.mapPartition_swap(self, v)

    def begin(self) -> "std::map< std::string,std::vector< int > >::iterator":
        return _topology.mapPartition_begin(self)

    def end(self) -> "std::map< std::string,std::vector< int > >::iterator":
        return _topology.mapPartition_end(self)

    def rbegin(self) -> "std::map< std::string,std::vector< int > >::reverse_iterator":
        return _topology.mapPartition_rbegin(self)

    def rend(self) -> "std::map< std::string,std::vector< int > >::reverse_iterator":
        return _topology.mapPartition_rend(self)

    def clear(self) -> "void":
        return _topology.mapPartition_clear(self)

    def get_allocator(self) -> "std::map< std::string,std::vector< int > >::allocator_type":
        return _topology.mapPartition_get_allocator(self)

    def count(self, x: 'std::map< std::string,std::vector< int > >::key_type const &') -> "std::map< std::string,std::vector< int > >::size_type":
        return _topology.mapPartition_count(self, x)

    def erase(self, *args) -> "void":
        return _topology.mapPartition_erase(self, *args)

    def find(self, x: 'std::map< std::string,std::vector< int > >::key_type const &') -> "std::map< std::string,std::vector< int > >::iterator":
        return _topology.mapPartition_find(self, x)

    def lower_bound(self, x: 'std::map< std::string,std::vector< int > >::key_type const &') -> "std::map< std::string,std::vector< int > >::iterator":
        return _topology.mapPartition_lower_bound(self, x)

    def upper_bound(self, x: 'std::map< std::string,std::vector< int > >::key_type const &') -> "std::map< std::string,std::vector< int > >::iterator":
        return _topology.mapPartition_upper_bound(self, x)
    __swig_destroy__ = _topology.delete_mapPartition
    __del__ = lambda self: None
mapPartition_swigregister = _topology.mapPartition_swigregister
mapPartition_swigregister(mapPartition)

class mapManifolds(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapManifolds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapManifolds, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _topology.mapManifolds_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _topology.mapManifolds___nonzero__(self)

    def __bool__(self) -> "bool":
        return _topology.mapManifolds___bool__(self)

    def __len__(self) -> "std::map< int,std::vector< int > >::size_type":
        return _topology.mapManifolds___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< int,std::vector< int > >::key_type const &') -> "std::map< int,std::vector< int > >::mapped_type const &":
        return _topology.mapManifolds___getitem__(self, key)

    def __delitem__(self, key: 'std::map< int,std::vector< int > >::key_type const &') -> "void":
        return _topology.mapManifolds___delitem__(self, key)

    def has_key(self, key: 'std::map< int,std::vector< int > >::key_type const &') -> "bool":
        return _topology.mapManifolds_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _topology.mapManifolds_keys(self)

    def values(self) -> "PyObject *":
        return _topology.mapManifolds_values(self)

    def items(self) -> "PyObject *":
        return _topology.mapManifolds_items(self)

    def __contains__(self, key: 'std::map< int,std::vector< int > >::key_type const &') -> "bool":
        return _topology.mapManifolds___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _topology.mapManifolds_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _topology.mapManifolds_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _topology.mapManifolds___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _topology.mapManifolds_asdict(self)

    def __init__(self, *args):
        this = _topology.new_mapManifolds(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _topology.mapManifolds_empty(self)

    def size(self) -> "std::map< int,std::vector< int > >::size_type":
        return _topology.mapManifolds_size(self)

    def swap(self, v: 'mapManifolds') -> "void":
        return _topology.mapManifolds_swap(self, v)

    def begin(self) -> "std::map< int,std::vector< int > >::iterator":
        return _topology.mapManifolds_begin(self)

    def end(self) -> "std::map< int,std::vector< int > >::iterator":
        return _topology.mapManifolds_end(self)

    def rbegin(self) -> "std::map< int,std::vector< int > >::reverse_iterator":
        return _topology.mapManifolds_rbegin(self)

    def rend(self) -> "std::map< int,std::vector< int > >::reverse_iterator":
        return _topology.mapManifolds_rend(self)

    def clear(self) -> "void":
        return _topology.mapManifolds_clear(self)

    def get_allocator(self) -> "std::map< int,std::vector< int > >::allocator_type":
        return _topology.mapManifolds_get_allocator(self)

    def count(self, x: 'std::map< int,std::vector< int > >::key_type const &') -> "std::map< int,std::vector< int > >::size_type":
        return _topology.mapManifolds_count(self, x)

    def erase(self, *args) -> "void":
        return _topology.mapManifolds_erase(self, *args)

    def find(self, x: 'std::map< int,std::vector< int > >::key_type const &') -> "std::map< int,std::vector< int > >::iterator":
        return _topology.mapManifolds_find(self, x)

    def lower_bound(self, x: 'std::map< int,std::vector< int > >::key_type const &') -> "std::map< int,std::vector< int > >::iterator":
        return _topology.mapManifolds_lower_bound(self, x)

    def upper_bound(self, x: 'std::map< int,std::vector< int > >::key_type const &') -> "std::map< int,std::vector< int > >::iterator":
        return _topology.mapManifolds_upper_bound(self, x)
    __swig_destroy__ = _topology.delete_mapManifolds
    __del__ = lambda self: None
mapManifolds_swigregister = _topology.mapManifolds_swigregister
mapManifolds_swigregister(mapManifolds)

class mapIntFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapIntFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapIntFloat, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _topology.mapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _topology.mapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _topology.mapIntFloat___bool__(self)

    def __len__(self) -> "std::map< int,float >::size_type":
        return _topology.mapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< int,float >::key_type const &') -> "std::map< int,float >::mapped_type const &":
        return _topology.mapIntFloat___getitem__(self, key)

    def __delitem__(self, key: 'std::map< int,float >::key_type const &') -> "void":
        return _topology.mapIntFloat___delitem__(self, key)

    def has_key(self, key: 'std::map< int,float >::key_type const &') -> "bool":
        return _topology.mapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _topology.mapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _topology.mapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _topology.mapIntFloat_items(self)

    def __contains__(self, key: 'std::map< int,float >::key_type const &') -> "bool":
        return _topology.mapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _topology.mapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _topology.mapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _topology.mapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _topology.mapIntFloat_asdict(self)

    def __init__(self, *args):
        this = _topology.new_mapIntFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _topology.mapIntFloat_empty(self)

    def size(self) -> "std::map< int,float >::size_type":
        return _topology.mapIntFloat_size(self)

    def swap(self, v: 'mapIntFloat') -> "void":
        return _topology.mapIntFloat_swap(self, v)

    def begin(self) -> "std::map< int,float >::iterator":
        return _topology.mapIntFloat_begin(self)

    def end(self) -> "std::map< int,float >::iterator":
        return _topology.mapIntFloat_end(self)

    def rbegin(self) -> "std::map< int,float >::reverse_iterator":
        return _topology.mapIntFloat_rbegin(self)

    def rend(self) -> "std::map< int,float >::reverse_iterator":
        return _topology.mapIntFloat_rend(self)

    def clear(self) -> "void":
        return _topology.mapIntFloat_clear(self)

    def get_allocator(self) -> "std::map< int,float >::allocator_type":
        return _topology.mapIntFloat_get_allocator(self)

    def count(self, x: 'std::map< int,float >::key_type const &') -> "std::map< int,float >::size_type":
        return _topology.mapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _topology.mapIntFloat_erase(self, *args)

    def find(self, x: 'std::map< int,float >::key_type const &') -> "std::map< int,float >::iterator":
        return _topology.mapIntFloat_find(self, x)

    def lower_bound(self, x: 'std::map< int,float >::key_type const &') -> "std::map< int,float >::iterator":
        return _topology.mapIntFloat_lower_bound(self, x)

    def upper_bound(self, x: 'std::map< int,float >::key_type const &') -> "std::map< int,float >::iterator":
        return _topology.mapIntFloat_upper_bound(self, x)
    __swig_destroy__ = _topology.delete_mapIntFloat
    __del__ = lambda self: None
mapIntFloat_swigregister = _topology.mapIntFloat_swigregister
mapIntFloat_swigregister(mapIntFloat)

class setIntPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, setIntPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, setIntPair, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _topology.setIntPair_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _topology.setIntPair___nonzero__(self)

    def __bool__(self) -> "bool":
        return _topology.setIntPair___bool__(self)

    def __len__(self) -> "std::set< std::pair< int,int > >::size_type":
        return _topology.setIntPair___len__(self)

    def append(self, x: 'std::set< std::pair< int,int > >::value_type') -> "void":
        return _topology.setIntPair_append(self, x)

    def __contains__(self, x: 'std::set< std::pair< int,int > >::value_type') -> "bool":
        return _topology.setIntPair___contains__(self, x)

    def __getitem__(self, i: 'std::set< std::pair< int,int > >::difference_type') -> "std::set< std::pair< int,int > >::value_type":
        return _topology.setIntPair___getitem__(self, i)

    def add(self, x: 'std::set< std::pair< int,int > >::value_type') -> "void":
        return _topology.setIntPair_add(self, x)

    def discard(self, x: 'std::set< std::pair< int,int > >::value_type') -> "void":
        return _topology.setIntPair_discard(self, x)

    def __init__(self, *args):
        this = _topology.new_setIntPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _topology.setIntPair_empty(self)

    def size(self) -> "std::set< std::pair< int,int > >::size_type":
        return _topology.setIntPair_size(self)

    def clear(self) -> "void":
        return _topology.setIntPair_clear(self)

    def swap(self, v: 'setIntPair') -> "void":
        return _topology.setIntPair_swap(self, v)

    def count(self, x: 'std::set< std::pair< int,int > >::key_type const &') -> "std::set< std::pair< int,int > >::size_type":
        return _topology.setIntPair_count(self, x)

    def begin(self) -> "std::set< std::pair< int,int > >::iterator":
        return _topology.setIntPair_begin(self)

    def end(self) -> "std::set< std::pair< int,int > >::iterator":
        return _topology.setIntPair_end(self)

    def rbegin(self) -> "std::set< std::pair< int,int > >::reverse_iterator":
        return _topology.setIntPair_rbegin(self)

    def rend(self) -> "std::set< std::pair< int,int > >::reverse_iterator":
        return _topology.setIntPair_rend(self)

    def erase(self, *args) -> "void":
        return _topology.setIntPair_erase(self, *args)

    def find(self, x: 'std::set< std::pair< int,int > >::key_type const &') -> "std::set< std::pair< int,int > >::iterator":
        return _topology.setIntPair_find(self, x)

    def lower_bound(self, x: 'std::set< std::pair< int,int > >::key_type const &') -> "std::set< std::pair< int,int > >::iterator":
        return _topology.setIntPair_lower_bound(self, x)

    def upper_bound(self, x: 'std::set< std::pair< int,int > >::key_type const &') -> "std::set< std::pair< int,int > >::iterator":
        return _topology.setIntPair_upper_bound(self, x)

    def equal_range(self, x: 'std::set< std::pair< int,int > >::key_type const &') -> "std::pair< std::set< std::pair< int,int > >::iterator,std::set< std::pair< int,int > >::iterator >":
        return _topology.setIntPair_equal_range(self, x)

    def insert(self, __x: 'std::set< std::pair< int,int > >::value_type const &') -> "std::pair< std::set< std::pair< int,int > >::iterator,bool >":
        return _topology.setIntPair_insert(self, __x)
    __swig_destroy__ = _topology.delete_setIntPair
    __del__ = lambda self: None
setIntPair_swigregister = _topology.setIntPair_swigregister
setIntPair_swigregister(setIntPair)

class mapIntSetInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapIntSetInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapIntSetInt, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _topology.mapIntSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _topology.mapIntSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _topology.mapIntSetInt___bool__(self)

    def __len__(self) -> "std::map< int,std::set< int > >::size_type":
        return _topology.mapIntSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< int,std::set< int > >::key_type const &') -> "std::map< int,std::set< int > >::mapped_type const &":
        return _topology.mapIntSetInt___getitem__(self, key)

    def __delitem__(self, key: 'std::map< int,std::set< int > >::key_type const &') -> "void":
        return _topology.mapIntSetInt___delitem__(self, key)

    def has_key(self, key: 'std::map< int,std::set< int > >::key_type const &') -> "bool":
        return _topology.mapIntSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _topology.mapIntSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _topology.mapIntSetInt_values(self)

    def items(self) -> "PyObject *":
        return _topology.mapIntSetInt_items(self)

    def __contains__(self, key: 'std::map< int,std::set< int > >::key_type const &') -> "bool":
        return _topology.mapIntSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _topology.mapIntSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _topology.mapIntSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _topology.mapIntSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _topology.mapIntSetInt_asdict(self)

    def __init__(self, *args):
        this = _topology.new_mapIntSetInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _topology.mapIntSetInt_empty(self)

    def size(self) -> "std::map< int,std::set< int > >::size_type":
        return _topology.mapIntSetInt_size(self)

    def swap(self, v: 'mapIntSetInt') -> "void":
        return _topology.mapIntSetInt_swap(self, v)

    def begin(self) -> "std::map< int,std::set< int > >::iterator":
        return _topology.mapIntSetInt_begin(self)

    def end(self) -> "std::map< int,std::set< int > >::iterator":
        return _topology.mapIntSetInt_end(self)

    def rbegin(self) -> "std::map< int,std::set< int > >::reverse_iterator":
        return _topology.mapIntSetInt_rbegin(self)

    def rend(self) -> "std::map< int,std::set< int > >::reverse_iterator":
        return _topology.mapIntSetInt_rend(self)

    def clear(self) -> "void":
        return _topology.mapIntSetInt_clear(self)

    def get_allocator(self) -> "std::map< int,std::set< int > >::allocator_type":
        return _topology.mapIntSetInt_get_allocator(self)

    def count(self, x: 'std::map< int,std::set< int > >::key_type const &') -> "std::map< int,std::set< int > >::size_type":
        return _topology.mapIntSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _topology.mapIntSetInt_erase(self, *args)

    def find(self, x: 'std::map< int,std::set< int > >::key_type const &') -> "std::map< int,std::set< int > >::iterator":
        return _topology.mapIntSetInt_find(self, x)

    def lower_bound(self, x: 'std::map< int,std::set< int > >::key_type const &') -> "std::map< int,std::set< int > >::iterator":
        return _topology.mapIntSetInt_lower_bound(self, x)

    def upper_bound(self, x: 'std::map< int,std::set< int > >::key_type const &') -> "std::map< int,std::set< int > >::iterator":
        return _topology.mapIntSetInt_upper_bound(self, x)
    __swig_destroy__ = _topology.delete_mapIntSetInt
    __del__ = lambda self: None
mapIntSetInt_swigregister = _topology.mapIntSetInt_swigregister
mapIntSetInt_swigregister(mapIntSetInt)

class mapIntPairVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapIntPairVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapIntPairVectorInt, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _topology.mapIntPairVectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _topology.mapIntPairVectorInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _topology.mapIntPairVectorInt___bool__(self)

    def __len__(self) -> "std::map< std::pair< int,int >,std::vector< int > >::size_type":
        return _topology.mapIntPairVectorInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< std::pair< int,int >,std::vector< int > >::key_type const &') -> "std::map< std::pair< int,int >,std::vector< int > >::mapped_type const &":
        return _topology.mapIntPairVectorInt___getitem__(self, key)

    def __delitem__(self, key: 'std::map< std::pair< int,int >,std::vector< int > >::key_type const &') -> "void":
        return _topology.mapIntPairVectorInt___delitem__(self, key)

    def has_key(self, key: 'std::map< std::pair< int,int >,std::vector< int > >::key_type const &') -> "bool":
        return _topology.mapIntPairVectorInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _topology.mapIntPairVectorInt_keys(self)

    def values(self) -> "PyObject *":
        return _topology.mapIntPairVectorInt_values(self)

    def items(self) -> "PyObject *":
        return _topology.mapIntPairVectorInt_items(self)

    def __contains__(self, key: 'std::map< std::pair< int,int >,std::vector< int > >::key_type const &') -> "bool":
        return _topology.mapIntPairVectorInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _topology.mapIntPairVectorInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _topology.mapIntPairVectorInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _topology.mapIntPairVectorInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _topology.mapIntPairVectorInt_asdict(self)

    def __init__(self, *args):
        this = _topology.new_mapIntPairVectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self) -> "bool":
        return _topology.mapIntPairVectorInt_empty(self)

    def size(self) -> "std::map< std::pair< int,int >,std::vector< int > >::size_type":
        return _topology.mapIntPairVectorInt_size(self)

    def swap(self, v: 'mapIntPairVectorInt') -> "void":
        return _topology.mapIntPairVectorInt_swap(self, v)

    def begin(self) -> "std::map< std::pair< int,int >,std::vector< int > >::iterator":
        return _topology.mapIntPairVectorInt_begin(self)

    def end(self) -> "std::map< std::pair< int,int >,std::vector< int > >::iterator":
        return _topology.mapIntPairVectorInt_end(self)

    def rbegin(self) -> "std::map< std::pair< int,int >,std::vector< int > >::reverse_iterator":
        return _topology.mapIntPairVectorInt_rbegin(self)

    def rend(self) -> "std::map< std::pair< int,int >,std::vector< int > >::reverse_iterator":
        return _topology.mapIntPairVectorInt_rend(self)

    def clear(self) -> "void":
        return _topology.mapIntPairVectorInt_clear(self)

    def get_allocator(self) -> "std::map< std::pair< int,int >,std::vector< int > >::allocator_type":
        return _topology.mapIntPairVectorInt_get_allocator(self)

    def count(self, x: 'std::map< std::pair< int,int >,std::vector< int > >::key_type const &') -> "std::map< std::pair< int,int >,std::vector< int > >::size_type":
        return _topology.mapIntPairVectorInt_count(self, x)

    def erase(self, *args) -> "void":
        return _topology.mapIntPairVectorInt_erase(self, *args)

    def find(self, x: 'std::map< std::pair< int,int >,std::vector< int > >::key_type const &') -> "std::map< std::pair< int,int >,std::vector< int > >::iterator":
        return _topology.mapIntPairVectorInt_find(self, x)

    def lower_bound(self, x: 'std::map< std::pair< int,int >,std::vector< int > >::key_type const &') -> "std::map< std::pair< int,int >,std::vector< int > >::iterator":
        return _topology.mapIntPairVectorInt_lower_bound(self, x)

    def upper_bound(self, x: 'std::map< std::pair< int,int >,std::vector< int > >::key_type const &') -> "std::map< std::pair< int,int >,std::vector< int > >::iterator":
        return _topology.mapIntPairVectorInt_upper_bound(self, x)
    __swig_destroy__ = _topology.delete_mapIntPairVectorInt
    __del__ = lambda self: None
mapIntPairVectorInt_swigregister = _topology.mapIntPairVectorInt_swigregister
mapIntPairVectorInt_swigregister(mapIntPairVectorInt)

# This file is compatible with both classic and new-style classes.


